(window.webpackJsonp=window.webpackJsonp||[]).push([[145],{497:function(s,n,a){"use strict";a.r(n);var t=a(14),e=Object(t.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"_12-2-json-配置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_12-2-json-配置"}},[s._v("#")]),s._v(" 12.2 Json 配置")]),s._v(" "),n("p",[s._v("jfinal 官方提供了 Json  抽象类的三个实现：JFinalJson、FastJson、Jackson，如果不进行配置，那么默认使用 JFinalJson 实现，指定为其它实现需要在 configConstant 进行如下配置：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("public void configConstant(Constants me) {\n    me.setJsonFactory(new FastJsonFactory());\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("上面配置将系统默认使用的 JFinalJson 切换到了 FastJson。还可以通过扩展 Json 抽象类以及 JsonFactory 来实现定制的 Json 实现。")]),s._v(" "),n("p",[s._v("假定用户扩展出了一个 MyJson 与 MyJsonFactory ，那么可以通过如下的方式切换到自己的实现上去：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("public void configConstant(Constants me) {\n    me.setJsonFactory(new MyJsonFactory());\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("此外，jfinal 官方还提供了 MixedJson、MixedJsonFactory 实现，这个实现让转 json string 时使用 JFinalJson，反向转成对象则使用 FastJson。\n如果希望在非 web 下进行配置，需要使用 JsonManager，例如：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("JsonManager.me().setDefaultJsonFactory(new MixedJsonFactory());\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("还可以配置 Date 类型转 json 后的格式：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('public void configConstant(Constants me) {\n    me.setJsonDatePattern("yyyy-MM-dd");\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("注意，在使用 MixedJsonFactory、FastJsonFactory、JacksonFactory 时需要添加其依赖，具体依赖参考下一小节内容。")])])}),[],!1,null,null,null);n.default=e.exports}}]);