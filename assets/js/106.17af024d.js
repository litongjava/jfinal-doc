(window.webpackJsonp=window.webpackJsonp||[]).push([[106],{469:function(e,t,s){"use strict";s.r(t);var a=s(14),n=Object(a.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"_6-4-directives"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-4-directives"}},[e._v("#")]),e._v(" 6.4 Directives")]),e._v(" "),t("p",[e._v("The Enjoy Template Engine consistently adheres to a minimalist design. With just seven core directives—"),t("code",[e._v("#if")]),e._v(", "),t("code",[e._v("#for")]),e._v(", "),t("code",[e._v("#switch")]),e._v(", "),t("code",[e._v("#set")]),e._v(", "),t("code",[e._v("#include")]),e._v(", "),t("code",[e._v("#define")]),e._v(", "),t("code",[e._v("#(...)")]),e._v("—it achieves nearly all the functionalities of traditional template engines. The learning curve is almost non-existent for users with a foundation in any programming language.")]),e._v(" "),t("p",[e._v("If the built-in directives do not meet your needs, you can easily extend them at the template language level. Under the "),t("code",[e._v("com.jfinal.template.ext.directive")]),e._v(" package, there are five extended directives. The Active Record SQL module also extends three directives specifically for SQL management. By studying the code for these extended directives, you can easily understand how to create your own, making the process extremely simple.")]),e._v(" "),t("p",[e._v("Note that the extension of Enjoy template engine directives occurs at the lexical and syntactic analysis levels. This is entirely different from the tag-based extensions of traditional template engines. The former allows for comprehensive and flexible use of the engine's basic infrastructure, enabling versatile functionalities through very simple and straightforward code. To understand its power and convenience, refer to the SQL management module of Active Record.")]),e._v(" "),t("h3",{attrs:{id:"_1-output-directive"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-output-directive"}},[e._v("#")]),e._v(" 1. Output Directive "),t("code",[e._v("#(...)")])]),e._v(" "),t("p",[e._v("Unlike almost all Java template engines, Enjoy Template Engine eliminates the independent concept of interpolation directives, treating them as one among other directives. This directive uses parentheses as delimiters, just like any other directive, avoiding the need for extra delimiters like curly braces.")]),e._v(" "),t("p",[e._v("Using the output directive "),t("code",[e._v("#(...)")]),e._v(" is very simple; just pass any expression described in Section 6.4. The directive will output the evaluation result of these expressions. Specifically, if the expression evaluates to null, there will be no output and no exceptions will be thrown. For example:")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('#(value)\n#(object.field)\n#(object.field ??)\n#(a > b ? x : y)\n#(seoTitle ?? "JFinal Club")\n#(object.method(), null)\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br")])]),t("p",[e._v("As shown above, just pass an expression to the output directive. Note that in the first line, the "),t("code",[e._v("value")]),e._v(" parameter can be null. If "),t("code",[e._v("object")]),e._v(" is null in the second line, an exception will be thrown. To avoid this, use the null-safe access operator "),t("code",[e._v("object.field ??")]),e._v(".")]),e._v(" "),t("p",[e._v("Additionally, note the last line in the example. The directive argument is a comma expression, and the directive will only output the last expression in the comma sequence. If the last expression evaluates to null, no output will be generated.")]),e._v(" "),t("p",[e._v("The output directive can be customized by extending the "),t("code",[e._v("OutputDirectiveFactory")]),e._v(" class and overriding its "),t("code",[e._v("getOutputDirective")]),e._v(" method. Then you can switch to your custom output directive using "),t("code",[e._v("me.setOutputDirectiveFactory(...)")]),e._v(" in the "),t("code",[e._v("configEngine(Engine me)")]),e._v(" method.")]),e._v(" "),t("h3",{attrs:{id:"_2-if-directive"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-if-directive"}},[e._v("#")]),e._v(" 2. "),t("code",[e._v("#if")]),e._v(" Directive")]),e._v(" "),t("p",[e._v("Example:")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("#if(cond)\n  ...\n#end\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])]),t("p",[e._v("As shown, the "),t("code",[e._v("#if")]),e._v(" directive requires a "),t("code",[e._v("cond")]),e._v(" expression and ends with "),t("code",[e._v("#end")]),e._v(". The "),t("code",[e._v("cond")]),e._v(" can be any expression introduced in Section 6.3. When "),t("code",[e._v("cond")]),e._v(" evaluates to true, the code inside the "),t("code",[e._v("if")]),e._v(" block is executed.")]),e._v(" "),t("p",[e._v("The "),t("code",[e._v("#if")]),e._v(" directive naturally supports "),t("code",[e._v("#else if")]),e._v(" and "),t("code",[e._v("#else")]),e._v(" blocks. Example:")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("#if(c1)\n  ...\n#else if(c2)\n  ...\n#else if(c3)\n  ...\n#else\n  ...\n#end\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br")])]),t("p",[e._v("The usage of "),t("code",[e._v("#else if")]),e._v(" and "),t("code",[e._v("#else")]),e._v(" is identical to Java syntax. (Note: In versions prior to JFinal 3.3, you must write "),t("code",[e._v("#elseif")]),e._v(" without any space between "),t("code",[e._v("else")]),e._v(" and "),t("code",[e._v("if")]),e._v(", otherwise an exception will be thrown.)")]),e._v(" "),t("h3",{attrs:{id:"_3-for-directive"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-for-directive"}},[e._v("#")]),e._v(" 3. "),t("code",[e._v("#for")]),e._v(" Directive")]),e._v(" "),t("p",[e._v("The Enjoy Template Engine offers an extremely user-friendly extension to the "),t("code",[e._v("#for")]),e._v(" directive, allowing iteration over any type of data, including null values. Code example:")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// Iterating over List, array, Set structures\n#for(x : list)\n  #(x.field)\n#end\n\n// Iterating over a Map\n#for(x : map)\n  #(x.key)\n  #(x.value)\n#end\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br")])]),t("p",[e._v("The first "),t("code",[e._v("#for")]),e._v(" directive iterates over a list, and the usage is identical to Java syntax.")]),e._v(" "),t("p",[e._v("The second "),t("code",[e._v("#for")]),e._v(" directive iterates over a map, using "),t("code",[e._v("item.key")]),e._v(" and "),t("code",[e._v("item.value")]),e._v(" to access the elements. This is an enhancement by Enjoy to reduce code verbosity. You can also use the traditional Java map iteration method: "),t("code",[e._v("#for(x : map.entrySet()) #(x.key) #(x.value) #end")])]),e._v(" "),t("p",[e._v("Note: When the target of iteration is null, you don't need to check for null values; the "),t("code",[e._v("#for")]),e._v(" directive will automatically skip the iteration, avoiding the need for "),t("code",[e._v("if")]),e._v(" checks and thereby improving efficiency.")]),e._v(" "),t("p",[e._v("The "),t("code",[e._v("#for")]),e._v(" directive also allows you to access its state. Code example:")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("#for(x : listAaa)\n  #(for.index)\n  #(x.field)\n  \n  #for(x : listBbb)\n     #(for.outer.index)\n     #(for.index)\n     #(x.field)\n  #end\n#end\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br")])]),t("p",[e._v("In the code above, "),t("code",[e._v("#(for.index)")]),e._v(" and "),t("code",[e._v("#(for.outer.index)")]),e._v(" are used to access the current state of the "),t("code",[e._v("#for")]),e._v(" directive. The former gets the current iteration index (starting from 0), and the latter allows an inner "),t("code",[e._v("#for")]),e._v(" directive to access the state of an outer "),t("code",[e._v("#for")]),e._v(" directive.")]),e._v(" "),t("p",[e._v("Note: When "),t("code",[e._v("#for")]),e._v(" directives are nested, each has its own variable scope, consistent with Java language rules. For example, the two instances of "),t("code",[e._v("#(x.field)")]),e._v(" in the example above are in different "),t("code",[e._v("#for")]),e._v(" directive scopes and will correctly access the variable values in their respective scopes.")]),e._v(" "),t("p",[e._v("The "),t("code",[e._v("#for")]),e._v(" directive supports the following states:")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("#for(x : listAaa)\n   #(for.size)    Size of the iterated object\n   #(for.index)   Index starting from 0\n   #(for.count)   Count starting from 1\n   #(for.first)   Is it the first iteration?\n   #(for.last)    Is it the last iteration?\n   #(for.odd)     Is it an odd iteration?\n   #(for.even)    Is it an even iteration?\n   \n   #(for.outer)        References the state of the outer #for directive\n   #(for.outer.size)   Size of the iterated object in the outer #for directive\n#end\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br")])]),t("p",[e._v("The specific usage is explained in Chinese in the code above.")]),e._v(" "),t("p",[e._v("Apart from "),t("code",[e._v("Map")]),e._v(" and "),t("code",[e._v("List")]),e._v(", the "),t("code",[e._v("#for")]),e._v(" directive also supports "),t("code",[e._v("Collection")]),e._v(", "),t("code",[e._v("Iterator")]),e._v(", array, "),t("code",[e._v("Iterable")]),e._v(", "),t("code",[e._v("Enumeration")]),e._v(", and null value iteration. The usage is identical in form to the earlier "),t("code",[e._v("List")]),e._v(" iteration, all being "),t("code",[e._v("#for(id : target)")]),e._v(". For null values, the "),t("code",[e._v("#for")]),e._v(" directive will directly skip the iteration.")]),e._v(" "),t("p",[e._v("Additionally, the "),t("code",[e._v("#for")]),e._v(" directive supports iteration over any type of object, simply iterating over it once. Example:")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("#for(x : article)\n   #(x.title)\n#end\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])]),t("p",[e._v("In the example above, "),t("code",[e._v("article")]),e._v(" is just a regular Java object, not a collection. The "),t("code",[e._v("#for")]),e._v(" loop will iterate over this object just once. The "),t("code",[e._v("x")]),e._v(" in the "),t("code",[e._v("#for")]),e._v(" expression is the "),t("code",[e._v("article")]),e._v(" object itself, so you can use "),t("code",[e._v("#(x.title)")]),e._v(" for output")]),e._v(" "),t("p",[e._v("The "),t("code",[e._v("#for")]),e._v(" directive also supports the "),t("code",[e._v("#else")]),e._v(" branch. When the number of iterations is zero, the "),t("code",[e._v("#else")]),e._v(" block is executed. Example:")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('#for(blog : blogList)\n   #(blog.title)\n#else\n\nYou haven\'t written any blogs yet. Click here <a href="/blog/add">to start blogging</a>.\n\n#end\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br")])]),t("p",[e._v("In the code above, when "),t("code",[e._v("blogList.size()")]),e._v(" is 0 or "),t("code",[e._v("blogList")]),e._v(" is null, meaning the number of iterations is zero, the "),t("code",[e._v("#else")]),e._v(" branch will execute. This scenario is very common in web projects.")]),e._v(" "),t("p",[e._v("Lastly, in addition to the "),t("code",[e._v("#for")]),e._v(" directive iteration methods mentioned above, it also supports a more conventional "),t("code",[e._v("for")]),e._v(" loop syntax. Code example:")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("#for(i = 0; i < 100; i++)\n   #(i)\n#end\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])]),t("p",[e._v("The syntax is almost identical to Java, with the only difference being that variable declarations don't need types; direct assignment statements suffice. Variables in the Enjoy Template Engine are dynamically typed.")]),e._v(" "),t("p",[e._v("Note: This form of "),t("code",[e._v("for")]),e._v(" loop lacks "),t("code",[e._v("for.size")]),e._v(" and "),t("code",[e._v("for.last")]),e._v(" states, and only supports the following states: "),t("code",[e._v("for.index")]),e._v(", "),t("code",[e._v("for.count")]),e._v(", "),t("code",[e._v("for.first")]),e._v(", "),t("code",[e._v("for.odd")]),e._v(", "),t("code",[e._v("for.even")]),e._v(", "),t("code",[e._v("for.outer")]),e._v(".")]),e._v(" "),t("p",[e._v("The "),t("code",[e._v("#for")]),e._v(" directive also supports "),t("code",[e._v("#continue")]),e._v(" and "),t("code",[e._v("#break")]),e._v(" commands, and their usage is entirely consistent with Java. Further details are not provided here.")]),e._v(" "),t("h3",{attrs:{id:"_4-switch-directive-added-in-version-3-6"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-switch-directive-added-in-version-3-6"}},[e._v("#")]),e._v(" 4. "),t("code",[e._v("#switch")]),e._v(" Directive (Added in version 3.6)")]),e._v(" "),t("p",[e._v("The "),t("code",[e._v("#switch")]),e._v(" directive is aligned with Java's "),t("code",[e._v("switch")]),e._v(" statement, offering similar basic usage but with some improvements for a better user experience. Usage is as follows:")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('#switch (month)\n  #case (1, 3, 5, 7, 8, 10, 12)\n    #(month) months have 31 days\n  #case (2)\n    #(month) has 28 days in a common year and 29 days in a leap year\n  #default\n    Invalid month: #(month ?? "null")\n#end\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br")])]),t("p",[e._v("As shown in the code above, the "),t("code",[e._v("#case")]),e._v(" directive supports multiple arguments separated by commas, effectively eliminating the need for a "),t("code",[e._v("#break")]),e._v(" directive. Therefore, the Enjoy Template Engine does not require the use of "),t("code",[e._v("#break")]),e._v(".")]),e._v(" "),t("p",[e._v("Parameters for the "),t("code",[e._v("#case")]),e._v(" directive can be any expression, such as:")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('#case (a, b, x + y, "abc", "123")\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("In the code above, the comma-separated expressions are first evaluated, and then each is compared to the value in "),t("code",[e._v("#switch(value)")]),e._v(". If any of these values match, that "),t("code",[e._v("#case")]),e._v(" branch is executed.")]),e._v(" "),t("p",[e._v("The support for multiple parameters in "),t("code",[e._v("#case")]),e._v(", without the need for "),t("code",[e._v("#break")]),e._v(", not only reduces code but also eliminates potential errors from forgetting to include "),t("code",[e._v("#break")]),e._v(". Also, unlike Java syntax, neither "),t("code",[e._v("#case")]),e._v(" nor "),t("code",[e._v("#default")]),e._v(" uses a colon character.")]),e._v(" "),t("h3",{attrs:{id:"_5-set-directive"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-set-directive"}},[e._v("#")]),e._v(" 5. "),t("code",[e._v("#set")]),e._v(" Directive")]),e._v(" "),t("p",[e._v("The "),t("code",[e._v("#set")]),e._v(" directive is used for variable declaration and assignment. It accepts only assignment expressions or a list of comma-separated assignment expressions. Code example:")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('#set(x = 123)\n#set(a = 1, b = 2, c = a + b)\n#set(array[0] = 123)\n#set(map["key"] = 456)\n\n#(x)  #(c)  #(array[0])  #(map.key)  #(map["key"])\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br")])]),t("p",[e._v("In the above code, the first line simply assigns 123 to x. The second line is a list of assignment expressions executed from left to right. If the right-hand side of the equation has an expression, it will be evaluated before assignment. The last line outputs the values of the variables, and other directives can also access these variables like the output directive.")]),e._v(" "),t("p",[e._v("Note that the "),t("code",[e._v("#for")]),e._v(", "),t("code",[e._v("#include")]),e._v(", and "),t("code",[e._v("#define")]),e._v(" directives create new variable scopes. The "),t("code",[e._v("#set")]),e._v(" directive first looks for the variable in the current scope; if found, it operates on it, otherwise, it continues to the upper scope. If still not found, it defines the variable in the top-level scope. This design is very beneficial for variable value transmission within templates.")]),e._v(" "),t("p",[e._v("To explicitly specify assignment in the current scope, you can use the "),t("code",[e._v("#setLocal")]),e._v(" directive, which has the same parameters and usage as "),t("code",[e._v("#set")]),e._v(" but operates only in the current scope. "),t("code",[e._v("#setLocal")]),e._v(" is often used within "),t("code",[e._v("#define")]),e._v(" and "),t("code",[e._v("#include")]),e._v(" to avoid naming conflicts.")]),e._v(" "),t("p",[e._v("Important: Since assignment expressions are essentially expressions, and other directives inherently support any expression, the "),t("code",[e._v("#set")]),e._v(" directive is not mandatory for assignments. For example, assignments can be done in the "),t("code",[e._v("#()")]),e._v(" output directive:")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('#(x = 123, y = "abc", array = [1, "a", true], map = {k1:v1}, null)\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("The code above uses multiple assignment expressions in the output directive to achieve the functionality of "),t("code",[e._v("#set")]),e._v(", ending with a null value to avoid any output. Similarly, other directives can also use assignment expressions.")]),e._v(" "),t("h3",{attrs:{id:"_6-include-directive"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-include-directive"}},[e._v("#")]),e._v(" 6. "),t("code",[e._v("#include")]),e._v(" Directive")]),e._v(" "),t("p",[e._v("The "),t("code",[e._v("#include")]),e._v(" directive is used to include external template content, which is parsed as part of the current template. Code example:")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('#include("sidebar.html")\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("The first parameter of the "),t("code",[e._v("#include")]),e._v(" directive must be a String constant. If it starts with "),t("code",[e._v("/")]),e._v(", it will look for the file relative to "),t("code",[e._v("baseTemplatePath")]),e._v("; otherwise, it will look for the file relative to the current template's path.")]),e._v(" "),t("p",[t("code",[e._v("baseTemplatePath")]),e._v(" can be configured in "),t("code",[e._v("configEngine(Engine me)")]),e._v(" through "),t("code",[e._v("me.setBaseTemplatePath(...)")]),e._v(".")]),e._v(" "),t("p",[e._v("Additionally, the "),t("code",[e._v("#include")]),e._v(" directive supports an unlimited number of assignment expressions, which is very beneficial for modularization. For example, the template file named "),t("code",[e._v("_hot_list.html")]),e._v(" is used to display hot projects, hot news, etc.:")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<div class="hot-list">\n  <h3>#(title)</h3>\n  <ul>\n    #for(x : list)\n    <li>\n      <a href="#(url)/#(x.id)">#(x.title)</a>\n    </li>\n    #end\n  </ul>\n</div>\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br")])]),t("p",[e._v("The variables "),t("code",[e._v("title")]),e._v(", "),t("code",[e._v("list")]),e._v(", and "),t("code",[e._v("url")]),e._v(' in the HTML fragment are needed for rendering "Hot Projects" and "Hot News":')]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('#include("_hot_list.html", title="Hot Projects", list=projectList, url="/project")\n#include("_hot_list.html", title="Hot News", list=newsList, url="/news")\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),t("p",[e._v("In the two lines above, different values for "),t("code",[e._v("title")]),e._v(", "),t("code",[e._v("list")]),e._v(", and "),t("code",[e._v("url")]),e._v(" are passed to "),t("code",[e._v("_hot_list.html")]),e._v(", enabling modular reuse of "),t("code",[e._v("_hot_list.html")]),e._v(".")]),e._v(" "),t("h3",{attrs:{id:"_7-render-directive"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-render-directive"}},[e._v("#")]),e._v(" 7. "),t("code",[e._v("#render")]),e._v(" Directive")]),e._v(" "),t("p",[e._v("The "),t("code",[e._v("#render")]),e._v(" directive is nearly identical to "),t("code",[e._v("#include")]),e._v(" in usage, supporting an unlimited number of assignment expressions. There are two main differences:")]),e._v(" "),t("ol",[t("li",[t("p",[t("code",[e._v("#render")]),e._v(" supports dynamic template parameters, e.g., "),t("code",[e._v("#render(temp)")]),e._v(", where "),t("code",[e._v("temp")]),e._v(" can be any expression. In contrast, "),t("code",[e._v("#include")]),e._v(" can only use string constants like "),t("code",[e._v('#include("abc.html")')]),e._v(".")])]),e._v(" "),t("li",[t("p",[e._v("Functions defined in "),t("code",[e._v("#render")]),e._v(" using "),t("code",[e._v("#define")]),e._v(" are only effective in its sub-template and are not valid in the parent template. This design is very beneficial for modularization.")])])]),e._v(" "),t("p",[e._v("The core purpose of introducing the "),t("code",[e._v("#render")]),e._v(" directive is to support dynamic template parameters.")]),e._v(" "),t("h3",{attrs:{id:"_8-define-directive"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-define-directive"}},[e._v("#")]),e._v(" 8. "),t("code",[e._v("#define")]),e._v(" Directive")]),e._v(" "),t("p",[e._v("The "),t("code",[e._v("#define")]),e._v(" directive is one of the main ways to extend the template engine. It allows you to define template functions (Template Functions). With "),t("code",[e._v("#define")]),e._v(", you can define reusable template segments as individual template functions, which can be customized by passing in parameters when called.")]),e._v(" "),t("p",[e._v("Here's how to use "),t("code",[e._v("#define")]),e._v(" to implement a layout feature. First, create a "),t("code",[e._v("layout.html")]),e._v(" file with the following code:")]),e._v(" "),t("div",{staticClass:"language-html line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-html"}},[t("code",[e._v("#define layout()\n"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("html")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("head")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("title")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("JFinal Club"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("</")]),e._v("title")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("</")]),e._v("head")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("body")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n    #@content()\n  "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("</")]),e._v("body")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("</")]),e._v("html")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n#end\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br")])]),t("p",[e._v("In the code above, a template function named "),t("code",[e._v("layout")]),e._v(" is defined using "),t("code",[e._v("#define layout()")]),e._v(". It ends with "),t("code",[e._v("#end")]),e._v(". Inside it, "),t("code",[e._v("#@content()")]),e._v(" refers to another template function named "),t("code",[e._v("content")]),e._v(".")]),e._v(" "),t("p",[e._v("Note: When calling a template function, an additional "),t("code",[e._v("@")]),e._v(" symbol is used to differentiate it from directive calls.")]),e._v(" "),t("p",[e._v("Next, create another template file as follows:")]),e._v(" "),t("div",{staticClass:"language-html line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-html"}},[t("code",[e._v('#include("layout.html")\n#@layout()\n\n#define content()\n'),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("div")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n  This is the template content, similar to the 'nested' part of traditional template engines.\n"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("</")]),e._v("div")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n#end\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br")])]),t("p",[e._v("The first line includes the previously created "),t("code",[e._v("layout.html")]),e._v(". The second line calls the "),t("code",[e._v("layout")]),e._v(" template function defined in "),t("code",[e._v("layout.html")]),e._v(", which in turn calls the "),t("code",[e._v("content")]),e._v(" function defined in the current file. Simply understand this as function definition and function invocation.")]),e._v(" "),t("p",[e._v("To make a layout template reusable across many templates, you can set all the template functions in that file as shared by using "),t("code",[e._v('me.addSharedFunction("layout.html")')]),e._v(" in "),t("code",[e._v("configEngine(Engine me)")]),e._v(". This eliminates the need for "),t("code",[e._v("#include")]),e._v(", reducing code redundancy and improving reusability.")]),e._v(" "),t("p",[e._v("The Enjoy Template Engine eliminates boring concepts like "),t("code",[e._v("layout")]),e._v(", "),t("code",[e._v("nested")]),e._v(", and "),t("code",[e._v("macro")]),e._v(", thus reducing the learning curve and greatly enhancing extensibility.")]),e._v(" "),t("p",[e._v("Template functions support formal parameters, similar to Java but without specifying the parameter type. Here's a code example:")]),e._v(" "),t("div",{staticClass:"language-html line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-html"}},[t("code",[e._v("#define test(a, b, c)\n  #(a)\n  #(b)\n  #(c)\n#end\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br")])]),t("p",[e._v("To call this function, you would use:")]),e._v(" "),t("div",{staticClass:"language-html line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-html"}},[t("code",[e._v('#@test(123, "abc", user.name)\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("The number of formal and actual parameters should match. If you need to pass additional, optional parameters, you can use the "),t("code",[e._v("#set")]),e._v(" directive beforehand.")]),e._v(" "),t("h3",{attrs:{id:"_9-template-function-calls-and-call-directive"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-template-function-calls-and-call-directive"}},[e._v("#")]),e._v(" 9. Template Function Calls and "),t("code",[e._v("#call")]),e._v(" Directive")]),e._v(" "),t("p",[e._v("To call a template function defined by "),t("code",[e._v("#define")]),e._v(", use "),t("code",[e._v("#@name(p1, p2…, pn)")]),e._v(". Note the additional "),t("code",[e._v("@")]),e._v(" symbol to differentiate it from directive calls.")]),e._v(" "),t("p",[e._v("Template functions also support safe invocation, denoted by "),t("code",[e._v("#@name?(p1, p2…, pn)")]),e._v(". Safe calls do nothing if the template function is not defined, making them suitable for optional template content. For example:")]),e._v(" "),t("div",{staticClass:"language-html line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-html"}},[t("code",[e._v("#define layout()\n"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("html")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("head")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("link")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("rel")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')]),e._v("stylesheet"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')])]),e._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("type")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')]),e._v("text/css"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')])]),e._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("href")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')]),e._v("/assets/css/jfinal.css"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n    #@css?()\n  "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("</")]),e._v("head")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("body")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("div")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("class")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')]),e._v("content"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n      #@main()\n    "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("</")]),e._v("div")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("script")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("type")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')]),e._v("text/javascript"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')])]),e._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("src")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')]),e._v("/assets/js/jfinal.js"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),t("span",{pre:!0,attrs:{class:"token script"}}),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("</")]),e._v("script")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n    #@js?()\n  "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("</")]),e._v("body")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("</")]),e._v("html")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n#end\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br")])]),t("p",[e._v("You can then define additional CSS or JS content through "),t("code",[e._v("#define css()")]),e._v(" and "),t("code",[e._v("#define js()")]),e._v(" in templates that require them.")]),e._v(" "),t("p",[e._v("The "),t("code",[e._v("#call")]),e._v(" directive is new in jfinal 3.6 and allows for dynamic specification of both the template function name and parameters. The usage is as follows:")]),e._v(" "),t("div",{staticClass:"language-html line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-html"}},[t("code",[e._v("#call(funcName, p1, p2, ..., pn)\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("To ignore the call if the function doesn't exist, add a constant value "),t("code",[e._v("true")]),e._v(" as the first parameter:")]),e._v(" "),t("div",{staticClass:"language-html line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-html"}},[t("code",[e._v("#call(true, funcName, p1, p2, ..., pn)\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("This makes the template function calling mechanism much more flexible.")]),e._v(" "),t("h3",{attrs:{id:"_10-date-directive"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10-date-directive"}},[e._v("#")]),e._v(" 10. "),t("code",[e._v("#date")]),e._v(" Directive")]),e._v(" "),t("p",[e._v("The "),t("code",[e._v("#date")]),e._v(" directive is used for formatting the output of date-type data, including all objects that inherit from the Java Date class, such as Date and Timestamp. The usage is incredibly straightforward:")]),e._v(" "),t("div",{staticClass:"language-html line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-html"}},[t("code",[e._v('#date(account.createAt)\n#date(account.createAt, "yyyy-MM-dd HH:mm:ss")\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),t("p",[e._v('In the first line of code, only one parameter is used, so the date is formatted using the default date pattern, which is "yyyy-MM-dd HH:mm". In the second line, the date is formatted according to the pattern specified in the second parameter.')]),e._v(" "),t("p",[e._v("If you want to change the default output format, you can configure it using "),t("code",[e._v("engine.setDatePattern()")]),e._v(".")]),e._v(" "),t("h4",{attrs:{id:"keeppara-issue"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#keeppara-issue"}},[e._v("#")]),e._v(" keepPara Issue")]),e._v(" "),t("p",[e._v("When a date-type field is submitted to the backend, and the backend uses the Controller's "),t("code",[e._v("keepPara()")]),e._v(" method, it converts this date-type data into a String type. In such cases, using "),t("code",[e._v("#date(...)")]),e._v(" to output this String will throw an exception. To handle this, you can 'keep' the type as shown below:")]),e._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// keepPara() keeps all form submission data, converting them to String types.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("keepPara")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// Use parameterized keepPara again to specify that the 'createAt' field should be kept as a Date type.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("keepPara")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Date")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"createAt"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br")])]),t("p",[e._v("As shown above, the second line of code uses the "),t("code",[e._v("Date.class")]),e._v(" parameter to specifically keep the 'createAt' field as a Date type. This way, the "),t("code",[e._v("#date(createAt)")]),e._v(" directive on the page will not throw an exception. Methods like "),t("code",[e._v("keepModel(...)")]),e._v(" and "),t("code",[e._v("keepBean(...)")]),e._v(" will maintain the original types, so no additional handling is needed.")]),e._v(" "),t("h3",{attrs:{id:"_11-number-directive"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11-number-directive"}},[e._v("#")]),e._v(" 11. "),t("code",[e._v("#number")]),e._v(" Directive")]),e._v(" "),t("p",[e._v("The "),t("code",[e._v("#number")]),e._v(" directive is used to format the output of numerical data, including all objects that inherit from the Java Number class, such as Double, Float, Integer, Long, and BigDecimal. The usage is exceedingly simple:")]),e._v(" "),t("div",{staticClass:"language-html line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-html"}},[t("code",[e._v('#number(3.1415926, "#.##")\n#number(0.9518, "#.##%")\n#number(123456789, ",###")\n#number(300000, "The speed of light is ### km per second.")\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br")])]),t("p",[e._v("In the above examples, the first parameter for the "),t("code",[e._v("#number")]),e._v(" directive is of a numerical type, and the second parameter is a String pattern. The pattern parameter works the same way as the pattern used in Java's DecimalFormat class. If you're not sure how to use the pattern, you can search for \"DecimalFormat\" in a search engine to find plenty of resources.")]),e._v(" "),t("p",[e._v("The two parameters for the "),t("code",[e._v("#number")]),e._v(" directive can be variables or complex expressions. The use of constants in the above examples is merely for demonstration purposes.")]),e._v(" "),t("h3",{attrs:{id:"_12-escape-directive"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_12-escape-directive"}},[e._v("#")]),e._v(" 12. "),t("code",[e._v("#escape")]),e._v(" Directive")]),e._v(" "),t("p",[e._v("The "),t("code",[e._v("#escape")]),e._v(" directive is used for HTML-safe output, helping to mitigate XSS attacks. It escapes characters like '<' and '>' in HTML-formatted data. For example, it would convert '<' to "),t("code",[e._v("&lt;")]),e._v(" and a space to "),t("code",[e._v("&nbsp;")]),e._v(".")]),e._v(" "),t("p",[e._v("Used in a similar way to the output command:")]),e._v(" "),t("div",{staticClass:"language-html line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-html"}},[t("code",[e._v("#escape(blog.content)\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("h3",{attrs:{id:"_13-directive-extension"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_13-directive-extension"}},[e._v("#")]),e._v(" 13. Directive Extension")]),e._v(" "),t("p",[e._v("Thanks to the original DKFF and DLRD algorithms, the Enjoy Template Engine allows for extremely convenient extensions of directives at the language level. The amount of code required is minimal, and the learning curve is virtually non-existent. Here's a code example:")]),e._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("class")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("NowDirective")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("extends")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Directive")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("void")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("exec")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Env")]),e._v(" env"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Scope")]),e._v(" scope"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Writer")]),e._v(" writer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("write")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("writer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("new")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Date")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("toString")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br")])]),t("p",[e._v("In the above code, by extending the "),t("code",[e._v("Directive")]),e._v(" class and implementing the "),t("code",[e._v("exec")]),e._v(" method, a new "),t("code",[e._v("#now")]),e._v(" directive is created with just three lines of code. This directive outputs the current date into the template. To use it, you only need to add it to the template engine using "),t("code",[e._v('me.addDirective("now", NowDirective.class)')]),e._v(". Here's how to use this directive in a template:")]),e._v(" "),t("div",{staticClass:"language-html line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-html"}},[t("code",[e._v("The current date is: #now()\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("In addition to supporting directives without an "),t("code",[e._v("#end")]),e._v(" block (i.e., directives without a body), the Enjoy Template Engine also directly supports directives that include an "),t("code",[e._v("#end")]),e._v(" and a body. Here's an example:")]),e._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("class")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Demo")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("extends")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Directive")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// ExprList represents the list of parameter expressions for the directive")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("void")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("setExprList")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("ExprList")]),e._v(" exprList"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// Custom control of exprList can be done here")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("super")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("setExprList")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("exprList"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n  \n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("void")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("exec")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Env")]),e._v(" env"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Scope")]),e._v(" scope"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Writer")]),e._v(" writer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("write")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("writer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Before executing body"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    stat"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("exec")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("env"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" scope"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" writer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// Execute body")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("write")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("writer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"After executing body"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n  \n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("boolean")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("hasEnd")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// Returning true means this directive has an #end ending tag")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br"),t("span",{staticClass:"line-number"},[e._v("18")]),t("br")])]),t("p",[e._v("In the example above, the "),t("code",[e._v("Demo")]),e._v(" class extends "),t("code",[e._v("Directive")]),e._v(" and overrides the "),t("code",[e._v("hasEnd")]),e._v(" method, returning "),t("code",[e._v("true")]),e._v(". This indicates that the extended directive has an "),t("code",[e._v("#end")]),e._v(" ending tag. The "),t("code",[e._v("exec")]),e._v(" method contains three lines of code. The "),t("code",[e._v("stat.exec(...)")]),e._v(" line executes the code within the directive's body. The lines before and after "),t("code",[e._v("stat.exec(...)")]),e._v(" output a string, and the final output is a combination of all these.\nAdditionally the parameters of the directive can be controlled by overriding the setExprList(...) method of the parent class, which is not required.")]),e._v(" "),t("p",[e._v('After adding to the engine via me.addDirective("demo", Demo.class), it can be used as in the following code example:\n``\n#demo()\nHere is the content of the demo body\n#end')]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("The final output looks like this:\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("body Before execution\nHere is the content of the demo body\nAfter body")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("The #demo directive body in the above example contains a string of characters that will be executed by stat.exec(...) in the Demo.exec(...) method, and write(...) before and after stat.exec(...). The results produced by the two method calls and the results produced by body generate the final result.\n**Important**: Properties declared in directives are globally shared, so they must be thread-safe. For instance, consider a snippet from `com.jfinal.template.ext.directive.DateDirective`:\n\n```java\npublic class DateDirective extends Directive {\n\t\n   private Expr valueExpr;\n   private Expr datePatternExpr;\n   private int paraNum;\n \n   ...\n}\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br")])]),t("p",[e._v("Here, there are three properties of types "),t("code",[e._v("Expr")]),e._v(", "),t("code",[e._v("Expr")]),e._v(", and "),t("code",[e._v("int")]),e._v(". "),t("code",[e._v("Expr")]),e._v(" is thread-safe. Although "),t("code",[e._v("int paraNum")]),e._v(" may not seem thread-safe, it is only written to during initialization in the constructor, and read everywhere else. Thus, this "),t("code",[e._v("int")]),e._v(" property is also thread-safe in this context.")]),e._v(" "),t("h3",{attrs:{id:"_14-common-mistakes"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_14-common-mistakes"}},[e._v("#")]),e._v(" 14. Common Mistakes")]),e._v(" "),t("p",[e._v('The most common mistake when using the Enjoy Template Engine is confusing "expressions" and "non-expressions." Expressions refer to everything within the parentheses when calling a directive or template function:')]),e._v(" "),t("div",{staticClass:"language-html line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-html"}},[t("code",[e._v("#directiveName(everything here is an expression)\n#@functionName(everything here is an expression)\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),t("p",[e._v("For example, the correct usage is:")]),e._v(" "),t("div",{staticClass:"language-html line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-html"}},[t("code",[e._v("#directiveName(user.name)\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("A common mistake would be:")]),e._v(" "),t("div",{staticClass:"language-html line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-html"}},[t("code",[e._v("#directiveName( #(user.name) )\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("Simply put, this mistake involves using a directive where an expression should be used. Never use the '#' character within an expression; just use Java expressions directly.")])])}),[],!1,null,null,null);t.default=n.exports}}]);