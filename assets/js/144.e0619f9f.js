(window.webpackJsonp=window.webpackJsonp||[]).push([[144],{507:function(s,n,t){"use strict";t.r(n);var a=t(14),r=Object(a.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"_12-1-概述"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_12-1-概述"}},[s._v("#")]),s._v(" 12.1 概述")]),s._v(" "),n("p",[s._v("jfinal 的 json 模块以抽象类 Json 为核心，方便扩展第三方实现，jfinal 官方给出了三个 Json 实现，分别是 JFinalJson、FastJson、Jackson，这三个实现继承自抽象类 Json。")]),s._v(" "),n("p",[s._v("抽象类 Json 的核心抽象如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("public abstract class Json {\n    public abstract String toJson(Object object);\n    public abstract <T> T parse(String jsonString, Class <T> type);\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("如上代码可以看出 Json 抽象就是 Object 与 json string 互转的两个方法，toJson(...)将任意 java 类型转成 json string，而 parse 将 json string 再反向转成范型指定的对象。")])])}),[],!1,null,null,null);n.default=r.exports}}]);