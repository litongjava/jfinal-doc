(window.webpackJsonp=window.webpackJsonp||[]).push([[171],{524:function(t,a,e){"use strict";e.r(a);var r=e(14),n=Object(r.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_3-4-get-getpara-系列方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-get-getpara-系列方法"}},[t._v("#")]),t._v(" 3.4 get & getPara 系列方法")]),t._v(" "),a("p",[t._v("Controller提供了getPara系列方法用来从请求中获取参数。getPara系列方法分为两种类型。第一种类型为第一个形参为String的getPara系列方法。该系列方法是对HttpServletRequest.getParameter(String name)的封装，这类方法都是转调了HttpServletRequest.getParameter(String name)。")]),t._v(" "),a("p",[t._v("第二种类型为第一个形参为int或无形参的getPara系列方法。该系列方法是去获取urlPara中所带的参数值。getParaMap与getParaNames分别对应HttpServletRequest的getParameterMap与getParameterNames。")]),t._v(" "),a("p",[t._v("记忆技巧：第一个参数为String类型的将获取表单或者url中问号挂参的域值。第一个参数为int或无参数的将获取urlPara中的参数值。")]),t._v(" "),a("p",[t._v("getPara使用例子：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("方法调用")]),t._v(" "),a("th",[t._v("返回值")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v('getPara("title")')]),t._v(" "),a("td",[t._v('返回页面表单域为"title"参数值')])]),t._v(" "),a("tr",[a("td",[t._v('getParaToInt("age")')]),t._v(" "),a("td",[t._v('返回页面表单域为"age"参数值并转为int类型')])]),t._v(" "),a("tr",[a("td",[t._v("getPara(0)")]),t._v(" "),a("td",[t._v('返回url请求的urlPara参数的第一个值,如http://localhost/controllerKey/method/v0-v1-v2 这个请求将返回"v0"')])]),t._v(" "),a("tr",[a("td",[t._v("getParaInt(1)")]),t._v(" "),a("td",[t._v("返回url请求的urlPara参数的第二个值并转为int了下,如http://localhost/controllerKey/method/2-5-9 这个请求将返回5")])]),t._v(" "),a("tr",[a("td",[t._v("getParaInt(2)")]),t._v(" "),a("td",[t._v('如http://localhost/controllerKey/method/2-5-N8这请求将返回-8.注意:约定字母N与n都可以表示符号,这对urlParaSeparator为"-"时非常有用')])]),t._v(" "),a("tr",[a("td",[t._v("getPara()")]),t._v(" "),a("td",[t._v('返回url请求中的urlPara参数的整体值,,如http://localhost/controllerKey/method/v0-v1-v2 这个请求将返回"v0-v1-v2-v3"')])])])]),t._v(" "),a("p",[t._v("jfinal 3.6 重要更新：jfinal 3.6 针对 getPara 系以及 getParaToXxx 系统方法添加了更简短的替代方法，以下是部分使用示例：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('// 替代 getPara 的 get 用法\nString title = get("title");\n \n// 替代 getParaToInt 的 getInt 用法\nInteger age = getInt("age");\n \n// 替代 setAttr 的 set 用法\nset("article", article);\n')])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("p",[t._v("jfinal 3.5 重要更新：jfinal 3.5 版本新增了 getRawData() 方法，可以很方便地从 http 请求 body 中获取 String 型的数据，通常这类数据是 json 或 XML 数据，例如：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("String json = getRawData();\nUser user = FastJson.getJson().parse(json, User.class);\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("以上代码通过 getRawData() 获取到了客户端传过来的 String 型的 json 数据库。 getRawData() 方法可以在一次请求交互中多次反复调用，不会抛出异常。")]),t._v(" "),a("p",[t._v('这里要注意一个问题：通过 forwardAction(...) 转发到另一个 action 时，getRawData() 无法获取到数据，此时需要使用 setAttr("rawData", getRawData()) 将数据传递给 forward 到的目标 action，然后在目标 action 通过 getAttr("rawData") 获取。一般这种情况很少见。')])])}),[],!1,null,null,null);a.default=n.exports}}]);