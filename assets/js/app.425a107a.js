(window.webpackJsonp=window.webpackJsonp||[]).push([[0],[]]);!function(e){function n(n){for(var a,r,s=n[0],l=n[1],c=n[2],u=0,p=[];u<s.length;u++)r=s[u],Object.prototype.hasOwnProperty.call(i,r)&&i[r]&&p.push(i[r][0]),i[r]=0;for(a in l)Object.prototype.hasOwnProperty.call(l,a)&&(e[a]=l[a]);for(d&&d(n);p.length;)p.shift()();return o.push.apply(o,c||[]),t()}function t(){for(var e,n=0;n<o.length;n++){for(var t=o[n],a=!0,s=1;s<t.length;s++){var l=t[s];0!==i[l]&&(a=!1)}a&&(o.splice(n--,1),e=r(r.s=t[0]))}return e}var a={},i={9:0},o=[];function r(n){if(a[n])return a[n].exports;var t=a[n]={i:n,l:!1,exports:{}};return e[n].call(t.exports,t,t.exports,r),t.l=!0,t.exports}r.e=function(e){var n=[],t=i[e];if(0!==t)if(t)n.push(t[2]);else{var a=new Promise((function(n,a){t=i[e]=[n,a]}));n.push(t[2]=a);var o,s=document.createElement("script");s.charset="utf-8",s.timeout=120,r.nc&&s.setAttribute("nonce",r.nc),s.src=function(e){return r.p+"assets/js/"+({10:"vendors~docsearch"}[e]||e)+"."+{1:"1b1f549f",2:"b8ead7ab",3:"980a2527",4:"a63d3093",5:"b70ff20d",6:"aaf4baf3",7:"b0326031",8:"3c2d30c9",10:"ae8c10bc",11:"ef250f54",12:"cf02c8bc",13:"2774ff6a",14:"39dfcf5b",15:"1d59ce32",16:"97792e1f",17:"609bf5e3",18:"aaa40e3a",19:"5755ba99",20:"0321efd6",21:"9fef675b",22:"f1876d87",23:"ed870693",24:"65e97dfd",25:"b7821b31",26:"a5e5a9bb",27:"80888a40",28:"4dd6fa1e",29:"2855cc63",30:"81c4cd83",31:"492b9642",32:"61705f9c",33:"d8965f45",34:"b139ed96",35:"e95dad8f",36:"fb136890",37:"3b3bfe50",38:"a8713bf3",39:"68ecaea1",40:"a943f786",41:"131c5943",42:"63eeadac",43:"0df81f42",44:"33b460e2",45:"863d7366",46:"922355bd",47:"43dce9f5",48:"c46b45bd",49:"9ce43caf",50:"5e87d85f",51:"59df5bbb",52:"edbe3065",53:"174f3852",54:"a4e86a01",55:"51b04a7d",56:"d772fc74",57:"86f22e10",58:"53dd53c2",59:"7bc8e9d8",60:"c7e4bc8b",61:"c42d087f",62:"1bc79f1a",63:"71793240",64:"91b6285b",65:"b92aa093",66:"d72202ef",67:"8a6b7666",68:"10d6a891",69:"a723ff7a",70:"427a928b",71:"3a740ba8",72:"1022aa4b",73:"1169d795",74:"e94428b5",75:"ea4ca766",76:"130631fe",77:"a77f3f4e",78:"4b016d18",79:"83d4f571",80:"2beb1b23",81:"7a3934b2",82:"02ba9895",83:"517bccb1",84:"f4ab4472",85:"ec21606f",86:"46b7ca95",87:"15c7c9c9",88:"7961e89f",89:"4c18bb94",90:"307c71c3",91:"2136034e",92:"1c6990fa",93:"0c91ba5a",94:"73570b95",95:"516b5e16",96:"003d8989",97:"d76fc551",98:"2f2b446e",99:"1d073b56",100:"ae64c85e",101:"be187ebc",102:"a4c6d732",103:"24865530",104:"dd230e10",105:"27321024",106:"17af024d",107:"fb214325",108:"cfa0fccc",109:"e59eba02",110:"2ecb852f",111:"c94f1227",112:"4fbfc83a",113:"a1c300b3",114:"5fed3dea",115:"88ad08b5",116:"6afa4f17",117:"128207f4",118:"91b18043",119:"afa456d1",120:"2e306bdd",121:"cbf7b4a7",122:"18ca8844",123:"8093d03f",124:"54a342f8",125:"6051abbc",126:"ae613630",127:"054813c5",128:"b2cd396f",129:"4f377324",130:"ea1600a8",131:"e7e6523d",132:"8f1e2542",133:"e85a7527",134:"170aa27d",135:"77bfade9",136:"5fd3486f",137:"21a260fb",138:"f61b33fd",139:"d063cd4c",140:"9cc2b7f0",141:"b3f6c570",142:"1e9fc2c4",143:"9dcec95a",144:"e0619f9f",145:"6043f45d",146:"2bed631f",147:"932accd8",148:"83947d95",149:"3d73537f",150:"20c7c98a",151:"4247cbbc",152:"a742623b",153:"d18556e2",154:"86d01f41",155:"77c38901",156:"8f256802",157:"10c4b2e2",158:"6ea2014d",159:"aab0b37c",160:"5410653f",161:"d91ac0ae",162:"eadf936b",163:"44f23137",164:"ec28590b",165:"5e5361f0",166:"43071f33",167:"7fcb03ca",168:"e3abd12b",169:"dadb7744",170:"831a50de",171:"975c4c93",172:"77df72c7",173:"58a6b01a",174:"b2d8aacb",175:"65f036cb",176:"f3365ad1",177:"730b30f1",178:"1ab011ed",179:"8e2a3d51",180:"687f2beb",181:"1a7cdd1e",182:"57647217",183:"92c32944",184:"ab154d41",185:"4b7482e8",186:"dd2f9684",187:"813417f9",188:"59411c4f",189:"07f21c5d",190:"daafd531",191:"5f29108a",192:"2f223030",193:"daaba79e",194:"b663c6ab",195:"0eb80318",196:"5385091f",197:"120e48aa",198:"78d5aad7",199:"432594f2",200:"488cd3f1",201:"22476fe9",202:"9f511aec",203:"99836932",204:"474c6584",205:"d23af257",206:"ee68c22a",207:"b84149c8",208:"66530c62",209:"c0eba508",210:"fb463260",211:"87f50f41",212:"49295f08",213:"06e1a3b6",214:"4b5e2585",215:"76bcc388",216:"1882dab8",217:"4c7c5e90",218:"694ab1aa",219:"9be41632",220:"701f5be0",221:"35ecd756",222:"63cbd873",223:"aab67c3c",224:"c9ecbf5d",225:"8ae68866",226:"c22717a4"}[e]+".js"}(e);var l=new Error;o=function(n){s.onerror=s.onload=null,clearTimeout(c);var t=i[e];if(0!==t){if(t){var a=n&&("load"===n.type?"missing":n.type),o=n&&n.target&&n.target.src;l.message="Loading chunk "+e+" failed.\n("+a+": "+o+")",l.name="ChunkLoadError",l.type=a,l.request=o,t[1](l)}i[e]=void 0}};var c=setTimeout((function(){o({type:"timeout",target:s})}),12e4);s.onerror=s.onload=o,document.head.appendChild(s)}return Promise.all(n)},r.m=e,r.c=a,r.d=function(e,n,t){r.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,n){if(1&n&&(e=r(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(r.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var a in e)r.d(t,a,function(n){return e[n]}.bind(null,a));return t},r.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(n,"a",n),n},r.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},r.p="/jfinal-doc/",r.oe=function(e){throw console.error(e),e};var s=window.webpackJsonp=window.webpackJsonp||[],l=s.push.bind(s);s.push=n,s=s.slice();for(var c=0;c<s.length;c++)n(s[c]);var d=l;o.push([125,0]),t()}([function(e,n,t){"use strict";t.d(n,"d",(function(){return b})),t.d(n,"c",(function(){return y})),t.d(n,"b",(function(){return w})),t.d(n,"e",(function(){return j})),t.d(n,"a",(function(){return x})),t.d(n,"f",(function(){return E})),t.d(n,"g",(function(){return k})),t.d(n,"h",(function(){return C}));t(57),t(151);var a=t(1),i={"components/AlgoliaSearchBox":()=>Promise.all([t.e(0),t.e(14)]).then(t.bind(null,384)),"components/DropdownLink":()=>Promise.all([t.e(0),t.e(15)]).then(t.bind(null,325)),"components/DropdownTransition":()=>Promise.all([t.e(0),t.e(21)]).then(t.bind(null,313)),"components/Home":()=>Promise.all([t.e(0),t.e(17)]).then(t.bind(null,356)),"components/NavLink":()=>t.e(23).then(t.bind(null,312)),"components/NavLinks":()=>Promise.all([t.e(0),t.e(13)]).then(t.bind(null,337)),"components/Navbar":()=>Promise.all([t.e(0),t.e(1)]).then(t.bind(null,378)),"components/Page":()=>Promise.all([t.e(0),t.e(12)]).then(t.bind(null,357)),"components/PageEdit":()=>Promise.all([t.e(0),t.e(18)]).then(t.bind(null,339)),"components/PageNav":()=>Promise.all([t.e(0),t.e(16)]).then(t.bind(null,340)),"components/Sidebar":()=>Promise.all([t.e(0),t.e(11)]).then(t.bind(null,358)),"components/SidebarButton":()=>Promise.all([t.e(0),t.e(22)]).then(t.bind(null,359)),"components/SidebarGroup":()=>Promise.all([t.e(0),t.e(3)]).then(t.bind(null,338)),"components/SidebarLink":()=>Promise.all([t.e(0),t.e(19)]).then(t.bind(null,326)),"components/SidebarLinks":()=>Promise.all([t.e(0),t.e(3)]).then(t.bind(null,324)),"global-components/Badge":()=>Promise.all([t.e(0),t.e(4)]).then(t.bind(null,388)),"global-components/CodeBlock":()=>Promise.all([t.e(0),t.e(5)]).then(t.bind(null,385)),"global-components/CodeGroup":()=>Promise.all([t.e(0),t.e(6)]).then(t.bind(null,386)),"layouts/404":()=>t.e(8).then(t.bind(null,387)),"layouts/Layout":()=>Promise.all([t.e(0),t.e(1),t.e(2),t.e(7)]).then(t.bind(null,382)),NotFound:()=>t.e(8).then(t.bind(null,387)),Layout:()=>Promise.all([t.e(0),t.e(1),t.e(2),t.e(7)]).then(t.bind(null,382))},o={"v-4337c678":()=>t.e(25).then(t.bind(null,389)),"v-6391e5f4":()=>t.e(24).then(t.bind(null,390)),"v-17295f05":()=>t.e(26).then(t.bind(null,391)),"v-83630578":()=>t.e(27).then(t.bind(null,392)),"v-04cf41ad":()=>t.e(28).then(t.bind(null,393)),"v-2d950c67":()=>t.e(29).then(t.bind(null,394)),"v-1f6782f2":()=>t.e(30).then(t.bind(null,395)),"v-b82ecc38":()=>t.e(31).then(t.bind(null,396)),"v-76ff6023":()=>t.e(32).then(t.bind(null,397)),"v-274cb101":()=>t.e(33).then(t.bind(null,398)),"v-116ab898":()=>t.e(34).then(t.bind(null,399)),"v-cb1aad04":()=>t.e(35).then(t.bind(null,400)),"v-a978cb8c":()=>t.e(36).then(t.bind(null,401)),"v-f5799bd0":()=>t.e(37).then(t.bind(null,402)),"v-71de89a7":()=>t.e(38).then(t.bind(null,403)),"v-4cbd53d9":()=>t.e(39).then(t.bind(null,404)),"v-1879c6ae":()=>t.e(40).then(t.bind(null,405)),"v-59df37df":()=>t.e(41).then(t.bind(null,406)),"v-79559791":()=>t.e(42).then(t.bind(null,407)),"v-3269c38d":()=>t.e(43).then(t.bind(null,408)),"v-692f6704":()=>t.e(44).then(t.bind(null,409)),"v-19c0b0c7":()=>t.e(45).then(t.bind(null,410)),"v-ed335bf2":()=>t.e(46).then(t.bind(null,411)),"v-7be768f6":()=>t.e(47).then(t.bind(null,412)),"v-2b288f64":()=>t.e(48).then(t.bind(null,413)),"v-45973972":()=>t.e(49).then(t.bind(null,414)),"v-63841533":()=>t.e(50).then(t.bind(null,415)),"v-5fcbb630":()=>t.e(51).then(t.bind(null,416)),"v-227bbac2":()=>t.e(52).then(t.bind(null,417)),"v-d21c7354":()=>t.e(53).then(t.bind(null,418)),"v-51802670":()=>t.e(54).then(t.bind(null,419)),"v-389654ca":()=>t.e(55).then(t.bind(null,420)),"v-5b606711":()=>t.e(56).then(t.bind(null,421)),"v-4d79010e":()=>t.e(57).then(t.bind(null,422)),"v-988f09b2":()=>t.e(58).then(t.bind(null,423)),"v-2a13c901":()=>t.e(59).then(t.bind(null,424)),"v-4fc7c7a1":()=>t.e(60).then(t.bind(null,425)),"v-45ec0b87":()=>t.e(61).then(t.bind(null,426)),"v-1b8306f2":()=>t.e(62).then(t.bind(null,427)),"v-609bd3cd":()=>t.e(63).then(t.bind(null,428)),"v-30c04aed":()=>t.e(64).then(t.bind(null,429)),"v-0bef0f2d":()=>t.e(65).then(t.bind(null,430)),"v-2bad717e":()=>t.e(66).then(t.bind(null,431)),"v-26e24795":()=>t.e(67).then(t.bind(null,432)),"v-1ed93ef9":()=>t.e(68).then(t.bind(null,433)),"v-3f5f6775":()=>t.e(69).then(t.bind(null,434)),"v-4cfa6386":()=>t.e(70).then(t.bind(null,435)),"v-71ecdd5e":()=>t.e(75).then(t.bind(null,436)),"v-3fa8e144":()=>t.e(74).then(t.bind(null,437)),"v-38993dc4":()=>t.e(76).then(t.bind(null,438)),"v-353a9101":()=>t.e(77).then(t.bind(null,439)),"v-6ff5bf1d":()=>t.e(78).then(t.bind(null,440)),"v-19c1bfe0":()=>t.e(73).then(t.bind(null,441)),"v-a00b136e":()=>t.e(80).then(t.bind(null,442)),"v-03e1fb7e":()=>t.e(79).then(t.bind(null,443)),"v-6505369f":()=>t.e(81).then(t.bind(null,444)),"v-d9d991c4":()=>t.e(82).then(t.bind(null,445)),"v-71b5fc87":()=>t.e(83).then(t.bind(null,446)),"v-e08424aa":()=>t.e(84).then(t.bind(null,447)),"v-4c0f155b":()=>t.e(86).then(t.bind(null,448)),"v-102f273a":()=>t.e(85).then(t.bind(null,449)),"v-6df51cb8":()=>t.e(88).then(t.bind(null,450)),"v-fa243062":()=>t.e(87).then(t.bind(null,451)),"v-11f316bb":()=>t.e(89).then(t.bind(null,452)),"v-2df25b1b":()=>t.e(90).then(t.bind(null,453)),"v-5af4ed21":()=>t.e(91).then(t.bind(null,454)),"v-dba12182":()=>t.e(92).then(t.bind(null,455)),"v-7ed89ec7":()=>t.e(94).then(t.bind(null,456)),"v-082e4a43":()=>t.e(93).then(t.bind(null,457)),"v-d7c0a0ba":()=>t.e(95).then(t.bind(null,458)),"v-a2e2ad78":()=>t.e(96).then(t.bind(null,459)),"v-b94917f8":()=>t.e(97).then(t.bind(null,460)),"v-6a120dbe":()=>t.e(98).then(t.bind(null,461)),"v-ba25292c":()=>t.e(99).then(t.bind(null,462)),"v-7f7c3fec":()=>t.e(100).then(t.bind(null,463)),"v-6ffa6841":()=>t.e(101).then(t.bind(null,464)),"v-541c0407":()=>t.e(102).then(t.bind(null,465)),"v-f2c9e9e6":()=>t.e(103).then(t.bind(null,466)),"v-a8de22f8":()=>t.e(104).then(t.bind(null,467)),"v-14710da1":()=>t.e(105).then(t.bind(null,468)),"v-8bf1188a":()=>t.e(106).then(t.bind(null,469)),"v-68ee4e99":()=>t.e(107).then(t.bind(null,470)),"v-b4a26204":()=>t.e(108).then(t.bind(null,471)),"v-fab81c06":()=>t.e(109).then(t.bind(null,472)),"v-21317702":()=>t.e(110).then(t.bind(null,473)),"v-2b3b2a01":()=>t.e(112).then(t.bind(null,474)),"v-03be4557":()=>t.e(113).then(t.bind(null,475)),"v-7eb5ffe1":()=>t.e(111).then(t.bind(null,476)),"v-9dd148fe":()=>t.e(114).then(t.bind(null,477)),"v-46f8c37e":()=>t.e(115).then(t.bind(null,478)),"v-077064e1":()=>t.e(116).then(t.bind(null,479)),"v-8ca374fe":()=>t.e(117).then(t.bind(null,480)),"v-1d9930fe":()=>t.e(118).then(t.bind(null,481)),"v-0b63cdca":()=>t.e(120).then(t.bind(null,482)),"v-8e3ba93a":()=>t.e(119).then(t.bind(null,483)),"v-5d029d03":()=>t.e(121).then(t.bind(null,484)),"v-7c4ba2a3":()=>t.e(122).then(t.bind(null,485)),"v-0d393669":()=>t.e(123).then(t.bind(null,486)),"v-7aa09a24":()=>t.e(124).then(t.bind(null,487)),"v-674f4898":()=>t.e(125).then(t.bind(null,488)),"v-07eea85b":()=>t.e(127).then(t.bind(null,489)),"v-2f735cb6":()=>t.e(128).then(t.bind(null,490)),"v-38525cd6":()=>t.e(129).then(t.bind(null,491)),"v-a64181e8":()=>t.e(130).then(t.bind(null,492)),"v-1a789f28":()=>t.e(131).then(t.bind(null,493)),"v-1c240292":()=>t.e(132).then(t.bind(null,494)),"v-a5a8ee58":()=>t.e(133).then(t.bind(null,495)),"v-b601288a":()=>t.e(126).then(t.bind(null,496)),"v-68e0b3c0":()=>t.e(135).then(t.bind(null,497)),"v-8bfe3d50":()=>t.e(134).then(t.bind(null,498)),"v-c24a1ce0":()=>t.e(136).then(t.bind(null,499)),"v-67299f6a":()=>t.e(72).then(t.bind(null,500)),"v-6fc8b362":()=>t.e(139).then(t.bind(null,501)),"v-e68f5ea4":()=>t.e(138).then(t.bind(null,502)),"v-3491301b":()=>t.e(140).then(t.bind(null,503)),"v-376ea6dd":()=>t.e(141).then(t.bind(null,504)),"v-d744ed5a":()=>t.e(142).then(t.bind(null,505)),"v-c5da32e8":()=>t.e(143).then(t.bind(null,506)),"v-6b9f26fe":()=>t.e(144).then(t.bind(null,507)),"v-0a557796":()=>t.e(145).then(t.bind(null,508)),"v-9c01c720":()=>t.e(146).then(t.bind(null,509)),"v-afad3fa0":()=>t.e(147).then(t.bind(null,510)),"v-c42c494e":()=>t.e(148).then(t.bind(null,511)),"v-477bb3b8":()=>t.e(149).then(t.bind(null,512)),"v-0c29f8b2":()=>t.e(150).then(t.bind(null,513)),"v-7861a453":()=>t.e(151).then(t.bind(null,514)),"v-74d2de46":()=>t.e(152).then(t.bind(null,515)),"v-55a5db1e":()=>t.e(153).then(t.bind(null,516)),"v-7934fc13":()=>t.e(154).then(t.bind(null,517)),"v-0ea52584":()=>t.e(155).then(t.bind(null,518)),"v-74ddc929":()=>t.e(137).then(t.bind(null,519)),"v-069efee4":()=>t.e(156).then(t.bind(null,520)),"v-5d51c12f":()=>t.e(157).then(t.bind(null,521)),"v-02524af7":()=>t.e(159).then(t.bind(null,522)),"v-03977a47":()=>t.e(158).then(t.bind(null,523)),"v-28064997":()=>t.e(160).then(t.bind(null,524)),"v-34868267":()=>t.e(161).then(t.bind(null,525)),"v-351ae8e7":()=>t.e(162).then(t.bind(null,526)),"v-4ca2acd2":()=>t.e(163).then(t.bind(null,527)),"v-168d4624":()=>t.e(164).then(t.bind(null,528)),"v-521c3580":()=>t.e(165).then(t.bind(null,529)),"v-874d584e":()=>t.e(166).then(t.bind(null,530)),"v-697a0f50":()=>t.e(167).then(t.bind(null,531)),"v-7a3c7de4":()=>t.e(168).then(t.bind(null,532)),"v-aa516b2a":()=>t.e(169).then(t.bind(null,533)),"v-376a5658":()=>t.e(170).then(t.bind(null,534)),"v-ce7c74c0":()=>t.e(171).then(t.bind(null,535)),"v-2ecfe04e":()=>t.e(172).then(t.bind(null,536)),"v-ee5a7982":()=>t.e(173).then(t.bind(null,537)),"v-60fd334f":()=>t.e(174).then(t.bind(null,538)),"v-55ba108c":()=>t.e(176).then(t.bind(null,539)),"v-ad400136":()=>t.e(175).then(t.bind(null,540)),"v-60f47108":()=>t.e(177).then(t.bind(null,541)),"v-8dd3db5a":()=>t.e(178).then(t.bind(null,542)),"v-47bdc4a1":()=>t.e(179).then(t.bind(null,543)),"v-17da8b82":()=>t.e(180).then(t.bind(null,544)),"v-971a23ec":()=>t.e(181).then(t.bind(null,545)),"v-6d58b377":()=>t.e(182).then(t.bind(null,546)),"v-d30df2d6":()=>t.e(183).then(t.bind(null,547)),"v-0f04d02e":()=>t.e(184).then(t.bind(null,548)),"v-4efb9076":()=>t.e(185).then(t.bind(null,549)),"v-95e4deca":()=>t.e(187).then(t.bind(null,550)),"v-9374fba2":()=>t.e(188).then(t.bind(null,551)),"v-0d70d955":()=>t.e(186).then(t.bind(null,552)),"v-4fe22899":()=>t.e(189).then(t.bind(null,553)),"v-0d33af69":()=>t.e(190).then(t.bind(null,554)),"v-6bee94cc":()=>t.e(191).then(t.bind(null,555)),"v-a8ec52d8":()=>t.e(192).then(t.bind(null,556)),"v-7fdf5b79":()=>t.e(193).then(t.bind(null,557)),"v-28b5b627":()=>t.e(194).then(t.bind(null,558)),"v-5546ce10":()=>t.e(195).then(t.bind(null,559)),"v-0a4e7e1f":()=>t.e(196).then(t.bind(null,560)),"v-a330c5ac":()=>t.e(197).then(t.bind(null,561)),"v-46c9ae0d":()=>t.e(198).then(t.bind(null,562)),"v-231a3ff4":()=>t.e(199).then(t.bind(null,563)),"v-696ace50":()=>t.e(200).then(t.bind(null,564)),"v-626dda05":()=>t.e(201).then(t.bind(null,565)),"v-43c9b5de":()=>t.e(202).then(t.bind(null,566)),"v-72b0650e":()=>t.e(203).then(t.bind(null,567)),"v-25952418":()=>t.e(204).then(t.bind(null,568)),"v-7047fb52":()=>t.e(205).then(t.bind(null,569)),"v-327b0166":()=>t.e(206).then(t.bind(null,570)),"v-4d0c018e":()=>t.e(207).then(t.bind(null,571)),"v-877bae90":()=>t.e(208).then(t.bind(null,572)),"v-172034dd":()=>t.e(209).then(t.bind(null,573)),"v-d5bcff54":()=>t.e(210).then(t.bind(null,574)),"v-8f755e3c":()=>t.e(211).then(t.bind(null,575)),"v-f066f1e6":()=>t.e(213).then(t.bind(null,576)),"v-6db814f0":()=>t.e(212).then(t.bind(null,577)),"v-c09c5b3e":()=>t.e(214).then(t.bind(null,578)),"v-69c3d5be":()=>t.e(215).then(t.bind(null,579)),"v-158306c1":()=>t.e(216).then(t.bind(null,580)),"v-2576d6bb":()=>t.e(217).then(t.bind(null,581)),"v-23fb8ef0":()=>t.e(218).then(t.bind(null,582)),"v-889144ce":()=>t.e(219).then(t.bind(null,583)),"v-ac71321c":()=>t.e(220).then(t.bind(null,584)),"v-0268e6ef":()=>t.e(221).then(t.bind(null,585)),"v-2cfe6eb6":()=>t.e(222).then(t.bind(null,586)),"v-35108f42":()=>t.e(223).then(t.bind(null,587)),"v-bc954fe0":()=>t.e(224).then(t.bind(null,588)),"v-0b234e30":()=>t.e(225).then(t.bind(null,589)),"v-70f998d1":()=>t.e(71).then(t.bind(null,590))};function r(e){const n=Object.create(null);return function(t){return n[t]||(n[t]=e(t))}}const s=/-(\w)/g,l=r(e=>e.replace(s,(e,n)=>n?n.toUpperCase():"")),c=/\B([A-Z])/g,d=r(e=>e.replace(c,"-$1").toLowerCase()),u=r(e=>e.charAt(0).toUpperCase()+e.slice(1));function p(e,n){if(!n)return;if(e(n))return e(n);return n.includes("-")?e(u(l(n))):e(u(n))||e(d(n))}const h=Object.assign({},i,o),m=e=>h[e],f=e=>o[e],g=e=>i[e],v=e=>a.a.component(e);function b(e){return p(f,e)}function y(e){return p(g,e)}function w(e){return p(m,e)}function j(e){return p(v,e)}function x(...e){return Promise.all(e.filter(e=>e).map(async e=>{if(!j(e)&&w(e)){const n=await w(e)();a.a.component(e,n.default)}}))}function E(e,n,t){switch(n){case"components":e[n]||(e[n]={}),Object.assign(e[n],t);break;case"mixins":e[n]||(e[n]=[]),e[n].push(...t);break;default:throw new Error("Unknown option name.")}}function k(e,n){const{$localePath:t}=e;return"object"==typeof n&&n[t]?n[t]:n}function C(e,n){"undefined"!=typeof window&&window.__VUEPRESS__&&(window.__VUEPRESS__[e]=n)}},function(e,n,t){"use strict";t.d(n,"a",(function(){return Vt}));
/*!
 * Vue.js v2.7.14
 * (c) 2014-2022 Evan You
 * Released under the MIT License.
 */
var a=Object.freeze({}),i=Array.isArray;function o(e){return null==e}function r(e){return null!=e}function s(e){return!0===e}function l(e){return"string"==typeof e||"number"==typeof e||"symbol"==typeof e||"boolean"==typeof e}function c(e){return"function"==typeof e}function d(e){return null!==e&&"object"==typeof e}var u=Object.prototype.toString;function p(e){return"[object Object]"===u.call(e)}function h(e){return"[object RegExp]"===u.call(e)}function m(e){var n=parseFloat(String(e));return n>=0&&Math.floor(n)===n&&isFinite(e)}function f(e){return r(e)&&"function"==typeof e.then&&"function"==typeof e.catch}function g(e){return null==e?"":Array.isArray(e)||p(e)&&e.toString===u?JSON.stringify(e,null,2):String(e)}function v(e){var n=parseFloat(e);return isNaN(n)?e:n}function b(e,n){for(var t=Object.create(null),a=e.split(","),i=0;i<a.length;i++)t[a[i]]=!0;return n?function(e){return t[e.toLowerCase()]}:function(e){return t[e]}}b("slot,component",!0);var y=b("key,ref,slot,slot-scope,is");function w(e,n){var t=e.length;if(t){if(n===e[t-1])return void(e.length=t-1);var a=e.indexOf(n);if(a>-1)return e.splice(a,1)}}var j=Object.prototype.hasOwnProperty;function x(e,n){return j.call(e,n)}function E(e){var n=Object.create(null);return function(t){return n[t]||(n[t]=e(t))}}var k=/-(\w)/g,C=E((function(e){return e.replace(k,(function(e,n){return n?n.toUpperCase():""}))})),A=E((function(e){return e.charAt(0).toUpperCase()+e.slice(1)})),S=/\B([A-Z])/g,P=E((function(e){return e.replace(S,"-$1").toLowerCase()}));var I=Function.prototype.bind?function(e,n){return e.bind(n)}:function(e,n){function t(t){var a=arguments.length;return a?a>1?e.apply(n,arguments):e.call(n,t):e.call(n)}return t._length=e.length,t};function T(e,n){n=n||0;for(var t=e.length-n,a=new Array(t);t--;)a[t]=e[t+n];return a}function _(e,n){for(var t in n)e[t]=n[t];return e}function B(e){for(var n={},t=0;t<e.length;t++)e[t]&&_(n,e[t]);return n}function F(e,n,t){}var z=function(e,n,t){return!1},R=function(e){return e};function M(e,n){if(e===n)return!0;var t=d(e),a=d(n);if(!t||!a)return!t&&!a&&String(e)===String(n);try{var i=Array.isArray(e),o=Array.isArray(n);if(i&&o)return e.length===n.length&&e.every((function(e,t){return M(e,n[t])}));if(e instanceof Date&&n instanceof Date)return e.getTime()===n.getTime();if(i||o)return!1;var r=Object.keys(e),s=Object.keys(n);return r.length===s.length&&r.every((function(t){return M(e[t],n[t])}))}catch(e){return!1}}function D(e,n){for(var t=0;t<e.length;t++)if(M(e[t],n))return t;return-1}function O(e){var n=!1;return function(){n||(n=!0,e.apply(this,arguments))}}function q(e,n){return e===n?0===e&&1/e!=1/n:e==e||n==n}var J=["component","directive","filter"],U=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch","renderTracked","renderTriggered"],L={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:z,isReservedAttr:z,isUnknownElement:z,getTagNamespace:F,parsePlatformTagName:R,mustUseProp:z,async:!0,_lifecycleHooks:U},N=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function $(e){var n=(e+"").charCodeAt(0);return 36===n||95===n}function H(e,n,t,a){Object.defineProperty(e,n,{value:t,enumerable:!!a,writable:!0,configurable:!0})}var V=new RegExp("[^".concat(N.source,".$_\\d]"));var W="__proto__"in{},K="undefined"!=typeof window,Q=K&&window.navigator.userAgent.toLowerCase(),G=Q&&/msie|trident/.test(Q),Y=Q&&Q.indexOf("msie 9.0")>0,X=Q&&Q.indexOf("edge/")>0;Q&&Q.indexOf("android");var Z=Q&&/iphone|ipad|ipod|ios/.test(Q);Q&&/chrome\/\d+/.test(Q),Q&&/phantomjs/.test(Q);var ee,ne=Q&&Q.match(/firefox\/(\d+)/),te={}.watch,ae=!1;if(K)try{var ie={};Object.defineProperty(ie,"passive",{get:function(){ae=!0}}),window.addEventListener("test-passive",null,ie)}catch(e){}var oe=function(){return void 0===ee&&(ee=!K&&"undefined"!=typeof global&&(global.process&&"server"===global.process.env.VUE_ENV)),ee},re=K&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function se(e){return"function"==typeof e&&/native code/.test(e.toString())}var le,ce="undefined"!=typeof Symbol&&se(Symbol)&&"undefined"!=typeof Reflect&&se(Reflect.ownKeys);le="undefined"!=typeof Set&&se(Set)?Set:function(){function e(){this.set=Object.create(null)}return e.prototype.has=function(e){return!0===this.set[e]},e.prototype.add=function(e){this.set[e]=!0},e.prototype.clear=function(){this.set=Object.create(null)},e}();var de=null;function ue(e){void 0===e&&(e=null),e||de&&de._scope.off(),de=e,e&&e._scope.on()}var pe=function(){function e(e,n,t,a,i,o,r,s){this.tag=e,this.data=n,this.children=t,this.text=a,this.elm=i,this.ns=void 0,this.context=o,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=n&&n.key,this.componentOptions=r,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1}return Object.defineProperty(e.prototype,"child",{get:function(){return this.componentInstance},enumerable:!1,configurable:!0}),e}(),he=function(e){void 0===e&&(e="");var n=new pe;return n.text=e,n.isComment=!0,n};function me(e){return new pe(void 0,void 0,void 0,String(e))}function fe(e){var n=new pe(e.tag,e.data,e.children&&e.children.slice(),e.text,e.elm,e.context,e.componentOptions,e.asyncFactory);return n.ns=e.ns,n.isStatic=e.isStatic,n.key=e.key,n.isComment=e.isComment,n.fnContext=e.fnContext,n.fnOptions=e.fnOptions,n.fnScopeId=e.fnScopeId,n.asyncMeta=e.asyncMeta,n.isCloned=!0,n}var ge=0,ve=[],be=function(){function e(){this._pending=!1,this.id=ge++,this.subs=[]}return e.prototype.addSub=function(e){this.subs.push(e)},e.prototype.removeSub=function(e){this.subs[this.subs.indexOf(e)]=null,this._pending||(this._pending=!0,ve.push(this))},e.prototype.depend=function(n){e.target&&e.target.addDep(this)},e.prototype.notify=function(e){var n=this.subs.filter((function(e){return e}));for(var t=0,a=n.length;t<a;t++){0,n[t].update()}},e}();be.target=null;var ye=[];function we(e){ye.push(e),be.target=e}function je(){ye.pop(),be.target=ye[ye.length-1]}var xe=Array.prototype,Ee=Object.create(xe);["push","pop","shift","unshift","splice","sort","reverse"].forEach((function(e){var n=xe[e];H(Ee,e,(function(){for(var t=[],a=0;a<arguments.length;a++)t[a]=arguments[a];var i,o=n.apply(this,t),r=this.__ob__;switch(e){case"push":case"unshift":i=t;break;case"splice":i=t.slice(2)}return i&&r.observeArray(i),r.dep.notify(),o}))}));var ke=Object.getOwnPropertyNames(Ee),Ce={},Ae=!0;function Se(e){Ae=e}var Pe={notify:F,depend:F,addSub:F,removeSub:F},Ie=function(){function e(e,n,t){if(void 0===n&&(n=!1),void 0===t&&(t=!1),this.value=e,this.shallow=n,this.mock=t,this.dep=t?Pe:new be,this.vmCount=0,H(e,"__ob__",this),i(e)){if(!t)if(W)e.__proto__=Ee;else for(var a=0,o=ke.length;a<o;a++){H(e,s=ke[a],Ee[s])}n||this.observeArray(e)}else{var r=Object.keys(e);for(a=0;a<r.length;a++){var s;_e(e,s=r[a],Ce,void 0,n,t)}}}return e.prototype.observeArray=function(e){for(var n=0,t=e.length;n<t;n++)Te(e[n],!1,this.mock)},e}();function Te(e,n,t){return e&&x(e,"__ob__")&&e.__ob__ instanceof Ie?e.__ob__:!Ae||!t&&oe()||!i(e)&&!p(e)||!Object.isExtensible(e)||e.__v_skip||Oe(e)||e instanceof pe?void 0:new Ie(e,n,t)}function _e(e,n,t,a,o,r){var s=new be,l=Object.getOwnPropertyDescriptor(e,n);if(!l||!1!==l.configurable){var c=l&&l.get,d=l&&l.set;c&&!d||t!==Ce&&2!==arguments.length||(t=e[n]);var u=!o&&Te(t,!1,r);return Object.defineProperty(e,n,{enumerable:!0,configurable:!0,get:function(){var n=c?c.call(e):t;return be.target&&(s.depend(),u&&(u.dep.depend(),i(n)&&ze(n))),Oe(n)&&!o?n.value:n},set:function(n){var a=c?c.call(e):t;if(q(a,n)){if(d)d.call(e,n);else{if(c)return;if(!o&&Oe(a)&&!Oe(n))return void(a.value=n);t=n}u=!o&&Te(n,!1,r),s.notify()}}}),s}}function Be(e,n,t){if(!De(e)){var a=e.__ob__;return i(e)&&m(n)?(e.length=Math.max(e.length,n),e.splice(n,1,t),a&&!a.shallow&&a.mock&&Te(t,!1,!0),t):n in e&&!(n in Object.prototype)?(e[n]=t,t):e._isVue||a&&a.vmCount?t:a?(_e(a.value,n,t,void 0,a.shallow,a.mock),a.dep.notify(),t):(e[n]=t,t)}}function Fe(e,n){if(i(e)&&m(n))e.splice(n,1);else{var t=e.__ob__;e._isVue||t&&t.vmCount||De(e)||x(e,n)&&(delete e[n],t&&t.dep.notify())}}function ze(e){for(var n=void 0,t=0,a=e.length;t<a;t++)(n=e[t])&&n.__ob__&&n.__ob__.dep.depend(),i(n)&&ze(n)}function Re(e){return Me(e,!0),H(e,"__v_isShallow",!0),e}function Me(e,n){if(!De(e)){Te(e,n,oe());0}}function De(e){return!(!e||!e.__v_isReadonly)}function Oe(e){return!(!e||!0!==e.__v_isRef)}function qe(e,n,t){Object.defineProperty(e,t,{enumerable:!0,configurable:!0,get:function(){var e=n[t];if(Oe(e))return e.value;var a=e&&e.__ob__;return a&&a.dep.depend(),e},set:function(e){var a=n[t];Oe(a)&&!Oe(e)?a.value=e:n[t]=e}})}"".concat("watcher"," callback"),"".concat("watcher"," getter"),"".concat("watcher"," cleanup");var Je;var Ue=function(){function e(e){void 0===e&&(e=!1),this.detached=e,this.active=!0,this.effects=[],this.cleanups=[],this.parent=Je,!e&&Je&&(this.index=(Je.scopes||(Je.scopes=[])).push(this)-1)}return e.prototype.run=function(e){if(this.active){var n=Je;try{return Je=this,e()}finally{Je=n}}else 0},e.prototype.on=function(){Je=this},e.prototype.off=function(){Je=this.parent},e.prototype.stop=function(e){if(this.active){var n=void 0,t=void 0;for(n=0,t=this.effects.length;n<t;n++)this.effects[n].teardown();for(n=0,t=this.cleanups.length;n<t;n++)this.cleanups[n]();if(this.scopes)for(n=0,t=this.scopes.length;n<t;n++)this.scopes[n].stop(!0);if(!this.detached&&this.parent&&!e){var a=this.parent.scopes.pop();a&&a!==this&&(this.parent.scopes[this.index]=a,a.index=this.index)}this.parent=void 0,this.active=!1}},e}();function Le(e){var n=e._provided,t=e.$parent&&e.$parent._provided;return t===n?e._provided=Object.create(t):n}var Ne=E((function(e){var n="&"===e.charAt(0),t="~"===(e=n?e.slice(1):e).charAt(0),a="!"===(e=t?e.slice(1):e).charAt(0);return{name:e=a?e.slice(1):e,once:t,capture:a,passive:n}}));function $e(e,n){function t(){var e=t.fns;if(!i(e))return Sn(e,null,arguments,n,"v-on handler");for(var a=e.slice(),o=0;o<a.length;o++)Sn(a[o],null,arguments,n,"v-on handler")}return t.fns=e,t}function He(e,n,t,a,i,r){var l,c,d,u;for(l in e)c=e[l],d=n[l],u=Ne(l),o(c)||(o(d)?(o(c.fns)&&(c=e[l]=$e(c,r)),s(u.once)&&(c=e[l]=i(u.name,c,u.capture)),t(u.name,c,u.capture,u.passive,u.params)):c!==d&&(d.fns=c,e[l]=d));for(l in n)o(e[l])&&a((u=Ne(l)).name,n[l],u.capture)}function Ve(e,n,t){var a;e instanceof pe&&(e=e.data.hook||(e.data.hook={}));var i=e[n];function l(){t.apply(this,arguments),w(a.fns,l)}o(i)?a=$e([l]):r(i.fns)&&s(i.merged)?(a=i).fns.push(l):a=$e([i,l]),a.merged=!0,e[n]=a}function We(e,n,t,a,i){if(r(n)){if(x(n,t))return e[t]=n[t],i||delete n[t],!0;if(x(n,a))return e[t]=n[a],i||delete n[a],!0}return!1}function Ke(e){return l(e)?[me(e)]:i(e)?function e(n,t){var a,c,d,u,p=[];for(a=0;a<n.length;a++)o(c=n[a])||"boolean"==typeof c||(d=p.length-1,u=p[d],i(c)?c.length>0&&(Qe((c=e(c,"".concat(t||"","_").concat(a)))[0])&&Qe(u)&&(p[d]=me(u.text+c[0].text),c.shift()),p.push.apply(p,c)):l(c)?Qe(u)?p[d]=me(u.text+c):""!==c&&p.push(me(c)):Qe(c)&&Qe(u)?p[d]=me(u.text+c.text):(s(n._isVList)&&r(c.tag)&&o(c.key)&&r(t)&&(c.key="__vlist".concat(t,"_").concat(a,"__")),p.push(c)));return p}(e):void 0}function Qe(e){return r(e)&&r(e.text)&&!1===e.isComment}function Ge(e,n){var t,a,o,s,l=null;if(i(e)||"string"==typeof e)for(l=new Array(e.length),t=0,a=e.length;t<a;t++)l[t]=n(e[t],t);else if("number"==typeof e)for(l=new Array(e),t=0;t<e;t++)l[t]=n(t+1,t);else if(d(e))if(ce&&e[Symbol.iterator]){l=[];for(var c=e[Symbol.iterator](),u=c.next();!u.done;)l.push(n(u.value,l.length)),u=c.next()}else for(o=Object.keys(e),l=new Array(o.length),t=0,a=o.length;t<a;t++)s=o[t],l[t]=n(e[s],s,t);return r(l)||(l=[]),l._isVList=!0,l}function Ye(e,n,t,a){var i,o=this.$scopedSlots[e];o?(t=t||{},a&&(t=_(_({},a),t)),i=o(t)||(c(n)?n():n)):i=this.$slots[e]||(c(n)?n():n);var r=t&&t.slot;return r?this.$createElement("template",{slot:r},i):i}function Xe(e){return Tt(this.$options,"filters",e,!0)||R}function Ze(e,n){return i(e)?-1===e.indexOf(n):e!==n}function en(e,n,t,a,i){var o=L.keyCodes[n]||t;return i&&a&&!L.keyCodes[n]?Ze(i,a):o?Ze(o,e):a?P(a)!==n:void 0===e}function nn(e,n,t,a,o){if(t)if(d(t)){i(t)&&(t=B(t));var r=void 0,s=function(i){if("class"===i||"style"===i||y(i))r=e;else{var s=e.attrs&&e.attrs.type;r=a||L.mustUseProp(n,s,i)?e.domProps||(e.domProps={}):e.attrs||(e.attrs={})}var l=C(i),c=P(i);l in r||c in r||(r[i]=t[i],o&&((e.on||(e.on={}))["update:".concat(i)]=function(e){t[i]=e}))};for(var l in t)s(l)}else;return e}function tn(e,n){var t=this._staticTrees||(this._staticTrees=[]),a=t[e];return a&&!n||on(a=t[e]=this.$options.staticRenderFns[e].call(this._renderProxy,this._c,this),"__static__".concat(e),!1),a}function an(e,n,t){return on(e,"__once__".concat(n).concat(t?"_".concat(t):""),!0),e}function on(e,n,t){if(i(e))for(var a=0;a<e.length;a++)e[a]&&"string"!=typeof e[a]&&rn(e[a],"".concat(n,"_").concat(a),t);else rn(e,n,t)}function rn(e,n,t){e.isStatic=!0,e.key=n,e.isOnce=t}function sn(e,n){if(n)if(p(n)){var t=e.on=e.on?_({},e.on):{};for(var a in n){var i=t[a],o=n[a];t[a]=i?[].concat(i,o):o}}else;return e}function ln(e,n,t,a){n=n||{$stable:!t};for(var o=0;o<e.length;o++){var r=e[o];i(r)?ln(r,n,t):r&&(r.proxy&&(r.fn.proxy=!0),n[r.key]=r.fn)}return a&&(n.$key=a),n}function cn(e,n){for(var t=0;t<n.length;t+=2){var a=n[t];"string"==typeof a&&a&&(e[n[t]]=n[t+1])}return e}function dn(e,n){return"string"==typeof e?n+e:e}function un(e){e._o=an,e._n=v,e._s=g,e._l=Ge,e._t=Ye,e._q=M,e._i=D,e._m=tn,e._f=Xe,e._k=en,e._b=nn,e._v=me,e._e=he,e._u=ln,e._g=sn,e._d=cn,e._p=dn}function pn(e,n){if(!e||!e.length)return{};for(var t={},a=0,i=e.length;a<i;a++){var o=e[a],r=o.data;if(r&&r.attrs&&r.attrs.slot&&delete r.attrs.slot,o.context!==n&&o.fnContext!==n||!r||null==r.slot)(t.default||(t.default=[])).push(o);else{var s=r.slot,l=t[s]||(t[s]=[]);"template"===o.tag?l.push.apply(l,o.children||[]):l.push(o)}}for(var c in t)t[c].every(hn)&&delete t[c];return t}function hn(e){return e.isComment&&!e.asyncFactory||" "===e.text}function mn(e){return e.isComment&&e.asyncFactory}function fn(e,n,t,i){var o,r=Object.keys(t).length>0,s=n?!!n.$stable:!r,l=n&&n.$key;if(n){if(n._normalized)return n._normalized;if(s&&i&&i!==a&&l===i.$key&&!r&&!i.$hasNormal)return i;for(var c in o={},n)n[c]&&"$"!==c[0]&&(o[c]=gn(e,t,c,n[c]))}else o={};for(var d in t)d in o||(o[d]=vn(t,d));return n&&Object.isExtensible(n)&&(n._normalized=o),H(o,"$stable",s),H(o,"$key",l),H(o,"$hasNormal",r),o}function gn(e,n,t,a){var o=function(){var n=de;ue(e);var t=arguments.length?a.apply(null,arguments):a({}),o=(t=t&&"object"==typeof t&&!i(t)?[t]:Ke(t))&&t[0];return ue(n),t&&(!o||1===t.length&&o.isComment&&!mn(o))?void 0:t};return a.proxy&&Object.defineProperty(n,t,{get:o,enumerable:!0,configurable:!0}),o}function vn(e,n){return function(){return e[n]}}function bn(e){return{get attrs(){if(!e._attrsProxy){var n=e._attrsProxy={};H(n,"_v_attr_proxy",!0),yn(n,e.$attrs,a,e,"$attrs")}return e._attrsProxy},get listeners(){e._listenersProxy||yn(e._listenersProxy={},e.$listeners,a,e,"$listeners");return e._listenersProxy},get slots(){return function(e){e._slotsProxy||jn(e._slotsProxy={},e.$scopedSlots);return e._slotsProxy}(e)},emit:I(e.$emit,e),expose:function(n){n&&Object.keys(n).forEach((function(t){return qe(e,n,t)}))}}}function yn(e,n,t,a,i){var o=!1;for(var r in n)r in e?n[r]!==t[r]&&(o=!0):(o=!0,wn(e,r,a,i));for(var r in e)r in n||(o=!0,delete e[r]);return o}function wn(e,n,t,a){Object.defineProperty(e,n,{enumerable:!0,configurable:!0,get:function(){return t[a][n]}})}function jn(e,n){for(var t in n)e[t]=n[t];for(var t in e)t in n||delete e[t]}var xn=null;function En(e,n){return(e.__esModule||ce&&"Module"===e[Symbol.toStringTag])&&(e=e.default),d(e)?n.extend(e):e}function kn(e){if(i(e))for(var n=0;n<e.length;n++){var t=e[n];if(r(t)&&(r(t.componentOptions)||mn(t)))return t}}function Cn(e,n,t,a,u,p){return(i(t)||l(t))&&(u=a,a=t,t=void 0),s(p)&&(u=2),function(e,n,t,a,l){if(r(t)&&r(t.__ob__))return he();r(t)&&r(t.is)&&(n=t.is);if(!n)return he();0;i(a)&&c(a[0])&&((t=t||{}).scopedSlots={default:a[0]},a.length=0);2===l?a=Ke(a):1===l&&(a=function(e){for(var n=0;n<e.length;n++)if(i(e[n]))return Array.prototype.concat.apply([],e);return e}(a));var u,p;if("string"==typeof n){var h=void 0;p=e.$vnode&&e.$vnode.ns||L.getTagNamespace(n),u=L.isReservedTag(n)?new pe(L.parsePlatformTagName(n),t,a,void 0,void 0,e):t&&t.pre||!r(h=Tt(e.$options,"components",n))?new pe(n,t,a,void 0,void 0,e):wt(h,t,e,a,n)}else u=wt(n,t,e,a);return i(u)?u:r(u)?(r(p)&&function e(n,t,a){n.ns=t,"foreignObject"===n.tag&&(t=void 0,a=!0);if(r(n.children))for(var i=0,l=n.children.length;i<l;i++){var c=n.children[i];r(c.tag)&&(o(c.ns)||s(a)&&"svg"!==c.tag)&&e(c,t,a)}}(u,p),r(t)&&function(e){d(e.style)&&Ln(e.style);d(e.class)&&Ln(e.class)}(t),u):he()}(e,n,t,a,u)}function An(e,n,t){we();try{if(n)for(var a=n;a=a.$parent;){var i=a.$options.errorCaptured;if(i)for(var o=0;o<i.length;o++)try{if(!1===i[o].call(a,e,n,t))return}catch(e){Pn(e,a,"errorCaptured hook")}}Pn(e,n,t)}finally{je()}}function Sn(e,n,t,a,i){var o;try{(o=t?e.apply(n,t):e.call(n))&&!o._isVue&&f(o)&&!o._handled&&(o.catch((function(e){return An(e,a,i+" (Promise/async)")})),o._handled=!0)}catch(e){An(e,a,i)}return o}function Pn(e,n,t){if(L.errorHandler)try{return L.errorHandler.call(null,e,n,t)}catch(n){n!==e&&In(n,null,"config.errorHandler")}In(e,n,t)}function In(e,n,t){if(!K||"undefined"==typeof console)throw e;console.error(e)}var Tn,_n=!1,Bn=[],Fn=!1;function zn(){Fn=!1;var e=Bn.slice(0);Bn.length=0;for(var n=0;n<e.length;n++)e[n]()}if("undefined"!=typeof Promise&&se(Promise)){var Rn=Promise.resolve();Tn=function(){Rn.then(zn),Z&&setTimeout(F)},_n=!0}else if(G||"undefined"==typeof MutationObserver||!se(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())Tn="undefined"!=typeof setImmediate&&se(setImmediate)?function(){setImmediate(zn)}:function(){setTimeout(zn,0)};else{var Mn=1,Dn=new MutationObserver(zn),On=document.createTextNode(String(Mn));Dn.observe(On,{characterData:!0}),Tn=function(){Mn=(Mn+1)%2,On.data=String(Mn)},_n=!0}function qn(e,n){var t;if(Bn.push((function(){if(e)try{e.call(n)}catch(e){An(e,n,"nextTick")}else t&&t(n)})),Fn||(Fn=!0,Tn()),!e&&"undefined"!=typeof Promise)return new Promise((function(e){t=e}))}function Jn(e){return function(n,t){if(void 0===t&&(t=de),t)return function(e,n,t){var a=e.$options;a[n]=At(a[n],t)}(t,e,n)}}Jn("beforeMount"),Jn("mounted"),Jn("beforeUpdate"),Jn("updated"),Jn("beforeDestroy"),Jn("destroyed"),Jn("activated"),Jn("deactivated"),Jn("serverPrefetch"),Jn("renderTracked"),Jn("renderTriggered"),Jn("errorCaptured");var Un=new le;function Ln(e){return function e(n,t){var a,o,r=i(n);if(!r&&!d(n)||n.__v_skip||Object.isFrozen(n)||n instanceof pe)return;if(n.__ob__){var s=n.__ob__.dep.id;if(t.has(s))return;t.add(s)}if(r)for(a=n.length;a--;)e(n[a],t);else if(Oe(n))e(n.value,t);else for(o=Object.keys(n),a=o.length;a--;)e(n[o[a]],t)}(e,Un),Un.clear(),e}var Nn,$n=0,Hn=function(){function e(e,n,t,a,i){var o,r;o=this,void 0===(r=Je&&!Je._vm?Je:e?e._scope:void 0)&&(r=Je),r&&r.active&&r.effects.push(o),(this.vm=e)&&i&&(e._watcher=this),a?(this.deep=!!a.deep,this.user=!!a.user,this.lazy=!!a.lazy,this.sync=!!a.sync,this.before=a.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=t,this.id=++$n,this.active=!0,this.post=!1,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new le,this.newDepIds=new le,this.expression="",c(n)?this.getter=n:(this.getter=function(e){if(!V.test(e)){var n=e.split(".");return function(e){for(var t=0;t<n.length;t++){if(!e)return;e=e[n[t]]}return e}}}(n),this.getter||(this.getter=F)),this.value=this.lazy?void 0:this.get()}return e.prototype.get=function(){var e;we(this);var n=this.vm;try{e=this.getter.call(n,n)}catch(e){if(!this.user)throw e;An(e,n,'getter for watcher "'.concat(this.expression,'"'))}finally{this.deep&&Ln(e),je(),this.cleanupDeps()}return e},e.prototype.addDep=function(e){var n=e.id;this.newDepIds.has(n)||(this.newDepIds.add(n),this.newDeps.push(e),this.depIds.has(n)||e.addSub(this))},e.prototype.cleanupDeps=function(){for(var e=this.deps.length;e--;){var n=this.deps[e];this.newDepIds.has(n.id)||n.removeSub(this)}var t=this.depIds;this.depIds=this.newDepIds,this.newDepIds=t,this.newDepIds.clear(),t=this.deps,this.deps=this.newDeps,this.newDeps=t,this.newDeps.length=0},e.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():pt(this)},e.prototype.run=function(){if(this.active){var e=this.get();if(e!==this.value||d(e)||this.deep){var n=this.value;if(this.value=e,this.user){var t='callback for watcher "'.concat(this.expression,'"');Sn(this.cb,this.vm,[e,n],this.vm,t)}else this.cb.call(this.vm,e,n)}}},e.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},e.prototype.depend=function(){for(var e=this.deps.length;e--;)this.deps[e].depend()},e.prototype.teardown=function(){if(this.vm&&!this.vm._isBeingDestroyed&&w(this.vm._scope.effects,this),this.active){for(var e=this.deps.length;e--;)this.deps[e].removeSub(this);this.active=!1,this.onStop&&this.onStop()}},e}();function Vn(e,n){Nn.$on(e,n)}function Wn(e,n){Nn.$off(e,n)}function Kn(e,n){var t=Nn;return function a(){var i=n.apply(null,arguments);null!==i&&t.$off(e,a)}}function Qn(e,n,t){Nn=e,He(n,t||{},Vn,Wn,Kn,e),Nn=void 0}var Gn=null;function Yn(e){var n=Gn;return Gn=e,function(){Gn=n}}function Xn(e){for(;e&&(e=e.$parent);)if(e._inactive)return!0;return!1}function Zn(e,n){if(n){if(e._directInactive=!1,Xn(e))return}else if(e._directInactive)return;if(e._inactive||null===e._inactive){e._inactive=!1;for(var t=0;t<e.$children.length;t++)Zn(e.$children[t]);et(e,"activated")}}function et(e,n,t,a){void 0===a&&(a=!0),we();var i=de;a&&ue(e);var o=e.$options[n],r="".concat(n," hook");if(o)for(var s=0,l=o.length;s<l;s++)Sn(o[s],e,t||null,e,r);e._hasHookEvent&&e.$emit("hook:"+n),a&&ue(i),je()}var nt=[],tt=[],at={},it=!1,ot=!1,rt=0;var st=0,lt=Date.now;if(K&&!G){var ct=window.performance;ct&&"function"==typeof ct.now&&lt()>document.createEvent("Event").timeStamp&&(lt=function(){return ct.now()})}var dt=function(e,n){if(e.post){if(!n.post)return 1}else if(n.post)return-1;return e.id-n.id};function ut(){var e,n;for(st=lt(),ot=!0,nt.sort(dt),rt=0;rt<nt.length;rt++)(e=nt[rt]).before&&e.before(),n=e.id,at[n]=null,e.run();var t=tt.slice(),a=nt.slice();rt=nt.length=tt.length=0,at={},it=ot=!1,function(e){for(var n=0;n<e.length;n++)e[n]._inactive=!0,Zn(e[n],!0)}(t),function(e){var n=e.length;for(;n--;){var t=e[n],a=t.vm;a&&a._watcher===t&&a._isMounted&&!a._isDestroyed&&et(a,"updated")}}(a),function(){for(var e=0;e<ve.length;e++){var n=ve[e];n.subs=n.subs.filter((function(e){return e})),n._pending=!1}ve.length=0}(),re&&L.devtools&&re.emit("flush")}function pt(e){var n=e.id;if(null==at[n]&&(e!==be.target||!e.noRecurse)){if(at[n]=!0,ot){for(var t=nt.length-1;t>rt&&nt[t].id>e.id;)t--;nt.splice(t+1,0,e)}else nt.push(e);it||(it=!0,qn(ut))}}function ht(e,n){if(e){for(var t=Object.create(null),a=ce?Reflect.ownKeys(e):Object.keys(e),i=0;i<a.length;i++){var o=a[i];if("__ob__"!==o){var r=e[o].from;if(r in n._provided)t[o]=n._provided[r];else if("default"in e[o]){var s=e[o].default;t[o]=c(s)?s.call(n):s}else 0}}return t}}function mt(e,n,t,o,r){var l,c=this,d=r.options;x(o,"_uid")?(l=Object.create(o))._original=o:(l=o,o=o._original);var u=s(d._compiled),p=!u;this.data=e,this.props=n,this.children=t,this.parent=o,this.listeners=e.on||a,this.injections=ht(d.inject,o),this.slots=function(){return c.$slots||fn(o,e.scopedSlots,c.$slots=pn(t,o)),c.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return fn(o,e.scopedSlots,this.slots())}}),u&&(this.$options=d,this.$slots=this.slots(),this.$scopedSlots=fn(o,e.scopedSlots,this.$slots)),d._scopeId?this._c=function(e,n,t,a){var r=Cn(l,e,n,t,a,p);return r&&!i(r)&&(r.fnScopeId=d._scopeId,r.fnContext=o),r}:this._c=function(e,n,t,a){return Cn(l,e,n,t,a,p)}}function ft(e,n,t,a,i){var o=fe(e);return o.fnContext=t,o.fnOptions=a,n.slot&&((o.data||(o.data={})).slot=n.slot),o}function gt(e,n){for(var t in n)e[C(t)]=n[t]}function vt(e){return e.name||e.__name||e._componentTag}un(mt.prototype);var bt={init:function(e,n){if(e.componentInstance&&!e.componentInstance._isDestroyed&&e.data.keepAlive){var t=e;bt.prepatch(t,t)}else{(e.componentInstance=function(e,n){var t={_isComponent:!0,_parentVnode:e,parent:n},a=e.data.inlineTemplate;r(a)&&(t.render=a.render,t.staticRenderFns=a.staticRenderFns);return new e.componentOptions.Ctor(t)}(e,Gn)).$mount(n?e.elm:void 0,n)}},prepatch:function(e,n){var t=n.componentOptions;!function(e,n,t,i,o){var r=i.data.scopedSlots,s=e.$scopedSlots,l=!!(r&&!r.$stable||s!==a&&!s.$stable||r&&e.$scopedSlots.$key!==r.$key||!r&&e.$scopedSlots.$key),c=!!(o||e.$options._renderChildren||l),d=e.$vnode;e.$options._parentVnode=i,e.$vnode=i,e._vnode&&(e._vnode.parent=i),e.$options._renderChildren=o;var u=i.data.attrs||a;e._attrsProxy&&yn(e._attrsProxy,u,d.data&&d.data.attrs||a,e,"$attrs")&&(c=!0),e.$attrs=u,t=t||a;var p=e.$options._parentListeners;if(e._listenersProxy&&yn(e._listenersProxy,t,p||a,e,"$listeners"),e.$listeners=e.$options._parentListeners=t,Qn(e,t,p),n&&e.$options.props){Se(!1);for(var h=e._props,m=e.$options._propKeys||[],f=0;f<m.length;f++){var g=m[f],v=e.$options.props;h[g]=_t(g,v,n,e)}Se(!0),e.$options.propsData=n}c&&(e.$slots=pn(o,i.context),e.$forceUpdate())}(n.componentInstance=e.componentInstance,t.propsData,t.listeners,n,t.children)},insert:function(e){var n,t=e.context,a=e.componentInstance;a._isMounted||(a._isMounted=!0,et(a,"mounted")),e.data.keepAlive&&(t._isMounted?((n=a)._inactive=!1,tt.push(n)):Zn(a,!0))},destroy:function(e){var n=e.componentInstance;n._isDestroyed||(e.data.keepAlive?function e(n,t){if(!(t&&(n._directInactive=!0,Xn(n))||n._inactive)){n._inactive=!0;for(var a=0;a<n.$children.length;a++)e(n.$children[a]);et(n,"deactivated")}}(n,!0):n.$destroy())}},yt=Object.keys(bt);function wt(e,n,t,l,c){if(!o(e)){var u=t.$options._base;if(d(e)&&(e=u.extend(e)),"function"==typeof e){var p;if(o(e.cid)&&void 0===(e=function(e,n){if(s(e.error)&&r(e.errorComp))return e.errorComp;if(r(e.resolved))return e.resolved;var t=xn;if(t&&r(e.owners)&&-1===e.owners.indexOf(t)&&e.owners.push(t),s(e.loading)&&r(e.loadingComp))return e.loadingComp;if(t&&!r(e.owners)){var a=e.owners=[t],i=!0,l=null,c=null;t.$on("hook:destroyed",(function(){return w(a,t)}));var u=function(e){for(var n=0,t=a.length;n<t;n++)a[n].$forceUpdate();e&&(a.length=0,null!==l&&(clearTimeout(l),l=null),null!==c&&(clearTimeout(c),c=null))},p=O((function(t){e.resolved=En(t,n),i?a.length=0:u(!0)})),h=O((function(n){r(e.errorComp)&&(e.error=!0,u(!0))})),m=e(p,h);return d(m)&&(f(m)?o(e.resolved)&&m.then(p,h):f(m.component)&&(m.component.then(p,h),r(m.error)&&(e.errorComp=En(m.error,n)),r(m.loading)&&(e.loadingComp=En(m.loading,n),0===m.delay?e.loading=!0:l=setTimeout((function(){l=null,o(e.resolved)&&o(e.error)&&(e.loading=!0,u(!1))}),m.delay||200)),r(m.timeout)&&(c=setTimeout((function(){c=null,o(e.resolved)&&h(null)}),m.timeout)))),i=!1,e.loading?e.loadingComp:e.resolved}}(p=e,u)))return function(e,n,t,a,i){var o=he();return o.asyncFactory=e,o.asyncMeta={data:n,context:t,children:a,tag:i},o}(p,n,t,l,c);n=n||{},Ht(e),r(n.model)&&function(e,n){var t=e.model&&e.model.prop||"value",a=e.model&&e.model.event||"input";(n.attrs||(n.attrs={}))[t]=n.model.value;var o=n.on||(n.on={}),s=o[a],l=n.model.callback;r(s)?(i(s)?-1===s.indexOf(l):s!==l)&&(o[a]=[l].concat(s)):o[a]=l}(e.options,n);var h=function(e,n,t){var a=n.options.props;if(!o(a)){var i={},s=e.attrs,l=e.props;if(r(s)||r(l))for(var c in a){var d=P(c);We(i,l,c,d,!0)||We(i,s,c,d,!1)}return i}}(n,e);if(s(e.options.functional))return function(e,n,t,o,s){var l=e.options,c={},d=l.props;if(r(d))for(var u in d)c[u]=_t(u,d,n||a);else r(t.attrs)&&gt(c,t.attrs),r(t.props)&&gt(c,t.props);var p=new mt(t,c,s,o,e),h=l.render.call(null,p._c,p);if(h instanceof pe)return ft(h,t,p.parent,l,p);if(i(h)){for(var m=Ke(h)||[],f=new Array(m.length),g=0;g<m.length;g++)f[g]=ft(m[g],t,p.parent,l,p);return f}}(e,h,n,t,l);var m=n.on;if(n.on=n.nativeOn,s(e.options.abstract)){var g=n.slot;n={},g&&(n.slot=g)}!function(e){for(var n=e.hook||(e.hook={}),t=0;t<yt.length;t++){var a=yt[t],i=n[a],o=bt[a];i===o||i&&i._merged||(n[a]=i?jt(o,i):o)}}(n);var v=vt(e.options)||c;return new pe("vue-component-".concat(e.cid).concat(v?"-".concat(v):""),n,void 0,void 0,void 0,t,{Ctor:e,propsData:h,listeners:m,tag:c,children:l},p)}}}function jt(e,n){var t=function(t,a){e(t,a),n(t,a)};return t._merged=!0,t}var xt=F,Et=L.optionMergeStrategies;function kt(e,n,t){if(void 0===t&&(t=!0),!n)return e;for(var a,i,o,r=ce?Reflect.ownKeys(n):Object.keys(n),s=0;s<r.length;s++)"__ob__"!==(a=r[s])&&(i=e[a],o=n[a],t&&x(e,a)?i!==o&&p(i)&&p(o)&&kt(i,o):Be(e,a,o));return e}function Ct(e,n,t){return t?function(){var a=c(n)?n.call(t,t):n,i=c(e)?e.call(t,t):e;return a?kt(a,i):i}:n?e?function(){return kt(c(n)?n.call(this,this):n,c(e)?e.call(this,this):e)}:n:e}function At(e,n){var t=n?e?e.concat(n):i(n)?n:[n]:e;return t?function(e){for(var n=[],t=0;t<e.length;t++)-1===n.indexOf(e[t])&&n.push(e[t]);return n}(t):t}function St(e,n,t,a){var i=Object.create(e||null);return n?_(i,n):i}Et.data=function(e,n,t){return t?Ct(e,n,t):n&&"function"!=typeof n?e:Ct(e,n)},U.forEach((function(e){Et[e]=At})),J.forEach((function(e){Et[e+"s"]=St})),Et.watch=function(e,n,t,a){if(e===te&&(e=void 0),n===te&&(n=void 0),!n)return Object.create(e||null);if(!e)return n;var o={};for(var r in _(o,e),n){var s=o[r],l=n[r];s&&!i(s)&&(s=[s]),o[r]=s?s.concat(l):i(l)?l:[l]}return o},Et.props=Et.methods=Et.inject=Et.computed=function(e,n,t,a){if(!e)return n;var i=Object.create(null);return _(i,e),n&&_(i,n),i},Et.provide=function(e,n){return e?function(){var t=Object.create(null);return kt(t,c(e)?e.call(this):e),n&&kt(t,c(n)?n.call(this):n,!1),t}:n};var Pt=function(e,n){return void 0===n?e:n};function It(e,n,t){if(c(n)&&(n=n.options),function(e,n){var t=e.props;if(t){var a,o,r={};if(i(t))for(a=t.length;a--;)"string"==typeof(o=t[a])&&(r[C(o)]={type:null});else if(p(t))for(var s in t)o=t[s],r[C(s)]=p(o)?o:{type:o};else 0;e.props=r}}(n),function(e,n){var t=e.inject;if(t){var a=e.inject={};if(i(t))for(var o=0;o<t.length;o++)a[t[o]]={from:t[o]};else if(p(t))for(var r in t){var s=t[r];a[r]=p(s)?_({from:r},s):{from:s}}else 0}}(n),function(e){var n=e.directives;if(n)for(var t in n){var a=n[t];c(a)&&(n[t]={bind:a,update:a})}}(n),!n._base&&(n.extends&&(e=It(e,n.extends,t)),n.mixins))for(var a=0,o=n.mixins.length;a<o;a++)e=It(e,n.mixins[a],t);var r,s={};for(r in e)l(r);for(r in n)x(e,r)||l(r);function l(a){var i=Et[a]||Pt;s[a]=i(e[a],n[a],t,a)}return s}function Tt(e,n,t,a){if("string"==typeof t){var i=e[n];if(x(i,t))return i[t];var o=C(t);if(x(i,o))return i[o];var r=A(o);return x(i,r)?i[r]:i[t]||i[o]||i[r]}}function _t(e,n,t,a){var i=n[e],o=!x(t,e),r=t[e],s=Rt(Boolean,i.type);if(s>-1)if(o&&!x(i,"default"))r=!1;else if(""===r||r===P(e)){var l=Rt(String,i.type);(l<0||s<l)&&(r=!0)}if(void 0===r){r=function(e,n,t){if(!x(n,"default"))return;var a=n.default;0;if(e&&e.$options.propsData&&void 0===e.$options.propsData[t]&&void 0!==e._props[t])return e._props[t];return c(a)&&"Function"!==Ft(n.type)?a.call(e):a}(a,i,e);var d=Ae;Se(!0),Te(r),Se(d)}return r}var Bt=/^\s*function (\w+)/;function Ft(e){var n=e&&e.toString().match(Bt);return n?n[1]:""}function zt(e,n){return Ft(e)===Ft(n)}function Rt(e,n){if(!i(n))return zt(n,e)?0:-1;for(var t=0,a=n.length;t<a;t++)if(zt(n[t],e))return t;return-1}var Mt={enumerable:!0,configurable:!0,get:F,set:F};function Dt(e,n,t){Mt.get=function(){return this[n][t]},Mt.set=function(e){this[n][t]=e},Object.defineProperty(e,t,Mt)}function Ot(e){var n=e.$options;if(n.props&&function(e,n){var t=e.$options.propsData||{},a=e._props=Re({}),i=e.$options._propKeys=[];e.$parent&&Se(!1);var o=function(o){i.push(o);var r=_t(o,n,t,e);_e(a,o,r),o in e||Dt(e,"_props",o)};for(var r in n)o(r);Se(!0)}(e,n.props),function(e){var n=e.$options,t=n.setup;if(t){var a=e._setupContext=bn(e);ue(e),we();var i=Sn(t,null,[e._props||Re({}),a],e,"setup");if(je(),ue(),c(i))n.render=i;else if(d(i))if(e._setupState=i,i.__sfc){var o=e._setupProxy={};for(var r in i)"__sfc"!==r&&qe(o,i,r)}else for(var r in i)$(r)||qe(e,i,r);else 0}}(e),n.methods&&function(e,n){e.$options.props;for(var t in n)e[t]="function"!=typeof n[t]?F:I(n[t],e)}(e,n.methods),n.data)!function(e){var n=e.$options.data;p(n=e._data=c(n)?function(e,n){we();try{return e.call(n,n)}catch(e){return An(e,n,"data()"),{}}finally{je()}}(n,e):n||{})||(n={});var t=Object.keys(n),a=e.$options.props,i=(e.$options.methods,t.length);for(;i--;){var o=t[i];0,a&&x(a,o)||$(o)||Dt(e,"_data",o)}var r=Te(n);r&&r.vmCount++}(e);else{var t=Te(e._data={});t&&t.vmCount++}n.computed&&function(e,n){var t=e._computedWatchers=Object.create(null),a=oe();for(var i in n){var o=n[i],r=c(o)?o:o.get;0,a||(t[i]=new Hn(e,r||F,F,qt)),i in e||Jt(e,i,o)}}(e,n.computed),n.watch&&n.watch!==te&&function(e,n){for(var t in n){var a=n[t];if(i(a))for(var o=0;o<a.length;o++)Nt(e,t,a[o]);else Nt(e,t,a)}}(e,n.watch)}var qt={lazy:!0};function Jt(e,n,t){var a=!oe();c(t)?(Mt.get=a?Ut(n):Lt(t),Mt.set=F):(Mt.get=t.get?a&&!1!==t.cache?Ut(n):Lt(t.get):F,Mt.set=t.set||F),Object.defineProperty(e,n,Mt)}function Ut(e){return function(){var n=this._computedWatchers&&this._computedWatchers[e];if(n)return n.dirty&&n.evaluate(),be.target&&n.depend(),n.value}}function Lt(e){return function(){return e.call(this,this)}}function Nt(e,n,t,a){return p(t)&&(a=t,t=t.handler),"string"==typeof t&&(t=e[t]),e.$watch(n,t,a)}var $t=0;function Ht(e){var n=e.options;if(e.super){var t=Ht(e.super);if(t!==e.superOptions){e.superOptions=t;var a=function(e){var n,t=e.options,a=e.sealedOptions;for(var i in t)t[i]!==a[i]&&(n||(n={}),n[i]=t[i]);return n}(e);a&&_(e.extendOptions,a),(n=e.options=It(t,e.extendOptions)).name&&(n.components[n.name]=e)}}return n}function Vt(e){this._init(e)}function Wt(e){e.cid=0;var n=1;e.extend=function(e){e=e||{};var t=this,a=t.cid,i=e._Ctor||(e._Ctor={});if(i[a])return i[a];var o=vt(e)||vt(t.options);var r=function(e){this._init(e)};return(r.prototype=Object.create(t.prototype)).constructor=r,r.cid=n++,r.options=It(t.options,e),r.super=t,r.options.props&&function(e){var n=e.options.props;for(var t in n)Dt(e.prototype,"_props",t)}(r),r.options.computed&&function(e){var n=e.options.computed;for(var t in n)Jt(e.prototype,t,n[t])}(r),r.extend=t.extend,r.mixin=t.mixin,r.use=t.use,J.forEach((function(e){r[e]=t[e]})),o&&(r.options.components[o]=r),r.superOptions=t.options,r.extendOptions=e,r.sealedOptions=_({},r.options),i[a]=r,r}}function Kt(e){return e&&(vt(e.Ctor.options)||e.tag)}function Qt(e,n){return i(e)?e.indexOf(n)>-1:"string"==typeof e?e.split(",").indexOf(n)>-1:!!h(e)&&e.test(n)}function Gt(e,n){var t=e.cache,a=e.keys,i=e._vnode;for(var o in t){var r=t[o];if(r){var s=r.name;s&&!n(s)&&Yt(t,o,a,i)}}}function Yt(e,n,t,a){var i=e[n];!i||a&&i.tag===a.tag||i.componentInstance.$destroy(),e[n]=null,w(t,n)}!function(e){e.prototype._init=function(e){var n=this;n._uid=$t++,n._isVue=!0,n.__v_skip=!0,n._scope=new Ue(!0),n._scope._vm=!0,e&&e._isComponent?function(e,n){var t=e.$options=Object.create(e.constructor.options),a=n._parentVnode;t.parent=n.parent,t._parentVnode=a;var i=a.componentOptions;t.propsData=i.propsData,t._parentListeners=i.listeners,t._renderChildren=i.children,t._componentTag=i.tag,n.render&&(t.render=n.render,t.staticRenderFns=n.staticRenderFns)}(n,e):n.$options=It(Ht(n.constructor),e||{},n),n._renderProxy=n,n._self=n,function(e){var n=e.$options,t=n.parent;if(t&&!n.abstract){for(;t.$options.abstract&&t.$parent;)t=t.$parent;t.$children.push(e)}e.$parent=t,e.$root=t?t.$root:e,e.$children=[],e.$refs={},e._provided=t?t._provided:Object.create(null),e._watcher=null,e._inactive=null,e._directInactive=!1,e._isMounted=!1,e._isDestroyed=!1,e._isBeingDestroyed=!1}(n),function(e){e._events=Object.create(null),e._hasHookEvent=!1;var n=e.$options._parentListeners;n&&Qn(e,n)}(n),function(e){e._vnode=null,e._staticTrees=null;var n=e.$options,t=e.$vnode=n._parentVnode,i=t&&t.context;e.$slots=pn(n._renderChildren,i),e.$scopedSlots=t?fn(e.$parent,t.data.scopedSlots,e.$slots):a,e._c=function(n,t,a,i){return Cn(e,n,t,a,i,!1)},e.$createElement=function(n,t,a,i){return Cn(e,n,t,a,i,!0)};var o=t&&t.data;_e(e,"$attrs",o&&o.attrs||a,null,!0),_e(e,"$listeners",n._parentListeners||a,null,!0)}(n),et(n,"beforeCreate",void 0,!1),function(e){var n=ht(e.$options.inject,e);n&&(Se(!1),Object.keys(n).forEach((function(t){_e(e,t,n[t])})),Se(!0))}(n),Ot(n),function(e){var n=e.$options.provide;if(n){var t=c(n)?n.call(e):n;if(!d(t))return;for(var a=Le(e),i=ce?Reflect.ownKeys(t):Object.keys(t),o=0;o<i.length;o++){var r=i[o];Object.defineProperty(a,r,Object.getOwnPropertyDescriptor(t,r))}}}(n),et(n,"created"),n.$options.el&&n.$mount(n.$options.el)}}(Vt),function(e){var n={get:function(){return this._data}},t={get:function(){return this._props}};Object.defineProperty(e.prototype,"$data",n),Object.defineProperty(e.prototype,"$props",t),e.prototype.$set=Be,e.prototype.$delete=Fe,e.prototype.$watch=function(e,n,t){if(p(n))return Nt(this,e,n,t);(t=t||{}).user=!0;var a=new Hn(this,e,n,t);if(t.immediate){var i='callback for immediate watcher "'.concat(a.expression,'"');we(),Sn(n,this,[a.value],this,i),je()}return function(){a.teardown()}}}(Vt),function(e){var n=/^hook:/;e.prototype.$on=function(e,t){var a=this;if(i(e))for(var o=0,r=e.length;o<r;o++)a.$on(e[o],t);else(a._events[e]||(a._events[e]=[])).push(t),n.test(e)&&(a._hasHookEvent=!0);return a},e.prototype.$once=function(e,n){var t=this;function a(){t.$off(e,a),n.apply(t,arguments)}return a.fn=n,t.$on(e,a),t},e.prototype.$off=function(e,n){var t=this;if(!arguments.length)return t._events=Object.create(null),t;if(i(e)){for(var a=0,o=e.length;a<o;a++)t.$off(e[a],n);return t}var r,s=t._events[e];if(!s)return t;if(!n)return t._events[e]=null,t;for(var l=s.length;l--;)if((r=s[l])===n||r.fn===n){s.splice(l,1);break}return t},e.prototype.$emit=function(e){var n=this,t=n._events[e];if(t){t=t.length>1?T(t):t;for(var a=T(arguments,1),i='event handler for "'.concat(e,'"'),o=0,r=t.length;o<r;o++)Sn(t[o],n,a,n,i)}return n}}(Vt),function(e){e.prototype._update=function(e,n){var t=this,a=t.$el,i=t._vnode,o=Yn(t);t._vnode=e,t.$el=i?t.__patch__(i,e):t.__patch__(t.$el,e,n,!1),o(),a&&(a.__vue__=null),t.$el&&(t.$el.__vue__=t);for(var r=t;r&&r.$vnode&&r.$parent&&r.$vnode===r.$parent._vnode;)r.$parent.$el=r.$el,r=r.$parent},e.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},e.prototype.$destroy=function(){var e=this;if(!e._isBeingDestroyed){et(e,"beforeDestroy"),e._isBeingDestroyed=!0;var n=e.$parent;!n||n._isBeingDestroyed||e.$options.abstract||w(n.$children,e),e._scope.stop(),e._data.__ob__&&e._data.__ob__.vmCount--,e._isDestroyed=!0,e.__patch__(e._vnode,null),et(e,"destroyed"),e.$off(),e.$el&&(e.$el.__vue__=null),e.$vnode&&(e.$vnode.parent=null)}}}(Vt),function(e){un(e.prototype),e.prototype.$nextTick=function(e){return qn(e,this)},e.prototype._render=function(){var e,n=this,t=n.$options,a=t.render,o=t._parentVnode;o&&n._isMounted&&(n.$scopedSlots=fn(n.$parent,o.data.scopedSlots,n.$slots,n.$scopedSlots),n._slotsProxy&&jn(n._slotsProxy,n.$scopedSlots)),n.$vnode=o;try{ue(n),xn=n,e=a.call(n._renderProxy,n.$createElement)}catch(t){An(t,n,"render"),e=n._vnode}finally{xn=null,ue()}return i(e)&&1===e.length&&(e=e[0]),e instanceof pe||(e=he()),e.parent=o,e}}(Vt);var Xt=[String,RegExp,Array],Zt={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:Xt,exclude:Xt,max:[String,Number]},methods:{cacheVNode:function(){var e=this.cache,n=this.keys,t=this.vnodeToCache,a=this.keyToCache;if(t){var i=t.tag,o=t.componentInstance,r=t.componentOptions;e[a]={name:Kt(r),tag:i,componentInstance:o},n.push(a),this.max&&n.length>parseInt(this.max)&&Yt(e,n[0],n,this._vnode),this.vnodeToCache=null}}},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var e in this.cache)Yt(this.cache,e,this.keys)},mounted:function(){var e=this;this.cacheVNode(),this.$watch("include",(function(n){Gt(e,(function(e){return Qt(n,e)}))})),this.$watch("exclude",(function(n){Gt(e,(function(e){return!Qt(n,e)}))}))},updated:function(){this.cacheVNode()},render:function(){var e=this.$slots.default,n=kn(e),t=n&&n.componentOptions;if(t){var a=Kt(t),i=this.include,o=this.exclude;if(i&&(!a||!Qt(i,a))||o&&a&&Qt(o,a))return n;var r=this.cache,s=this.keys,l=null==n.key?t.Ctor.cid+(t.tag?"::".concat(t.tag):""):n.key;r[l]?(n.componentInstance=r[l].componentInstance,w(s,l),s.push(l)):(this.vnodeToCache=n,this.keyToCache=l),n.data.keepAlive=!0}return n||e&&e[0]}}};!function(e){var n={get:function(){return L}};Object.defineProperty(e,"config",n),e.util={warn:xt,extend:_,mergeOptions:It,defineReactive:_e},e.set=Be,e.delete=Fe,e.nextTick=qn,e.observable=function(e){return Te(e),e},e.options=Object.create(null),J.forEach((function(n){e.options[n+"s"]=Object.create(null)})),e.options._base=e,_(e.options.components,Zt),function(e){e.use=function(e){var n=this._installedPlugins||(this._installedPlugins=[]);if(n.indexOf(e)>-1)return this;var t=T(arguments,1);return t.unshift(this),c(e.install)?e.install.apply(e,t):c(e)&&e.apply(null,t),n.push(e),this}}(e),function(e){e.mixin=function(e){return this.options=It(this.options,e),this}}(e),Wt(e),function(e){J.forEach((function(n){e[n]=function(e,t){return t?("component"===n&&p(t)&&(t.name=t.name||e,t=this.options._base.extend(t)),"directive"===n&&c(t)&&(t={bind:t,update:t}),this.options[n+"s"][e]=t,t):this.options[n+"s"][e]}}))}(e)}(Vt),Object.defineProperty(Vt.prototype,"$isServer",{get:oe}),Object.defineProperty(Vt.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(Vt,"FunctionalRenderContext",{value:mt}),Vt.version="2.7.14";var ea=b("style,class"),na=b("input,textarea,option,select,progress"),ta=b("contenteditable,draggable,spellcheck"),aa=b("events,caret,typing,plaintext-only"),ia=b("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,truespeed,typemustmatch,visible"),oa="http://www.w3.org/1999/xlink",ra=function(e){return":"===e.charAt(5)&&"xlink"===e.slice(0,5)},sa=function(e){return ra(e)?e.slice(6,e.length):""},la=function(e){return null==e||!1===e};function ca(e){for(var n=e.data,t=e,a=e;r(a.componentInstance);)(a=a.componentInstance._vnode)&&a.data&&(n=da(a.data,n));for(;r(t=t.parent);)t&&t.data&&(n=da(n,t.data));return function(e,n){if(r(e)||r(n))return ua(e,pa(n));return""}(n.staticClass,n.class)}function da(e,n){return{staticClass:ua(e.staticClass,n.staticClass),class:r(e.class)?[e.class,n.class]:n.class}}function ua(e,n){return e?n?e+" "+n:e:n||""}function pa(e){return Array.isArray(e)?function(e){for(var n,t="",a=0,i=e.length;a<i;a++)r(n=pa(e[a]))&&""!==n&&(t&&(t+=" "),t+=n);return t}(e):d(e)?function(e){var n="";for(var t in e)e[t]&&(n&&(n+=" "),n+=t);return n}(e):"string"==typeof e?e:""}var ha={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},ma=b("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),fa=b("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),ga=function(e){return ma(e)||fa(e)};var va=Object.create(null);var ba=b("text,number,password,search,email,tel,url");var ya=Object.freeze({__proto__:null,createElement:function(e,n){var t=document.createElement(e);return"select"!==e||n.data&&n.data.attrs&&void 0!==n.data.attrs.multiple&&t.setAttribute("multiple","multiple"),t},createElementNS:function(e,n){return document.createElementNS(ha[e],n)},createTextNode:function(e){return document.createTextNode(e)},createComment:function(e){return document.createComment(e)},insertBefore:function(e,n,t){e.insertBefore(n,t)},removeChild:function(e,n){e.removeChild(n)},appendChild:function(e,n){e.appendChild(n)},parentNode:function(e){return e.parentNode},nextSibling:function(e){return e.nextSibling},tagName:function(e){return e.tagName},setTextContent:function(e,n){e.textContent=n},setStyleScope:function(e,n){e.setAttribute(n,"")}}),wa={create:function(e,n){ja(n)},update:function(e,n){e.data.ref!==n.data.ref&&(ja(e,!0),ja(n))},destroy:function(e){ja(e,!0)}};function ja(e,n){var t=e.data.ref;if(r(t)){var a=e.context,o=e.componentInstance||e.elm,s=n?null:o,l=n?void 0:o;if(c(t))Sn(t,a,[s],a,"template ref function");else{var d=e.data.refInFor,u="string"==typeof t||"number"==typeof t,p=Oe(t),h=a.$refs;if(u||p)if(d){var m=u?h[t]:t.value;n?i(m)&&w(m,o):i(m)?m.includes(o)||m.push(o):u?(h[t]=[o],xa(a,t,h[t])):t.value=[o]}else if(u){if(n&&h[t]!==o)return;h[t]=l,xa(a,t,s)}else if(p){if(n&&t.value!==o)return;t.value=s}else 0}}}function xa(e,n,t){var a=e._setupState;a&&x(a,n)&&(Oe(a[n])?a[n].value=t:a[n]=t)}var Ea=new pe("",{},[]),ka=["create","activate","update","remove","destroy"];function Ca(e,n){return e.key===n.key&&e.asyncFactory===n.asyncFactory&&(e.tag===n.tag&&e.isComment===n.isComment&&r(e.data)===r(n.data)&&function(e,n){if("input"!==e.tag)return!0;var t,a=r(t=e.data)&&r(t=t.attrs)&&t.type,i=r(t=n.data)&&r(t=t.attrs)&&t.type;return a===i||ba(a)&&ba(i)}(e,n)||s(e.isAsyncPlaceholder)&&o(n.asyncFactory.error))}function Aa(e,n,t){var a,i,o={};for(a=n;a<=t;++a)r(i=e[a].key)&&(o[i]=a);return o}var Sa={create:Pa,update:Pa,destroy:function(e){Pa(e,Ea)}};function Pa(e,n){(e.data.directives||n.data.directives)&&function(e,n){var t,a,i,o=e===Ea,r=n===Ea,s=Ta(e.data.directives,e.context),l=Ta(n.data.directives,n.context),c=[],d=[];for(t in l)a=s[t],i=l[t],a?(i.oldValue=a.value,i.oldArg=a.arg,Ba(i,"update",n,e),i.def&&i.def.componentUpdated&&d.push(i)):(Ba(i,"bind",n,e),i.def&&i.def.inserted&&c.push(i));if(c.length){var u=function(){for(var t=0;t<c.length;t++)Ba(c[t],"inserted",n,e)};o?Ve(n,"insert",u):u()}d.length&&Ve(n,"postpatch",(function(){for(var t=0;t<d.length;t++)Ba(d[t],"componentUpdated",n,e)}));if(!o)for(t in s)l[t]||Ba(s[t],"unbind",e,e,r)}(e,n)}var Ia=Object.create(null);function Ta(e,n){var t,a,i=Object.create(null);if(!e)return i;for(t=0;t<e.length;t++){if((a=e[t]).modifiers||(a.modifiers=Ia),i[_a(a)]=a,n._setupState&&n._setupState.__sfc){var o=a.def||Tt(n,"_setupState","v-"+a.name);a.def="function"==typeof o?{bind:o,update:o}:o}a.def=a.def||Tt(n.$options,"directives",a.name)}return i}function _a(e){return e.rawName||"".concat(e.name,".").concat(Object.keys(e.modifiers||{}).join("."))}function Ba(e,n,t,a,i){var o=e.def&&e.def[n];if(o)try{o(t.elm,e,t,a,i)}catch(a){An(a,t.context,"directive ".concat(e.name," ").concat(n," hook"))}}var Fa=[wa,Sa];function za(e,n){var t=n.componentOptions;if(!(r(t)&&!1===t.Ctor.options.inheritAttrs||o(e.data.attrs)&&o(n.data.attrs))){var a,i,l=n.elm,c=e.data.attrs||{},d=n.data.attrs||{};for(a in(r(d.__ob__)||s(d._v_attr_proxy))&&(d=n.data.attrs=_({},d)),d)i=d[a],c[a]!==i&&Ra(l,a,i,n.data.pre);for(a in(G||X)&&d.value!==c.value&&Ra(l,"value",d.value),c)o(d[a])&&(ra(a)?l.removeAttributeNS(oa,sa(a)):ta(a)||l.removeAttribute(a))}}function Ra(e,n,t,a){a||e.tagName.indexOf("-")>-1?Ma(e,n,t):ia(n)?la(t)?e.removeAttribute(n):(t="allowfullscreen"===n&&"EMBED"===e.tagName?"true":n,e.setAttribute(n,t)):ta(n)?e.setAttribute(n,function(e,n){return la(n)||"false"===n?"false":"contenteditable"===e&&aa(n)?n:"true"}(n,t)):ra(n)?la(t)?e.removeAttributeNS(oa,sa(n)):e.setAttributeNS(oa,n,t):Ma(e,n,t)}function Ma(e,n,t){if(la(t))e.removeAttribute(n);else{if(G&&!Y&&"TEXTAREA"===e.tagName&&"placeholder"===n&&""!==t&&!e.__ieph){var a=function(n){n.stopImmediatePropagation(),e.removeEventListener("input",a)};e.addEventListener("input",a),e.__ieph=!0}e.setAttribute(n,t)}}var Da={create:za,update:za};function Oa(e,n){var t=n.elm,a=n.data,i=e.data;if(!(o(a.staticClass)&&o(a.class)&&(o(i)||o(i.staticClass)&&o(i.class)))){var s=ca(n),l=t._transitionClasses;r(l)&&(s=ua(s,pa(l))),s!==t._prevClass&&(t.setAttribute("class",s),t._prevClass=s)}}var qa,Ja={create:Oa,update:Oa};function Ua(e,n,t){var a=qa;return function i(){var o=n.apply(null,arguments);null!==o&&$a(e,i,t,a)}}var La=_n&&!(ne&&Number(ne[1])<=53);function Na(e,n,t,a){if(La){var i=st,o=n;n=o._wrapper=function(e){if(e.target===e.currentTarget||e.timeStamp>=i||e.timeStamp<=0||e.target.ownerDocument!==document)return o.apply(this,arguments)}}qa.addEventListener(e,n,ae?{capture:t,passive:a}:t)}function $a(e,n,t,a){(a||qa).removeEventListener(e,n._wrapper||n,t)}function Ha(e,n){if(!o(e.data.on)||!o(n.data.on)){var t=n.data.on||{},a=e.data.on||{};qa=n.elm||e.elm,function(e){if(r(e.__r)){var n=G?"change":"input";e[n]=[].concat(e.__r,e[n]||[]),delete e.__r}r(e.__c)&&(e.change=[].concat(e.__c,e.change||[]),delete e.__c)}(t),He(t,a,Na,$a,Ua,n.context),qa=void 0}}var Va,Wa={create:Ha,update:Ha,destroy:function(e){return Ha(e,Ea)}};function Ka(e,n){if(!o(e.data.domProps)||!o(n.data.domProps)){var t,a,i=n.elm,l=e.data.domProps||{},c=n.data.domProps||{};for(t in(r(c.__ob__)||s(c._v_attr_proxy))&&(c=n.data.domProps=_({},c)),l)t in c||(i[t]="");for(t in c){if(a=c[t],"textContent"===t||"innerHTML"===t){if(n.children&&(n.children.length=0),a===l[t])continue;1===i.childNodes.length&&i.removeChild(i.childNodes[0])}if("value"===t&&"PROGRESS"!==i.tagName){i._value=a;var d=o(a)?"":String(a);Qa(i,d)&&(i.value=d)}else if("innerHTML"===t&&fa(i.tagName)&&o(i.innerHTML)){(Va=Va||document.createElement("div")).innerHTML="<svg>".concat(a,"</svg>");for(var u=Va.firstChild;i.firstChild;)i.removeChild(i.firstChild);for(;u.firstChild;)i.appendChild(u.firstChild)}else if(a!==l[t])try{i[t]=a}catch(e){}}}}function Qa(e,n){return!e.composing&&("OPTION"===e.tagName||function(e,n){var t=!0;try{t=document.activeElement!==e}catch(e){}return t&&e.value!==n}(e,n)||function(e,n){var t=e.value,a=e._vModifiers;if(r(a)){if(a.number)return v(t)!==v(n);if(a.trim)return t.trim()!==n.trim()}return t!==n}(e,n))}var Ga={create:Ka,update:Ka},Ya=E((function(e){var n={},t=/:(.+)/;return e.split(/;(?![^(]*\))/g).forEach((function(e){if(e){var a=e.split(t);a.length>1&&(n[a[0].trim()]=a[1].trim())}})),n}));function Xa(e){var n=Za(e.style);return e.staticStyle?_(e.staticStyle,n):n}function Za(e){return Array.isArray(e)?B(e):"string"==typeof e?Ya(e):e}var ei,ni=/^--/,ti=/\s*!important$/,ai=function(e,n,t){if(ni.test(n))e.style.setProperty(n,t);else if(ti.test(t))e.style.setProperty(P(n),t.replace(ti,""),"important");else{var a=oi(n);if(Array.isArray(t))for(var i=0,o=t.length;i<o;i++)e.style[a]=t[i];else e.style[a]=t}},ii=["Webkit","Moz","ms"],oi=E((function(e){if(ei=ei||document.createElement("div").style,"filter"!==(e=C(e))&&e in ei)return e;for(var n=e.charAt(0).toUpperCase()+e.slice(1),t=0;t<ii.length;t++){var a=ii[t]+n;if(a in ei)return a}}));function ri(e,n){var t=n.data,a=e.data;if(!(o(t.staticStyle)&&o(t.style)&&o(a.staticStyle)&&o(a.style))){var i,s,l=n.elm,c=a.staticStyle,d=a.normalizedStyle||a.style||{},u=c||d,p=Za(n.data.style)||{};n.data.normalizedStyle=r(p.__ob__)?_({},p):p;var h=function(e,n){var t,a={};if(n)for(var i=e;i.componentInstance;)(i=i.componentInstance._vnode)&&i.data&&(t=Xa(i.data))&&_(a,t);(t=Xa(e.data))&&_(a,t);for(var o=e;o=o.parent;)o.data&&(t=Xa(o.data))&&_(a,t);return a}(n,!0);for(s in u)o(h[s])&&ai(l,s,"");for(s in h)(i=h[s])!==u[s]&&ai(l,s,null==i?"":i)}}var si={create:ri,update:ri},li=/\s+/;function ci(e,n){if(n&&(n=n.trim()))if(e.classList)n.indexOf(" ")>-1?n.split(li).forEach((function(n){return e.classList.add(n)})):e.classList.add(n);else{var t=" ".concat(e.getAttribute("class")||""," ");t.indexOf(" "+n+" ")<0&&e.setAttribute("class",(t+n).trim())}}function di(e,n){if(n&&(n=n.trim()))if(e.classList)n.indexOf(" ")>-1?n.split(li).forEach((function(n){return e.classList.remove(n)})):e.classList.remove(n),e.classList.length||e.removeAttribute("class");else{for(var t=" ".concat(e.getAttribute("class")||""," "),a=" "+n+" ";t.indexOf(a)>=0;)t=t.replace(a," ");(t=t.trim())?e.setAttribute("class",t):e.removeAttribute("class")}}function ui(e){if(e){if("object"==typeof e){var n={};return!1!==e.css&&_(n,pi(e.name||"v")),_(n,e),n}return"string"==typeof e?pi(e):void 0}}var pi=E((function(e){return{enterClass:"".concat(e,"-enter"),enterToClass:"".concat(e,"-enter-to"),enterActiveClass:"".concat(e,"-enter-active"),leaveClass:"".concat(e,"-leave"),leaveToClass:"".concat(e,"-leave-to"),leaveActiveClass:"".concat(e,"-leave-active")}})),hi=K&&!Y,mi="transition",fi="transitionend",gi="animation",vi="animationend";hi&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(mi="WebkitTransition",fi="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(gi="WebkitAnimation",vi="webkitAnimationEnd"));var bi=K?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(e){return e()};function yi(e){bi((function(){bi(e)}))}function wi(e,n){var t=e._transitionClasses||(e._transitionClasses=[]);t.indexOf(n)<0&&(t.push(n),ci(e,n))}function ji(e,n){e._transitionClasses&&w(e._transitionClasses,n),di(e,n)}function xi(e,n,t){var a=ki(e,n),i=a.type,o=a.timeout,r=a.propCount;if(!i)return t();var s="transition"===i?fi:vi,l=0,c=function(){e.removeEventListener(s,d),t()},d=function(n){n.target===e&&++l>=r&&c()};setTimeout((function(){l<r&&c()}),o+1),e.addEventListener(s,d)}var Ei=/\b(transform|all)(,|$)/;function ki(e,n){var t,a=window.getComputedStyle(e),i=(a[mi+"Delay"]||"").split(", "),o=(a[mi+"Duration"]||"").split(", "),r=Ci(i,o),s=(a[gi+"Delay"]||"").split(", "),l=(a[gi+"Duration"]||"").split(", "),c=Ci(s,l),d=0,u=0;return"transition"===n?r>0&&(t="transition",d=r,u=o.length):"animation"===n?c>0&&(t="animation",d=c,u=l.length):u=(t=(d=Math.max(r,c))>0?r>c?"transition":"animation":null)?"transition"===t?o.length:l.length:0,{type:t,timeout:d,propCount:u,hasTransform:"transition"===t&&Ei.test(a[mi+"Property"])}}function Ci(e,n){for(;e.length<n.length;)e=e.concat(e);return Math.max.apply(null,n.map((function(n,t){return Ai(n)+Ai(e[t])})))}function Ai(e){return 1e3*Number(e.slice(0,-1).replace(",","."))}function Si(e,n){var t=e.elm;r(t._leaveCb)&&(t._leaveCb.cancelled=!0,t._leaveCb());var a=ui(e.data.transition);if(!o(a)&&!r(t._enterCb)&&1===t.nodeType){for(var i=a.css,s=a.type,l=a.enterClass,u=a.enterToClass,p=a.enterActiveClass,h=a.appearClass,m=a.appearToClass,f=a.appearActiveClass,g=a.beforeEnter,b=a.enter,y=a.afterEnter,w=a.enterCancelled,j=a.beforeAppear,x=a.appear,E=a.afterAppear,k=a.appearCancelled,C=a.duration,A=Gn,S=Gn.$vnode;S&&S.parent;)A=S.context,S=S.parent;var P=!A._isMounted||!e.isRootInsert;if(!P||x||""===x){var I=P&&h?h:l,T=P&&f?f:p,_=P&&m?m:u,B=P&&j||g,F=P&&c(x)?x:b,z=P&&E||y,R=P&&k||w,M=v(d(C)?C.enter:C);0;var D=!1!==i&&!Y,q=Ti(F),J=t._enterCb=O((function(){D&&(ji(t,_),ji(t,T)),J.cancelled?(D&&ji(t,I),R&&R(t)):z&&z(t),t._enterCb=null}));e.data.show||Ve(e,"insert",(function(){var n=t.parentNode,a=n&&n._pending&&n._pending[e.key];a&&a.tag===e.tag&&a.elm._leaveCb&&a.elm._leaveCb(),F&&F(t,J)})),B&&B(t),D&&(wi(t,I),wi(t,T),yi((function(){ji(t,I),J.cancelled||(wi(t,_),q||(Ii(M)?setTimeout(J,M):xi(t,s,J)))}))),e.data.show&&(n&&n(),F&&F(t,J)),D||q||J()}}}function Pi(e,n){var t=e.elm;r(t._enterCb)&&(t._enterCb.cancelled=!0,t._enterCb());var a=ui(e.data.transition);if(o(a)||1!==t.nodeType)return n();if(!r(t._leaveCb)){var i=a.css,s=a.type,l=a.leaveClass,c=a.leaveToClass,u=a.leaveActiveClass,p=a.beforeLeave,h=a.leave,m=a.afterLeave,f=a.leaveCancelled,g=a.delayLeave,b=a.duration,y=!1!==i&&!Y,w=Ti(h),j=v(d(b)?b.leave:b);0;var x=t._leaveCb=O((function(){t.parentNode&&t.parentNode._pending&&(t.parentNode._pending[e.key]=null),y&&(ji(t,c),ji(t,u)),x.cancelled?(y&&ji(t,l),f&&f(t)):(n(),m&&m(t)),t._leaveCb=null}));g?g(E):E()}function E(){x.cancelled||(!e.data.show&&t.parentNode&&((t.parentNode._pending||(t.parentNode._pending={}))[e.key]=e),p&&p(t),y&&(wi(t,l),wi(t,u),yi((function(){ji(t,l),x.cancelled||(wi(t,c),w||(Ii(j)?setTimeout(x,j):xi(t,s,x)))}))),h&&h(t,x),y||w||x())}}function Ii(e){return"number"==typeof e&&!isNaN(e)}function Ti(e){if(o(e))return!1;var n=e.fns;return r(n)?Ti(Array.isArray(n)?n[0]:n):(e._length||e.length)>1}function _i(e,n){!0!==n.data.show&&Si(n)}var Bi=function(e){var n,t,a={},c=e.modules,d=e.nodeOps;for(n=0;n<ka.length;++n)for(a[ka[n]]=[],t=0;t<c.length;++t)r(c[t][ka[n]])&&a[ka[n]].push(c[t][ka[n]]);function u(e){var n=d.parentNode(e);r(n)&&d.removeChild(n,e)}function p(e,n,t,i,o,l,c){if(r(e.elm)&&r(l)&&(e=l[c]=fe(e)),e.isRootInsert=!o,!function(e,n,t,i){var o=e.data;if(r(o)){var l=r(e.componentInstance)&&o.keepAlive;if(r(o=o.hook)&&r(o=o.init)&&o(e,!1),r(e.componentInstance))return h(e,n),m(t,e.elm,i),s(l)&&function(e,n,t,i){var o,s=e;for(;s.componentInstance;)if(s=s.componentInstance._vnode,r(o=s.data)&&r(o=o.transition)){for(o=0;o<a.activate.length;++o)a.activate[o](Ea,s);n.push(s);break}m(t,e.elm,i)}(e,n,t,i),!0}}(e,n,t,i)){var u=e.data,p=e.children,g=e.tag;r(g)?(e.elm=e.ns?d.createElementNS(e.ns,g):d.createElement(g,e),y(e),f(e,p,n),r(u)&&v(e,n),m(t,e.elm,i)):s(e.isComment)?(e.elm=d.createComment(e.text),m(t,e.elm,i)):(e.elm=d.createTextNode(e.text),m(t,e.elm,i))}}function h(e,n){r(e.data.pendingInsert)&&(n.push.apply(n,e.data.pendingInsert),e.data.pendingInsert=null),e.elm=e.componentInstance.$el,g(e)?(v(e,n),y(e)):(ja(e),n.push(e))}function m(e,n,t){r(e)&&(r(t)?d.parentNode(t)===e&&d.insertBefore(e,n,t):d.appendChild(e,n))}function f(e,n,t){if(i(n)){0;for(var a=0;a<n.length;++a)p(n[a],t,e.elm,null,!0,n,a)}else l(e.text)&&d.appendChild(e.elm,d.createTextNode(String(e.text)))}function g(e){for(;e.componentInstance;)e=e.componentInstance._vnode;return r(e.tag)}function v(e,t){for(var i=0;i<a.create.length;++i)a.create[i](Ea,e);r(n=e.data.hook)&&(r(n.create)&&n.create(Ea,e),r(n.insert)&&t.push(e))}function y(e){var n;if(r(n=e.fnScopeId))d.setStyleScope(e.elm,n);else for(var t=e;t;)r(n=t.context)&&r(n=n.$options._scopeId)&&d.setStyleScope(e.elm,n),t=t.parent;r(n=Gn)&&n!==e.context&&n!==e.fnContext&&r(n=n.$options._scopeId)&&d.setStyleScope(e.elm,n)}function w(e,n,t,a,i,o){for(;a<=i;++a)p(t[a],o,e,n,!1,t,a)}function j(e){var n,t,i=e.data;if(r(i))for(r(n=i.hook)&&r(n=n.destroy)&&n(e),n=0;n<a.destroy.length;++n)a.destroy[n](e);if(r(n=e.children))for(t=0;t<e.children.length;++t)j(e.children[t])}function x(e,n,t){for(;n<=t;++n){var a=e[n];r(a)&&(r(a.tag)?(E(a),j(a)):u(a.elm))}}function E(e,n){if(r(n)||r(e.data)){var t,i=a.remove.length+1;for(r(n)?n.listeners+=i:n=function(e,n){function t(){0==--t.listeners&&u(e)}return t.listeners=n,t}(e.elm,i),r(t=e.componentInstance)&&r(t=t._vnode)&&r(t.data)&&E(t,n),t=0;t<a.remove.length;++t)a.remove[t](e,n);r(t=e.data.hook)&&r(t=t.remove)?t(e,n):n()}else u(e.elm)}function k(e,n,t,a){for(var i=t;i<a;i++){var o=n[i];if(r(o)&&Ca(e,o))return i}}function C(e,n,t,i,l,c){if(e!==n){r(n.elm)&&r(i)&&(n=i[l]=fe(n));var u=n.elm=e.elm;if(s(e.isAsyncPlaceholder))r(n.asyncFactory.resolved)?P(e.elm,n,t):n.isAsyncPlaceholder=!0;else if(s(n.isStatic)&&s(e.isStatic)&&n.key===e.key&&(s(n.isCloned)||s(n.isOnce)))n.componentInstance=e.componentInstance;else{var h,m=n.data;r(m)&&r(h=m.hook)&&r(h=h.prepatch)&&h(e,n);var f=e.children,v=n.children;if(r(m)&&g(n)){for(h=0;h<a.update.length;++h)a.update[h](e,n);r(h=m.hook)&&r(h=h.update)&&h(e,n)}o(n.text)?r(f)&&r(v)?f!==v&&function(e,n,t,a,i){var s,l,c,u=0,h=0,m=n.length-1,f=n[0],g=n[m],v=t.length-1,b=t[0],y=t[v],j=!i;for(0;u<=m&&h<=v;)o(f)?f=n[++u]:o(g)?g=n[--m]:Ca(f,b)?(C(f,b,a,t,h),f=n[++u],b=t[++h]):Ca(g,y)?(C(g,y,a,t,v),g=n[--m],y=t[--v]):Ca(f,y)?(C(f,y,a,t,v),j&&d.insertBefore(e,f.elm,d.nextSibling(g.elm)),f=n[++u],y=t[--v]):Ca(g,b)?(C(g,b,a,t,h),j&&d.insertBefore(e,g.elm,f.elm),g=n[--m],b=t[++h]):(o(s)&&(s=Aa(n,u,m)),o(l=r(b.key)?s[b.key]:k(b,n,u,m))?p(b,a,e,f.elm,!1,t,h):Ca(c=n[l],b)?(C(c,b,a,t,h),n[l]=void 0,j&&d.insertBefore(e,c.elm,f.elm)):p(b,a,e,f.elm,!1,t,h),b=t[++h]);u>m?w(e,o(t[v+1])?null:t[v+1].elm,t,h,v,a):h>v&&x(n,u,m)}(u,f,v,t,c):r(v)?(r(e.text)&&d.setTextContent(u,""),w(u,null,v,0,v.length-1,t)):r(f)?x(f,0,f.length-1):r(e.text)&&d.setTextContent(u,""):e.text!==n.text&&d.setTextContent(u,n.text),r(m)&&r(h=m.hook)&&r(h=h.postpatch)&&h(e,n)}}}function A(e,n,t){if(s(t)&&r(e.parent))e.parent.data.pendingInsert=n;else for(var a=0;a<n.length;++a)n[a].data.hook.insert(n[a])}var S=b("attrs,class,staticClass,staticStyle,key");function P(e,n,t,a){var i,o=n.tag,l=n.data,c=n.children;if(a=a||l&&l.pre,n.elm=e,s(n.isComment)&&r(n.asyncFactory))return n.isAsyncPlaceholder=!0,!0;if(r(l)&&(r(i=l.hook)&&r(i=i.init)&&i(n,!0),r(i=n.componentInstance)))return h(n,t),!0;if(r(o)){if(r(c))if(e.hasChildNodes())if(r(i=l)&&r(i=i.domProps)&&r(i=i.innerHTML)){if(i!==e.innerHTML)return!1}else{for(var d=!0,u=e.firstChild,p=0;p<c.length;p++){if(!u||!P(u,c[p],t,a)){d=!1;break}u=u.nextSibling}if(!d||u)return!1}else f(n,c,t);if(r(l)){var m=!1;for(var g in l)if(!S(g)){m=!0,v(n,t);break}!m&&l.class&&Ln(l.class)}}else e.data!==n.text&&(e.data=n.text);return!0}return function(e,n,t,i){if(!o(n)){var l,c=!1,u=[];if(o(e))c=!0,p(n,u);else{var h=r(e.nodeType);if(!h&&Ca(e,n))C(e,n,u,null,null,i);else{if(h){if(1===e.nodeType&&e.hasAttribute("data-server-rendered")&&(e.removeAttribute("data-server-rendered"),t=!0),s(t)&&P(e,n,u))return A(n,u,!0),e;l=e,e=new pe(d.tagName(l).toLowerCase(),{},[],void 0,l)}var m=e.elm,f=d.parentNode(m);if(p(n,u,m._leaveCb?null:f,d.nextSibling(m)),r(n.parent))for(var v=n.parent,b=g(n);v;){for(var y=0;y<a.destroy.length;++y)a.destroy[y](v);if(v.elm=n.elm,b){for(var w=0;w<a.create.length;++w)a.create[w](Ea,v);var E=v.data.hook.insert;if(E.merged)for(var k=1;k<E.fns.length;k++)E.fns[k]()}else ja(v);v=v.parent}r(f)?x([e],0,0):r(e.tag)&&j(e)}}return A(n,u,c),n.elm}r(e)&&j(e)}}({nodeOps:ya,modules:[Da,Ja,Wa,Ga,si,K?{create:_i,activate:_i,remove:function(e,n){!0!==e.data.show?Pi(e,n):n()}}:{}].concat(Fa)});Y&&document.addEventListener("selectionchange",(function(){var e=document.activeElement;e&&e.vmodel&&Ji(e,"input")}));var Fi={inserted:function(e,n,t,a){"select"===t.tag?(a.elm&&!a.elm._vOptions?Ve(t,"postpatch",(function(){Fi.componentUpdated(e,n,t)})):zi(e,n,t.context),e._vOptions=[].map.call(e.options,Di)):("textarea"===t.tag||ba(e.type))&&(e._vModifiers=n.modifiers,n.modifiers.lazy||(e.addEventListener("compositionstart",Oi),e.addEventListener("compositionend",qi),e.addEventListener("change",qi),Y&&(e.vmodel=!0)))},componentUpdated:function(e,n,t){if("select"===t.tag){zi(e,n,t.context);var a=e._vOptions,i=e._vOptions=[].map.call(e.options,Di);if(i.some((function(e,n){return!M(e,a[n])})))(e.multiple?n.value.some((function(e){return Mi(e,i)})):n.value!==n.oldValue&&Mi(n.value,i))&&Ji(e,"change")}}};function zi(e,n,t){Ri(e,n,t),(G||X)&&setTimeout((function(){Ri(e,n,t)}),0)}function Ri(e,n,t){var a=n.value,i=e.multiple;if(!i||Array.isArray(a)){for(var o,r,s=0,l=e.options.length;s<l;s++)if(r=e.options[s],i)o=D(a,Di(r))>-1,r.selected!==o&&(r.selected=o);else if(M(Di(r),a))return void(e.selectedIndex!==s&&(e.selectedIndex=s));i||(e.selectedIndex=-1)}}function Mi(e,n){return n.every((function(n){return!M(n,e)}))}function Di(e){return"_value"in e?e._value:e.value}function Oi(e){e.target.composing=!0}function qi(e){e.target.composing&&(e.target.composing=!1,Ji(e.target,"input"))}function Ji(e,n){var t=document.createEvent("HTMLEvents");t.initEvent(n,!0,!0),e.dispatchEvent(t)}function Ui(e){return!e.componentInstance||e.data&&e.data.transition?e:Ui(e.componentInstance._vnode)}var Li={model:Fi,show:{bind:function(e,n,t){var a=n.value,i=(t=Ui(t)).data&&t.data.transition,o=e.__vOriginalDisplay="none"===e.style.display?"":e.style.display;a&&i?(t.data.show=!0,Si(t,(function(){e.style.display=o}))):e.style.display=a?o:"none"},update:function(e,n,t){var a=n.value;!a!=!n.oldValue&&((t=Ui(t)).data&&t.data.transition?(t.data.show=!0,a?Si(t,(function(){e.style.display=e.__vOriginalDisplay})):Pi(t,(function(){e.style.display="none"}))):e.style.display=a?e.__vOriginalDisplay:"none")},unbind:function(e,n,t,a,i){i||(e.style.display=e.__vOriginalDisplay)}}},Ni={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function $i(e){var n=e&&e.componentOptions;return n&&n.Ctor.options.abstract?$i(kn(n.children)):e}function Hi(e){var n={},t=e.$options;for(var a in t.propsData)n[a]=e[a];var i=t._parentListeners;for(var a in i)n[C(a)]=i[a];return n}function Vi(e,n){if(/\d-keep-alive$/.test(n.tag))return e("keep-alive",{props:n.componentOptions.propsData})}var Wi=function(e){return e.tag||mn(e)},Ki=function(e){return"show"===e.name},Qi={name:"transition",props:Ni,abstract:!0,render:function(e){var n=this,t=this.$slots.default;if(t&&(t=t.filter(Wi)).length){0;var a=this.mode;0;var i=t[0];if(function(e){for(;e=e.parent;)if(e.data.transition)return!0}(this.$vnode))return i;var o=$i(i);if(!o)return i;if(this._leaving)return Vi(e,i);var r="__transition-".concat(this._uid,"-");o.key=null==o.key?o.isComment?r+"comment":r+o.tag:l(o.key)?0===String(o.key).indexOf(r)?o.key:r+o.key:o.key;var s=(o.data||(o.data={})).transition=Hi(this),c=this._vnode,d=$i(c);if(o.data.directives&&o.data.directives.some(Ki)&&(o.data.show=!0),d&&d.data&&!function(e,n){return n.key===e.key&&n.tag===e.tag}(o,d)&&!mn(d)&&(!d.componentInstance||!d.componentInstance._vnode.isComment)){var u=d.data.transition=_({},s);if("out-in"===a)return this._leaving=!0,Ve(u,"afterLeave",(function(){n._leaving=!1,n.$forceUpdate()})),Vi(e,i);if("in-out"===a){if(mn(o))return c;var p,h=function(){p()};Ve(s,"afterEnter",h),Ve(s,"enterCancelled",h),Ve(u,"delayLeave",(function(e){p=e}))}}return i}}},Gi=_({tag:String,moveClass:String},Ni);function Yi(e){e.elm._moveCb&&e.elm._moveCb(),e.elm._enterCb&&e.elm._enterCb()}function Xi(e){e.data.newPos=e.elm.getBoundingClientRect()}function Zi(e){var n=e.data.pos,t=e.data.newPos,a=n.left-t.left,i=n.top-t.top;if(a||i){e.data.moved=!0;var o=e.elm.style;o.transform=o.WebkitTransform="translate(".concat(a,"px,").concat(i,"px)"),o.transitionDuration="0s"}}delete Gi.mode;var eo={Transition:Qi,TransitionGroup:{props:Gi,beforeMount:function(){var e=this,n=this._update;this._update=function(t,a){var i=Yn(e);e.__patch__(e._vnode,e.kept,!1,!0),e._vnode=e.kept,i(),n.call(e,t,a)}},render:function(e){for(var n=this.tag||this.$vnode.data.tag||"span",t=Object.create(null),a=this.prevChildren=this.children,i=this.$slots.default||[],o=this.children=[],r=Hi(this),s=0;s<i.length;s++){if((d=i[s]).tag)if(null!=d.key&&0!==String(d.key).indexOf("__vlist"))o.push(d),t[d.key]=d,(d.data||(d.data={})).transition=r;else;}if(a){var l=[],c=[];for(s=0;s<a.length;s++){var d;(d=a[s]).data.transition=r,d.data.pos=d.elm.getBoundingClientRect(),t[d.key]?l.push(d):c.push(d)}this.kept=e(n,null,l),this.removed=c}return e(n,null,o)},updated:function(){var e=this.prevChildren,n=this.moveClass||(this.name||"v")+"-move";e.length&&this.hasMove(e[0].elm,n)&&(e.forEach(Yi),e.forEach(Xi),e.forEach(Zi),this._reflow=document.body.offsetHeight,e.forEach((function(e){if(e.data.moved){var t=e.elm,a=t.style;wi(t,n),a.transform=a.WebkitTransform=a.transitionDuration="",t.addEventListener(fi,t._moveCb=function e(a){a&&a.target!==t||a&&!/transform$/.test(a.propertyName)||(t.removeEventListener(fi,e),t._moveCb=null,ji(t,n))})}})))},methods:{hasMove:function(e,n){if(!hi)return!1;if(this._hasMove)return this._hasMove;var t=e.cloneNode();e._transitionClasses&&e._transitionClasses.forEach((function(e){di(t,e)})),ci(t,n),t.style.display="none",this.$el.appendChild(t);var a=ki(t);return this.$el.removeChild(t),this._hasMove=a.hasTransform}}}};Vt.config.mustUseProp=function(e,n,t){return"value"===t&&na(e)&&"button"!==n||"selected"===t&&"option"===e||"checked"===t&&"input"===e||"muted"===t&&"video"===e},Vt.config.isReservedTag=ga,Vt.config.isReservedAttr=ea,Vt.config.getTagNamespace=function(e){return fa(e)?"svg":"math"===e?"math":void 0},Vt.config.isUnknownElement=function(e){if(!K)return!0;if(ga(e))return!1;if(e=e.toLowerCase(),null!=va[e])return va[e];var n=document.createElement(e);return e.indexOf("-")>-1?va[e]=n.constructor===window.HTMLUnknownElement||n.constructor===window.HTMLElement:va[e]=/HTMLUnknownElement/.test(n.toString())},_(Vt.options.directives,Li),_(Vt.options.components,eo),Vt.prototype.__patch__=K?Bi:F,Vt.prototype.$mount=function(e,n){return function(e,n,t){var a;e.$el=n,e.$options.render||(e.$options.render=he),et(e,"beforeMount"),a=function(){e._update(e._render(),t)},new Hn(e,a,F,{before:function(){e._isMounted&&!e._isDestroyed&&et(e,"beforeUpdate")}},!0),t=!1;var i=e._preWatchers;if(i)for(var o=0;o<i.length;o++)i[o].run();return null==e.$vnode&&(e._isMounted=!0,et(e,"mounted")),e}(this,e=e&&K?function(e){if("string"==typeof e){var n=document.querySelector(e);return n||document.createElement("div")}return e}(e):void 0,n)},K&&setTimeout((function(){L.devtools&&re&&re.emit("init",Vt)}),0)},function(e,n,t){"use strict";var a=t(65),i=a.all;e.exports=a.IS_HTMLDDA?function(e){return"function"==typeof e||e===i}:function(e){return"function"==typeof e}},function(e,n,t){"use strict";var a=t(101),i=Object.prototype.toString;function o(e){return"[object Array]"===i.call(e)}function r(e){return void 0===e}function s(e){return null!==e&&"object"==typeof e}function l(e){if("[object Object]"!==i.call(e))return!1;var n=Object.getPrototypeOf(e);return null===n||n===Object.prototype}function c(e){return"[object Function]"===i.call(e)}function d(e,n){if(null!=e)if("object"!=typeof e&&(e=[e]),o(e))for(var t=0,a=e.length;t<a;t++)n.call(null,e[t],t,e);else for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&n.call(null,e[i],i,e)}e.exports={isArray:o,isArrayBuffer:function(e){return"[object ArrayBuffer]"===i.call(e)},isBuffer:function(e){return null!==e&&!r(e)&&null!==e.constructor&&!r(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:s,isPlainObject:l,isUndefined:r,isDate:function(e){return"[object Date]"===i.call(e)},isFile:function(e){return"[object File]"===i.call(e)},isBlob:function(e){return"[object Blob]"===i.call(e)},isFunction:c,isStream:function(e){return s(e)&&c(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)},forEach:d,merge:function e(){var n={};function t(t,a){l(n[a])&&l(t)?n[a]=e(n[a],t):l(t)?n[a]=e({},t):o(t)?n[a]=t.slice():n[a]=t}for(var a=0,i=arguments.length;a<i;a++)d(arguments[a],t);return n},extend:function(e,n,t){return d(n,(function(n,i){e[i]=t&&"function"==typeof n?a(n,t):n})),e},trim:function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")},stripBOM:function(e){return 65279===e.charCodeAt(0)&&(e=e.slice(1)),e}}},function(e,n,t){"use strict";var a=function(e){return e&&e.Math===Math&&e};e.exports=a("object"==typeof globalThis&&globalThis)||a("object"==typeof window&&window)||a("object"==typeof self&&self)||a("object"==typeof global&&global)||function(){return this}()||this||Function("return this")()},function(e,n,t){"use strict";var a=t(32),i=Function.prototype,o=i.call,r=a&&i.bind.bind(o,o);e.exports=a?r:function(e){return function(){return o.apply(e,arguments)}}},function(e,n,t){"use strict";e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,n,t){"use strict";var a=t(6);e.exports=!a((function(){return 7!==Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(e,n){var t=Array.isArray;e.exports=t},function(e,n,t){var a=t(79),i="object"==typeof self&&self&&self.Object===Object&&self,o=a||i||Function("return this")();e.exports=o},function(e,n,t){"use strict";var a=t(5),i=t(37),o=a({}.hasOwnProperty);e.exports=Object.hasOwn||function(e,n){return o(i(e),n)}},function(e,n,t){"use strict";var a=t(2),i=t(65),o=i.all;e.exports=i.IS_HTMLDDA?function(e){return"object"==typeof e?null!==e:a(e)||e===o}:function(e){return"object"==typeof e?null!==e:a(e)}},function(e,n,t){var a=t(183),i=t(186);e.exports=function(e,n){var t=i(e,n);return a(t)?t:void 0}},function(e,n,t){var a=t(275),i=t(99),o=/[T ]/,r=/:/,s=/^(\d{2})$/,l=[/^([+-]\d{2})$/,/^([+-]\d{3})$/,/^([+-]\d{4})$/],c=/^(\d{4})/,d=[/^([+-]\d{4})/,/^([+-]\d{5})/,/^([+-]\d{6})/],u=/^-(\d{2})$/,p=/^-?(\d{3})$/,h=/^-?(\d{2})-?(\d{2})$/,m=/^-?W(\d{2})$/,f=/^-?W(\d{2})-?(\d{1})$/,g=/^(\d{2}([.,]\d*)?)$/,v=/^(\d{2}):?(\d{2}([.,]\d*)?)$/,b=/^(\d{2}):?(\d{2}):?(\d{2}([.,]\d*)?)$/,y=/([Z+-].*)$/,w=/^(Z)$/,j=/^([+-])(\d{2})$/,x=/^([+-])(\d{2}):?(\d{2})$/;function E(e,n,t){n=n||0,t=t||0;var a=new Date(0);a.setUTCFullYear(e,0,4);var i=7*n+t+1-(a.getUTCDay()||7);return a.setUTCDate(a.getUTCDate()+i),a}e.exports=function(e,n){if(i(e))return new Date(e.getTime());if("string"!=typeof e)return new Date(e);var t=(n||{}).additionalDigits;t=null==t?2:Number(t);var k=function(e){var n,t={},a=e.split(o);r.test(a[0])?(t.date=null,n=a[0]):(t.date=a[0],n=a[1]);if(n){var i=y.exec(n);i?(t.time=n.replace(i[1],""),t.timezone=i[1]):t.time=n}return t}(e),C=function(e,n){var t,a=l[n],i=d[n];if(t=c.exec(e)||i.exec(e)){var o=t[1];return{year:parseInt(o,10),restDateString:e.slice(o.length)}}if(t=s.exec(e)||a.exec(e)){var r=t[1];return{year:100*parseInt(r,10),restDateString:e.slice(r.length)}}return{year:null}}(k.date,t),A=C.year,S=function(e,n){if(null===n)return null;var t,a,i,o;if(0===e.length)return(a=new Date(0)).setUTCFullYear(n),a;if(t=u.exec(e))return a=new Date(0),i=parseInt(t[1],10)-1,a.setUTCFullYear(n,i),a;if(t=p.exec(e)){a=new Date(0);var r=parseInt(t[1],10);return a.setUTCFullYear(n,0,r),a}if(t=h.exec(e)){a=new Date(0),i=parseInt(t[1],10)-1;var s=parseInt(t[2],10);return a.setUTCFullYear(n,i,s),a}if(t=m.exec(e))return o=parseInt(t[1],10)-1,E(n,o);if(t=f.exec(e)){o=parseInt(t[1],10)-1;var l=parseInt(t[2],10)-1;return E(n,o,l)}return null}(C.restDateString,A);if(S){var P,I=S.getTime(),T=0;if(k.time&&(T=function(e){var n,t,a;if(n=g.exec(e))return(t=parseFloat(n[1].replace(",",".")))%24*36e5;if(n=v.exec(e))return t=parseInt(n[1],10),a=parseFloat(n[2].replace(",",".")),t%24*36e5+6e4*a;if(n=b.exec(e)){t=parseInt(n[1],10),a=parseInt(n[2],10);var i=parseFloat(n[3].replace(",","."));return t%24*36e5+6e4*a+1e3*i}return null}(k.time)),k.timezone)P=6e4*function(e){var n,t;if(n=w.exec(e))return 0;if(n=j.exec(e))return t=60*parseInt(n[2],10),"+"===n[1]?-t:t;if(n=x.exec(e))return t=60*parseInt(n[2],10)+parseInt(n[3],10),"+"===n[1]?-t:t;return 0}(k.timezone);else{var _=I+T,B=new Date(_);P=a(B);var F=new Date(_);F.setDate(B.getDate()+1);var z=a(F)-a(B);z>0&&(P+=z)}return new Date(I+T+P)}return new Date(e)}},function(e,n,t){"use strict";function a(e,n,t,a,i,o,r,s){var l,c="function"==typeof e?e.options:e;if(n&&(c.render=n,c.staticRenderFns=t,c._compiled=!0),a&&(c.functional=!0),o&&(c._scopeId="data-v-"+o),r?(l=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),i&&i.call(this,e),e&&e._registeredComponents&&e._registeredComponents.add(r)},c._ssrRegister=l):i&&(l=s?function(){i.call(this,(c.functional?this.parent:this).$root.$options.shadowRoot)}:i),l)if(c.functional){c._injectStyles=l;var d=c.render;c.render=function(e,n){return l.call(n),d(e,n)}}else{var u=c.beforeCreate;c.beforeCreate=u?[].concat(u,l):[l]}return{exports:e,options:c}}t.d(n,"a",(function(){return a}))},function(e,n){e.exports=function(e){return null!=e&&"object"==typeof e}},function(e,n,t){"use strict";var a=t(262),i=t(273),o=t(54);e.exports={formats:o,parse:i,stringify:a}},function(e,n,t){"use strict";var a=t(1);n.a=new a.a},function(e,n,t){var a=t(20),i=t(168),o=t(169),r=a?a.toStringTag:void 0;e.exports=function(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":r&&r in Object(e)?i(e):o(e)}},function(e,n,t){"use strict";var a=t(7),i=t(21),o=t(40);e.exports=a?function(e,n,t){return i.f(e,n,o(1,t))}:function(e,n,t){return e[n]=t,e}},function(e,n,t){var a=t(9).Symbol;e.exports=a},function(e,n,t){"use strict";var a=t(7),i=t(74),o=t(122),r=t(30),s=t(64),l=TypeError,c=Object.defineProperty,d=Object.getOwnPropertyDescriptor;n.f=a?o?function(e,n,t){if(r(e),n=s(n),r(t),"function"==typeof e&&"prototype"===n&&"value"in t&&"writable"in t&&!t.writable){var a=d(e,n);a&&a.writable&&(e[n]=t.value,t={configurable:"configurable"in t?t.configurable:a.configurable,enumerable:"enumerable"in t?t.enumerable:a.enumerable,writable:!1})}return c(e,n,t)}:c:function(e,n,t){if(r(e),n=s(n),r(t),i)try{return c(e,n,t)}catch(e){}if("get"in t||"set"in t)throw l("Accessors not supported");return"value"in t&&(e[n]=t.value),e}},function(e,n,t){"use strict";var a=t(5),i=a({}.toString),o=a("".slice);e.exports=function(e){return o(i(e),8,-1)}},function(e,n,t){var a=t(173),i=t(174),o=t(175),r=t(176),s=t(177);function l(e){var n=-1,t=null==e?0:e.length;for(this.clear();++n<t;){var a=e[n];this.set(a[0],a[1])}}l.prototype.clear=a,l.prototype.delete=i,l.prototype.get=o,l.prototype.has=r,l.prototype.set=s,e.exports=l},function(e,n,t){var a=t(81);e.exports=function(e,n){for(var t=e.length;t--;)if(a(e[t][0],n))return t;return-1}},function(e,n,t){var a=t(12)(Object,"create");e.exports=a},function(e,n,t){var a=t(195);e.exports=function(e,n){var t=e.__data__;return a(n)?t["string"==typeof n?"string":"hash"]:t.map}},function(e,n,t){var a=t(50);e.exports=function(e){if("string"==typeof e||a(e))return e;var n=e+"";return"0"==n&&1/e==-1/0?"-0":n}},function(e,n){var t=/^\s+|\s+$/g,a=/^[-+]0x[0-9a-f]+$/i,i=/^0b[01]+$/i,o=/^0o[0-7]+$/i,r=parseInt,s="object"==typeof global&&global&&global.Object===Object&&global,l="object"==typeof self&&self&&self.Object===Object&&self,c=s||l||Function("return this")(),d=Object.prototype.toString,u=Math.max,p=Math.min,h=function(){return c.Date.now()};function m(e){var n=typeof e;return!!e&&("object"==n||"function"==n)}function f(e){if("number"==typeof e)return e;if(function(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&"[object Symbol]"==d.call(e)}(e))return NaN;if(m(e)){var n="function"==typeof e.valueOf?e.valueOf():e;e=m(n)?n+"":n}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(t,"");var s=i.test(e);return s||o.test(e)?r(e.slice(2),s?2:8):a.test(e)?NaN:+e}e.exports=function(e,n,t){var a,i,o,r,s,l,c=0,d=!1,g=!1,v=!0;if("function"!=typeof e)throw new TypeError("Expected a function");function b(n){var t=a,o=i;return a=i=void 0,c=n,r=e.apply(o,t)}function y(e){return c=e,s=setTimeout(j,n),d?b(e):r}function w(e){var t=e-l;return void 0===l||t>=n||t<0||g&&e-c>=o}function j(){var e=h();if(w(e))return x(e);s=setTimeout(j,function(e){var t=n-(e-l);return g?p(t,o-(e-c)):t}(e))}function x(e){return s=void 0,v&&a?b(e):(a=i=void 0,r)}function E(){var e=h(),t=w(e);if(a=arguments,i=this,l=e,t){if(void 0===s)return y(l);if(g)return s=setTimeout(j,n),b(l)}return void 0===s&&(s=setTimeout(j,n)),r}return n=f(n)||0,m(t)&&(d=!!t.leading,o=(g="maxWait"in t)?u(f(t.maxWait)||0,n):o,v="trailing"in t?!!t.trailing:v),E.cancel=function(){void 0!==s&&clearTimeout(s),c=0,a=l=i=s=void 0},E.flush=function(){return void 0===s?r:x(h())},E}},function(e,n,t){var a,i;
/* NProgress, (c) 2013, 2014 Rico Sta. Cruz - http://ricostacruz.com/nprogress
 * @license MIT */void 0===(i="function"==typeof(a=function(){var e,n,t={version:"0.2.0"},a=t.settings={minimum:.08,easing:"ease",positionUsing:"",speed:200,trickle:!0,trickleRate:.02,trickleSpeed:800,showSpinner:!0,barSelector:'[role="bar"]',spinnerSelector:'[role="spinner"]',parent:"body",template:'<div class="bar" role="bar"><div class="peg"></div></div><div class="spinner" role="spinner"><div class="spinner-icon"></div></div>'};function i(e,n,t){return e<n?n:e>t?t:e}function o(e){return 100*(-1+e)}t.configure=function(e){var n,t;for(n in e)void 0!==(t=e[n])&&e.hasOwnProperty(n)&&(a[n]=t);return this},t.status=null,t.set=function(e){var n=t.isStarted();e=i(e,a.minimum,1),t.status=1===e?null:e;var l=t.render(!n),c=l.querySelector(a.barSelector),d=a.speed,u=a.easing;return l.offsetWidth,r((function(n){""===a.positionUsing&&(a.positionUsing=t.getPositioningCSS()),s(c,function(e,n,t){var i;return(i="translate3d"===a.positionUsing?{transform:"translate3d("+o(e)+"%,0,0)"}:"translate"===a.positionUsing?{transform:"translate("+o(e)+"%,0)"}:{"margin-left":o(e)+"%"}).transition="all "+n+"ms "+t,i}(e,d,u)),1===e?(s(l,{transition:"none",opacity:1}),l.offsetWidth,setTimeout((function(){s(l,{transition:"all "+d+"ms linear",opacity:0}),setTimeout((function(){t.remove(),n()}),d)}),d)):setTimeout(n,d)})),this},t.isStarted=function(){return"number"==typeof t.status},t.start=function(){t.status||t.set(0);var e=function(){setTimeout((function(){t.status&&(t.trickle(),e())}),a.trickleSpeed)};return a.trickle&&e(),this},t.done=function(e){return e||t.status?t.inc(.3+.5*Math.random()).set(1):this},t.inc=function(e){var n=t.status;return n?("number"!=typeof e&&(e=(1-n)*i(Math.random()*n,.1,.95)),n=i(n+e,0,.994),t.set(n)):t.start()},t.trickle=function(){return t.inc(Math.random()*a.trickleRate)},e=0,n=0,t.promise=function(a){return a&&"resolved"!==a.state()?(0===n&&t.start(),e++,n++,a.always((function(){0==--n?(e=0,t.done()):t.set((e-n)/e)})),this):this},t.render=function(e){if(t.isRendered())return document.getElementById("nprogress");c(document.documentElement,"nprogress-busy");var n=document.createElement("div");n.id="nprogress",n.innerHTML=a.template;var i,r=n.querySelector(a.barSelector),l=e?"-100":o(t.status||0),d=document.querySelector(a.parent);return s(r,{transition:"all 0 linear",transform:"translate3d("+l+"%,0,0)"}),a.showSpinner||(i=n.querySelector(a.spinnerSelector))&&p(i),d!=document.body&&c(d,"nprogress-custom-parent"),d.appendChild(n),n},t.remove=function(){d(document.documentElement,"nprogress-busy"),d(document.querySelector(a.parent),"nprogress-custom-parent");var e=document.getElementById("nprogress");e&&p(e)},t.isRendered=function(){return!!document.getElementById("nprogress")},t.getPositioningCSS=function(){var e=document.body.style,n="WebkitTransform"in e?"Webkit":"MozTransform"in e?"Moz":"msTransform"in e?"ms":"OTransform"in e?"O":"";return n+"Perspective"in e?"translate3d":n+"Transform"in e?"translate":"margin"};var r=function(){var e=[];function n(){var t=e.shift();t&&t(n)}return function(t){e.push(t),1==e.length&&n()}}(),s=function(){var e=["Webkit","O","Moz","ms"],n={};function t(t){return t=t.replace(/^-ms-/,"ms-").replace(/-([\da-z])/gi,(function(e,n){return n.toUpperCase()})),n[t]||(n[t]=function(n){var t=document.body.style;if(n in t)return n;for(var a,i=e.length,o=n.charAt(0).toUpperCase()+n.slice(1);i--;)if((a=e[i]+o)in t)return a;return n}(t))}function a(e,n,a){n=t(n),e.style[n]=a}return function(e,n){var t,i,o=arguments;if(2==o.length)for(t in n)void 0!==(i=n[t])&&n.hasOwnProperty(t)&&a(e,t,i);else a(e,o[1],o[2])}}();function l(e,n){return("string"==typeof e?e:u(e)).indexOf(" "+n+" ")>=0}function c(e,n){var t=u(e),a=t+n;l(t,n)||(e.className=a.substring(1))}function d(e,n){var t,a=u(e);l(e,n)&&(t=a.replace(" "+n+" "," "),e.className=t.substring(1,t.length-1))}function u(e){return(" "+(e.className||"")+" ").replace(/\s+/gi," ")}function p(e){e&&e.parentNode&&e.parentNode.removeChild(e)}return t})?a.call(n,t,n,e):a)||(e.exports=i)},function(e,n,t){"use strict";var a=t(11),i=String,o=TypeError;e.exports=function(e){if(a(e))return e;throw o(i(e)+" is not an object")}},function(e,n,t){"use strict";var a=t(4),i=t(61).f,o=t(19),r=t(116),s=t(42),l=t(75),c=t(144);e.exports=function(e,n){var t,d,u,p,h,m=e.target,f=e.global,g=e.stat;if(t=f?a:g?a[m]||s(m,{}):(a[m]||{}).prototype)for(d in n){if(p=n[d],u=e.dontCallGetSet?(h=i(t,d))&&h.value:t[d],!c(f?d:m+(g?".":"#")+d,e.forced)&&void 0!==u){if(typeof p==typeof u)continue;l(p,u)}(e.sham||u&&u.sham)&&o(p,"sham",!0),r(t,d,p,e)}}},function(e,n,t){"use strict";var a=t(6);e.exports=!a((function(){var e=function(){}.bind();return"function"!=typeof e||e.hasOwnProperty("prototype")}))},function(e,n,t){"use strict";var a=t(58),i=t(62);e.exports=function(e){return a(i(e))}},function(e,n,t){"use strict";var a=t(4),i=t(2),o=function(e){return i(e)?e:void 0};e.exports=function(e,n){return arguments.length<2?o(a[e]):a[e]&&a[e][n]}},function(e,n,t){"use strict";var a=t(2),i=t(131),o=TypeError;e.exports=function(e){if(a(e))return e;throw o(i(e)+" is not a function")}},function(e,n,t){"use strict";var a=t(4),i=t(71),o=t(10),r=t(73),s=t(69),l=t(68),c=a.Symbol,d=i("wks"),u=l?c.for||c:c&&c.withoutSetter||r;e.exports=function(e){return o(d,e)||(d[e]=s&&o(c,e)?c[e]:u("Symbol."+e)),d[e]}},function(e,n,t){"use strict";var a=t(62),i=Object;e.exports=function(e){return i(a(e))}},function(e,n,t){"use strict";var a=t(142);e.exports=function(e){return a(e.length)}},function(e,n,t){"use strict";var a=t(32),i=Function.prototype.call;e.exports=a?i.bind(i):function(){return i.apply(i,arguments)}},function(e,n,t){"use strict";e.exports=function(e,n){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:n}}},function(e,n,t){"use strict";var a=t(4),i=t(42),o=a["__core-js_shared__"]||i("__core-js_shared__",{});e.exports=o},function(e,n,t){"use strict";var a=t(4),i=Object.defineProperty;e.exports=function(e,n){try{i(a,e,{value:n,configurable:!0,writable:!0})}catch(t){a[e]=n}return n}},function(e,n,t){var a=t(167),i=t(15),o=Object.prototype,r=o.hasOwnProperty,s=o.propertyIsEnumerable,l=a(function(){return arguments}())?a:function(e){return i(e)&&r.call(e,"callee")&&!s.call(e,"callee")};e.exports=l},function(e,n,t){var a=t(12)(t(9),"Map");e.exports=a},function(e,n){e.exports=function(e){var n=typeof e;return null!=e&&("object"==n||"function"==n)}},function(e,n,t){var a=t(187),i=t(194),o=t(196),r=t(197),s=t(198);function l(e){var n=-1,t=null==e?0:e.length;for(this.clear();++n<t;){var a=e[n];this.set(a[0],a[1])}}l.prototype.clear=a,l.prototype.delete=i,l.prototype.get=o,l.prototype.has=r,l.prototype.set=s,e.exports=l},function(e,n){e.exports=function(e){var n=-1,t=Array(e.size);return e.forEach((function(e){t[++n]=e})),t}},function(e,n){e.exports=function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=9007199254740991}},function(e,n,t){var a=t(8),i=t(50),o=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,r=/^\w*$/;e.exports=function(e,n){if(a(e))return!1;var t=typeof e;return!("number"!=t&&"symbol"!=t&&"boolean"!=t&&null!=e&&!i(e))||(r.test(e)||!o.test(e)||null!=n&&e in Object(n))}},function(e,n,t){var a=t(18),i=t(15);e.exports=function(e){return"symbol"==typeof e||i(e)&&"[object Symbol]"==a(e)}},function(e,n){e.exports=function(e){return e}},function(e,n,t){"use strict";var a=SyntaxError,i=Function,o=TypeError,r=function(e){try{return i('"use strict"; return ('+e+").constructor;")()}catch(e){}},s=Object.getOwnPropertyDescriptor;if(s)try{s({},"")}catch(e){s=null}var l=function(){throw new o},c=s?function(){try{return l}catch(e){try{return s(arguments,"callee").get}catch(e){return l}}}():l,d=t(264)(),u=t(266)(),p=Object.getPrototypeOf||(u?function(e){return e.__proto__}:null),h={},m="undefined"!=typeof Uint8Array&&p?p(Uint8Array):void 0,f={"%AggregateError%":"undefined"==typeof AggregateError?void 0:AggregateError,"%Array%":Array,"%ArrayBuffer%":"undefined"==typeof ArrayBuffer?void 0:ArrayBuffer,"%ArrayIteratorPrototype%":d&&p?p([][Symbol.iterator]()):void 0,"%AsyncFromSyncIteratorPrototype%":void 0,"%AsyncFunction%":h,"%AsyncGenerator%":h,"%AsyncGeneratorFunction%":h,"%AsyncIteratorPrototype%":h,"%Atomics%":"undefined"==typeof Atomics?void 0:Atomics,"%BigInt%":"undefined"==typeof BigInt?void 0:BigInt,"%BigInt64Array%":"undefined"==typeof BigInt64Array?void 0:BigInt64Array,"%BigUint64Array%":"undefined"==typeof BigUint64Array?void 0:BigUint64Array,"%Boolean%":Boolean,"%DataView%":"undefined"==typeof DataView?void 0:DataView,"%Date%":Date,"%decodeURI%":decodeURI,"%decodeURIComponent%":decodeURIComponent,"%encodeURI%":encodeURI,"%encodeURIComponent%":encodeURIComponent,"%Error%":Error,"%eval%":eval,"%EvalError%":EvalError,"%Float32Array%":"undefined"==typeof Float32Array?void 0:Float32Array,"%Float64Array%":"undefined"==typeof Float64Array?void 0:Float64Array,"%FinalizationRegistry%":"undefined"==typeof FinalizationRegistry?void 0:FinalizationRegistry,"%Function%":i,"%GeneratorFunction%":h,"%Int8Array%":"undefined"==typeof Int8Array?void 0:Int8Array,"%Int16Array%":"undefined"==typeof Int16Array?void 0:Int16Array,"%Int32Array%":"undefined"==typeof Int32Array?void 0:Int32Array,"%isFinite%":isFinite,"%isNaN%":isNaN,"%IteratorPrototype%":d&&p?p(p([][Symbol.iterator]())):void 0,"%JSON%":"object"==typeof JSON?JSON:void 0,"%Map%":"undefined"==typeof Map?void 0:Map,"%MapIteratorPrototype%":"undefined"!=typeof Map&&d&&p?p((new Map)[Symbol.iterator]()):void 0,"%Math%":Math,"%Number%":Number,"%Object%":Object,"%parseFloat%":parseFloat,"%parseInt%":parseInt,"%Promise%":"undefined"==typeof Promise?void 0:Promise,"%Proxy%":"undefined"==typeof Proxy?void 0:Proxy,"%RangeError%":RangeError,"%ReferenceError%":ReferenceError,"%Reflect%":"undefined"==typeof Reflect?void 0:Reflect,"%RegExp%":RegExp,"%Set%":"undefined"==typeof Set?void 0:Set,"%SetIteratorPrototype%":"undefined"!=typeof Set&&d&&p?p((new Set)[Symbol.iterator]()):void 0,"%SharedArrayBuffer%":"undefined"==typeof SharedArrayBuffer?void 0:SharedArrayBuffer,"%String%":String,"%StringIteratorPrototype%":d&&p?p(""[Symbol.iterator]()):void 0,"%Symbol%":d?Symbol:void 0,"%SyntaxError%":a,"%ThrowTypeError%":c,"%TypedArray%":m,"%TypeError%":o,"%Uint8Array%":"undefined"==typeof Uint8Array?void 0:Uint8Array,"%Uint8ClampedArray%":"undefined"==typeof Uint8ClampedArray?void 0:Uint8ClampedArray,"%Uint16Array%":"undefined"==typeof Uint16Array?void 0:Uint16Array,"%Uint32Array%":"undefined"==typeof Uint32Array?void 0:Uint32Array,"%URIError%":URIError,"%WeakMap%":"undefined"==typeof WeakMap?void 0:WeakMap,"%WeakRef%":"undefined"==typeof WeakRef?void 0:WeakRef,"%WeakSet%":"undefined"==typeof WeakSet?void 0:WeakSet};if(p)try{null.error}catch(e){var g=p(p(e));f["%Error.prototype%"]=g}var v={"%ArrayBufferPrototype%":["ArrayBuffer","prototype"],"%ArrayPrototype%":["Array","prototype"],"%ArrayProto_entries%":["Array","prototype","entries"],"%ArrayProto_forEach%":["Array","prototype","forEach"],"%ArrayProto_keys%":["Array","prototype","keys"],"%ArrayProto_values%":["Array","prototype","values"],"%AsyncFunctionPrototype%":["AsyncFunction","prototype"],"%AsyncGenerator%":["AsyncGeneratorFunction","prototype"],"%AsyncGeneratorPrototype%":["AsyncGeneratorFunction","prototype","prototype"],"%BooleanPrototype%":["Boolean","prototype"],"%DataViewPrototype%":["DataView","prototype"],"%DatePrototype%":["Date","prototype"],"%ErrorPrototype%":["Error","prototype"],"%EvalErrorPrototype%":["EvalError","prototype"],"%Float32ArrayPrototype%":["Float32Array","prototype"],"%Float64ArrayPrototype%":["Float64Array","prototype"],"%FunctionPrototype%":["Function","prototype"],"%Generator%":["GeneratorFunction","prototype"],"%GeneratorPrototype%":["GeneratorFunction","prototype","prototype"],"%Int8ArrayPrototype%":["Int8Array","prototype"],"%Int16ArrayPrototype%":["Int16Array","prototype"],"%Int32ArrayPrototype%":["Int32Array","prototype"],"%JSONParse%":["JSON","parse"],"%JSONStringify%":["JSON","stringify"],"%MapPrototype%":["Map","prototype"],"%NumberPrototype%":["Number","prototype"],"%ObjectPrototype%":["Object","prototype"],"%ObjProto_toString%":["Object","prototype","toString"],"%ObjProto_valueOf%":["Object","prototype","valueOf"],"%PromisePrototype%":["Promise","prototype"],"%PromiseProto_then%":["Promise","prototype","then"],"%Promise_all%":["Promise","all"],"%Promise_reject%":["Promise","reject"],"%Promise_resolve%":["Promise","resolve"],"%RangeErrorPrototype%":["RangeError","prototype"],"%ReferenceErrorPrototype%":["ReferenceError","prototype"],"%RegExpPrototype%":["RegExp","prototype"],"%SetPrototype%":["Set","prototype"],"%SharedArrayBufferPrototype%":["SharedArrayBuffer","prototype"],"%StringPrototype%":["String","prototype"],"%SymbolPrototype%":["Symbol","prototype"],"%SyntaxErrorPrototype%":["SyntaxError","prototype"],"%TypedArrayPrototype%":["TypedArray","prototype"],"%TypeErrorPrototype%":["TypeError","prototype"],"%Uint8ArrayPrototype%":["Uint8Array","prototype"],"%Uint8ClampedArrayPrototype%":["Uint8ClampedArray","prototype"],"%Uint16ArrayPrototype%":["Uint16Array","prototype"],"%Uint32ArrayPrototype%":["Uint32Array","prototype"],"%URIErrorPrototype%":["URIError","prototype"],"%WeakMapPrototype%":["WeakMap","prototype"],"%WeakSetPrototype%":["WeakSet","prototype"]},b=t(53),y=t(268),w=b.call(Function.call,Array.prototype.concat),j=b.call(Function.apply,Array.prototype.splice),x=b.call(Function.call,String.prototype.replace),E=b.call(Function.call,String.prototype.slice),k=b.call(Function.call,RegExp.prototype.exec),C=/[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g,A=/\\(\\)?/g,S=function(e){var n=E(e,0,1),t=E(e,-1);if("%"===n&&"%"!==t)throw new a("invalid intrinsic syntax, expected closing `%`");if("%"===t&&"%"!==n)throw new a("invalid intrinsic syntax, expected opening `%`");var i=[];return x(e,C,(function(e,n,t,a){i[i.length]=t?x(a,A,"$1"):n||e})),i},P=function(e,n){var t,i=e;if(y(v,i)&&(i="%"+(t=v[i])[0]+"%"),y(f,i)){var s=f[i];if(s===h&&(s=function e(n){var t;if("%AsyncFunction%"===n)t=r("async function () {}");else if("%GeneratorFunction%"===n)t=r("function* () {}");else if("%AsyncGeneratorFunction%"===n)t=r("async function* () {}");else if("%AsyncGenerator%"===n){var a=e("%AsyncGeneratorFunction%");a&&(t=a.prototype)}else if("%AsyncIteratorPrototype%"===n){var i=e("%AsyncGenerator%");i&&p&&(t=p(i.prototype))}return f[n]=t,t}(i)),void 0===s&&!n)throw new o("intrinsic "+e+" exists, but is not available. Please file an issue!");return{alias:t,name:i,value:s}}throw new a("intrinsic "+e+" does not exist!")};e.exports=function(e,n){if("string"!=typeof e||0===e.length)throw new o("intrinsic name must be a non-empty string");if(arguments.length>1&&"boolean"!=typeof n)throw new o('"allowMissing" argument must be a boolean');if(null===k(/^%?[^%]*%?$/,e))throw new a("`%` may not be present anywhere but at the beginning and end of the intrinsic name");var t=S(e),i=t.length>0?t[0]:"",r=P("%"+i+"%",n),l=r.name,c=r.value,d=!1,u=r.alias;u&&(i=u[0],j(t,w([0,1],u)));for(var p=1,h=!0;p<t.length;p+=1){var m=t[p],g=E(m,0,1),v=E(m,-1);if(('"'===g||"'"===g||"`"===g||'"'===v||"'"===v||"`"===v)&&g!==v)throw new a("property names with quotes must have matching quotes");if("constructor"!==m&&h||(d=!0),y(f,l="%"+(i+="."+m)+"%"))c=f[l];else if(null!=c){if(!(m in c)){if(!n)throw new o("base intrinsic for "+e+" exists, but the property is not available.");return}if(s&&p+1>=t.length){var b=s(c,m);c=(h=!!b)&&"get"in b&&!("originalValue"in b.get)?b.get:c[m]}else h=y(c,m),c=c[m];h&&!d&&(f[l]=c)}}return c}},function(e,n,t){"use strict";var a=t(267);e.exports=Function.prototype.bind||a},function(e,n,t){"use strict";var a=String.prototype.replace,i=/%20/g,o="RFC1738",r="RFC3986";e.exports={default:r,formatters:{RFC1738:function(e){return a.call(e,i,"+")},RFC3986:function(e){return String(e)}},RFC1738:o,RFC3986:r}},function(e,n,t){var a=t(280);e.exports=function(e){return a(e,{weekStartsOn:1})}},function(e,n,t){"use strict";var a=t(3),i=t(292),o=t(103),r={"Content-Type":"application/x-www-form-urlencoded"};function s(e,n){!a.isUndefined(e)&&a.isUndefined(e["Content-Type"])&&(e["Content-Type"]=n)}var l,c={transitional:{silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},adapter:(("undefined"!=typeof XMLHttpRequest||"undefined"!=typeof process&&"[object process]"===Object.prototype.toString.call(process))&&(l=t(104)),l),transformRequest:[function(e,n){return i(n,"Accept"),i(n,"Content-Type"),a.isFormData(e)||a.isArrayBuffer(e)||a.isBuffer(e)||a.isStream(e)||a.isFile(e)||a.isBlob(e)?e:a.isArrayBufferView(e)?e.buffer:a.isURLSearchParams(e)?(s(n,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):a.isObject(e)||n&&"application/json"===n["Content-Type"]?(s(n,"application/json"),function(e,n,t){if(a.isString(e))try{return(n||JSON.parse)(e),a.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(t||JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){var n=this.transitional,t=n&&n.silentJSONParsing,i=n&&n.forcedJSONParsing,r=!t&&"json"===this.responseType;if(r||i&&a.isString(e)&&e.length)try{return JSON.parse(e)}catch(e){if(r){if("SyntaxError"===e.name)throw o(e,this,"E_JSON_PARSE");throw e}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(e){return e>=200&&e<300}};c.headers={common:{Accept:"application/json, text/plain, */*"}},a.forEach(["delete","get","head"],(function(e){c.headers[e]={}})),a.forEach(["post","put","patch"],(function(e){c.headers[e]=a.merge(r)})),e.exports=c},function(e,n,t){"use strict";var a=t(31),i=t(37),o=t(38),r=t(148),s=t(150);a({target:"Array",proto:!0,arity:1,forced:t(6)((function(){return 4294967297!==[].push.call({length:4294967296},1)}))||!function(){try{Object.defineProperty([],"length",{writable:!1}).push()}catch(e){return e instanceof TypeError}}()},{push:function(e){var n=i(this),t=o(n),a=arguments.length;s(t+a);for(var l=0;l<a;l++)n[t]=arguments[l],t++;return r(n,t),t}})},function(e,n,t){"use strict";var a=t(5),i=t(6),o=t(22),r=Object,s=a("".split);e.exports=i((function(){return!r("z").propertyIsEnumerable(0)}))?function(e){return"String"===o(e)?s(e,""):r(e)}:r},function(e,n,t){"use strict";e.exports={}},function(e,n){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,n,t){"use strict";var a=t(7),i=t(39),o=t(127),r=t(40),s=t(33),l=t(64),c=t(10),d=t(74),u=Object.getOwnPropertyDescriptor;n.f=a?u:function(e,n){if(e=s(e),n=l(n),d)try{return u(e,n)}catch(e){}if(c(e,n))return r(!i(o.f,e,n),e[n])}},function(e,n,t){"use strict";var a=t(63),i=TypeError;e.exports=function(e){if(a(e))throw i("Can't call method on "+e);return e}},function(e,n,t){"use strict";e.exports=function(e){return null==e}},function(e,n,t){"use strict";var a=t(128),i=t(66);e.exports=function(e){var n=a(e,"string");return i(n)?n:n+""}},function(e,n,t){"use strict";var a="object"==typeof document&&document.all,i=void 0===a&&void 0!==a;e.exports={all:a,IS_HTMLDDA:i}},function(e,n,t){"use strict";var a=t(34),i=t(2),o=t(67),r=t(68),s=Object;e.exports=r?function(e){return"symbol"==typeof e}:function(e){var n=a("Symbol");return i(n)&&o(n.prototype,s(e))}},function(e,n,t){"use strict";var a=t(5);e.exports=a({}.isPrototypeOf)},function(e,n,t){"use strict";var a=t(69);e.exports=a&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(e,n,t){"use strict";var a=t(70),i=t(6),o=t(4).String;e.exports=!!Object.getOwnPropertySymbols&&!i((function(){var e=Symbol("symbol detection");return!o(e)||!(Object(e)instanceof Symbol)||!Symbol.sham&&a&&a<41}))},function(e,n,t){"use strict";var a,i,o=t(4),r=t(129),s=o.process,l=o.Deno,c=s&&s.versions||l&&l.version,d=c&&c.v8;d&&(i=(a=d.split("."))[0]>0&&a[0]<4?1:+(a[0]+a[1])),!i&&r&&(!(a=r.match(/Edge\/(\d+)/))||a[1]>=74)&&(a=r.match(/Chrome\/(\d+)/))&&(i=+a[1]),e.exports=i},function(e,n,t){"use strict";var a=t(72),i=t(41);(e.exports=function(e,n){return i[e]||(i[e]=void 0!==n?n:{})})("versions",[]).push({version:"3.32.2",mode:a?"pure":"global",copyright:"© 2014-2023 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.32.2/LICENSE",source:"https://github.com/zloirock/core-js"})},function(e,n,t){"use strict";e.exports=!1},function(e,n,t){"use strict";var a=t(5),i=0,o=Math.random(),r=a(1..toString);e.exports=function(e){return"Symbol("+(void 0===e?"":e)+")_"+r(++i+o,36)}},function(e,n,t){"use strict";var a=t(7),i=t(6),o=t(121);e.exports=!a&&!i((function(){return 7!==Object.defineProperty(o("div"),"a",{get:function(){return 7}}).a}))},function(e,n,t){"use strict";var a=t(10),i=t(137),o=t(61),r=t(21);e.exports=function(e,n,t){for(var s=i(n),l=r.f,c=o.f,d=0;d<s.length;d++){var u=s[d];a(e,u)||t&&a(t,u)||l(e,u,c(n,u))}}},function(e,n,t){"use strict";var a=t(141);e.exports=function(e){var n=+e;return n!=n||0===n?0:a(n)}},function(e,n,t){"use strict";var a=t(154),i=t(30),o=t(155);e.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var e,n=!1,t={};try{(e=a(Object.prototype,"__proto__","set"))(t,[]),n=t instanceof Array}catch(e){}return function(t,a){return i(t),o(a),n?e(t,a):t.__proto__=a,t}}():void 0)},function(e,n){e.exports=function(e,n){for(var t=-1,a=n.length,i=e.length;++t<a;)e[i+t]=n[t];return e}},function(e,n){var t="object"==typeof global&&global&&global.Object===Object&&global;e.exports=t},function(e,n,t){var a=t(23),i=t(178),o=t(179),r=t(180),s=t(181),l=t(182);function c(e){var n=this.__data__=new a(e);this.size=n.size}c.prototype.clear=i,c.prototype.delete=o,c.prototype.get=r,c.prototype.has=s,c.prototype.set=l,e.exports=c},function(e,n){e.exports=function(e,n){return e===n||e!=e&&n!=n}},function(e,n,t){var a=t(18),i=t(45);e.exports=function(e){if(!i(e))return!1;var n=a(e);return"[object Function]"==n||"[object GeneratorFunction]"==n||"[object AsyncFunction]"==n||"[object Proxy]"==n}},function(e,n){var t=Function.prototype.toString;e.exports=function(e){if(null!=e){try{return t.call(e)}catch(e){}try{return e+""}catch(e){}}return""}},function(e,n,t){var a=t(199),i=t(15);e.exports=function e(n,t,o,r,s){return n===t||(null==n||null==t||!i(n)&&!i(t)?n!=n&&t!=t:a(n,t,o,r,e,s))}},function(e,n,t){var a=t(86),i=t(202),o=t(87);e.exports=function(e,n,t,r,s,l){var c=1&t,d=e.length,u=n.length;if(d!=u&&!(c&&u>d))return!1;var p=l.get(e),h=l.get(n);if(p&&h)return p==n&&h==e;var m=-1,f=!0,g=2&t?new a:void 0;for(l.set(e,n),l.set(n,e);++m<d;){var v=e[m],b=n[m];if(r)var y=c?r(b,v,m,n,e,l):r(v,b,m,e,n,l);if(void 0!==y){if(y)continue;f=!1;break}if(g){if(!i(n,(function(e,n){if(!o(g,n)&&(v===e||s(v,e,t,r,l)))return g.push(n)}))){f=!1;break}}else if(v!==b&&!s(v,b,t,r,l)){f=!1;break}}return l.delete(e),l.delete(n),f}},function(e,n,t){var a=t(46),i=t(200),o=t(201);function r(e){var n=-1,t=null==e?0:e.length;for(this.__data__=new a;++n<t;)this.add(e[n])}r.prototype.add=r.prototype.push=i,r.prototype.has=o,e.exports=r},function(e,n){e.exports=function(e,n){return e.has(n)}},function(e,n,t){var a=t(212),i=t(218),o=t(92);e.exports=function(e){return o(e)?a(e):i(e)}},function(e,n,t){(function(e){var a=t(9),i=t(214),o=n&&!n.nodeType&&n,r=o&&"object"==typeof e&&e&&!e.nodeType&&e,s=r&&r.exports===o?a.Buffer:void 0,l=(s?s.isBuffer:void 0)||i;e.exports=l}).call(this,t(60)(e))},function(e,n){var t=/^(?:0|[1-9]\d*)$/;e.exports=function(e,n){var a=typeof e;return!!(n=null==n?9007199254740991:n)&&("number"==a||"symbol"!=a&&t.test(e))&&e>-1&&e%1==0&&e<n}},function(e,n,t){var a=t(215),i=t(216),o=t(217),r=o&&o.isTypedArray,s=r?i(r):a;e.exports=s},function(e,n,t){var a=t(82),i=t(48);e.exports=function(e){return null!=e&&i(e.length)&&!a(e)}},function(e,n,t){var a=t(12)(t(9),"Set");e.exports=a},function(e,n,t){var a=t(45);e.exports=function(e){return e==e&&!a(e)}},function(e,n){e.exports=function(e,n){return function(t){return null!=t&&(t[e]===n&&(void 0!==n||e in Object(t)))}}},function(e,n,t){var a=t(97),i=t(27);e.exports=function(e,n){for(var t=0,o=(n=a(n,e)).length;null!=e&&t<o;)e=e[i(n[t++])];return t&&t==o?e:void 0}},function(e,n,t){var a=t(8),i=t(49),o=t(229),r=t(232);e.exports=function(e,n){return a(e)?e:i(e,n)?[e]:o(r(e))}},function(e,n,t){"use strict";var a=t(54),i=Object.prototype.hasOwnProperty,o=Array.isArray,r=function(){for(var e=[],n=0;n<256;++n)e.push("%"+((n<16?"0":"")+n.toString(16)).toUpperCase());return e}(),s=function(e,n){for(var t=n&&n.plainObjects?Object.create(null):{},a=0;a<e.length;++a)void 0!==e[a]&&(t[a]=e[a]);return t};e.exports={arrayToObject:s,assign:function(e,n){return Object.keys(n).reduce((function(e,t){return e[t]=n[t],e}),e)},combine:function(e,n){return[].concat(e,n)},compact:function(e){for(var n=[{obj:{o:e},prop:"o"}],t=[],a=0;a<n.length;++a)for(var i=n[a],r=i.obj[i.prop],s=Object.keys(r),l=0;l<s.length;++l){var c=s[l],d=r[c];"object"==typeof d&&null!==d&&-1===t.indexOf(d)&&(n.push({obj:r,prop:c}),t.push(d))}return function(e){for(;e.length>1;){var n=e.pop(),t=n.obj[n.prop];if(o(t)){for(var a=[],i=0;i<t.length;++i)void 0!==t[i]&&a.push(t[i]);n.obj[n.prop]=a}}}(n),e},decode:function(e,n,t){var a=e.replace(/\+/g," ");if("iso-8859-1"===t)return a.replace(/%[0-9a-f]{2}/gi,unescape);try{return decodeURIComponent(a)}catch(e){return a}},encode:function(e,n,t,i,o){if(0===e.length)return e;var s=e;if("symbol"==typeof e?s=Symbol.prototype.toString.call(e):"string"!=typeof e&&(s=String(e)),"iso-8859-1"===t)return escape(s).replace(/%u[0-9a-f]{4}/gi,(function(e){return"%26%23"+parseInt(e.slice(2),16)+"%3B"}));for(var l="",c=0;c<s.length;++c){var d=s.charCodeAt(c);45===d||46===d||95===d||126===d||d>=48&&d<=57||d>=65&&d<=90||d>=97&&d<=122||o===a.RFC1738&&(40===d||41===d)?l+=s.charAt(c):d<128?l+=r[d]:d<2048?l+=r[192|d>>6]+r[128|63&d]:d<55296||d>=57344?l+=r[224|d>>12]+r[128|d>>6&63]+r[128|63&d]:(c+=1,d=65536+((1023&d)<<10|1023&s.charCodeAt(c)),l+=r[240|d>>18]+r[128|d>>12&63]+r[128|d>>6&63]+r[128|63&d])}return l},isBuffer:function(e){return!(!e||"object"!=typeof e)&&!!(e.constructor&&e.constructor.isBuffer&&e.constructor.isBuffer(e))},isRegExp:function(e){return"[object RegExp]"===Object.prototype.toString.call(e)},maybeMap:function(e,n){if(o(e)){for(var t=[],a=0;a<e.length;a+=1)t.push(n(e[a]));return t}return n(e)},merge:function e(n,t,a){if(!t)return n;if("object"!=typeof t){if(o(n))n.push(t);else{if(!n||"object"!=typeof n)return[n,t];(a&&(a.plainObjects||a.allowPrototypes)||!i.call(Object.prototype,t))&&(n[t]=!0)}return n}if(!n||"object"!=typeof n)return[n].concat(t);var r=n;return o(n)&&!o(t)&&(r=s(n,a)),o(n)&&o(t)?(t.forEach((function(t,o){if(i.call(n,o)){var r=n[o];r&&"object"==typeof r&&t&&"object"==typeof t?n[o]=e(r,t,a):n.push(t)}else n[o]=t})),n):Object.keys(t).reduce((function(n,o){var r=t[o];return i.call(n,o)?n[o]=e(n[o],r,a):n[o]=r,n}),r)}}},function(e,n){e.exports=function(e){return e instanceof Date}},function(e,n,t){var a=t(13),i=t(55);e.exports=function(e){var n=a(e),t=n.getFullYear(),o=new Date(0);o.setFullYear(t+1,0,4),o.setHours(0,0,0,0);var r=i(o),s=new Date(0);s.setFullYear(t,0,4),s.setHours(0,0,0,0);var l=i(s);return n.getTime()>=r.getTime()?t+1:n.getTime()>=l.getTime()?t:t-1}},function(e,n,t){"use strict";e.exports=function(e,n){return function(){for(var t=new Array(arguments.length),a=0;a<t.length;a++)t[a]=arguments[a];return e.apply(n,t)}}},function(e,n,t){"use strict";var a=t(3);function i(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,n,t){if(!n)return e;var o;if(t)o=t(n);else if(a.isURLSearchParams(n))o=n.toString();else{var r=[];a.forEach(n,(function(e,n){null!=e&&(a.isArray(e)?n+="[]":e=[e],a.forEach(e,(function(e){a.isDate(e)?e=e.toISOString():a.isObject(e)&&(e=JSON.stringify(e)),r.push(i(n)+"="+i(e))})))})),o=r.join("&")}if(o){var s=e.indexOf("#");-1!==s&&(e=e.slice(0,s)),e+=(-1===e.indexOf("?")?"?":"&")+o}return e}},function(e,n,t){"use strict";e.exports=function(e,n,t,a,i){return e.config=n,t&&(e.code=t),e.request=a,e.response=i,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e}},function(e,n,t){"use strict";var a=t(3),i=t(293),o=t(294),r=t(102),s=t(295),l=t(298),c=t(299),d=t(105);e.exports=function(e){return new Promise((function(n,t){var u=e.data,p=e.headers,h=e.responseType;a.isFormData(u)&&delete p["Content-Type"];var m=new XMLHttpRequest;if(e.auth){var f=e.auth.username||"",g=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";p.Authorization="Basic "+btoa(f+":"+g)}var v=s(e.baseURL,e.url);function b(){if(m){var a="getAllResponseHeaders"in m?l(m.getAllResponseHeaders()):null,o={data:h&&"text"!==h&&"json"!==h?m.response:m.responseText,status:m.status,statusText:m.statusText,headers:a,config:e,request:m};i(n,t,o),m=null}}if(m.open(e.method.toUpperCase(),r(v,e.params,e.paramsSerializer),!0),m.timeout=e.timeout,"onloadend"in m?m.onloadend=b:m.onreadystatechange=function(){m&&4===m.readyState&&(0!==m.status||m.responseURL&&0===m.responseURL.indexOf("file:"))&&setTimeout(b)},m.onabort=function(){m&&(t(d("Request aborted",e,"ECONNABORTED",m)),m=null)},m.onerror=function(){t(d("Network Error",e,null,m)),m=null},m.ontimeout=function(){var n="timeout of "+e.timeout+"ms exceeded";e.timeoutErrorMessage&&(n=e.timeoutErrorMessage),t(d(n,e,e.transitional&&e.transitional.clarifyTimeoutError?"ETIMEDOUT":"ECONNABORTED",m)),m=null},a.isStandardBrowserEnv()){var y=(e.withCredentials||c(v))&&e.xsrfCookieName?o.read(e.xsrfCookieName):void 0;y&&(p[e.xsrfHeaderName]=y)}"setRequestHeader"in m&&a.forEach(p,(function(e,n){void 0===u&&"content-type"===n.toLowerCase()?delete p[n]:m.setRequestHeader(n,e)})),a.isUndefined(e.withCredentials)||(m.withCredentials=!!e.withCredentials),h&&"json"!==h&&(m.responseType=e.responseType),"function"==typeof e.onDownloadProgress&&m.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&m.upload&&m.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then((function(e){m&&(m.abort(),t(e),m=null)})),u||(u=null),m.send(u)}))}},function(e,n,t){"use strict";var a=t(103);e.exports=function(e,n,t,i,o){var r=new Error(e);return a(r,n,t,i,o)}},function(e,n,t){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,n,t){"use strict";var a=t(3);e.exports=function(e,n){n=n||{};var t={},i=["url","method","data"],o=["headers","auth","proxy","params"],r=["baseURL","transformRequest","transformResponse","paramsSerializer","timeout","timeoutMessage","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","decompress","maxContentLength","maxBodyLength","maxRedirects","transport","httpAgent","httpsAgent","cancelToken","socketPath","responseEncoding"],s=["validateStatus"];function l(e,n){return a.isPlainObject(e)&&a.isPlainObject(n)?a.merge(e,n):a.isPlainObject(n)?a.merge({},n):a.isArray(n)?n.slice():n}function c(i){a.isUndefined(n[i])?a.isUndefined(e[i])||(t[i]=l(void 0,e[i])):t[i]=l(e[i],n[i])}a.forEach(i,(function(e){a.isUndefined(n[e])||(t[e]=l(void 0,n[e]))})),a.forEach(o,c),a.forEach(r,(function(i){a.isUndefined(n[i])?a.isUndefined(e[i])||(t[i]=l(void 0,e[i])):t[i]=l(void 0,n[i])})),a.forEach(s,(function(a){a in n?t[a]=l(e[a],n[a]):a in e&&(t[a]=l(void 0,e[a]))}));var d=i.concat(o).concat(r).concat(s),u=Object.keys(e).concat(Object.keys(n)).filter((function(e){return-1===d.indexOf(e)}));return a.forEach(u,c),t}},function(e,n,t){"use strict";function a(e){this.message=e}a.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},a.prototype.__CANCEL__=!0,e.exports=a},function(e,n,t){},function(e,n,t){},function(e,n,t){},function(e,n,t){var a=t(165),i=t(170),o=t(241),r=t(249),s=t(258),l=t(118),c=o((function(e){var n=l(e);return s(n)&&(n=void 0),r(a(e,1,s,!0),i(n,2))}));e.exports=c},function(e,n,t){"use strict";
/*!
 * escape-html
 * Copyright(c) 2012-2013 TJ Holowaychuk
 * Copyright(c) 2015 Andreas Lubbe
 * Copyright(c) 2015 Tiancheng "Timothy" Gu
 * MIT Licensed
 */var a=/["'&<>]/;e.exports=function(e){var n,t=""+e,i=a.exec(t);if(!i)return t;var o="",r=0,s=0;for(r=i.index;r<t.length;r++){switch(t.charCodeAt(r)){case 34:n="&quot;";break;case 38:n="&amp;";break;case 39:n="&#39;";break;case 60:n="&lt;";break;case 62:n="&gt;";break;default:continue}s!==r&&(o+=t.substring(s,r)),s=r+1,o+=n}return s!==r?o+t.substring(s,r):o}},function(e,n,t){var a=t(274),i=t(279),o=t(100),r=t(13),s=t(282),l=t(283);var c={M:function(e){return e.getMonth()+1},MM:function(e){return p(e.getMonth()+1,2)},Q:function(e){return Math.ceil((e.getMonth()+1)/3)},D:function(e){return e.getDate()},DD:function(e){return p(e.getDate(),2)},DDD:function(e){return a(e)},DDDD:function(e){return p(a(e),3)},d:function(e){return e.getDay()},E:function(e){return e.getDay()||7},W:function(e){return i(e)},WW:function(e){return p(i(e),2)},YY:function(e){return p(e.getFullYear(),4).substr(2)},YYYY:function(e){return p(e.getFullYear(),4)},GG:function(e){return String(o(e)).substr(2)},GGGG:function(e){return o(e)},H:function(e){return e.getHours()},HH:function(e){return p(e.getHours(),2)},h:function(e){var n=e.getHours();return 0===n?12:n>12?n%12:n},hh:function(e){return p(c.h(e),2)},m:function(e){return e.getMinutes()},mm:function(e){return p(e.getMinutes(),2)},s:function(e){return e.getSeconds()},ss:function(e){return p(e.getSeconds(),2)},S:function(e){return Math.floor(e.getMilliseconds()/100)},SS:function(e){return p(Math.floor(e.getMilliseconds()/10),2)},SSS:function(e){return p(e.getMilliseconds(),3)},Z:function(e){return u(e.getTimezoneOffset(),":")},ZZ:function(e){return u(e.getTimezoneOffset())},X:function(e){return Math.floor(e.getTime()/1e3)},x:function(e){return e.getTime()}};function d(e){return e.match(/\[[\s\S]/)?e.replace(/^\[|]$/g,""):e.replace(/\\/g,"")}function u(e,n){n=n||"";var t=e>0?"-":"+",a=Math.abs(e),i=a%60;return t+p(Math.floor(a/60),2)+n+p(i,2)}function p(e,n){for(var t=Math.abs(e).toString();t.length<n;)t="0"+t;return t}e.exports=function(e,n,t){var a=n?String(n):"YYYY-MM-DDTHH:mm:ss.SSSZ",i=(t||{}).locale,o=l.format.formatters,u=l.format.formattingTokensRegExp;i&&i.format&&i.format.formatters&&(o=i.format.formatters,i.format.formattingTokensRegExp&&(u=i.format.formattingTokensRegExp));var p=r(e);return s(p)?function(e,n,t){var a,i,o=e.match(t),r=o.length;for(a=0;a<r;a++)i=n[o[a]]||c[o[a]],o[a]=i||d(o[a]);return function(e){for(var n="",t=0;t<r;t++)o[t]instanceof Function?n+=o[t](e,c):n+=o[t];return n}}(a,o,u)(p):"Invalid Date"}},function(e,n,t){e.exports=t(287)},function(e,n,t){"use strict";var a=t(2),i=t(21),o=t(119),r=t(42);e.exports=function(e,n,t,s){s||(s={});var l=s.enumerable,c=void 0!==s.name?s.name:n;if(a(t)&&o(t,c,s),s.global)l?e[n]=t:r(n,t);else{try{s.unsafe?e[n]&&(l=!0):delete e[n]}catch(e){}l?e[n]=t:i.f(e,n,{value:t,enumerable:!1,configurable:!s.nonConfigurable,writable:!s.nonWritable})}return e}},function(e,n,t){"use strict";var a=t(159),i=String;e.exports=function(e){if("Symbol"===a(e))throw TypeError("Cannot convert a Symbol value to a string");return i(e)}},function(e,n){e.exports=function(e){var n=null==e?0:e.length;return n?e[n-1]:void 0}},function(e,n,t){"use strict";var a=t(5),i=t(6),o=t(2),r=t(10),s=t(7),l=t(133).CONFIGURABLE,c=t(134),d=t(135),u=d.enforce,p=d.get,h=String,m=Object.defineProperty,f=a("".slice),g=a("".replace),v=a([].join),b=s&&!i((function(){return 8!==m((function(){}),"length",{value:8}).length})),y=String(String).split("String"),w=e.exports=function(e,n,t){"Symbol("===f(h(n),0,7)&&(n="["+g(h(n),/^Symbol\(([^)]*)\)/,"$1")+"]"),t&&t.getter&&(n="get "+n),t&&t.setter&&(n="set "+n),(!r(e,"name")||l&&e.name!==n)&&(s?m(e,"name",{value:n,configurable:!0}):e.name=n),b&&t&&r(t,"arity")&&e.length!==t.arity&&m(e,"length",{value:t.arity});try{t&&r(t,"constructor")&&t.constructor?s&&m(e,"prototype",{writable:!1}):e.prototype&&(e.prototype=void 0)}catch(e){}var a=u(e);return r(a,"source")||(a.source=v(y,"string"==typeof n?n:"")),e};Function.prototype.toString=w((function(){return o(this)&&p(this).source||c(this)}),"toString")},function(e,n,t){"use strict";e.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(e,n,t){"use strict";var a=t(4),i=t(11),o=a.document,r=i(o)&&i(o.createElement);e.exports=function(e){return r?o.createElement(e):{}}},function(e,n,t){"use strict";var a=t(7),i=t(6);e.exports=a&&i((function(){return 42!==Object.defineProperty((function(){}),"prototype",{value:42,writable:!1}).prototype}))},function(e,n,t){"use strict";var a=t(71),i=t(73),o=a("keys");e.exports=function(e){return o[e]||(o[e]=i(e))}},function(e,n,t){"use strict";var a=t(5),i=t(10),o=t(33),r=t(139).indexOf,s=t(59),l=a([].push);e.exports=function(e,n){var t,a=o(e),c=0,d=[];for(t in a)!i(s,t)&&i(a,t)&&l(d,t);for(;n.length>c;)i(a,t=n[c++])&&(~r(d,t)||l(d,t));return d}},function(e,n,t){e.exports=t(309)},function(e,n,t){"use strict";var a=t(31),i=t(145).left,o=t(146),r=t(70);a({target:"Array",proto:!0,forced:!t(147)&&r>79&&r<83||!o("reduce")},{reduce:function(e){var n=arguments.length;return i(this,e,n,n>1?arguments[1]:void 0)}})},function(e,n,t){"use strict";var a={}.propertyIsEnumerable,i=Object.getOwnPropertyDescriptor,o=i&&!a.call({1:2},1);n.f=o?function(e){var n=i(this,e);return!!n&&n.enumerable}:a},function(e,n,t){"use strict";var a=t(39),i=t(11),o=t(66),r=t(130),s=t(132),l=t(36),c=TypeError,d=l("toPrimitive");e.exports=function(e,n){if(!i(e)||o(e))return e;var t,l=r(e,d);if(l){if(void 0===n&&(n="default"),t=a(l,e,n),!i(t)||o(t))return t;throw c("Can't convert object to primitive value")}return void 0===n&&(n="number"),s(e,n)}},function(e,n,t){"use strict";e.exports="undefined"!=typeof navigator&&String(navigator.userAgent)||""},function(e,n,t){"use strict";var a=t(35),i=t(63);e.exports=function(e,n){var t=e[n];return i(t)?void 0:a(t)}},function(e,n,t){"use strict";var a=String;e.exports=function(e){try{return a(e)}catch(e){return"Object"}}},function(e,n,t){"use strict";var a=t(39),i=t(2),o=t(11),r=TypeError;e.exports=function(e,n){var t,s;if("string"===n&&i(t=e.toString)&&!o(s=a(t,e)))return s;if(i(t=e.valueOf)&&!o(s=a(t,e)))return s;if("string"!==n&&i(t=e.toString)&&!o(s=a(t,e)))return s;throw r("Can't convert object to primitive value")}},function(e,n,t){"use strict";var a=t(7),i=t(10),o=Function.prototype,r=a&&Object.getOwnPropertyDescriptor,s=i(o,"name"),l=s&&"something"===function(){}.name,c=s&&(!a||a&&r(o,"name").configurable);e.exports={EXISTS:s,PROPER:l,CONFIGURABLE:c}},function(e,n,t){"use strict";var a=t(5),i=t(2),o=t(41),r=a(Function.toString);i(o.inspectSource)||(o.inspectSource=function(e){return r(e)}),e.exports=o.inspectSource},function(e,n,t){"use strict";var a,i,o,r=t(136),s=t(4),l=t(11),c=t(19),d=t(10),u=t(41),p=t(123),h=t(59),m=s.TypeError,f=s.WeakMap;if(r||u.state){var g=u.state||(u.state=new f);g.get=g.get,g.has=g.has,g.set=g.set,a=function(e,n){if(g.has(e))throw m("Object already initialized");return n.facade=e,g.set(e,n),n},i=function(e){return g.get(e)||{}},o=function(e){return g.has(e)}}else{var v=p("state");h[v]=!0,a=function(e,n){if(d(e,v))throw m("Object already initialized");return n.facade=e,c(e,v,n),n},i=function(e){return d(e,v)?e[v]:{}},o=function(e){return d(e,v)}}e.exports={set:a,get:i,has:o,enforce:function(e){return o(e)?i(e):a(e,{})},getterFor:function(e){return function(n){var t;if(!l(n)||(t=i(n)).type!==e)throw m("Incompatible receiver, "+e+" required");return t}}}},function(e,n,t){"use strict";var a=t(4),i=t(2),o=a.WeakMap;e.exports=i(o)&&/native code/.test(String(o))},function(e,n,t){"use strict";var a=t(34),i=t(5),o=t(138),r=t(143),s=t(30),l=i([].concat);e.exports=a("Reflect","ownKeys")||function(e){var n=o.f(s(e)),t=r.f;return t?l(n,t(e)):n}},function(e,n,t){"use strict";var a=t(124),i=t(120).concat("length","prototype");n.f=Object.getOwnPropertyNames||function(e){return a(e,i)}},function(e,n,t){"use strict";var a=t(33),i=t(140),o=t(38),r=function(e){return function(n,t,r){var s,l=a(n),c=o(l),d=i(r,c);if(e&&t!=t){for(;c>d;)if((s=l[d++])!=s)return!0}else for(;c>d;d++)if((e||d in l)&&l[d]===t)return e||d||0;return!e&&-1}};e.exports={includes:r(!0),indexOf:r(!1)}},function(e,n,t){"use strict";var a=t(76),i=Math.max,o=Math.min;e.exports=function(e,n){var t=a(e);return t<0?i(t+n,0):o(t,n)}},function(e,n,t){"use strict";var a=Math.ceil,i=Math.floor;e.exports=Math.trunc||function(e){var n=+e;return(n>0?i:a)(n)}},function(e,n,t){"use strict";var a=t(76),i=Math.min;e.exports=function(e){return e>0?i(a(e),9007199254740991):0}},function(e,n,t){"use strict";n.f=Object.getOwnPropertySymbols},function(e,n,t){"use strict";var a=t(6),i=t(2),o=/#|\.prototype\./,r=function(e,n){var t=l[s(e)];return t===d||t!==c&&(i(n)?a(n):!!n)},s=r.normalize=function(e){return String(e).replace(o,".").toLowerCase()},l=r.data={},c=r.NATIVE="N",d=r.POLYFILL="P";e.exports=r},function(e,n,t){"use strict";var a=t(35),i=t(37),o=t(58),r=t(38),s=TypeError,l=function(e){return function(n,t,l,c){a(t);var d=i(n),u=o(d),p=r(d),h=e?p-1:0,m=e?-1:1;if(l<2)for(;;){if(h in u){c=u[h],h+=m;break}if(h+=m,e?h<0:p<=h)throw s("Reduce of empty array with no initial value")}for(;e?h>=0:p>h;h+=m)h in u&&(c=t(c,u[h],h,d));return c}};e.exports={left:l(!1),right:l(!0)}},function(e,n,t){"use strict";var a=t(6);e.exports=function(e,n){var t=[][e];return!!t&&a((function(){t.call(null,n||function(){return 1},1)}))}},function(e,n,t){"use strict";var a=t(4),i=t(22);e.exports="process"===i(a.process)},function(e,n,t){"use strict";var a=t(7),i=t(149),o=TypeError,r=Object.getOwnPropertyDescriptor,s=a&&!function(){if(void 0!==this)return!0;try{Object.defineProperty([],"length",{writable:!1}).length=1}catch(e){return e instanceof TypeError}}();e.exports=s?function(e,n){if(i(e)&&!r(e,"length").writable)throw o("Cannot set read only .length");return e.length=n}:function(e,n){return e.length=n}},function(e,n,t){"use strict";var a=t(22);e.exports=Array.isArray||function(e){return"Array"===a(e)}},function(e,n,t){"use strict";var a=TypeError;e.exports=function(e){if(e>9007199254740991)throw a("Maximum allowed index exceeded");return e}},function(e,n,t){"use strict";var a=t(31),i=t(4),o=t(152),r=t(153),s=i.WebAssembly,l=7!==Error("e",{cause:7}).cause,c=function(e,n){var t={};t[e]=r(e,n,l),a({global:!0,constructor:!0,arity:1,forced:l},t)},d=function(e,n){if(s&&s[e]){var t={};t[e]=r("WebAssembly."+e,n,l),a({target:"WebAssembly",stat:!0,constructor:!0,arity:1,forced:l},t)}};c("Error",(function(e){return function(n){return o(e,this,arguments)}})),c("EvalError",(function(e){return function(n){return o(e,this,arguments)}})),c("RangeError",(function(e){return function(n){return o(e,this,arguments)}})),c("ReferenceError",(function(e){return function(n){return o(e,this,arguments)}})),c("SyntaxError",(function(e){return function(n){return o(e,this,arguments)}})),c("TypeError",(function(e){return function(n){return o(e,this,arguments)}})),c("URIError",(function(e){return function(n){return o(e,this,arguments)}})),d("CompileError",(function(e){return function(n){return o(e,this,arguments)}})),d("LinkError",(function(e){return function(n){return o(e,this,arguments)}})),d("RuntimeError",(function(e){return function(n){return o(e,this,arguments)}}))},function(e,n,t){"use strict";var a=t(32),i=Function.prototype,o=i.apply,r=i.call;e.exports="object"==typeof Reflect&&Reflect.apply||(a?r.bind(o):function(){return r.apply(o,arguments)})},function(e,n,t){"use strict";var a=t(34),i=t(10),o=t(19),r=t(67),s=t(77),l=t(75),c=t(156),d=t(157),u=t(158),p=t(161),h=t(162),m=t(7),f=t(72);e.exports=function(e,n,t,g){var v=g?2:1,b=e.split("."),y=b[b.length-1],w=a.apply(null,b);if(w){var j=w.prototype;if(!f&&i(j,"cause")&&delete j.cause,!t)return w;var x=a("Error"),E=n((function(e,n){var t=u(g?n:e,void 0),a=g?new w(e):new w;return void 0!==t&&o(a,"message",t),h(a,E,a.stack,2),this&&r(j,this)&&d(a,this,E),arguments.length>v&&p(a,arguments[v]),a}));if(E.prototype=j,"Error"!==y?s?s(E,x):l(E,x,{name:!0}):m&&"stackTraceLimit"in w&&(c(E,w,"stackTraceLimit"),c(E,w,"prepareStackTrace")),l(E,w),!f)try{j.name!==y&&o(j,"name",y),j.constructor=E}catch(e){}return E}}},function(e,n,t){"use strict";var a=t(5),i=t(35);e.exports=function(e,n,t){try{return a(i(Object.getOwnPropertyDescriptor(e,n)[t]))}catch(e){}}},function(e,n,t){"use strict";var a=t(2),i=String,o=TypeError;e.exports=function(e){if("object"==typeof e||a(e))return e;throw o("Can't set "+i(e)+" as a prototype")}},function(e,n,t){"use strict";var a=t(21).f;e.exports=function(e,n,t){t in e||a(e,t,{configurable:!0,get:function(){return n[t]},set:function(e){n[t]=e}})}},function(e,n,t){"use strict";var a=t(2),i=t(11),o=t(77);e.exports=function(e,n,t){var r,s;return o&&a(r=n.constructor)&&r!==t&&i(s=r.prototype)&&s!==t.prototype&&o(e,s),e}},function(e,n,t){"use strict";var a=t(117);e.exports=function(e,n){return void 0===e?arguments.length<2?"":n:a(e)}},function(e,n,t){"use strict";var a=t(160),i=t(2),o=t(22),r=t(36)("toStringTag"),s=Object,l="Arguments"===o(function(){return arguments}());e.exports=a?o:function(e){var n,t,a;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(t=function(e,n){try{return e[n]}catch(e){}}(n=s(e),r))?t:l?o(n):"Object"===(a=o(n))&&i(n.callee)?"Arguments":a}},function(e,n,t){"use strict";var a={};a[t(36)("toStringTag")]="z",e.exports="[object z]"===String(a)},function(e,n,t){"use strict";var a=t(11),i=t(19);e.exports=function(e,n){a(n)&&"cause"in n&&i(e,"cause",n.cause)}},function(e,n,t){"use strict";var a=t(19),i=t(163),o=t(164),r=Error.captureStackTrace;e.exports=function(e,n,t,s){o&&(r?r(e,n):a(e,"stack",i(t,s)))}},function(e,n,t){"use strict";var a=t(5),i=Error,o=a("".replace),r=String(i("zxcasd").stack),s=/\n\s*at [^:]*:[^\n]*/,l=s.test(r);e.exports=function(e,n){if(l&&"string"==typeof e&&!i.prepareStackTrace)for(;n--;)e=o(e,s,"");return e}},function(e,n,t){"use strict";var a=t(6),i=t(40);e.exports=!a((function(){var e=Error("a");return!("stack"in e)||(Object.defineProperty(e,"stack",i(1,7)),7!==e.stack)}))},function(e,n,t){var a=t(78),i=t(166);e.exports=function e(n,t,o,r,s){var l=-1,c=n.length;for(o||(o=i),s||(s=[]);++l<c;){var d=n[l];t>0&&o(d)?t>1?e(d,t-1,o,r,s):a(s,d):r||(s[s.length]=d)}return s}},function(e,n,t){var a=t(20),i=t(43),o=t(8),r=a?a.isConcatSpreadable:void 0;e.exports=function(e){return o(e)||i(e)||!!(r&&e&&e[r])}},function(e,n,t){var a=t(18),i=t(15);e.exports=function(e){return i(e)&&"[object Arguments]"==a(e)}},function(e,n,t){var a=t(20),i=Object.prototype,o=i.hasOwnProperty,r=i.toString,s=a?a.toStringTag:void 0;e.exports=function(e){var n=o.call(e,s),t=e[s];try{e[s]=void 0;var a=!0}catch(e){}var i=r.call(e);return a&&(n?e[s]=t:delete e[s]),i}},function(e,n){var t=Object.prototype.toString;e.exports=function(e){return t.call(e)}},function(e,n,t){var a=t(171),i=t(227),o=t(51),r=t(8),s=t(238);e.exports=function(e){return"function"==typeof e?e:null==e?o:"object"==typeof e?r(e)?i(e[0],e[1]):a(e):s(e)}},function(e,n,t){var a=t(172),i=t(226),o=t(95);e.exports=function(e){var n=i(e);return 1==n.length&&n[0][2]?o(n[0][0],n[0][1]):function(t){return t===e||a(t,e,n)}}},function(e,n,t){var a=t(80),i=t(84);e.exports=function(e,n,t,o){var r=t.length,s=r,l=!o;if(null==e)return!s;for(e=Object(e);r--;){var c=t[r];if(l&&c[2]?c[1]!==e[c[0]]:!(c[0]in e))return!1}for(;++r<s;){var d=(c=t[r])[0],u=e[d],p=c[1];if(l&&c[2]){if(void 0===u&&!(d in e))return!1}else{var h=new a;if(o)var m=o(u,p,d,e,n,h);if(!(void 0===m?i(p,u,3,o,h):m))return!1}}return!0}},function(e,n){e.exports=function(){this.__data__=[],this.size=0}},function(e,n,t){var a=t(24),i=Array.prototype.splice;e.exports=function(e){var n=this.__data__,t=a(n,e);return!(t<0)&&(t==n.length-1?n.pop():i.call(n,t,1),--this.size,!0)}},function(e,n,t){var a=t(24);e.exports=function(e){var n=this.__data__,t=a(n,e);return t<0?void 0:n[t][1]}},function(e,n,t){var a=t(24);e.exports=function(e){return a(this.__data__,e)>-1}},function(e,n,t){var a=t(24);e.exports=function(e,n){var t=this.__data__,i=a(t,e);return i<0?(++this.size,t.push([e,n])):t[i][1]=n,this}},function(e,n,t){var a=t(23);e.exports=function(){this.__data__=new a,this.size=0}},function(e,n){e.exports=function(e){var n=this.__data__,t=n.delete(e);return this.size=n.size,t}},function(e,n){e.exports=function(e){return this.__data__.get(e)}},function(e,n){e.exports=function(e){return this.__data__.has(e)}},function(e,n,t){var a=t(23),i=t(44),o=t(46);e.exports=function(e,n){var t=this.__data__;if(t instanceof a){var r=t.__data__;if(!i||r.length<199)return r.push([e,n]),this.size=++t.size,this;t=this.__data__=new o(r)}return t.set(e,n),this.size=t.size,this}},function(e,n,t){var a=t(82),i=t(184),o=t(45),r=t(83),s=/^\[object .+?Constructor\]$/,l=Function.prototype,c=Object.prototype,d=l.toString,u=c.hasOwnProperty,p=RegExp("^"+d.call(u).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");e.exports=function(e){return!(!o(e)||i(e))&&(a(e)?p:s).test(r(e))}},function(e,n,t){var a,i=t(185),o=(a=/[^.]+$/.exec(i&&i.keys&&i.keys.IE_PROTO||""))?"Symbol(src)_1."+a:"";e.exports=function(e){return!!o&&o in e}},function(e,n,t){var a=t(9)["__core-js_shared__"];e.exports=a},function(e,n){e.exports=function(e,n){return null==e?void 0:e[n]}},function(e,n,t){var a=t(188),i=t(23),o=t(44);e.exports=function(){this.size=0,this.__data__={hash:new a,map:new(o||i),string:new a}}},function(e,n,t){var a=t(189),i=t(190),o=t(191),r=t(192),s=t(193);function l(e){var n=-1,t=null==e?0:e.length;for(this.clear();++n<t;){var a=e[n];this.set(a[0],a[1])}}l.prototype.clear=a,l.prototype.delete=i,l.prototype.get=o,l.prototype.has=r,l.prototype.set=s,e.exports=l},function(e,n,t){var a=t(25);e.exports=function(){this.__data__=a?a(null):{},this.size=0}},function(e,n){e.exports=function(e){var n=this.has(e)&&delete this.__data__[e];return this.size-=n?1:0,n}},function(e,n,t){var a=t(25),i=Object.prototype.hasOwnProperty;e.exports=function(e){var n=this.__data__;if(a){var t=n[e];return"__lodash_hash_undefined__"===t?void 0:t}return i.call(n,e)?n[e]:void 0}},function(e,n,t){var a=t(25),i=Object.prototype.hasOwnProperty;e.exports=function(e){var n=this.__data__;return a?void 0!==n[e]:i.call(n,e)}},function(e,n,t){var a=t(25);e.exports=function(e,n){var t=this.__data__;return this.size+=this.has(e)?0:1,t[e]=a&&void 0===n?"__lodash_hash_undefined__":n,this}},function(e,n,t){var a=t(26);e.exports=function(e){var n=a(this,e).delete(e);return this.size-=n?1:0,n}},function(e,n){e.exports=function(e){var n=typeof e;return"string"==n||"number"==n||"symbol"==n||"boolean"==n?"__proto__"!==e:null===e}},function(e,n,t){var a=t(26);e.exports=function(e){return a(this,e).get(e)}},function(e,n,t){var a=t(26);e.exports=function(e){return a(this,e).has(e)}},function(e,n,t){var a=t(26);e.exports=function(e,n){var t=a(this,e),i=t.size;return t.set(e,n),this.size+=t.size==i?0:1,this}},function(e,n,t){var a=t(80),i=t(85),o=t(203),r=t(206),s=t(222),l=t(8),c=t(89),d=t(91),u="[object Object]",p=Object.prototype.hasOwnProperty;e.exports=function(e,n,t,h,m,f){var g=l(e),v=l(n),b=g?"[object Array]":s(e),y=v?"[object Array]":s(n),w=(b="[object Arguments]"==b?u:b)==u,j=(y="[object Arguments]"==y?u:y)==u,x=b==y;if(x&&c(e)){if(!c(n))return!1;g=!0,w=!1}if(x&&!w)return f||(f=new a),g||d(e)?i(e,n,t,h,m,f):o(e,n,b,t,h,m,f);if(!(1&t)){var E=w&&p.call(e,"__wrapped__"),k=j&&p.call(n,"__wrapped__");if(E||k){var C=E?e.value():e,A=k?n.value():n;return f||(f=new a),m(C,A,t,h,f)}}return!!x&&(f||(f=new a),r(e,n,t,h,m,f))}},function(e,n){e.exports=function(e){return this.__data__.set(e,"__lodash_hash_undefined__"),this}},function(e,n){e.exports=function(e){return this.__data__.has(e)}},function(e,n){e.exports=function(e,n){for(var t=-1,a=null==e?0:e.length;++t<a;)if(n(e[t],t,e))return!0;return!1}},function(e,n,t){var a=t(20),i=t(204),o=t(81),r=t(85),s=t(205),l=t(47),c=a?a.prototype:void 0,d=c?c.valueOf:void 0;e.exports=function(e,n,t,a,c,u,p){switch(t){case"[object DataView]":if(e.byteLength!=n.byteLength||e.byteOffset!=n.byteOffset)return!1;e=e.buffer,n=n.buffer;case"[object ArrayBuffer]":return!(e.byteLength!=n.byteLength||!u(new i(e),new i(n)));case"[object Boolean]":case"[object Date]":case"[object Number]":return o(+e,+n);case"[object Error]":return e.name==n.name&&e.message==n.message;case"[object RegExp]":case"[object String]":return e==n+"";case"[object Map]":var h=s;case"[object Set]":var m=1&a;if(h||(h=l),e.size!=n.size&&!m)return!1;var f=p.get(e);if(f)return f==n;a|=2,p.set(e,n);var g=r(h(e),h(n),a,c,u,p);return p.delete(e),g;case"[object Symbol]":if(d)return d.call(e)==d.call(n)}return!1}},function(e,n,t){var a=t(9).Uint8Array;e.exports=a},function(e,n){e.exports=function(e){var n=-1,t=Array(e.size);return e.forEach((function(e,a){t[++n]=[a,e]})),t}},function(e,n,t){var a=t(207),i=Object.prototype.hasOwnProperty;e.exports=function(e,n,t,o,r,s){var l=1&t,c=a(e),d=c.length;if(d!=a(n).length&&!l)return!1;for(var u=d;u--;){var p=c[u];if(!(l?p in n:i.call(n,p)))return!1}var h=s.get(e),m=s.get(n);if(h&&m)return h==n&&m==e;var f=!0;s.set(e,n),s.set(n,e);for(var g=l;++u<d;){var v=e[p=c[u]],b=n[p];if(o)var y=l?o(b,v,p,n,e,s):o(v,b,p,e,n,s);if(!(void 0===y?v===b||r(v,b,t,o,s):y)){f=!1;break}g||(g="constructor"==p)}if(f&&!g){var w=e.constructor,j=n.constructor;w==j||!("constructor"in e)||!("constructor"in n)||"function"==typeof w&&w instanceof w&&"function"==typeof j&&j instanceof j||(f=!1)}return s.delete(e),s.delete(n),f}},function(e,n,t){var a=t(208),i=t(209),o=t(88);e.exports=function(e){return a(e,o,i)}},function(e,n,t){var a=t(78),i=t(8);e.exports=function(e,n,t){var o=n(e);return i(e)?o:a(o,t(e))}},function(e,n,t){var a=t(210),i=t(211),o=Object.prototype.propertyIsEnumerable,r=Object.getOwnPropertySymbols,s=r?function(e){return null==e?[]:(e=Object(e),a(r(e),(function(n){return o.call(e,n)})))}:i;e.exports=s},function(e,n){e.exports=function(e,n){for(var t=-1,a=null==e?0:e.length,i=0,o=[];++t<a;){var r=e[t];n(r,t,e)&&(o[i++]=r)}return o}},function(e,n){e.exports=function(){return[]}},function(e,n,t){var a=t(213),i=t(43),o=t(8),r=t(89),s=t(90),l=t(91),c=Object.prototype.hasOwnProperty;e.exports=function(e,n){var t=o(e),d=!t&&i(e),u=!t&&!d&&r(e),p=!t&&!d&&!u&&l(e),h=t||d||u||p,m=h?a(e.length,String):[],f=m.length;for(var g in e)!n&&!c.call(e,g)||h&&("length"==g||u&&("offset"==g||"parent"==g)||p&&("buffer"==g||"byteLength"==g||"byteOffset"==g)||s(g,f))||m.push(g);return m}},function(e,n){e.exports=function(e,n){for(var t=-1,a=Array(e);++t<e;)a[t]=n(t);return a}},function(e,n){e.exports=function(){return!1}},function(e,n,t){var a=t(18),i=t(48),o=t(15),r={};r["[object Float32Array]"]=r["[object Float64Array]"]=r["[object Int8Array]"]=r["[object Int16Array]"]=r["[object Int32Array]"]=r["[object Uint8Array]"]=r["[object Uint8ClampedArray]"]=r["[object Uint16Array]"]=r["[object Uint32Array]"]=!0,r["[object Arguments]"]=r["[object Array]"]=r["[object ArrayBuffer]"]=r["[object Boolean]"]=r["[object DataView]"]=r["[object Date]"]=r["[object Error]"]=r["[object Function]"]=r["[object Map]"]=r["[object Number]"]=r["[object Object]"]=r["[object RegExp]"]=r["[object Set]"]=r["[object String]"]=r["[object WeakMap]"]=!1,e.exports=function(e){return o(e)&&i(e.length)&&!!r[a(e)]}},function(e,n){e.exports=function(e){return function(n){return e(n)}}},function(e,n,t){(function(e){var a=t(79),i=n&&!n.nodeType&&n,o=i&&"object"==typeof e&&e&&!e.nodeType&&e,r=o&&o.exports===i&&a.process,s=function(){try{var e=o&&o.require&&o.require("util").types;return e||r&&r.binding&&r.binding("util")}catch(e){}}();e.exports=s}).call(this,t(60)(e))},function(e,n,t){var a=t(219),i=t(220),o=Object.prototype.hasOwnProperty;e.exports=function(e){if(!a(e))return i(e);var n=[];for(var t in Object(e))o.call(e,t)&&"constructor"!=t&&n.push(t);return n}},function(e,n){var t=Object.prototype;e.exports=function(e){var n=e&&e.constructor;return e===("function"==typeof n&&n.prototype||t)}},function(e,n,t){var a=t(221)(Object.keys,Object);e.exports=a},function(e,n){e.exports=function(e,n){return function(t){return e(n(t))}}},function(e,n,t){var a=t(223),i=t(44),o=t(224),r=t(93),s=t(225),l=t(18),c=t(83),d=c(a),u=c(i),p=c(o),h=c(r),m=c(s),f=l;(a&&"[object DataView]"!=f(new a(new ArrayBuffer(1)))||i&&"[object Map]"!=f(new i)||o&&"[object Promise]"!=f(o.resolve())||r&&"[object Set]"!=f(new r)||s&&"[object WeakMap]"!=f(new s))&&(f=function(e){var n=l(e),t="[object Object]"==n?e.constructor:void 0,a=t?c(t):"";if(a)switch(a){case d:return"[object DataView]";case u:return"[object Map]";case p:return"[object Promise]";case h:return"[object Set]";case m:return"[object WeakMap]"}return n}),e.exports=f},function(e,n,t){var a=t(12)(t(9),"DataView");e.exports=a},function(e,n,t){var a=t(12)(t(9),"Promise");e.exports=a},function(e,n,t){var a=t(12)(t(9),"WeakMap");e.exports=a},function(e,n,t){var a=t(94),i=t(88);e.exports=function(e){for(var n=i(e),t=n.length;t--;){var o=n[t],r=e[o];n[t]=[o,r,a(r)]}return n}},function(e,n,t){var a=t(84),i=t(228),o=t(235),r=t(49),s=t(94),l=t(95),c=t(27);e.exports=function(e,n){return r(e)&&s(n)?l(c(e),n):function(t){var r=i(t,e);return void 0===r&&r===n?o(t,e):a(n,r,3)}}},function(e,n,t){var a=t(96);e.exports=function(e,n,t){var i=null==e?void 0:a(e,n);return void 0===i?t:i}},function(e,n,t){var a=t(230),i=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,o=/\\(\\)?/g,r=a((function(e){var n=[];return 46===e.charCodeAt(0)&&n.push(""),e.replace(i,(function(e,t,a,i){n.push(a?i.replace(o,"$1"):t||e)})),n}));e.exports=r},function(e,n,t){var a=t(231);e.exports=function(e){var n=a(e,(function(e){return 500===t.size&&t.clear(),e})),t=n.cache;return n}},function(e,n,t){var a=t(46);function i(e,n){if("function"!=typeof e||null!=n&&"function"!=typeof n)throw new TypeError("Expected a function");var t=function(){var a=arguments,i=n?n.apply(this,a):a[0],o=t.cache;if(o.has(i))return o.get(i);var r=e.apply(this,a);return t.cache=o.set(i,r)||o,r};return t.cache=new(i.Cache||a),t}i.Cache=a,e.exports=i},function(e,n,t){var a=t(233);e.exports=function(e){return null==e?"":a(e)}},function(e,n,t){var a=t(20),i=t(234),o=t(8),r=t(50),s=a?a.prototype:void 0,l=s?s.toString:void 0;e.exports=function e(n){if("string"==typeof n)return n;if(o(n))return i(n,e)+"";if(r(n))return l?l.call(n):"";var t=n+"";return"0"==t&&1/n==-1/0?"-0":t}},function(e,n){e.exports=function(e,n){for(var t=-1,a=null==e?0:e.length,i=Array(a);++t<a;)i[t]=n(e[t],t,e);return i}},function(e,n,t){var a=t(236),i=t(237);e.exports=function(e,n){return null!=e&&i(e,n,a)}},function(e,n){e.exports=function(e,n){return null!=e&&n in Object(e)}},function(e,n,t){var a=t(97),i=t(43),o=t(8),r=t(90),s=t(48),l=t(27);e.exports=function(e,n,t){for(var c=-1,d=(n=a(n,e)).length,u=!1;++c<d;){var p=l(n[c]);if(!(u=null!=e&&t(e,p)))break;e=e[p]}return u||++c!=d?u:!!(d=null==e?0:e.length)&&s(d)&&r(p,d)&&(o(e)||i(e))}},function(e,n,t){var a=t(239),i=t(240),o=t(49),r=t(27);e.exports=function(e){return o(e)?a(r(e)):i(e)}},function(e,n){e.exports=function(e){return function(n){return null==n?void 0:n[e]}}},function(e,n,t){var a=t(96);e.exports=function(e){return function(n){return a(n,e)}}},function(e,n,t){var a=t(51),i=t(242),o=t(244);e.exports=function(e,n){return o(i(e,n,a),e+"")}},function(e,n,t){var a=t(243),i=Math.max;e.exports=function(e,n,t){return n=i(void 0===n?e.length-1:n,0),function(){for(var o=arguments,r=-1,s=i(o.length-n,0),l=Array(s);++r<s;)l[r]=o[n+r];r=-1;for(var c=Array(n+1);++r<n;)c[r]=o[r];return c[n]=t(l),a(e,this,c)}}},function(e,n){e.exports=function(e,n,t){switch(t.length){case 0:return e.call(n);case 1:return e.call(n,t[0]);case 2:return e.call(n,t[0],t[1]);case 3:return e.call(n,t[0],t[1],t[2])}return e.apply(n,t)}},function(e,n,t){var a=t(245),i=t(248)(a);e.exports=i},function(e,n,t){var a=t(246),i=t(247),o=t(51),r=i?function(e,n){return i(e,"toString",{configurable:!0,enumerable:!1,value:a(n),writable:!0})}:o;e.exports=r},function(e,n){e.exports=function(e){return function(){return e}}},function(e,n,t){var a=t(12),i=function(){try{var e=a(Object,"defineProperty");return e({},"",{}),e}catch(e){}}();e.exports=i},function(e,n){var t=Date.now;e.exports=function(e){var n=0,a=0;return function(){var i=t(),o=16-(i-a);if(a=i,o>0){if(++n>=800)return arguments[0]}else n=0;return e.apply(void 0,arguments)}}},function(e,n,t){var a=t(86),i=t(250),o=t(255),r=t(87),s=t(256),l=t(47);e.exports=function(e,n,t){var c=-1,d=i,u=e.length,p=!0,h=[],m=h;if(t)p=!1,d=o;else if(u>=200){var f=n?null:s(e);if(f)return l(f);p=!1,d=r,m=new a}else m=n?[]:h;e:for(;++c<u;){var g=e[c],v=n?n(g):g;if(g=t||0!==g?g:0,p&&v==v){for(var b=m.length;b--;)if(m[b]===v)continue e;n&&m.push(v),h.push(g)}else d(m,v,t)||(m!==h&&m.push(v),h.push(g))}return h}},function(e,n,t){var a=t(251);e.exports=function(e,n){return!!(null==e?0:e.length)&&a(e,n,0)>-1}},function(e,n,t){var a=t(252),i=t(253),o=t(254);e.exports=function(e,n,t){return n==n?o(e,n,t):a(e,i,t)}},function(e,n){e.exports=function(e,n,t,a){for(var i=e.length,o=t+(a?1:-1);a?o--:++o<i;)if(n(e[o],o,e))return o;return-1}},function(e,n){e.exports=function(e){return e!=e}},function(e,n){e.exports=function(e,n,t){for(var a=t-1,i=e.length;++a<i;)if(e[a]===n)return a;return-1}},function(e,n){e.exports=function(e,n,t){for(var a=-1,i=null==e?0:e.length;++a<i;)if(t(n,e[a]))return!0;return!1}},function(e,n,t){var a=t(93),i=t(257),o=t(47),r=a&&1/o(new a([,-0]))[1]==1/0?function(e){return new a(e)}:i;e.exports=r},function(e,n){e.exports=function(){}},function(e,n,t){var a=t(92),i=t(15);e.exports=function(e){return i(e)&&a(e)}},function(e,n,t){},function(e,n,t){},function(e,n,t){},function(e,n,t){"use strict";var a=t(263),i=t(98),o=t(54),r=Object.prototype.hasOwnProperty,s={brackets:function(e){return e+"[]"},comma:"comma",indices:function(e,n){return e+"["+n+"]"},repeat:function(e){return e}},l=Array.isArray,c=String.prototype.split,d=Array.prototype.push,u=function(e,n){d.apply(e,l(n)?n:[n])},p=Date.prototype.toISOString,h=o.default,m={addQueryPrefix:!1,allowDots:!1,charset:"utf-8",charsetSentinel:!1,delimiter:"&",encode:!0,encoder:i.encode,encodeValuesOnly:!1,format:h,formatter:o.formatters[h],indices:!1,serializeDate:function(e){return p.call(e)},skipNulls:!1,strictNullHandling:!1},f={},g=function e(n,t,o,r,s,d,p,h,g,v,b,y,w,j,x,E){for(var k,C=n,A=E,S=0,P=!1;void 0!==(A=A.get(f))&&!P;){var I=A.get(n);if(S+=1,void 0!==I){if(I===S)throw new RangeError("Cyclic object value");P=!0}void 0===A.get(f)&&(S=0)}if("function"==typeof h?C=h(t,C):C instanceof Date?C=b(C):"comma"===o&&l(C)&&(C=i.maybeMap(C,(function(e){return e instanceof Date?b(e):e}))),null===C){if(s)return p&&!j?p(t,m.encoder,x,"key",y):t;C=""}if("string"==typeof(k=C)||"number"==typeof k||"boolean"==typeof k||"symbol"==typeof k||"bigint"==typeof k||i.isBuffer(C)){if(p){var T=j?t:p(t,m.encoder,x,"key",y);if("comma"===o&&j){for(var _=c.call(String(C),","),B="",F=0;F<_.length;++F)B+=(0===F?"":",")+w(p(_[F],m.encoder,x,"value",y));return[w(T)+(r&&l(C)&&1===_.length?"[]":"")+"="+B]}return[w(T)+"="+w(p(C,m.encoder,x,"value",y))]}return[w(t)+"="+w(String(C))]}var z,R=[];if(void 0===C)return R;if("comma"===o&&l(C))z=[{value:C.length>0?C.join(",")||null:void 0}];else if(l(h))z=h;else{var M=Object.keys(C);z=g?M.sort(g):M}for(var D=r&&l(C)&&1===C.length?t+"[]":t,O=0;O<z.length;++O){var q=z[O],J="object"==typeof q&&void 0!==q.value?q.value:C[q];if(!d||null!==J){var U=l(C)?"function"==typeof o?o(D,q):D:D+(v?"."+q:"["+q+"]");E.set(n,S);var L=a();L.set(f,E),u(R,e(J,U,o,r,s,d,p,h,g,v,b,y,w,j,x,L))}}return R};e.exports=function(e,n){var t,i=e,c=function(e){if(!e)return m;if(null!==e.encoder&&void 0!==e.encoder&&"function"!=typeof e.encoder)throw new TypeError("Encoder has to be a function.");var n=e.charset||m.charset;if(void 0!==e.charset&&"utf-8"!==e.charset&&"iso-8859-1"!==e.charset)throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");var t=o.default;if(void 0!==e.format){if(!r.call(o.formatters,e.format))throw new TypeError("Unknown format option provided.");t=e.format}var a=o.formatters[t],i=m.filter;return("function"==typeof e.filter||l(e.filter))&&(i=e.filter),{addQueryPrefix:"boolean"==typeof e.addQueryPrefix?e.addQueryPrefix:m.addQueryPrefix,allowDots:void 0===e.allowDots?m.allowDots:!!e.allowDots,charset:n,charsetSentinel:"boolean"==typeof e.charsetSentinel?e.charsetSentinel:m.charsetSentinel,delimiter:void 0===e.delimiter?m.delimiter:e.delimiter,encode:"boolean"==typeof e.encode?e.encode:m.encode,encoder:"function"==typeof e.encoder?e.encoder:m.encoder,encodeValuesOnly:"boolean"==typeof e.encodeValuesOnly?e.encodeValuesOnly:m.encodeValuesOnly,filter:i,format:t,formatter:a,serializeDate:"function"==typeof e.serializeDate?e.serializeDate:m.serializeDate,skipNulls:"boolean"==typeof e.skipNulls?e.skipNulls:m.skipNulls,sort:"function"==typeof e.sort?e.sort:null,strictNullHandling:"boolean"==typeof e.strictNullHandling?e.strictNullHandling:m.strictNullHandling}}(n);"function"==typeof c.filter?i=(0,c.filter)("",i):l(c.filter)&&(t=c.filter);var d,p=[];if("object"!=typeof i||null===i)return"";d=n&&n.arrayFormat in s?n.arrayFormat:n&&"indices"in n?n.indices?"indices":"repeat":"indices";var h=s[d];if(n&&"commaRoundTrip"in n&&"boolean"!=typeof n.commaRoundTrip)throw new TypeError("`commaRoundTrip` must be a boolean, or absent");var f="comma"===h&&n&&n.commaRoundTrip;t||(t=Object.keys(i)),c.sort&&t.sort(c.sort);for(var v=a(),b=0;b<t.length;++b){var y=t[b];c.skipNulls&&null===i[y]||u(p,g(i[y],y,h,f,c.strictNullHandling,c.skipNulls,c.encode?c.encoder:null,c.filter,c.sort,c.allowDots,c.serializeDate,c.format,c.formatter,c.encodeValuesOnly,c.charset,v))}var w=p.join(c.delimiter),j=!0===c.addQueryPrefix?"?":"";return c.charsetSentinel&&("iso-8859-1"===c.charset?j+="utf8=%26%2310003%3B&":j+="utf8=%E2%9C%93&"),w.length>0?j+w:""}},function(e,n,t){"use strict";var a=t(52),i=t(269),o=t(271),r=a("%TypeError%"),s=a("%WeakMap%",!0),l=a("%Map%",!0),c=i("WeakMap.prototype.get",!0),d=i("WeakMap.prototype.set",!0),u=i("WeakMap.prototype.has",!0),p=i("Map.prototype.get",!0),h=i("Map.prototype.set",!0),m=i("Map.prototype.has",!0),f=function(e,n){for(var t,a=e;null!==(t=a.next);a=t)if(t.key===n)return a.next=t.next,t.next=e.next,e.next=t,t};e.exports=function(){var e,n,t,a={assert:function(e){if(!a.has(e))throw new r("Side channel does not contain "+o(e))},get:function(a){if(s&&a&&("object"==typeof a||"function"==typeof a)){if(e)return c(e,a)}else if(l){if(n)return p(n,a)}else if(t)return function(e,n){var t=f(e,n);return t&&t.value}(t,a)},has:function(a){if(s&&a&&("object"==typeof a||"function"==typeof a)){if(e)return u(e,a)}else if(l){if(n)return m(n,a)}else if(t)return function(e,n){return!!f(e,n)}(t,a);return!1},set:function(a,i){s&&a&&("object"==typeof a||"function"==typeof a)?(e||(e=new s),d(e,a,i)):l?(n||(n=new l),h(n,a,i)):(t||(t={key:{},next:null}),function(e,n,t){var a=f(e,n);a?a.value=t:e.next={key:n,next:e.next,value:t}}(t,a,i))}};return a}},function(e,n,t){"use strict";var a="undefined"!=typeof Symbol&&Symbol,i=t(265);e.exports=function(){return"function"==typeof a&&("function"==typeof Symbol&&("symbol"==typeof a("foo")&&("symbol"==typeof Symbol("bar")&&i())))}},function(e,n,t){"use strict";e.exports=function(){if("function"!=typeof Symbol||"function"!=typeof Object.getOwnPropertySymbols)return!1;if("symbol"==typeof Symbol.iterator)return!0;var e={},n=Symbol("test"),t=Object(n);if("string"==typeof n)return!1;if("[object Symbol]"!==Object.prototype.toString.call(n))return!1;if("[object Symbol]"!==Object.prototype.toString.call(t))return!1;for(n in e[n]=42,e)return!1;if("function"==typeof Object.keys&&0!==Object.keys(e).length)return!1;if("function"==typeof Object.getOwnPropertyNames&&0!==Object.getOwnPropertyNames(e).length)return!1;var a=Object.getOwnPropertySymbols(e);if(1!==a.length||a[0]!==n)return!1;if(!Object.prototype.propertyIsEnumerable.call(e,n))return!1;if("function"==typeof Object.getOwnPropertyDescriptor){var i=Object.getOwnPropertyDescriptor(e,n);if(42!==i.value||!0!==i.enumerable)return!1}return!0}},function(e,n,t){"use strict";var a={foo:{}},i=Object;e.exports=function(){return{__proto__:a}.foo===a.foo&&!({__proto__:null}instanceof i)}},function(e,n,t){"use strict";var a="Function.prototype.bind called on incompatible ",i=Array.prototype.slice,o=Object.prototype.toString;e.exports=function(e){var n=this;if("function"!=typeof n||"[object Function]"!==o.call(n))throw new TypeError(a+n);for(var t,r=i.call(arguments,1),s=function(){if(this instanceof t){var a=n.apply(this,r.concat(i.call(arguments)));return Object(a)===a?a:this}return n.apply(e,r.concat(i.call(arguments)))},l=Math.max(0,n.length-r.length),c=[],d=0;d<l;d++)c.push("$"+d);if(t=Function("binder","return function ("+c.join(",")+"){ return binder.apply(this,arguments); }")(s),n.prototype){var u=function(){};u.prototype=n.prototype,t.prototype=new u,u.prototype=null}return t}},function(e,n,t){"use strict";var a=t(53);e.exports=a.call(Function.call,Object.prototype.hasOwnProperty)},function(e,n,t){"use strict";var a=t(52),i=t(270),o=i(a("String.prototype.indexOf"));e.exports=function(e,n){var t=a(e,!!n);return"function"==typeof t&&o(e,".prototype.")>-1?i(t):t}},function(e,n,t){"use strict";var a=t(53),i=t(52),o=i("%Function.prototype.apply%"),r=i("%Function.prototype.call%"),s=i("%Reflect.apply%",!0)||a.call(r,o),l=i("%Object.getOwnPropertyDescriptor%",!0),c=i("%Object.defineProperty%",!0),d=i("%Math.max%");if(c)try{c({},"a",{value:1})}catch(e){c=null}e.exports=function(e){var n=s(a,r,arguments);if(l&&c){var t=l(n,"length");t.configurable&&c(n,"length",{value:1+d(0,e.length-(arguments.length-1))})}return n};var u=function(){return s(a,o,arguments)};c?c(e.exports,"apply",{value:u}):e.exports.apply=u},function(e,n,t){var a="function"==typeof Map&&Map.prototype,i=Object.getOwnPropertyDescriptor&&a?Object.getOwnPropertyDescriptor(Map.prototype,"size"):null,o=a&&i&&"function"==typeof i.get?i.get:null,r=a&&Map.prototype.forEach,s="function"==typeof Set&&Set.prototype,l=Object.getOwnPropertyDescriptor&&s?Object.getOwnPropertyDescriptor(Set.prototype,"size"):null,c=s&&l&&"function"==typeof l.get?l.get:null,d=s&&Set.prototype.forEach,u="function"==typeof WeakMap&&WeakMap.prototype?WeakMap.prototype.has:null,p="function"==typeof WeakSet&&WeakSet.prototype?WeakSet.prototype.has:null,h="function"==typeof WeakRef&&WeakRef.prototype?WeakRef.prototype.deref:null,m=Boolean.prototype.valueOf,f=Object.prototype.toString,g=Function.prototype.toString,v=String.prototype.match,b=String.prototype.slice,y=String.prototype.replace,w=String.prototype.toUpperCase,j=String.prototype.toLowerCase,x=RegExp.prototype.test,E=Array.prototype.concat,k=Array.prototype.join,C=Array.prototype.slice,A=Math.floor,S="function"==typeof BigInt?BigInt.prototype.valueOf:null,P=Object.getOwnPropertySymbols,I="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?Symbol.prototype.toString:null,T="function"==typeof Symbol&&"object"==typeof Symbol.iterator,_="function"==typeof Symbol&&Symbol.toStringTag&&(typeof Symbol.toStringTag===T||"symbol")?Symbol.toStringTag:null,B=Object.prototype.propertyIsEnumerable,F=("function"==typeof Reflect?Reflect.getPrototypeOf:Object.getPrototypeOf)||([].__proto__===Array.prototype?function(e){return e.__proto__}:null);function z(e,n){if(e===1/0||e===-1/0||e!=e||e&&e>-1e3&&e<1e3||x.call(/e/,n))return n;var t=/[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;if("number"==typeof e){var a=e<0?-A(-e):A(e);if(a!==e){var i=String(a),o=b.call(n,i.length+1);return y.call(i,t,"$&_")+"."+y.call(y.call(o,/([0-9]{3})/g,"$&_"),/_$/,"")}}return y.call(n,t,"$&_")}var R=t(272),M=R.custom,D=L(M)?M:null;function O(e,n,t){var a="double"===(t.quoteStyle||n)?'"':"'";return a+e+a}function q(e){return y.call(String(e),/"/g,"&quot;")}function J(e){return!("[object Array]"!==H(e)||_&&"object"==typeof e&&_ in e)}function U(e){return!("[object RegExp]"!==H(e)||_&&"object"==typeof e&&_ in e)}function L(e){if(T)return e&&"object"==typeof e&&e instanceof Symbol;if("symbol"==typeof e)return!0;if(!e||"object"!=typeof e||!I)return!1;try{return I.call(e),!0}catch(e){}return!1}e.exports=function e(n,t,a,i){var s=t||{};if($(s,"quoteStyle")&&"single"!==s.quoteStyle&&"double"!==s.quoteStyle)throw new TypeError('option "quoteStyle" must be "single" or "double"');if($(s,"maxStringLength")&&("number"==typeof s.maxStringLength?s.maxStringLength<0&&s.maxStringLength!==1/0:null!==s.maxStringLength))throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');var l=!$(s,"customInspect")||s.customInspect;if("boolean"!=typeof l&&"symbol"!==l)throw new TypeError("option \"customInspect\", if provided, must be `true`, `false`, or `'symbol'`");if($(s,"indent")&&null!==s.indent&&"\t"!==s.indent&&!(parseInt(s.indent,10)===s.indent&&s.indent>0))throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');if($(s,"numericSeparator")&&"boolean"!=typeof s.numericSeparator)throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');var f=s.numericSeparator;if(void 0===n)return"undefined";if(null===n)return"null";if("boolean"==typeof n)return n?"true":"false";if("string"==typeof n)return function e(n,t){if(n.length>t.maxStringLength){var a=n.length-t.maxStringLength,i="... "+a+" more character"+(a>1?"s":"");return e(b.call(n,0,t.maxStringLength),t)+i}return O(y.call(y.call(n,/(['\\])/g,"\\$1"),/[\x00-\x1f]/g,W),"single",t)}(n,s);if("number"==typeof n){if(0===n)return 1/0/n>0?"0":"-0";var w=String(n);return f?z(n,w):w}if("bigint"==typeof n){var x=String(n)+"n";return f?z(n,x):x}var A=void 0===s.depth?5:s.depth;if(void 0===a&&(a=0),a>=A&&A>0&&"object"==typeof n)return J(n)?"[Array]":"[Object]";var P=function(e,n){var t;if("\t"===e.indent)t="\t";else{if(!("number"==typeof e.indent&&e.indent>0))return null;t=k.call(Array(e.indent+1)," ")}return{base:t,prev:k.call(Array(n+1),t)}}(s,a);if(void 0===i)i=[];else if(V(i,n)>=0)return"[Circular]";function M(n,t,o){if(t&&(i=C.call(i)).push(t),o){var r={depth:s.depth};return $(s,"quoteStyle")&&(r.quoteStyle=s.quoteStyle),e(n,r,a+1,i)}return e(n,s,a+1,i)}if("function"==typeof n&&!U(n)){var N=function(e){if(e.name)return e.name;var n=v.call(g.call(e),/^function\s*([\w$]+)/);if(n)return n[1];return null}(n),Z=X(n,M);return"[Function"+(N?": "+N:" (anonymous)")+"]"+(Z.length>0?" { "+k.call(Z,", ")+" }":"")}if(L(n)){var ee=T?y.call(String(n),/^(Symbol\(.*\))_[^)]*$/,"$1"):I.call(n);return"object"!=typeof n||T?ee:K(ee)}if(function(e){if(!e||"object"!=typeof e)return!1;if("undefined"!=typeof HTMLElement&&e instanceof HTMLElement)return!0;return"string"==typeof e.nodeName&&"function"==typeof e.getAttribute}(n)){for(var ne="<"+j.call(String(n.nodeName)),te=n.attributes||[],ae=0;ae<te.length;ae++)ne+=" "+te[ae].name+"="+O(q(te[ae].value),"double",s);return ne+=">",n.childNodes&&n.childNodes.length&&(ne+="..."),ne+="</"+j.call(String(n.nodeName))+">"}if(J(n)){if(0===n.length)return"[]";var ie=X(n,M);return P&&!function(e){for(var n=0;n<e.length;n++)if(V(e[n],"\n")>=0)return!1;return!0}(ie)?"["+Y(ie,P)+"]":"[ "+k.call(ie,", ")+" ]"}if(function(e){return!("[object Error]"!==H(e)||_&&"object"==typeof e&&_ in e)}(n)){var oe=X(n,M);return"cause"in Error.prototype||!("cause"in n)||B.call(n,"cause")?0===oe.length?"["+String(n)+"]":"{ ["+String(n)+"] "+k.call(oe,", ")+" }":"{ ["+String(n)+"] "+k.call(E.call("[cause]: "+M(n.cause),oe),", ")+" }"}if("object"==typeof n&&l){if(D&&"function"==typeof n[D]&&R)return R(n,{depth:A-a});if("symbol"!==l&&"function"==typeof n.inspect)return n.inspect()}if(function(e){if(!o||!e||"object"!=typeof e)return!1;try{o.call(e);try{c.call(e)}catch(e){return!0}return e instanceof Map}catch(e){}return!1}(n)){var re=[];return r&&r.call(n,(function(e,t){re.push(M(t,n,!0)+" => "+M(e,n))})),G("Map",o.call(n),re,P)}if(function(e){if(!c||!e||"object"!=typeof e)return!1;try{c.call(e);try{o.call(e)}catch(e){return!0}return e instanceof Set}catch(e){}return!1}(n)){var se=[];return d&&d.call(n,(function(e){se.push(M(e,n))})),G("Set",c.call(n),se,P)}if(function(e){if(!u||!e||"object"!=typeof e)return!1;try{u.call(e,u);try{p.call(e,p)}catch(e){return!0}return e instanceof WeakMap}catch(e){}return!1}(n))return Q("WeakMap");if(function(e){if(!p||!e||"object"!=typeof e)return!1;try{p.call(e,p);try{u.call(e,u)}catch(e){return!0}return e instanceof WeakSet}catch(e){}return!1}(n))return Q("WeakSet");if(function(e){if(!h||!e||"object"!=typeof e)return!1;try{return h.call(e),!0}catch(e){}return!1}(n))return Q("WeakRef");if(function(e){return!("[object Number]"!==H(e)||_&&"object"==typeof e&&_ in e)}(n))return K(M(Number(n)));if(function(e){if(!e||"object"!=typeof e||!S)return!1;try{return S.call(e),!0}catch(e){}return!1}(n))return K(M(S.call(n)));if(function(e){return!("[object Boolean]"!==H(e)||_&&"object"==typeof e&&_ in e)}(n))return K(m.call(n));if(function(e){return!("[object String]"!==H(e)||_&&"object"==typeof e&&_ in e)}(n))return K(M(String(n)));if(!function(e){return!("[object Date]"!==H(e)||_&&"object"==typeof e&&_ in e)}(n)&&!U(n)){var le=X(n,M),ce=F?F(n)===Object.prototype:n instanceof Object||n.constructor===Object,de=n instanceof Object?"":"null prototype",ue=!ce&&_&&Object(n)===n&&_ in n?b.call(H(n),8,-1):de?"Object":"",pe=(ce||"function"!=typeof n.constructor?"":n.constructor.name?n.constructor.name+" ":"")+(ue||de?"["+k.call(E.call([],ue||[],de||[]),": ")+"] ":"");return 0===le.length?pe+"{}":P?pe+"{"+Y(le,P)+"}":pe+"{ "+k.call(le,", ")+" }"}return String(n)};var N=Object.prototype.hasOwnProperty||function(e){return e in this};function $(e,n){return N.call(e,n)}function H(e){return f.call(e)}function V(e,n){if(e.indexOf)return e.indexOf(n);for(var t=0,a=e.length;t<a;t++)if(e[t]===n)return t;return-1}function W(e){var n=e.charCodeAt(0),t={8:"b",9:"t",10:"n",12:"f",13:"r"}[n];return t?"\\"+t:"\\x"+(n<16?"0":"")+w.call(n.toString(16))}function K(e){return"Object("+e+")"}function Q(e){return e+" { ? }"}function G(e,n,t,a){return e+" ("+n+") {"+(a?Y(t,a):k.call(t,", "))+"}"}function Y(e,n){if(0===e.length)return"";var t="\n"+n.prev+n.base;return t+k.call(e,","+t)+"\n"+n.prev}function X(e,n){var t=J(e),a=[];if(t){a.length=e.length;for(var i=0;i<e.length;i++)a[i]=$(e,i)?n(e[i],e):""}var o,r="function"==typeof P?P(e):[];if(T){o={};for(var s=0;s<r.length;s++)o["$"+r[s]]=r[s]}for(var l in e)$(e,l)&&(t&&String(Number(l))===l&&l<e.length||T&&o["$"+l]instanceof Symbol||(x.call(/[^\w$]/,l)?a.push(n(l,e)+": "+n(e[l],e)):a.push(l+": "+n(e[l],e))));if("function"==typeof P)for(var c=0;c<r.length;c++)B.call(e,r[c])&&a.push("["+n(r[c])+"]: "+n(e[r[c]],e));return a}},function(e,n){},function(e,n,t){"use strict";var a=t(98),i=Object.prototype.hasOwnProperty,o=Array.isArray,r={allowDots:!1,allowPrototypes:!1,allowSparse:!1,arrayLimit:20,charset:"utf-8",charsetSentinel:!1,comma:!1,decoder:a.decode,delimiter:"&",depth:5,ignoreQueryPrefix:!1,interpretNumericEntities:!1,parameterLimit:1e3,parseArrays:!0,plainObjects:!1,strictNullHandling:!1},s=function(e){return e.replace(/&#(\d+);/g,(function(e,n){return String.fromCharCode(parseInt(n,10))}))},l=function(e,n){return e&&"string"==typeof e&&n.comma&&e.indexOf(",")>-1?e.split(","):e},c=function(e,n,t,a){if(e){var o=t.allowDots?e.replace(/\.([^.[]+)/g,"[$1]"):e,r=/(\[[^[\]]*])/g,s=t.depth>0&&/(\[[^[\]]*])/.exec(o),c=s?o.slice(0,s.index):o,d=[];if(c){if(!t.plainObjects&&i.call(Object.prototype,c)&&!t.allowPrototypes)return;d.push(c)}for(var u=0;t.depth>0&&null!==(s=r.exec(o))&&u<t.depth;){if(u+=1,!t.plainObjects&&i.call(Object.prototype,s[1].slice(1,-1))&&!t.allowPrototypes)return;d.push(s[1])}return s&&d.push("["+o.slice(s.index)+"]"),function(e,n,t,a){for(var i=a?n:l(n,t),o=e.length-1;o>=0;--o){var r,s=e[o];if("[]"===s&&t.parseArrays)r=[].concat(i);else{r=t.plainObjects?Object.create(null):{};var c="["===s.charAt(0)&&"]"===s.charAt(s.length-1)?s.slice(1,-1):s,d=parseInt(c,10);t.parseArrays||""!==c?!isNaN(d)&&s!==c&&String(d)===c&&d>=0&&t.parseArrays&&d<=t.arrayLimit?(r=[])[d]=i:"__proto__"!==c&&(r[c]=i):r={0:i}}i=r}return i}(d,n,t,a)}};e.exports=function(e,n){var t=function(e){if(!e)return r;if(null!==e.decoder&&void 0!==e.decoder&&"function"!=typeof e.decoder)throw new TypeError("Decoder has to be a function.");if(void 0!==e.charset&&"utf-8"!==e.charset&&"iso-8859-1"!==e.charset)throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");var n=void 0===e.charset?r.charset:e.charset;return{allowDots:void 0===e.allowDots?r.allowDots:!!e.allowDots,allowPrototypes:"boolean"==typeof e.allowPrototypes?e.allowPrototypes:r.allowPrototypes,allowSparse:"boolean"==typeof e.allowSparse?e.allowSparse:r.allowSparse,arrayLimit:"number"==typeof e.arrayLimit?e.arrayLimit:r.arrayLimit,charset:n,charsetSentinel:"boolean"==typeof e.charsetSentinel?e.charsetSentinel:r.charsetSentinel,comma:"boolean"==typeof e.comma?e.comma:r.comma,decoder:"function"==typeof e.decoder?e.decoder:r.decoder,delimiter:"string"==typeof e.delimiter||a.isRegExp(e.delimiter)?e.delimiter:r.delimiter,depth:"number"==typeof e.depth||!1===e.depth?+e.depth:r.depth,ignoreQueryPrefix:!0===e.ignoreQueryPrefix,interpretNumericEntities:"boolean"==typeof e.interpretNumericEntities?e.interpretNumericEntities:r.interpretNumericEntities,parameterLimit:"number"==typeof e.parameterLimit?e.parameterLimit:r.parameterLimit,parseArrays:!1!==e.parseArrays,plainObjects:"boolean"==typeof e.plainObjects?e.plainObjects:r.plainObjects,strictNullHandling:"boolean"==typeof e.strictNullHandling?e.strictNullHandling:r.strictNullHandling}}(n);if(""===e||null==e)return t.plainObjects?Object.create(null):{};for(var d="string"==typeof e?function(e,n){var t,c={},d=n.ignoreQueryPrefix?e.replace(/^\?/,""):e,u=n.parameterLimit===1/0?void 0:n.parameterLimit,p=d.split(n.delimiter,u),h=-1,m=n.charset;if(n.charsetSentinel)for(t=0;t<p.length;++t)0===p[t].indexOf("utf8=")&&("utf8=%E2%9C%93"===p[t]?m="utf-8":"utf8=%26%2310003%3B"===p[t]&&(m="iso-8859-1"),h=t,t=p.length);for(t=0;t<p.length;++t)if(t!==h){var f,g,v=p[t],b=v.indexOf("]="),y=-1===b?v.indexOf("="):b+1;-1===y?(f=n.decoder(v,r.decoder,m,"key"),g=n.strictNullHandling?null:""):(f=n.decoder(v.slice(0,y),r.decoder,m,"key"),g=a.maybeMap(l(v.slice(y+1),n),(function(e){return n.decoder(e,r.decoder,m,"value")}))),g&&n.interpretNumericEntities&&"iso-8859-1"===m&&(g=s(g)),v.indexOf("[]=")>-1&&(g=o(g)?[g]:g),i.call(c,f)?c[f]=a.combine(c[f],g):c[f]=g}return c}(e,t):e,u=t.plainObjects?Object.create(null):{},p=Object.keys(d),h=0;h<p.length;++h){var m=p[h],f=c(m,d[m],t,"string"==typeof e);u=a.merge(u,f,t)}return!0===t.allowSparse?u:a.compact(u)}},function(e,n,t){var a=t(13),i=t(276),o=t(277);e.exports=function(e){var n=a(e);return o(n,i(n))+1}},function(e,n){e.exports=function(e){var n=new Date(e.getTime()),t=n.getTimezoneOffset();return n.setSeconds(0,0),6e4*t+n.getTime()%6e4}},function(e,n,t){var a=t(13);e.exports=function(e){var n=a(e),t=new Date(0);return t.setFullYear(n.getFullYear(),0,1),t.setHours(0,0,0,0),t}},function(e,n,t){var a=t(278);e.exports=function(e,n){var t=a(e),i=a(n),o=t.getTime()-6e4*t.getTimezoneOffset(),r=i.getTime()-6e4*i.getTimezoneOffset();return Math.round((o-r)/864e5)}},function(e,n,t){var a=t(13);e.exports=function(e){var n=a(e);return n.setHours(0,0,0,0),n}},function(e,n,t){var a=t(13),i=t(55),o=t(281);e.exports=function(e){var n=a(e),t=i(n).getTime()-o(n).getTime();return Math.round(t/6048e5)+1}},function(e,n,t){var a=t(13);e.exports=function(e,n){var t=n&&Number(n.weekStartsOn)||0,i=a(e),o=i.getDay(),r=(o<t?7:0)+o-t;return i.setDate(i.getDate()-r),i.setHours(0,0,0,0),i}},function(e,n,t){var a=t(100),i=t(55);e.exports=function(e){var n=a(e),t=new Date(0);return t.setFullYear(n,0,4),t.setHours(0,0,0,0),i(t)}},function(e,n,t){var a=t(99);e.exports=function(e){if(a(e))return!isNaN(e);throw new TypeError(toString.call(e)+" is not an instance of Date")}},function(e,n,t){var a=t(284),i=t(285);e.exports={distanceInWords:a(),format:i()}},function(e,n){e.exports=function(){var e={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};return{localize:function(n,t,a){var i;return a=a||{},i="string"==typeof e[n]?e[n]:1===t?e[n].one:e[n].other.replace("{{count}}",t),a.addSuffix?a.comparison>0?"in "+i:i+" ago":i}}}},function(e,n,t){var a=t(286);e.exports=function(){var e=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],n=["January","February","March","April","May","June","July","August","September","October","November","December"],t=["Su","Mo","Tu","We","Th","Fr","Sa"],i=["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],o=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],r=["AM","PM"],s=["am","pm"],l=["a.m.","p.m."],c={MMM:function(n){return e[n.getMonth()]},MMMM:function(e){return n[e.getMonth()]},dd:function(e){return t[e.getDay()]},ddd:function(e){return i[e.getDay()]},dddd:function(e){return o[e.getDay()]},A:function(e){return e.getHours()/12>=1?r[1]:r[0]},a:function(e){return e.getHours()/12>=1?s[1]:s[0]},aa:function(e){return e.getHours()/12>=1?l[1]:l[0]}};return["M","D","DDD","d","Q","W"].forEach((function(e){c[e+"o"]=function(n,t){return function(e){var n=e%100;if(n>20||n<10)switch(n%10){case 1:return e+"st";case 2:return e+"nd";case 3:return e+"rd"}return e+"th"}(t[e](n))}})),{formatters:c,formattingTokensRegExp:a(c)}}},function(e,n){var t=["M","MM","Q","D","DD","DDD","DDDD","d","E","W","WW","YY","YYYY","GG","GGGG","H","HH","h","hh","m","mm","s","ss","S","SS","SSS","Z","ZZ","X","x"];e.exports=function(e){var n=[];for(var a in e)e.hasOwnProperty(a)&&n.push(a);var i=t.concat(n).sort().reverse();return new RegExp("(\\[[^\\[]*\\])|(\\\\)?("+i.join("|")+"|.)","g")}},function(e,n,t){"use strict";var a=t(3),i=t(101),o=t(288),r=t(107);function s(e){var n=new o(e),t=i(o.prototype.request,n);return a.extend(t,o.prototype,n),a.extend(t,n),t}var l=s(t(56));l.Axios=o,l.create=function(e){return s(r(l.defaults,e))},l.Cancel=t(108),l.CancelToken=t(302),l.isCancel=t(106),l.all=function(e){return Promise.all(e)},l.spread=t(303),l.isAxiosError=t(304),e.exports=l,e.exports.default=l},function(e,n,t){"use strict";var a=t(3),i=t(102),o=t(289),r=t(290),s=t(107),l=t(300),c=l.validators;function d(e){this.defaults=e,this.interceptors={request:new o,response:new o}}d.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=s(this.defaults,e)).method?e.method=e.method.toLowerCase():this.defaults.method?e.method=this.defaults.method.toLowerCase():e.method="get";var n=e.transitional;void 0!==n&&l.assertOptions(n,{silentJSONParsing:c.transitional(c.boolean,"1.0.0"),forcedJSONParsing:c.transitional(c.boolean,"1.0.0"),clarifyTimeoutError:c.transitional(c.boolean,"1.0.0")},!1);var t=[],a=!0;this.interceptors.request.forEach((function(n){"function"==typeof n.runWhen&&!1===n.runWhen(e)||(a=a&&n.synchronous,t.unshift(n.fulfilled,n.rejected))}));var i,o=[];if(this.interceptors.response.forEach((function(e){o.push(e.fulfilled,e.rejected)})),!a){var d=[r,void 0];for(Array.prototype.unshift.apply(d,t),d=d.concat(o),i=Promise.resolve(e);d.length;)i=i.then(d.shift(),d.shift());return i}for(var u=e;t.length;){var p=t.shift(),h=t.shift();try{u=p(u)}catch(e){h(e);break}}try{i=r(u)}catch(e){return Promise.reject(e)}for(;o.length;)i=i.then(o.shift(),o.shift());return i},d.prototype.getUri=function(e){return e=s(this.defaults,e),i(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},a.forEach(["delete","get","head","options"],(function(e){d.prototype[e]=function(n,t){return this.request(s(t||{},{method:e,url:n,data:(t||{}).data}))}})),a.forEach(["post","put","patch"],(function(e){d.prototype[e]=function(n,t,a){return this.request(s(a||{},{method:e,url:n,data:t}))}})),e.exports=d},function(e,n,t){"use strict";var a=t(3);function i(){this.handlers=[]}i.prototype.use=function(e,n,t){return this.handlers.push({fulfilled:e,rejected:n,synchronous:!!t&&t.synchronous,runWhen:t?t.runWhen:null}),this.handlers.length-1},i.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},i.prototype.forEach=function(e){a.forEach(this.handlers,(function(n){null!==n&&e(n)}))},e.exports=i},function(e,n,t){"use strict";var a=t(3),i=t(291),o=t(106),r=t(56);function s(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return s(e),e.headers=e.headers||{},e.data=i.call(e,e.data,e.headers,e.transformRequest),e.headers=a.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),a.forEach(["delete","get","head","post","put","patch","common"],(function(n){delete e.headers[n]})),(e.adapter||r.adapter)(e).then((function(n){return s(e),n.data=i.call(e,n.data,n.headers,e.transformResponse),n}),(function(n){return o(n)||(s(e),n&&n.response&&(n.response.data=i.call(e,n.response.data,n.response.headers,e.transformResponse))),Promise.reject(n)}))}},function(e,n,t){"use strict";var a=t(3),i=t(56);e.exports=function(e,n,t){var o=this||i;return a.forEach(t,(function(t){e=t.call(o,e,n)})),e}},function(e,n,t){"use strict";var a=t(3);e.exports=function(e,n){a.forEach(e,(function(t,a){a!==n&&a.toUpperCase()===n.toUpperCase()&&(e[n]=t,delete e[a])}))}},function(e,n,t){"use strict";var a=t(105);e.exports=function(e,n,t){var i=t.config.validateStatus;t.status&&i&&!i(t.status)?n(a("Request failed with status code "+t.status,t.config,null,t.request,t)):e(t)}},function(e,n,t){"use strict";var a=t(3);e.exports=a.isStandardBrowserEnv()?{write:function(e,n,t,i,o,r){var s=[];s.push(e+"="+encodeURIComponent(n)),a.isNumber(t)&&s.push("expires="+new Date(t).toGMTString()),a.isString(i)&&s.push("path="+i),a.isString(o)&&s.push("domain="+o),!0===r&&s.push("secure"),document.cookie=s.join("; ")},read:function(e){var n=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return n?decodeURIComponent(n[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,n,t){"use strict";var a=t(296),i=t(297);e.exports=function(e,n){return e&&!a(n)?i(e,n):n}},function(e,n,t){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,n,t){"use strict";e.exports=function(e,n){return n?e.replace(/\/+$/,"")+"/"+n.replace(/^\/+/,""):e}},function(e,n,t){"use strict";var a=t(3),i=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var n,t,o,r={};return e?(a.forEach(e.split("\n"),(function(e){if(o=e.indexOf(":"),n=a.trim(e.substr(0,o)).toLowerCase(),t=a.trim(e.substr(o+1)),n){if(r[n]&&i.indexOf(n)>=0)return;r[n]="set-cookie"===n?(r[n]?r[n]:[]).concat([t]):r[n]?r[n]+", "+t:t}})),r):r}},function(e,n,t){"use strict";var a=t(3);e.exports=a.isStandardBrowserEnv()?function(){var e,n=/(msie|trident)/i.test(navigator.userAgent),t=document.createElement("a");function i(e){var a=e;return n&&(t.setAttribute("href",a),a=t.href),t.setAttribute("href",a),{href:t.href,protocol:t.protocol?t.protocol.replace(/:$/,""):"",host:t.host,search:t.search?t.search.replace(/^\?/,""):"",hash:t.hash?t.hash.replace(/^#/,""):"",hostname:t.hostname,port:t.port,pathname:"/"===t.pathname.charAt(0)?t.pathname:"/"+t.pathname}}return e=i(window.location.href),function(n){var t=a.isString(n)?i(n):n;return t.protocol===e.protocol&&t.host===e.host}}():function(){return!0}},function(e,n,t){"use strict";var a=t(301),i={};["object","boolean","number","function","string","symbol"].forEach((function(e,n){i[e]=function(t){return typeof t===e||"a"+(n<1?"n ":" ")+e}}));var o={},r=a.version.split(".");function s(e,n){for(var t=n?n.split("."):r,a=e.split("."),i=0;i<3;i++){if(t[i]>a[i])return!0;if(t[i]<a[i])return!1}return!1}i.transitional=function(e,n,t){var i=n&&s(n);function r(e,n){return"[Axios v"+a.version+"] Transitional option '"+e+"'"+n+(t?". "+t:"")}return function(t,a,s){if(!1===e)throw new Error(r(a," has been removed in "+n));return i&&!o[a]&&(o[a]=!0,console.warn(r(a," has been deprecated since v"+n+" and will be removed in the near future"))),!e||e(t,a,s)}},e.exports={isOlderVersion:s,assertOptions:function(e,n,t){if("object"!=typeof e)throw new TypeError("options must be an object");for(var a=Object.keys(e),i=a.length;i-- >0;){var o=a[i],r=n[o];if(r){var s=e[o],l=void 0===s||r(s,o,e);if(!0!==l)throw new TypeError("option "+o+" must be "+l)}else if(!0!==t)throw Error("Unknown option "+o)}},validators:i}},function(e){e.exports=JSON.parse('{"name":"axios","version":"0.21.4","description":"Promise based HTTP client for the browser and node.js","main":"index.js","scripts":{"test":"grunt test","start":"node ./sandbox/server.js","build":"NODE_ENV=production grunt build","preversion":"npm test","version":"npm run build && grunt version && git add -A dist && git add CHANGELOG.md bower.json package.json","postversion":"git push && git push --tags","examples":"node ./examples/server.js","coveralls":"cat coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js","fix":"eslint --fix lib/**/*.js"},"repository":{"type":"git","url":"https://github.com/axios/axios.git"},"keywords":["xhr","http","ajax","promise","node"],"author":"Matt Zabriskie","license":"MIT","bugs":{"url":"https://github.com/axios/axios/issues"},"homepage":"https://axios-http.com","devDependencies":{"coveralls":"^3.0.0","es6-promise":"^4.2.4","grunt":"^1.3.0","grunt-banner":"^0.6.0","grunt-cli":"^1.2.0","grunt-contrib-clean":"^1.1.0","grunt-contrib-watch":"^1.0.0","grunt-eslint":"^23.0.0","grunt-karma":"^4.0.0","grunt-mocha-test":"^0.13.3","grunt-ts":"^6.0.0-beta.19","grunt-webpack":"^4.0.2","istanbul-instrumenter-loader":"^1.0.0","jasmine-core":"^2.4.1","karma":"^6.3.2","karma-chrome-launcher":"^3.1.0","karma-firefox-launcher":"^2.1.0","karma-jasmine":"^1.1.1","karma-jasmine-ajax":"^0.1.13","karma-safari-launcher":"^1.0.0","karma-sauce-launcher":"^4.3.6","karma-sinon":"^1.0.5","karma-sourcemap-loader":"^0.3.8","karma-webpack":"^4.0.2","load-grunt-tasks":"^3.5.2","minimist":"^1.2.0","mocha":"^8.2.1","sinon":"^4.5.0","terser-webpack-plugin":"^4.2.3","typescript":"^4.0.5","url-search-params":"^0.10.0","webpack":"^4.44.2","webpack-dev-server":"^3.11.0"},"browser":{"./lib/adapters/http.js":"./lib/adapters/xhr.js"},"jsdelivr":"dist/axios.min.js","unpkg":"dist/axios.min.js","typings":"./index.d.ts","dependencies":{"follow-redirects":"^1.14.0"},"bundlesize":[{"path":"./dist/axios.min.js","threshold":"5kB"}]}')},function(e,n,t){"use strict";var a=t(108);function i(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var n;this.promise=new Promise((function(e){n=e}));var t=this;e((function(e){t.reason||(t.reason=new a(e),n(t.reason))}))}i.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},i.source=function(){var e;return{token:new i((function(n){e=n})),cancel:e}},e.exports=i},function(e,n,t){"use strict";e.exports=function(e){return function(n){return e.apply(null,n)}}},function(e,n,t){"use strict";e.exports=function(e){return"object"==typeof e&&!0===e.isAxiosError}},function(e,n,t){},function(e,n,t){"use strict";t(109)},function(e,n,t){"use strict";t(110)},function(e,n,t){"use strict";t(111)},function(e,n,t){"use strict";t.r(n);var a=t(1);
/*!
  * vue-router v3.6.5
  * (c) 2022 Evan You
  * @license MIT
  */function i(e,n){for(var t in n)e[t]=n[t];return e}var o=/[!'()*]/g,r=function(e){return"%"+e.charCodeAt(0).toString(16)},s=/%2C/g,l=function(e){return encodeURIComponent(e).replace(o,r).replace(s,",")};function c(e){try{return decodeURIComponent(e)}catch(e){0}return e}var d=function(e){return null==e||"object"==typeof e?e:String(e)};function u(e){var n={};return(e=e.trim().replace(/^(\?|#|&)/,""))?(e.split("&").forEach((function(e){var t=e.replace(/\+/g," ").split("="),a=c(t.shift()),i=t.length>0?c(t.join("=")):null;void 0===n[a]?n[a]=i:Array.isArray(n[a])?n[a].push(i):n[a]=[n[a],i]})),n):n}function p(e){var n=e?Object.keys(e).map((function(n){var t=e[n];if(void 0===t)return"";if(null===t)return l(n);if(Array.isArray(t)){var a=[];return t.forEach((function(e){void 0!==e&&(null===e?a.push(l(n)):a.push(l(n)+"="+l(e)))})),a.join("&")}return l(n)+"="+l(t)})).filter((function(e){return e.length>0})).join("&"):null;return n?"?"+n:""}var h=/\/?$/;function m(e,n,t,a){var i=a&&a.options.stringifyQuery,o=n.query||{};try{o=f(o)}catch(e){}var r={name:n.name||e&&e.name,meta:e&&e.meta||{},path:n.path||"/",hash:n.hash||"",query:o,params:n.params||{},fullPath:b(n,i),matched:e?v(e):[]};return t&&(r.redirectedFrom=b(t,i)),Object.freeze(r)}function f(e){if(Array.isArray(e))return e.map(f);if(e&&"object"==typeof e){var n={};for(var t in e)n[t]=f(e[t]);return n}return e}var g=m(null,{path:"/"});function v(e){for(var n=[];e;)n.unshift(e),e=e.parent;return n}function b(e,n){var t=e.path,a=e.query;void 0===a&&(a={});var i=e.hash;return void 0===i&&(i=""),(t||"/")+(n||p)(a)+i}function y(e,n,t){return n===g?e===n:!!n&&(e.path&&n.path?e.path.replace(h,"")===n.path.replace(h,"")&&(t||e.hash===n.hash&&w(e.query,n.query)):!(!e.name||!n.name)&&(e.name===n.name&&(t||e.hash===n.hash&&w(e.query,n.query)&&w(e.params,n.params))))}function w(e,n){if(void 0===e&&(e={}),void 0===n&&(n={}),!e||!n)return e===n;var t=Object.keys(e).sort(),a=Object.keys(n).sort();return t.length===a.length&&t.every((function(t,i){var o=e[t];if(a[i]!==t)return!1;var r=n[t];return null==o||null==r?o===r:"object"==typeof o&&"object"==typeof r?w(o,r):String(o)===String(r)}))}function j(e){for(var n=0;n<e.matched.length;n++){var t=e.matched[n];for(var a in t.instances){var i=t.instances[a],o=t.enteredCbs[a];if(i&&o){delete t.enteredCbs[a];for(var r=0;r<o.length;r++)i._isBeingDestroyed||o[r](i)}}}}var x={name:"RouterView",functional:!0,props:{name:{type:String,default:"default"}},render:function(e,n){var t=n.props,a=n.children,o=n.parent,r=n.data;r.routerView=!0;for(var s=o.$createElement,l=t.name,c=o.$route,d=o._routerViewCache||(o._routerViewCache={}),u=0,p=!1;o&&o._routerRoot!==o;){var h=o.$vnode?o.$vnode.data:{};h.routerView&&u++,h.keepAlive&&o._directInactive&&o._inactive&&(p=!0),o=o.$parent}if(r.routerViewDepth=u,p){var m=d[l],f=m&&m.component;return f?(m.configProps&&E(f,r,m.route,m.configProps),s(f,r,a)):s()}var g=c.matched[u],v=g&&g.components[l];if(!g||!v)return d[l]=null,s();d[l]={component:v},r.registerRouteInstance=function(e,n){var t=g.instances[l];(n&&t!==e||!n&&t===e)&&(g.instances[l]=n)},(r.hook||(r.hook={})).prepatch=function(e,n){g.instances[l]=n.componentInstance},r.hook.init=function(e){e.data.keepAlive&&e.componentInstance&&e.componentInstance!==g.instances[l]&&(g.instances[l]=e.componentInstance),j(c)};var b=g.props&&g.props[l];return b&&(i(d[l],{route:c,configProps:b}),E(v,r,c,b)),s(v,r,a)}};function E(e,n,t,a){var o=n.props=function(e,n){switch(typeof n){case"undefined":return;case"object":return n;case"function":return n(e);case"boolean":return n?e.params:void 0;default:0}}(t,a);if(o){o=n.props=i({},o);var r=n.attrs=n.attrs||{};for(var s in o)e.props&&s in e.props||(r[s]=o[s],delete o[s])}}function k(e,n,t){var a=e.charAt(0);if("/"===a)return e;if("?"===a||"#"===a)return n+e;var i=n.split("/");t&&i[i.length-1]||i.pop();for(var o=e.replace(/^\//,"").split("/"),r=0;r<o.length;r++){var s=o[r];".."===s?i.pop():"."!==s&&i.push(s)}return""!==i[0]&&i.unshift(""),i.join("/")}function C(e){return e.replace(/\/(?:\s*\/)+/g,"/")}var A=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)},S=U,P=F,I=function(e,n){return R(F(e,n),n)},T=R,_=J,B=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function F(e,n){for(var t,a=[],i=0,o=0,r="",s=n&&n.delimiter||"/";null!=(t=B.exec(e));){var l=t[0],c=t[1],d=t.index;if(r+=e.slice(o,d),o=d+l.length,c)r+=c[1];else{var u=e[o],p=t[2],h=t[3],m=t[4],f=t[5],g=t[6],v=t[7];r&&(a.push(r),r="");var b=null!=p&&null!=u&&u!==p,y="+"===g||"*"===g,w="?"===g||"*"===g,j=t[2]||s,x=m||f;a.push({name:h||i++,prefix:p||"",delimiter:j,optional:w,repeat:y,partial:b,asterisk:!!v,pattern:x?D(x):v?".*":"[^"+M(j)+"]+?"})}}return o<e.length&&(r+=e.substr(o)),r&&a.push(r),a}function z(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function R(e,n){for(var t=new Array(e.length),a=0;a<e.length;a++)"object"==typeof e[a]&&(t[a]=new RegExp("^(?:"+e[a].pattern+")$",q(n)));return function(n,a){for(var i="",o=n||{},r=(a||{}).pretty?z:encodeURIComponent,s=0;s<e.length;s++){var l=e[s];if("string"!=typeof l){var c,d=o[l.name];if(null==d){if(l.optional){l.partial&&(i+=l.prefix);continue}throw new TypeError('Expected "'+l.name+'" to be defined')}if(A(d)){if(!l.repeat)throw new TypeError('Expected "'+l.name+'" to not repeat, but received `'+JSON.stringify(d)+"`");if(0===d.length){if(l.optional)continue;throw new TypeError('Expected "'+l.name+'" to not be empty')}for(var u=0;u<d.length;u++){if(c=r(d[u]),!t[s].test(c))throw new TypeError('Expected all "'+l.name+'" to match "'+l.pattern+'", but received `'+JSON.stringify(c)+"`");i+=(0===u?l.prefix:l.delimiter)+c}}else{if(c=l.asterisk?encodeURI(d).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):r(d),!t[s].test(c))throw new TypeError('Expected "'+l.name+'" to match "'+l.pattern+'", but received "'+c+'"');i+=l.prefix+c}}else i+=l}return i}}function M(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function D(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function O(e,n){return e.keys=n,e}function q(e){return e&&e.sensitive?"":"i"}function J(e,n,t){A(n)||(t=n||t,n=[]);for(var a=(t=t||{}).strict,i=!1!==t.end,o="",r=0;r<e.length;r++){var s=e[r];if("string"==typeof s)o+=M(s);else{var l=M(s.prefix),c="(?:"+s.pattern+")";n.push(s),s.repeat&&(c+="(?:"+l+c+")*"),o+=c=s.optional?s.partial?l+"("+c+")?":"(?:"+l+"("+c+"))?":l+"("+c+")"}}var d=M(t.delimiter||"/"),u=o.slice(-d.length)===d;return a||(o=(u?o.slice(0,-d.length):o)+"(?:"+d+"(?=$))?"),o+=i?"$":a&&u?"":"(?="+d+"|$)",O(new RegExp("^"+o,q(t)),n)}function U(e,n,t){return A(n)||(t=n||t,n=[]),t=t||{},e instanceof RegExp?function(e,n){var t=e.source.match(/\((?!\?)/g);if(t)for(var a=0;a<t.length;a++)n.push({name:a,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return O(e,n)}(e,n):A(e)?function(e,n,t){for(var a=[],i=0;i<e.length;i++)a.push(U(e[i],n,t).source);return O(new RegExp("(?:"+a.join("|")+")",q(t)),n)}(e,n,t):function(e,n,t){return J(F(e,t),n,t)}(e,n,t)}S.parse=P,S.compile=I,S.tokensToFunction=T,S.tokensToRegExp=_;var L=Object.create(null);function N(e,n,t){n=n||{};try{var a=L[e]||(L[e]=S.compile(e));return"string"==typeof n.pathMatch&&(n[0]=n.pathMatch),a(n,{pretty:!0})}catch(e){return""}finally{delete n[0]}}function $(e,n,t,a){var o="string"==typeof e?{path:e}:e;if(o._normalized)return o;if(o.name){var r=(o=i({},e)).params;return r&&"object"==typeof r&&(o.params=i({},r)),o}if(!o.path&&o.params&&n){(o=i({},o))._normalized=!0;var s=i(i({},n.params),o.params);if(n.name)o.name=n.name,o.params=s;else if(n.matched.length){var l=n.matched[n.matched.length-1].path;o.path=N(l,s,n.path)}else 0;return o}var c=function(e){var n="",t="",a=e.indexOf("#");a>=0&&(n=e.slice(a),e=e.slice(0,a));var i=e.indexOf("?");return i>=0&&(t=e.slice(i+1),e=e.slice(0,i)),{path:e,query:t,hash:n}}(o.path||""),p=n&&n.path||"/",h=c.path?k(c.path,p,t||o.append):p,m=function(e,n,t){void 0===n&&(n={});var a,i=t||u;try{a=i(e||"")}catch(e){a={}}for(var o in n){var r=n[o];a[o]=Array.isArray(r)?r.map(d):d(r)}return a}(c.query,o.query,a&&a.options.parseQuery),f=o.hash||c.hash;return f&&"#"!==f.charAt(0)&&(f="#"+f),{_normalized:!0,path:h,query:m,hash:f}}var H,V=function(){},W={name:"RouterLink",props:{to:{type:[String,Object],required:!0},tag:{type:String,default:"a"},custom:Boolean,exact:Boolean,exactPath:Boolean,append:Boolean,replace:Boolean,activeClass:String,exactActiveClass:String,ariaCurrentValue:{type:String,default:"page"},event:{type:[String,Array],default:"click"}},render:function(e){var n=this,t=this.$router,a=this.$route,o=t.resolve(this.to,a,this.append),r=o.location,s=o.route,l=o.href,c={},d=t.options.linkActiveClass,u=t.options.linkExactActiveClass,p=null==d?"router-link-active":d,f=null==u?"router-link-exact-active":u,g=null==this.activeClass?p:this.activeClass,v=null==this.exactActiveClass?f:this.exactActiveClass,b=s.redirectedFrom?m(null,$(s.redirectedFrom),null,t):s;c[v]=y(a,b,this.exactPath),c[g]=this.exact||this.exactPath?c[v]:function(e,n){return 0===e.path.replace(h,"/").indexOf(n.path.replace(h,"/"))&&(!n.hash||e.hash===n.hash)&&function(e,n){for(var t in n)if(!(t in e))return!1;return!0}(e.query,n.query)}(a,b);var w=c[v]?this.ariaCurrentValue:null,j=function(e){K(e)&&(n.replace?t.replace(r,V):t.push(r,V))},x={click:K};Array.isArray(this.event)?this.event.forEach((function(e){x[e]=j})):x[this.event]=j;var E={class:c},k=!this.$scopedSlots.$hasNormal&&this.$scopedSlots.default&&this.$scopedSlots.default({href:l,route:s,navigate:j,isActive:c[g],isExactActive:c[v]});if(k){if(1===k.length)return k[0];if(k.length>1||!k.length)return 0===k.length?e():e("span",{},k)}if("a"===this.tag)E.on=x,E.attrs={href:l,"aria-current":w};else{var C=function e(n){var t;if(n)for(var a=0;a<n.length;a++){if("a"===(t=n[a]).tag)return t;if(t.children&&(t=e(t.children)))return t}}(this.$slots.default);if(C){C.isStatic=!1;var A=C.data=i({},C.data);for(var S in A.on=A.on||{},A.on){var P=A.on[S];S in x&&(A.on[S]=Array.isArray(P)?P:[P])}for(var I in x)I in A.on?A.on[I].push(x[I]):A.on[I]=j;var T=C.data.attrs=i({},C.data.attrs);T.href=l,T["aria-current"]=w}else E.on=x}return e(this.tag,E,this.$slots.default)}};function K(e){if(!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey||e.defaultPrevented||void 0!==e.button&&0!==e.button)){if(e.currentTarget&&e.currentTarget.getAttribute){var n=e.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(n))return}return e.preventDefault&&e.preventDefault(),!0}}var Q="undefined"!=typeof window;function G(e,n,t,a,i){var o=n||[],r=t||Object.create(null),s=a||Object.create(null);e.forEach((function(e){!function e(n,t,a,i,o,r){var s=i.path,l=i.name;0;var c=i.pathToRegexpOptions||{},d=function(e,n,t){t||(e=e.replace(/\/$/,""));if("/"===e[0])return e;if(null==n)return e;return C(n.path+"/"+e)}(s,o,c.strict);"boolean"==typeof i.caseSensitive&&(c.sensitive=i.caseSensitive);var u={path:d,regex:Y(d,c),components:i.components||{default:i.component},alias:i.alias?"string"==typeof i.alias?[i.alias]:i.alias:[],instances:{},enteredCbs:{},name:l,parent:o,matchAs:r,redirect:i.redirect,beforeEnter:i.beforeEnter,meta:i.meta||{},props:null==i.props?{}:i.components?i.props:{default:i.props}};i.children&&i.children.forEach((function(i){var o=r?C(r+"/"+i.path):void 0;e(n,t,a,i,u,o)}));t[u.path]||(n.push(u.path),t[u.path]=u);if(void 0!==i.alias)for(var p=Array.isArray(i.alias)?i.alias:[i.alias],h=0;h<p.length;++h){0;var m={path:p[h],children:i.children};e(n,t,a,m,o,u.path||"/")}l&&(a[l]||(a[l]=u))}(o,r,s,e,i)}));for(var l=0,c=o.length;l<c;l++)"*"===o[l]&&(o.push(o.splice(l,1)[0]),c--,l--);return{pathList:o,pathMap:r,nameMap:s}}function Y(e,n){return S(e,[],n)}function X(e,n){var t=G(e),a=t.pathList,i=t.pathMap,o=t.nameMap;function r(e,t,r){var s=$(e,t,!1,n),c=s.name;if(c){var d=o[c];if(!d)return l(null,s);var u=d.regex.keys.filter((function(e){return!e.optional})).map((function(e){return e.name}));if("object"!=typeof s.params&&(s.params={}),t&&"object"==typeof t.params)for(var p in t.params)!(p in s.params)&&u.indexOf(p)>-1&&(s.params[p]=t.params[p]);return s.path=N(d.path,s.params),l(d,s,r)}if(s.path){s.params={};for(var h=0;h<a.length;h++){var m=a[h],f=i[m];if(Z(f.regex,s.path,s.params))return l(f,s,r)}}return l(null,s)}function s(e,t){var a=e.redirect,i="function"==typeof a?a(m(e,t,null,n)):a;if("string"==typeof i&&(i={path:i}),!i||"object"!=typeof i)return l(null,t);var s=i,c=s.name,d=s.path,u=t.query,p=t.hash,h=t.params;if(u=s.hasOwnProperty("query")?s.query:u,p=s.hasOwnProperty("hash")?s.hash:p,h=s.hasOwnProperty("params")?s.params:h,c){o[c];return r({_normalized:!0,name:c,query:u,hash:p,params:h},void 0,t)}if(d){var f=function(e,n){return k(e,n.parent?n.parent.path:"/",!0)}(d,e);return r({_normalized:!0,path:N(f,h),query:u,hash:p},void 0,t)}return l(null,t)}function l(e,t,a){return e&&e.redirect?s(e,a||t):e&&e.matchAs?function(e,n,t){var a=r({_normalized:!0,path:N(t,n.params)});if(a){var i=a.matched,o=i[i.length-1];return n.params=a.params,l(o,n)}return l(null,n)}(0,t,e.matchAs):m(e,t,a,n)}return{match:r,addRoute:function(e,n){var t="object"!=typeof e?o[e]:void 0;G([n||e],a,i,o,t),t&&t.alias.length&&G(t.alias.map((function(e){return{path:e,children:[n]}})),a,i,o,t)},getRoutes:function(){return a.map((function(e){return i[e]}))},addRoutes:function(e){G(e,a,i,o)}}}function Z(e,n,t){var a=n.match(e);if(!a)return!1;if(!t)return!0;for(var i=1,o=a.length;i<o;++i){var r=e.keys[i-1];r&&(t[r.name||"pathMatch"]="string"==typeof a[i]?c(a[i]):a[i])}return!0}var ee=Q&&window.performance&&window.performance.now?window.performance:Date;function ne(){return ee.now().toFixed(3)}var te=ne();function ae(){return te}function ie(e){return te=e}var oe=Object.create(null);function re(){"scrollRestoration"in window.history&&(window.history.scrollRestoration="manual");var e=window.location.protocol+"//"+window.location.host,n=window.location.href.replace(e,""),t=i({},window.history.state);return t.key=ae(),window.history.replaceState(t,"",n),window.addEventListener("popstate",ce),function(){window.removeEventListener("popstate",ce)}}function se(e,n,t,a){if(e.app){var i=e.options.scrollBehavior;i&&e.app.$nextTick((function(){var o=function(){var e=ae();if(e)return oe[e]}(),r=i.call(e,n,t,a?o:null);r&&("function"==typeof r.then?r.then((function(e){me(e,o)})).catch((function(e){0})):me(r,o))}))}}function le(){var e=ae();e&&(oe[e]={x:window.pageXOffset,y:window.pageYOffset})}function ce(e){le(),e.state&&e.state.key&&ie(e.state.key)}function de(e){return pe(e.x)||pe(e.y)}function ue(e){return{x:pe(e.x)?e.x:window.pageXOffset,y:pe(e.y)?e.y:window.pageYOffset}}function pe(e){return"number"==typeof e}var he=/^#\d/;function me(e,n){var t,a="object"==typeof e;if(a&&"string"==typeof e.selector){var i=he.test(e.selector)?document.getElementById(e.selector.slice(1)):document.querySelector(e.selector);if(i){var o=e.offset&&"object"==typeof e.offset?e.offset:{};n=function(e,n){var t=document.documentElement.getBoundingClientRect(),a=e.getBoundingClientRect();return{x:a.left-t.left-n.x,y:a.top-t.top-n.y}}(i,o={x:pe((t=o).x)?t.x:0,y:pe(t.y)?t.y:0})}else de(e)&&(n=ue(e))}else a&&de(e)&&(n=ue(e));n&&("scrollBehavior"in document.documentElement.style?window.scrollTo({left:n.x,top:n.y,behavior:e.behavior}):window.scrollTo(n.x,n.y))}var fe,ge=Q&&((-1===(fe=window.navigator.userAgent).indexOf("Android 2.")&&-1===fe.indexOf("Android 4.0")||-1===fe.indexOf("Mobile Safari")||-1!==fe.indexOf("Chrome")||-1!==fe.indexOf("Windows Phone"))&&window.history&&"function"==typeof window.history.pushState);function ve(e,n){le();var t=window.history;try{if(n){var a=i({},t.state);a.key=ae(),t.replaceState(a,"",e)}else t.pushState({key:ie(ne())},"",e)}catch(t){window.location[n?"replace":"assign"](e)}}function be(e){ve(e,!0)}var ye={redirected:2,aborted:4,cancelled:8,duplicated:16};function we(e,n){return xe(e,n,ye.redirected,'Redirected when going from "'+e.fullPath+'" to "'+function(e){if("string"==typeof e)return e;if("path"in e)return e.path;var n={};return Ee.forEach((function(t){t in e&&(n[t]=e[t])})),JSON.stringify(n,null,2)}(n)+'" via a navigation guard.')}function je(e,n){return xe(e,n,ye.cancelled,'Navigation cancelled from "'+e.fullPath+'" to "'+n.fullPath+'" with a new navigation.')}function xe(e,n,t,a){var i=new Error(a);return i._isRouter=!0,i.from=e,i.to=n,i.type=t,i}var Ee=["params","query","hash"];function ke(e){return Object.prototype.toString.call(e).indexOf("Error")>-1}function Ce(e,n){return ke(e)&&e._isRouter&&(null==n||e.type===n)}function Ae(e,n,t){var a=function(i){i>=e.length?t():e[i]?n(e[i],(function(){a(i+1)})):a(i+1)};a(0)}function Se(e){return function(n,t,a){var i=!1,o=0,r=null;Pe(e,(function(e,n,t,s){if("function"==typeof e&&void 0===e.cid){i=!0,o++;var l,c=_e((function(n){var i;((i=n).__esModule||Te&&"Module"===i[Symbol.toStringTag])&&(n=n.default),e.resolved="function"==typeof n?n:H.extend(n),t.components[s]=n,--o<=0&&a()})),d=_e((function(e){var n="Failed to resolve async component "+s+": "+e;r||(r=ke(e)?e:new Error(n),a(r))}));try{l=e(c,d)}catch(e){d(e)}if(l)if("function"==typeof l.then)l.then(c,d);else{var u=l.component;u&&"function"==typeof u.then&&u.then(c,d)}}})),i||a()}}function Pe(e,n){return Ie(e.map((function(e){return Object.keys(e.components).map((function(t){return n(e.components[t],e.instances[t],e,t)}))})))}function Ie(e){return Array.prototype.concat.apply([],e)}var Te="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;function _e(e){var n=!1;return function(){for(var t=[],a=arguments.length;a--;)t[a]=arguments[a];if(!n)return n=!0,e.apply(this,t)}}var Be=function(e,n){this.router=e,this.base=function(e){if(!e)if(Q){var n=document.querySelector("base");e=(e=n&&n.getAttribute("href")||"/").replace(/^https?:\/\/[^\/]+/,"")}else e="/";"/"!==e.charAt(0)&&(e="/"+e);return e.replace(/\/$/,"")}(n),this.current=g,this.pending=null,this.ready=!1,this.readyCbs=[],this.readyErrorCbs=[],this.errorCbs=[],this.listeners=[]};function Fe(e,n,t,a){var i=Pe(e,(function(e,a,i,o){var r=function(e,n){"function"!=typeof e&&(e=H.extend(e));return e.options[n]}(e,n);if(r)return Array.isArray(r)?r.map((function(e){return t(e,a,i,o)})):t(r,a,i,o)}));return Ie(a?i.reverse():i)}function ze(e,n){if(n)return function(){return e.apply(n,arguments)}}Be.prototype.listen=function(e){this.cb=e},Be.prototype.onReady=function(e,n){this.ready?e():(this.readyCbs.push(e),n&&this.readyErrorCbs.push(n))},Be.prototype.onError=function(e){this.errorCbs.push(e)},Be.prototype.transitionTo=function(e,n,t){var a,i=this;try{a=this.router.match(e,this.current)}catch(e){throw this.errorCbs.forEach((function(n){n(e)})),e}var o=this.current;this.confirmTransition(a,(function(){i.updateRoute(a),n&&n(a),i.ensureURL(),i.router.afterHooks.forEach((function(e){e&&e(a,o)})),i.ready||(i.ready=!0,i.readyCbs.forEach((function(e){e(a)})))}),(function(e){t&&t(e),e&&!i.ready&&(Ce(e,ye.redirected)&&o===g||(i.ready=!0,i.readyErrorCbs.forEach((function(n){n(e)}))))}))},Be.prototype.confirmTransition=function(e,n,t){var a=this,i=this.current;this.pending=e;var o=function(e){!Ce(e)&&ke(e)&&(a.errorCbs.length?a.errorCbs.forEach((function(n){n(e)})):console.error(e)),t&&t(e)},r=e.matched.length-1,s=i.matched.length-1;if(y(e,i)&&r===s&&e.matched[r]===i.matched[s])return this.ensureURL(),e.hash&&se(this.router,i,e,!1),o(function(e,n){var t=xe(e,n,ye.duplicated,'Avoided redundant navigation to current location: "'+e.fullPath+'".');return t.name="NavigationDuplicated",t}(i,e));var l=function(e,n){var t,a=Math.max(e.length,n.length);for(t=0;t<a&&e[t]===n[t];t++);return{updated:n.slice(0,t),activated:n.slice(t),deactivated:e.slice(t)}}(this.current.matched,e.matched),c=l.updated,d=l.deactivated,u=l.activated,p=[].concat(function(e){return Fe(e,"beforeRouteLeave",ze,!0)}(d),this.router.beforeHooks,function(e){return Fe(e,"beforeRouteUpdate",ze)}(c),u.map((function(e){return e.beforeEnter})),Se(u)),h=function(n,t){if(a.pending!==e)return o(je(i,e));try{n(e,i,(function(n){!1===n?(a.ensureURL(!0),o(function(e,n){return xe(e,n,ye.aborted,'Navigation aborted from "'+e.fullPath+'" to "'+n.fullPath+'" via a navigation guard.')}(i,e))):ke(n)?(a.ensureURL(!0),o(n)):"string"==typeof n||"object"==typeof n&&("string"==typeof n.path||"string"==typeof n.name)?(o(we(i,e)),"object"==typeof n&&n.replace?a.replace(n):a.push(n)):t(n)}))}catch(e){o(e)}};Ae(p,h,(function(){Ae(function(e){return Fe(e,"beforeRouteEnter",(function(e,n,t,a){return function(e,n,t){return function(a,i,o){return e(a,i,(function(e){"function"==typeof e&&(n.enteredCbs[t]||(n.enteredCbs[t]=[]),n.enteredCbs[t].push(e)),o(e)}))}}(e,t,a)}))}(u).concat(a.router.resolveHooks),h,(function(){if(a.pending!==e)return o(je(i,e));a.pending=null,n(e),a.router.app&&a.router.app.$nextTick((function(){j(e)}))}))}))},Be.prototype.updateRoute=function(e){this.current=e,this.cb&&this.cb(e)},Be.prototype.setupListeners=function(){},Be.prototype.teardown=function(){this.listeners.forEach((function(e){e()})),this.listeners=[],this.current=g,this.pending=null};var Re=function(e){function n(n,t){e.call(this,n,t),this._startLocation=Me(this.base)}return e&&(n.__proto__=e),n.prototype=Object.create(e&&e.prototype),n.prototype.constructor=n,n.prototype.setupListeners=function(){var e=this;if(!(this.listeners.length>0)){var n=this.router,t=n.options.scrollBehavior,a=ge&&t;a&&this.listeners.push(re());var i=function(){var t=e.current,i=Me(e.base);e.current===g&&i===e._startLocation||e.transitionTo(i,(function(e){a&&se(n,e,t,!0)}))};window.addEventListener("popstate",i),this.listeners.push((function(){window.removeEventListener("popstate",i)}))}},n.prototype.go=function(e){window.history.go(e)},n.prototype.push=function(e,n,t){var a=this,i=this.current;this.transitionTo(e,(function(e){ve(C(a.base+e.fullPath)),se(a.router,e,i,!1),n&&n(e)}),t)},n.prototype.replace=function(e,n,t){var a=this,i=this.current;this.transitionTo(e,(function(e){be(C(a.base+e.fullPath)),se(a.router,e,i,!1),n&&n(e)}),t)},n.prototype.ensureURL=function(e){if(Me(this.base)!==this.current.fullPath){var n=C(this.base+this.current.fullPath);e?ve(n):be(n)}},n.prototype.getCurrentLocation=function(){return Me(this.base)},n}(Be);function Me(e){var n=window.location.pathname,t=n.toLowerCase(),a=e.toLowerCase();return!e||t!==a&&0!==t.indexOf(C(a+"/"))||(n=n.slice(e.length)),(n||"/")+window.location.search+window.location.hash}var De=function(e){function n(n,t,a){e.call(this,n,t),a&&function(e){var n=Me(e);if(!/^\/#/.test(n))return window.location.replace(C(e+"/#"+n)),!0}(this.base)||Oe()}return e&&(n.__proto__=e),n.prototype=Object.create(e&&e.prototype),n.prototype.constructor=n,n.prototype.setupListeners=function(){var e=this;if(!(this.listeners.length>0)){var n=this.router.options.scrollBehavior,t=ge&&n;t&&this.listeners.push(re());var a=function(){var n=e.current;Oe()&&e.transitionTo(qe(),(function(a){t&&se(e.router,a,n,!0),ge||Le(a.fullPath)}))},i=ge?"popstate":"hashchange";window.addEventListener(i,a),this.listeners.push((function(){window.removeEventListener(i,a)}))}},n.prototype.push=function(e,n,t){var a=this,i=this.current;this.transitionTo(e,(function(e){Ue(e.fullPath),se(a.router,e,i,!1),n&&n(e)}),t)},n.prototype.replace=function(e,n,t){var a=this,i=this.current;this.transitionTo(e,(function(e){Le(e.fullPath),se(a.router,e,i,!1),n&&n(e)}),t)},n.prototype.go=function(e){window.history.go(e)},n.prototype.ensureURL=function(e){var n=this.current.fullPath;qe()!==n&&(e?Ue(n):Le(n))},n.prototype.getCurrentLocation=function(){return qe()},n}(Be);function Oe(){var e=qe();return"/"===e.charAt(0)||(Le("/"+e),!1)}function qe(){var e=window.location.href,n=e.indexOf("#");return n<0?"":e=e.slice(n+1)}function Je(e){var n=window.location.href,t=n.indexOf("#");return(t>=0?n.slice(0,t):n)+"#"+e}function Ue(e){ge?ve(Je(e)):window.location.hash=e}function Le(e){ge?be(Je(e)):window.location.replace(Je(e))}var Ne=function(e){function n(n,t){e.call(this,n,t),this.stack=[],this.index=-1}return e&&(n.__proto__=e),n.prototype=Object.create(e&&e.prototype),n.prototype.constructor=n,n.prototype.push=function(e,n,t){var a=this;this.transitionTo(e,(function(e){a.stack=a.stack.slice(0,a.index+1).concat(e),a.index++,n&&n(e)}),t)},n.prototype.replace=function(e,n,t){var a=this;this.transitionTo(e,(function(e){a.stack=a.stack.slice(0,a.index).concat(e),n&&n(e)}),t)},n.prototype.go=function(e){var n=this,t=this.index+e;if(!(t<0||t>=this.stack.length)){var a=this.stack[t];this.confirmTransition(a,(function(){var e=n.current;n.index=t,n.updateRoute(a),n.router.afterHooks.forEach((function(n){n&&n(a,e)}))}),(function(e){Ce(e,ye.duplicated)&&(n.index=t)}))}},n.prototype.getCurrentLocation=function(){var e=this.stack[this.stack.length-1];return e?e.fullPath:"/"},n.prototype.ensureURL=function(){},n}(Be),$e=function(e){void 0===e&&(e={}),this.app=null,this.apps=[],this.options=e,this.beforeHooks=[],this.resolveHooks=[],this.afterHooks=[],this.matcher=X(e.routes||[],this);var n=e.mode||"hash";switch(this.fallback="history"===n&&!ge&&!1!==e.fallback,this.fallback&&(n="hash"),Q||(n="abstract"),this.mode=n,n){case"history":this.history=new Re(this,e.base);break;case"hash":this.history=new De(this,e.base,this.fallback);break;case"abstract":this.history=new Ne(this,e.base);break;default:0}},He={currentRoute:{configurable:!0}};$e.prototype.match=function(e,n,t){return this.matcher.match(e,n,t)},He.currentRoute.get=function(){return this.history&&this.history.current},$e.prototype.init=function(e){var n=this;if(this.apps.push(e),e.$once("hook:destroyed",(function(){var t=n.apps.indexOf(e);t>-1&&n.apps.splice(t,1),n.app===e&&(n.app=n.apps[0]||null),n.app||n.history.teardown()})),!this.app){this.app=e;var t=this.history;if(t instanceof Re||t instanceof De){var a=function(e){t.setupListeners(),function(e){var a=t.current,i=n.options.scrollBehavior;ge&&i&&"fullPath"in e&&se(n,e,a,!1)}(e)};t.transitionTo(t.getCurrentLocation(),a,a)}t.listen((function(e){n.apps.forEach((function(n){n._route=e}))}))}},$e.prototype.beforeEach=function(e){return We(this.beforeHooks,e)},$e.prototype.beforeResolve=function(e){return We(this.resolveHooks,e)},$e.prototype.afterEach=function(e){return We(this.afterHooks,e)},$e.prototype.onReady=function(e,n){this.history.onReady(e,n)},$e.prototype.onError=function(e){this.history.onError(e)},$e.prototype.push=function(e,n,t){var a=this;if(!n&&!t&&"undefined"!=typeof Promise)return new Promise((function(n,t){a.history.push(e,n,t)}));this.history.push(e,n,t)},$e.prototype.replace=function(e,n,t){var a=this;if(!n&&!t&&"undefined"!=typeof Promise)return new Promise((function(n,t){a.history.replace(e,n,t)}));this.history.replace(e,n,t)},$e.prototype.go=function(e){this.history.go(e)},$e.prototype.back=function(){this.go(-1)},$e.prototype.forward=function(){this.go(1)},$e.prototype.getMatchedComponents=function(e){var n=e?e.matched?e:this.resolve(e).route:this.currentRoute;return n?[].concat.apply([],n.matched.map((function(e){return Object.keys(e.components).map((function(n){return e.components[n]}))}))):[]},$e.prototype.resolve=function(e,n,t){var a=$(e,n=n||this.history.current,t,this),i=this.match(a,n),o=i.redirectedFrom||i.fullPath;return{location:a,route:i,href:function(e,n,t){var a="hash"===t?"#"+n:n;return e?C(e+"/"+a):a}(this.history.base,o,this.mode),normalizedTo:a,resolved:i}},$e.prototype.getRoutes=function(){return this.matcher.getRoutes()},$e.prototype.addRoute=function(e,n){this.matcher.addRoute(e,n),this.history.current!==g&&this.history.transitionTo(this.history.getCurrentLocation())},$e.prototype.addRoutes=function(e){this.matcher.addRoutes(e),this.history.current!==g&&this.history.transitionTo(this.history.getCurrentLocation())},Object.defineProperties($e.prototype,He);var Ve=$e;function We(e,n){return e.push(n),function(){var t=e.indexOf(n);t>-1&&e.splice(t,1)}}$e.install=function e(n){if(!e.installed||H!==n){e.installed=!0,H=n;var t=function(e){return void 0!==e},a=function(e,n){var a=e.$options._parentVnode;t(a)&&t(a=a.data)&&t(a=a.registerRouteInstance)&&a(e,n)};n.mixin({beforeCreate:function(){t(this.$options.router)?(this._routerRoot=this,this._router=this.$options.router,this._router.init(this),n.util.defineReactive(this,"_route",this._router.history.current)):this._routerRoot=this.$parent&&this.$parent._routerRoot||this,a(this,this)},destroyed:function(){a(this)}}),Object.defineProperty(n.prototype,"$router",{get:function(){return this._routerRoot._router}}),Object.defineProperty(n.prototype,"$route",{get:function(){return this._routerRoot._route}}),n.component("RouterView",x),n.component("RouterLink",W);var i=n.config.optionMergeStrategies;i.beforeRouteEnter=i.beforeRouteLeave=i.beforeRouteUpdate=i.created}},$e.version="3.6.5",$e.isNavigationFailure=Ce,$e.NavigationFailureType=ye,$e.START_LOCATION=g,Q&&window.Vue&&window.Vue.use($e);t(126);var Ke=t(0),Qe=t(112),Ge=t.n(Qe),Ye=t(113),Xe=t.n(Ye),Ze={created(){if(this.siteMeta=this.$site.headTags.filter(([e])=>"meta"===e).map(([e,n])=>n),this.$ssrContext){const n=this.getMergedMetaTags();this.$ssrContext.title=this.$title,this.$ssrContext.lang=this.$lang,this.$ssrContext.pageMeta=(e=n)?e.map(e=>{let n="<meta";return Object.keys(e).forEach(t=>{n+=` ${t}="${Xe()(e[t])}"`}),n+">"}).join("\n    "):"",this.$ssrContext.canonicalLink=nn(this.$canonicalUrl)}var e},mounted(){this.currentMetaTags=[...document.querySelectorAll("meta")],this.updateMeta(),this.updateCanonicalLink()},methods:{updateMeta(){document.title=this.$title,document.documentElement.lang=this.$lang;const e=this.getMergedMetaTags();this.currentMetaTags=tn(e,this.currentMetaTags)},getMergedMetaTags(){const e=this.$page.frontmatter.meta||[];return Ge()([{name:"description",content:this.$description}],e,this.siteMeta,an)},updateCanonicalLink(){en(),this.$canonicalUrl&&document.head.insertAdjacentHTML("beforeend",nn(this.$canonicalUrl))}},watch:{$page(){this.updateMeta(),this.updateCanonicalLink()}},beforeDestroy(){tn(null,this.currentMetaTags),en()}};function en(){const e=document.querySelector("link[rel='canonical']");e&&e.remove()}function nn(e=""){return e?`<link href="${e}" rel="canonical" />`:""}function tn(e,n){if(n&&[...n].filter(e=>e.parentNode===document.head).forEach(e=>document.head.removeChild(e)),e)return e.map(e=>{const n=document.createElement("meta");return Object.keys(e).forEach(t=>{n.setAttribute(t,e[t])}),document.head.appendChild(n),n})}function an(e){for(const n of["name","property","itemprop"])if(e.hasOwnProperty(n))return e[n]+n;return JSON.stringify(e)}var on=t(28),rn=t.n(on),sn={mounted(){window.addEventListener("scroll",this.onScroll)},methods:{onScroll:rn()((function(){this.setActiveHash()}),300),setActiveHash(){const e=[].slice.call(document.querySelectorAll(".sidebar-link")),n=[].slice.call(document.querySelectorAll(".header-anchor")).filter(n=>e.some(e=>e.hash===n.hash)),t=Math.max(window.pageYOffset,document.documentElement.scrollTop,document.body.scrollTop),a=Math.max(document.documentElement.scrollHeight,document.body.scrollHeight),i=window.innerHeight+t;for(let e=0;e<n.length;e++){const o=n[e],r=n[e+1],s=0===e&&0===t||t>=o.parentElement.offsetTop+10&&(!r||t<r.parentElement.offsetTop-10),l=decodeURIComponent(this.$route.hash);if(s&&l!==decodeURIComponent(o.hash)){const t=o;if(i===a)for(let t=e+1;t<n.length;t++)if(l===decodeURIComponent(n[t].hash))return;return this.$vuepress.$set("disableScrollBehavior",!0),void this.$router.replace(decodeURIComponent(t.hash),()=>{this.$nextTick(()=>{this.$vuepress.$set("disableScrollBehavior",!1)})})}}}},beforeDestroy(){window.removeEventListener("scroll",this.onScroll)}},ln=t(29),cn=t.n(ln),dn={mounted(){cn.a.configure({showSpinner:!1}),this.$router.beforeEach((e,n,t)=>{e.path===n.path||a.a.component(e.name)||cn.a.start(),t()}),this.$router.afterEach(()=>{cn.a.done(),this.isSidebarOpen=!1})}},un=(t(259),Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e}),pn=function(e){return"IMG"===e.tagName},hn=function(e){return e&&1===e.nodeType},mn=function(e){return".svg"===(e.currentSrc||e.src).substr(-4).toLowerCase()},fn=function(e){try{return Array.isArray(e)?e.filter(pn):function(e){return NodeList.prototype.isPrototypeOf(e)}(e)?[].slice.call(e).filter(pn):hn(e)?[e].filter(pn):"string"==typeof e?[].slice.call(document.querySelectorAll(e)).filter(pn):[]}catch(e){throw new TypeError("The provided selector is invalid.\nExpects a CSS selector, a Node element, a NodeList or an array.\nSee: https://github.com/francoischalifour/medium-zoom")}},gn=function(e){var n=document.createElement("div");return n.classList.add("medium-zoom-overlay"),n.style.background=e,n},vn=function(e){var n=e.getBoundingClientRect(),t=n.top,a=n.left,i=n.width,o=n.height,r=e.cloneNode(),s=window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop||0,l=window.pageXOffset||document.documentElement.scrollLeft||document.body.scrollLeft||0;return r.removeAttribute("id"),r.style.position="absolute",r.style.top=t+s+"px",r.style.left=a+l+"px",r.style.width=i+"px",r.style.height=o+"px",r.style.transform="",r},bn=function(e,n){var t=un({bubbles:!1,cancelable:!1,detail:void 0},n);if("function"==typeof window.CustomEvent)return new CustomEvent(e,t);var a=document.createEvent("CustomEvent");return a.initCustomEvent(e,t.bubbles,t.cancelable,t.detail),a};!function(e,n){void 0===n&&(n={});var t=n.insertAt;if(e&&"undefined"!=typeof document){var a=document.head||document.getElementsByTagName("head")[0],i=document.createElement("style");i.type="text/css","top"===t&&a.firstChild?a.insertBefore(i,a.firstChild):a.appendChild(i),i.styleSheet?i.styleSheet.cssText=e:i.appendChild(document.createTextNode(e))}}(".medium-zoom-overlay{position:fixed;top:0;right:0;bottom:0;left:0;opacity:0;transition:opacity .3s;will-change:opacity}.medium-zoom--opened .medium-zoom-overlay{cursor:pointer;cursor:zoom-out;opacity:1}.medium-zoom-image{cursor:pointer;cursor:zoom-in;transition:transform .3s cubic-bezier(.2,0,.2,1)!important}.medium-zoom-image--hidden{visibility:hidden}.medium-zoom-image--opened{position:relative;cursor:pointer;cursor:zoom-out;will-change:transform}");var yn=function e(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=window.Promise||function(e){function n(){}e(n,n)},i=function(e){var n=e.target;n!==C?-1!==y.indexOf(n)&&f({target:n}):m()},o=function(){if(!j&&k.original){var e=window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop||0;Math.abs(x-e)>E.scrollOffset&&setTimeout(m,150)}},r=function(e){var n=e.key||e.keyCode;"Escape"!==n&&"Esc"!==n&&27!==n||m()},s=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e;if(e.background&&(C.style.background=e.background),e.container&&e.container instanceof Object&&(n.container=un({},E.container,e.container)),e.template){var t=hn(e.template)?e.template:document.querySelector(e.template);n.template=t}return E=un({},E,n),y.forEach((function(e){e.dispatchEvent(bn("medium-zoom:update",{detail:{zoom:A}}))})),A},l=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return e(un({},E,n))},c=function(){for(var e=arguments.length,n=Array(e),t=0;t<e;t++)n[t]=arguments[t];var a=n.reduce((function(e,n){return[].concat(e,fn(n))}),[]);return a.filter((function(e){return-1===y.indexOf(e)})).forEach((function(e){y.push(e),e.classList.add("medium-zoom-image")})),w.forEach((function(e){var n=e.type,t=e.listener,i=e.options;a.forEach((function(e){e.addEventListener(n,t,i)}))})),A},d=function(){for(var e=arguments.length,n=Array(e),t=0;t<e;t++)n[t]=arguments[t];k.zoomed&&m();var a=n.length>0?n.reduce((function(e,n){return[].concat(e,fn(n))}),[]):y;return a.forEach((function(e){e.classList.remove("medium-zoom-image"),e.dispatchEvent(bn("medium-zoom:detach",{detail:{zoom:A}}))})),y=y.filter((function(e){return-1===a.indexOf(e)})),A},u=function(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return y.forEach((function(a){a.addEventListener("medium-zoom:"+e,n,t)})),w.push({type:"medium-zoom:"+e,listener:n,options:t}),A},p=function(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return y.forEach((function(a){a.removeEventListener("medium-zoom:"+e,n,t)})),w=w.filter((function(t){return!(t.type==="medium-zoom:"+e&&t.listener.toString()===n.toString())})),A},h=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.target,t=function(){var e={width:document.documentElement.clientWidth,height:document.documentElement.clientHeight,left:0,top:0,right:0,bottom:0},n=void 0,t=void 0;if(E.container)if(E.container instanceof Object)n=(e=un({},e,E.container)).width-e.left-e.right-2*E.margin,t=e.height-e.top-e.bottom-2*E.margin;else{var a=(hn(E.container)?E.container:document.querySelector(E.container)).getBoundingClientRect(),i=a.width,o=a.height,r=a.left,s=a.top;e=un({},e,{width:i,height:o,left:r,top:s})}n=n||e.width-2*E.margin,t=t||e.height-2*E.margin;var l=k.zoomedHd||k.original,c=mn(l)?n:l.naturalWidth||n,d=mn(l)?t:l.naturalHeight||t,u=l.getBoundingClientRect(),p=u.top,h=u.left,m=u.width,f=u.height,g=Math.min(Math.max(m,c),n)/m,v=Math.min(Math.max(f,d),t)/f,b=Math.min(g,v),y="scale("+b+") translate3d("+((n-m)/2-h+E.margin+e.left)/b+"px, "+((t-f)/2-p+E.margin+e.top)/b+"px, 0)";k.zoomed.style.transform=y,k.zoomedHd&&(k.zoomedHd.style.transform=y)};return new a((function(e){if(n&&-1===y.indexOf(n))e(A);else{if(k.zoomed)e(A);else{if(n)k.original=n;else{if(!(y.length>0))return void e(A);var a=y;k.original=a[0]}if(k.original.dispatchEvent(bn("medium-zoom:open",{detail:{zoom:A}})),x=window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop||0,j=!0,k.zoomed=vn(k.original),document.body.appendChild(C),E.template){var i=hn(E.template)?E.template:document.querySelector(E.template);k.template=document.createElement("div"),k.template.appendChild(i.content.cloneNode(!0)),document.body.appendChild(k.template)}if(k.original.parentElement&&"PICTURE"===k.original.parentElement.tagName&&k.original.currentSrc&&(k.zoomed.src=k.original.currentSrc),document.body.appendChild(k.zoomed),window.requestAnimationFrame((function(){document.body.classList.add("medium-zoom--opened")})),k.original.classList.add("medium-zoom-image--hidden"),k.zoomed.classList.add("medium-zoom-image--opened"),k.zoomed.addEventListener("click",m),k.zoomed.addEventListener("transitionend",(function n(){j=!1,k.zoomed.removeEventListener("transitionend",n),k.original.dispatchEvent(bn("medium-zoom:opened",{detail:{zoom:A}})),e(A)})),k.original.getAttribute("data-zoom-src")){k.zoomedHd=k.zoomed.cloneNode(),k.zoomedHd.removeAttribute("srcset"),k.zoomedHd.removeAttribute("sizes"),k.zoomedHd.removeAttribute("loading"),k.zoomedHd.src=k.zoomed.getAttribute("data-zoom-src"),k.zoomedHd.onerror=function(){clearInterval(o),console.warn("Unable to reach the zoom image target "+k.zoomedHd.src),k.zoomedHd=null,t()};var o=setInterval((function(){k.zoomedHd.complete&&(clearInterval(o),k.zoomedHd.classList.add("medium-zoom-image--opened"),k.zoomedHd.addEventListener("click",m),document.body.appendChild(k.zoomedHd),t())}),10)}else if(k.original.hasAttribute("srcset")){k.zoomedHd=k.zoomed.cloneNode(),k.zoomedHd.removeAttribute("sizes"),k.zoomedHd.removeAttribute("loading");var r=k.zoomedHd.addEventListener("load",(function(){k.zoomedHd.removeEventListener("load",r),k.zoomedHd.classList.add("medium-zoom-image--opened"),k.zoomedHd.addEventListener("click",m),document.body.appendChild(k.zoomedHd),t()}))}else t()}}}))},m=function(){return new a((function(e){if(!j&&k.original){j=!0,document.body.classList.remove("medium-zoom--opened"),k.zoomed.style.transform="",k.zoomedHd&&(k.zoomedHd.style.transform=""),k.template&&(k.template.style.transition="opacity 150ms",k.template.style.opacity=0),k.original.dispatchEvent(bn("medium-zoom:close",{detail:{zoom:A}})),k.zoomed.addEventListener("transitionend",(function n(){k.original.classList.remove("medium-zoom-image--hidden"),document.body.removeChild(k.zoomed),k.zoomedHd&&document.body.removeChild(k.zoomedHd),document.body.removeChild(C),k.zoomed.classList.remove("medium-zoom-image--opened"),k.template&&document.body.removeChild(k.template),j=!1,k.zoomed.removeEventListener("transitionend",n),k.original.dispatchEvent(bn("medium-zoom:closed",{detail:{zoom:A}})),k.original=null,k.zoomed=null,k.zoomedHd=null,k.template=null,e(A)}))}else e(A)}))},f=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.target;return k.original?m():h({target:n})},g=function(){return E},v=function(){return y},b=function(){return k.original},y=[],w=[],j=!1,x=0,E=t,k={original:null,zoomed:null,zoomedHd:null,template:null};"[object Object]"===Object.prototype.toString.call(n)?E=n:(n||"string"==typeof n)&&c(n),E=un({margin:0,background:"#fff",scrollOffset:40,container:null,template:null},E);var C=gn(E.background);document.addEventListener("click",i),document.addEventListener("keyup",r),document.addEventListener("scroll",o),window.addEventListener("resize",m);var A={open:h,close:m,toggle:f,update:s,clone:l,attach:c,detach:d,on:u,off:p,getOptions:g,getImages:v,getZoomedImage:b};return A},wn=[Ze,sn,dn,{data:()=>({zoom:null}),mounted(){this.updateZoom()},updated(){this.updateZoom()},methods:{updateZoom(){setTimeout(()=>{this.zoom&&this.zoom.detach(),this.zoom=yn(".theme-default-content :not(a) > img",{})},1e3)}}}],jn={name:"GlobalLayout",computed:{layout(){const e=this.getLayout();return Object(Ke.h)("layout",e),a.a.component(e)}},methods:{getLayout(){if(this.$page.path){const e=this.$page.frontmatter.layout;return e&&(this.$vuepress.getLayoutAsyncComponent(e)||this.$vuepress.getVueComponent(e))?e:"Layout"}return"NotFound"}}},xn=t(14),En=Object(xn.a)(jn,(function(){return(0,this._self._c)(this.layout,{tag:"component"})}),[],!1,null,null,null).exports;Object(Ke.f)(En,"mixins",wn);const kn=[{name:"v-4337c678",path:"/about/",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-4337c678").then(t)}},{path:"/about/index.html",redirect:"/about/"},{name:"v-6391e5f4",path:"/",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-6391e5f4").then(t)}},{path:"/index.html",redirect:"/"},{name:"v-17295f05",path:"/en/1%20Quick%20Start/1.0%20Quick%20Start.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-17295f05").then(t)}},{path:"/en/1 Quick Start/1.0 Quick Start.html",redirect:"/en/1%20Quick%20Start/1.0%20Quick%20Start.html"},{path:"/en/1 Quick Start/1.0 Quick Start.html",redirect:"/en/1%20Quick%20Start/1.0%20Quick%20Start.html"},{name:"v-83630578",path:"/en/1%20Quick%20Start/1.1%20Basics%20of%20Maven.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-83630578").then(t)}},{path:"/en/1 Quick Start/1.1 Basics of Maven.html",redirect:"/en/1%20Quick%20Start/1.1%20Basics%20of%20Maven.html"},{path:"/en/1 Quick Start/1.1 Basics of Maven.html",redirect:"/en/1%20Quick%20Start/1.1%20Basics%20of%20Maven.html"},{name:"v-04cf41ad",path:"/en/1%20Quick%20Start/1.10%20Development%20under%20JBolt%20plugin.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-04cf41ad").then(t)}},{path:"/en/1 Quick Start/1.10 Development under JBolt plugin.html",redirect:"/en/1%20Quick%20Start/1.10%20Development%20under%20JBolt%20plugin.html"},{path:"/en/1 Quick Start/1.10 Development under JBolt plugin.html",redirect:"/en/1%20Quick%20Start/1.10%20Development%20under%20JBolt%20plugin.html"},{name:"v-2d950c67",path:"/en/1%20Quick%20Start/1.11%20Special%20Statement.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-2d950c67").then(t)}},{path:"/en/1 Quick Start/1.11 Special Statement.html",redirect:"/en/1%20Quick%20Start/1.11%20Special%20Statement.html"},{path:"/en/1 Quick Start/1.11 Special Statement.html",redirect:"/en/1%20Quick%20Start/1.11%20Special%20Statement.html"},{name:"v-1f6782f2",path:"/en/1%20Quick%20Start/1.2%20Development%20under%20jfinal-undertow.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-1f6782f2").then(t)}},{path:"/en/1 Quick Start/1.2 Development under jfinal-undertow.html",redirect:"/en/1%20Quick%20Start/1.2%20Development%20under%20jfinal-undertow.html"},{path:"/en/1 Quick Start/1.2 Development under jfinal-undertow.html",redirect:"/en/1%20Quick%20Start/1.2%20Development%20under%20jfinal-undertow.html"},{name:"v-b82ecc38",path:"/en/1%20Quick%20Start/1.3%20Deployment%20under%20jfinal-undertow.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-b82ecc38").then(t)}},{path:"/en/1 Quick Start/1.3 Deployment under jfinal-undertow.html",redirect:"/en/1%20Quick%20Start/1.3%20Deployment%20under%20jfinal-undertow.html"},{path:"/en/1 Quick Start/1.3 Deployment under jfinal-undertow.html",redirect:"/en/1%20Quick%20Start/1.3%20Deployment%20under%20jfinal-undertow.html"},{name:"v-76ff6023",path:"/en/1%20Quick%20Start/1.4%20Advanced%20usage%20of%20jfinal-undertow.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-76ff6023").then(t)}},{path:"/en/1 Quick Start/1.4 Advanced usage of jfinal-undertow.html",redirect:"/en/1%20Quick%20Start/1.4%20Advanced%20usage%20of%20jfinal-undertow.html"},{path:"/en/1 Quick Start/1.4 Advanced usage of jfinal-undertow.html",redirect:"/en/1%20Quick%20Start/1.4%20Advanced%20usage%20of%20jfinal-undertow.html"},{name:"v-274cb101",path:"/en/1%20Quick%20Start/1.5%20Common%20issues%20with%20jfinal-undertow.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-274cb101").then(t)}},{path:"/en/1 Quick Start/1.5 Common issues with jfinal-undertow.html",redirect:"/en/1%20Quick%20Start/1.5%20Common%20issues%20with%20jfinal-undertow.html"},{path:"/en/1 Quick Start/1.5 Common issues with jfinal-undertow.html",redirect:"/en/1%20Quick%20Start/1.5%20Common%20issues%20with%20jfinal-undertow.html"},{name:"v-116ab898",path:"/en/1%20Quick%20Start/1.6%20Development%20under%20jetty-server.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-116ab898").then(t)}},{path:"/en/1 Quick Start/1.6 Development under jetty-server.html",redirect:"/en/1%20Quick%20Start/1.6%20Development%20under%20jetty-server.html"},{path:"/en/1 Quick Start/1.6 Development under jetty-server.html",redirect:"/en/1%20Quick%20Start/1.6%20Development%20under%20jetty-server.html"},{name:"v-cb1aad04",path:"/en/1%20Quick%20Start/1.7%20Deployment%20under%20tomcat.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-cb1aad04").then(t)}},{path:"/en/1 Quick Start/1.7 Deployment under tomcat.html",redirect:"/en/1%20Quick%20Start/1.7%20Deployment%20under%20tomcat.html"},{path:"/en/1 Quick Start/1.7 Deployment under tomcat.html",redirect:"/en/1%20Quick%20Start/1.7%20Deployment%20under%20tomcat.html"},{name:"v-a978cb8c",path:"/en/1%20Quick%20Start/1.8%20Development%20without%20Maven.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-a978cb8c").then(t)}},{path:"/en/1 Quick Start/1.8 Development without Maven.html",redirect:"/en/1%20Quick%20Start/1.8%20Development%20without%20Maven.html"},{path:"/en/1 Quick Start/1.8 Development without Maven.html",redirect:"/en/1%20Quick%20Start/1.8%20Development%20without%20Maven.html"},{name:"v-f5799bd0",path:"/en/1%20Quick%20Start/1.9%20Development%20under%20IDEA.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-f5799bd0").then(t)}},{path:"/en/1 Quick Start/1.9 Development under IDEA.html",redirect:"/en/1%20Quick%20Start/1.9%20Development%20under%20IDEA.html"},{path:"/en/1 Quick Start/1.9 Development under IDEA.html",redirect:"/en/1%20Quick%20Start/1.9%20Development%20under%20IDEA.html"},{name:"v-71de89a7",path:"/en/10%20Validator/10.1%20Overview.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-71de89a7").then(t)}},{path:"/en/10 Validator/10.1 Overview.html",redirect:"/en/10%20Validator/10.1%20Overview.html"},{path:"/en/10 Validator/10.1 Overview.html",redirect:"/en/10%20Validator/10.1%20Overview.html"},{name:"v-4cbd53d9",path:"/en/10%20Validator/10.2%20Validator.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-4cbd53d9").then(t)}},{path:"/en/10 Validator/10.2 Validator.html",redirect:"/en/10%20Validator/10.2%20Validator.html"},{path:"/en/10 Validator/10.2 Validator.html",redirect:"/en/10%20Validator/10.2%20Validator.html"},{name:"v-1879c6ae",path:"/en/10%20Validator/10.3%20Validator%20configuration.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-1879c6ae").then(t)}},{path:"/en/10 Validator/10.3 Validator configuration.html",redirect:"/en/10%20Validator/10.3%20Validator%20configuration.html"},{path:"/en/10 Validator/10.3 Validator configuration.html",redirect:"/en/10%20Validator/10.3%20Validator%20configuration.html"},{name:"v-59df37df",path:"/en/11%20Internationalization/11.1%20Overview.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-59df37df").then(t)}},{path:"/en/11 Internationalization/11.1 Overview.html",redirect:"/en/11%20Internationalization/11.1%20Overview.html"},{path:"/en/11 Internationalization/11.1 Overview.html",redirect:"/en/11%20Internationalization/11.1%20Overview.html"},{name:"v-79559791",path:"/en/11%20Internationalization/11.2%20I18n%20&%20Res.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-79559791").then(t)}},{path:"/en/11 Internationalization/11.2 I18n & Res.html",redirect:"/en/11%20Internationalization/11.2%20I18n%20&%20Res.html"},{path:"/en/11 Internationalization/11.2 I18n & Res.html",redirect:"/en/11%20Internationalization/11.2%20I18n%20&%20Res.html"},{name:"v-3269c38d",path:"/en/11%20Internationalization/11.3%20I18nInterceptor.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-3269c38d").then(t)}},{path:"/en/11 Internationalization/11.3 I18nInterceptor.html",redirect:"/en/11%20Internationalization/11.3%20I18nInterceptor.html"},{path:"/en/11 Internationalization/11.3 I18nInterceptor.html",redirect:"/en/11%20Internationalization/11.3%20I18nInterceptor.html"},{name:"v-692f6704",path:"/en/12%20Json%20conversion/12.1%20Overview.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-692f6704").then(t)}},{path:"/en/12 Json conversion/12.1 Overview.html",redirect:"/en/12%20Json%20conversion/12.1%20Overview.html"},{path:"/en/12 Json conversion/12.1 Overview.html",redirect:"/en/12%20Json%20conversion/12.1%20Overview.html"},{name:"v-19c0b0c7",path:"/en/12%20Json%20conversion/12.2%20Json%20configuration.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-19c0b0c7").then(t)}},{path:"/en/12 Json conversion/12.2 Json configuration.html",redirect:"/en/12%20Json%20conversion/12.2%20Json%20configuration.html"},{path:"/en/12 Json conversion/12.2 Json configuration.html",redirect:"/en/12%20Json%20conversion/12.2%20Json%20configuration.html"},{name:"v-ed335bf2",path:"/en/12%20Json%20conversion/12.3%20Four%20implementations%20of%20Json.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-ed335bf2").then(t)}},{path:"/en/12 Json conversion/12.3 Four implementations of Json.html",redirect:"/en/12%20Json%20conversion/12.3%20Four%20implementations%20of%20Json.html"},{path:"/en/12 Json conversion/12.3 Four implementations of Json.html",redirect:"/en/12%20Json%20conversion/12.3%20Four%20implementations%20of%20Json.html"},{name:"v-7be768f6",path:"/en/12%20Json%20conversion/12.4%20Json%20conversion%20usage.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-7be768f6").then(t)}},{path:"/en/12 Json conversion/12.4 Json conversion usage.html",redirect:"/en/12%20Json%20conversion/12.4%20Json%20conversion%20usage.html"},{path:"/en/12 Json conversion/12.4 Json conversion usage.html",redirect:"/en/12%20Json%20conversion/12.4%20Json%20conversion%20usage.html"},{name:"v-2b288f64",path:"/en/13%20JFinal%20architecture%20and%20extensions/13.1%20Overview.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-2b288f64").then(t)}},{path:"/en/13 JFinal architecture and extensions/13.1 Overview.html",redirect:"/en/13%20JFinal%20architecture%20and%20extensions/13.1%20Overview.html"},{path:"/en/13 JFinal architecture and extensions/13.1 Overview.html",redirect:"/en/13%20JFinal%20architecture%20and%20extensions/13.1%20Overview.html"},{name:"v-45973972",path:"/en/13%20JFinal%20architecture%20and%20extensions/13.2%20Architecture.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-45973972").then(t)}},{path:"/en/13 JFinal architecture and extensions/13.2 Architecture.html",redirect:"/en/13%20JFinal%20architecture%20and%20extensions/13.2%20Architecture.html"},{path:"/en/13 JFinal architecture and extensions/13.2 Architecture.html",redirect:"/en/13%20JFinal%20architecture%20and%20extensions/13.2%20Architecture.html"},{name:"v-63841533",path:"/en/14%20Upgrade%20JFinal/14.1%20Rapid%20upgrade.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-63841533").then(t)}},{path:"/en/14 Upgrade JFinal/14.1 Rapid upgrade.html",redirect:"/en/14%20Upgrade%20JFinal/14.1%20Rapid%20upgrade.html"},{path:"/en/14 Upgrade JFinal/14.1 Rapid upgrade.html",redirect:"/en/14%20Upgrade%20JFinal/14.1%20Rapid%20upgrade.html"},{name:"v-5fcbb630",path:"/en/14%20Upgrade%20JFinal/14.2%20Ret.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-5fcbb630").then(t)}},{path:"/en/14 Upgrade JFinal/14.2 Ret.html",redirect:"/en/14%20Upgrade%20JFinal/14.2%20Ret.html"},{path:"/en/14 Upgrade JFinal/14.2 Ret.html",redirect:"/en/14%20Upgrade%20JFinal/14.2%20Ret.html"},{name:"v-227bbac2",path:"/en/14%20Upgrade%20JFinal/14.3%20configEngine.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-227bbac2").then(t)}},{path:"/en/14 Upgrade JFinal/14.3 configEngine.html",redirect:"/en/14%20Upgrade%20JFinal/14.3%20configEngine.html"},{path:"/en/14 Upgrade JFinal/14.3 configEngine.html",redirect:"/en/14%20Upgrade%20JFinal/14.3%20configEngine.html"},{name:"v-d21c7354",path:"/en/14%20Upgrade%20JFinal/14.4%20baseViewPath.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-d21c7354").then(t)}},{path:"/en/14 Upgrade JFinal/14.4 baseViewPath.html",redirect:"/en/14%20Upgrade%20JFinal/14.4%20baseViewPath.html"},{path:"/en/14 Upgrade JFinal/14.4 baseViewPath.html",redirect:"/en/14%20Upgrade%20JFinal/14.4%20baseViewPath.html"},{name:"v-51802670",path:"/en/14%20Upgrade%20JFinal/14.5%20RenderFactory.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-51802670").then(t)}},{path:"/en/14 Upgrade JFinal/14.5 RenderFactory.html",redirect:"/en/14%20Upgrade%20JFinal/14.5%20RenderFactory.html"},{path:"/en/14 Upgrade JFinal/14.5 RenderFactory.html",redirect:"/en/14%20Upgrade%20JFinal/14.5%20RenderFactory.html"},{name:"v-389654ca",path:"/en/14%20Upgrade%20JFinal/14.6%20Others.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-389654ca").then(t)}},{path:"/en/14 Upgrade JFinal/14.6 Others.html",redirect:"/en/14%20Upgrade%20JFinal/14.6%20Others.html"},{path:"/en/14 Upgrade JFinal/14.6 Others.html",redirect:"/en/14%20Upgrade%20JFinal/14.6%20Others.html"},{name:"v-5b606711",path:"/en/2%20JFinalConfig/2.1%20Overview.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-5b606711").then(t)}},{path:"/en/2 JFinalConfig/2.1 Overview.html",redirect:"/en/2%20JFinalConfig/2.1%20Overview.html"},{path:"/en/2 JFinalConfig/2.1 Overview.html",redirect:"/en/2%20JFinalConfig/2.1%20Overview.html"},{name:"v-4d79010e",path:"/en/2%20JFinalConfig/2.2%20configConstant.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-4d79010e").then(t)}},{path:"/en/2 JFinalConfig/2.2 configConstant.html",redirect:"/en/2%20JFinalConfig/2.2%20configConstant.html"},{path:"/en/2 JFinalConfig/2.2 configConstant.html",redirect:"/en/2%20JFinalConfig/2.2%20configConstant.html"},{name:"v-988f09b2",path:"/en/2%20JFinalConfig/2.3%20configRoute.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-988f09b2").then(t)}},{path:"/en/2 JFinalConfig/2.3 configRoute.html",redirect:"/en/2%20JFinalConfig/2.3%20configRoute.html"},{path:"/en/2 JFinalConfig/2.3 configRoute.html",redirect:"/en/2%20JFinalConfig/2.3%20configRoute.html"},{name:"v-2a13c901",path:"/en/2%20JFinalConfig/2.4%20configEngine.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-2a13c901").then(t)}},{path:"/en/2 JFinalConfig/2.4 configEngine.html",redirect:"/en/2%20JFinalConfig/2.4%20configEngine.html"},{path:"/en/2 JFinalConfig/2.4 configEngine.html",redirect:"/en/2%20JFinalConfig/2.4%20configEngine.html"},{name:"v-4fc7c7a1",path:"/en/2%20JFinalConfig/2.5%20configPlugin.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-4fc7c7a1").then(t)}},{path:"/en/2 JFinalConfig/2.5 configPlugin.html",redirect:"/en/2%20JFinalConfig/2.5%20configPlugin.html"},{path:"/en/2 JFinalConfig/2.5 configPlugin.html",redirect:"/en/2%20JFinalConfig/2.5%20configPlugin.html"},{name:"v-45ec0b87",path:"/en/2%20JFinalConfig/2.6%20configInterceptor.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-45ec0b87").then(t)}},{path:"/en/2 JFinalConfig/2.6 configInterceptor.html",redirect:"/en/2%20JFinalConfig/2.6%20configInterceptor.html"},{path:"/en/2 JFinalConfig/2.6 configInterceptor.html",redirect:"/en/2%20JFinalConfig/2.6%20configInterceptor.html"},{name:"v-1b8306f2",path:"/en/2%20JFinalConfig/2.7%20configHandler.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-1b8306f2").then(t)}},{path:"/en/2 JFinalConfig/2.7 configHandler.html",redirect:"/en/2%20JFinalConfig/2.7%20configHandler.html"},{path:"/en/2 JFinalConfig/2.7 configHandler.html",redirect:"/en/2%20JFinalConfig/2.7%20configHandler.html"},{name:"v-609bd3cd",path:"/en/2%20JFinalConfig/2.8%20onStart%20and%20onStop%20callback%20configuration.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-609bd3cd").then(t)}},{path:"/en/2 JFinalConfig/2.8 onStart and onStop callback configuration.html",redirect:"/en/2%20JFinalConfig/2.8%20onStart%20and%20onStop%20callback%20configuration.html"},{path:"/en/2 JFinalConfig/2.8 onStart and onStop callback configuration.html",redirect:"/en/2%20JFinalConfig/2.8%20onStart%20and%20onStop%20callback%20configuration.html"},{name:"v-30c04aed",path:"/en/2%20JFinalConfig/2.9%20PropKit%20configuration%20reading.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-30c04aed").then(t)}},{path:"/en/2 JFinalConfig/2.9 PropKit configuration reading.html",redirect:"/en/2%20JFinalConfig/2.9%20PropKit%20configuration%20reading.html"},{path:"/en/2 JFinalConfig/2.9 PropKit configuration reading.html",redirect:"/en/2%20JFinalConfig/2.9%20PropKit%20configuration%20reading.html"},{name:"v-0bef0f2d",path:"/en/3%20Controller/3.1%20Overview.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-0bef0f2d").then(t)}},{path:"/en/3 Controller/3.1 Overview.html",redirect:"/en/3%20Controller/3.1%20Overview.html"},{path:"/en/3 Controller/3.1 Overview.html",redirect:"/en/3%20Controller/3.1%20Overview.html"},{name:"v-2bad717e",path:"/en/3%20Controller/3.10%20session%20operations.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-2bad717e").then(t)}},{path:"/en/3 Controller/3.10 session operations.html",redirect:"/en/3%20Controller/3.10%20session%20operations.html"},{path:"/en/3 Controller/3.10 session operations.html",redirect:"/en/3%20Controller/3.10%20session%20operations.html"},{name:"v-26e24795",path:"/en/3%20Controller/3.11%20getFile%20file%20upload.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-26e24795").then(t)}},{path:"/en/3 Controller/3.11 getFile file upload.html",redirect:"/en/3%20Controller/3.11%20getFile%20file%20upload.html"},{path:"/en/3 Controller/3.11 getFile file upload.html",redirect:"/en/3%20Controller/3.11%20getFile%20file%20upload.html"},{name:"v-1ed93ef9",path:"/en/3%20Controller/3.12%20keep%20series%20methods.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-1ed93ef9").then(t)}},{path:"/en/3 Controller/3.12 keep series methods.html",redirect:"/en/3%20Controller/3.12%20keep%20series%20methods.html"},{path:"/en/3 Controller/3.12 keep series methods.html",redirect:"/en/3%20Controller/3.12%20keep%20series%20methods.html"},{name:"v-3f5f6775",path:"/en/3%20Controller/3.2%20Action.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-3f5f6775").then(t)}},{path:"/en/3 Controller/3.2 Action.html",redirect:"/en/3%20Controller/3.2%20Action.html"},{path:"/en/3 Controller/3.2 Action.html",redirect:"/en/3%20Controller/3.2%20Action.html"},{name:"v-4cfa6386",path:"/en/3%20Controller/3.3%20Action%20parameter%20injection.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-4cfa6386").then(t)}},{path:"/en/3 Controller/3.3 Action parameter injection.html",redirect:"/en/3%20Controller/3.3%20Action%20parameter%20injection.html"},{path:"/en/3 Controller/3.3 Action parameter injection.html",redirect:"/en/3%20Controller/3.3%20Action%20parameter%20injection.html"},{name:"v-71ecdd5e",path:"/en/3%20Controller/3.8%20renderFile%20file%20download.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-71ecdd5e").then(t)}},{path:"/en/3 Controller/3.8 renderFile file download.html",redirect:"/en/3%20Controller/3.8%20renderFile%20file%20download.html"},{path:"/en/3 Controller/3.8 renderFile file download.html",redirect:"/en/3%20Controller/3.8%20renderFile%20file%20download.html"},{name:"v-3fa8e144",path:"/en/3%20Controller/3.7%20render%20method.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-3fa8e144").then(t)}},{path:"/en/3 Controller/3.7 render method.html",redirect:"/en/3%20Controller/3.7%20render%20method.html"},{path:"/en/3 Controller/3.7 render method.html",redirect:"/en/3%20Controller/3.7%20render%20method.html"},{name:"v-38993dc4",path:"/en/3%20Controller/3.9%20renderQrCode%20QR%20code%20generation.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-38993dc4").then(t)}},{path:"/en/3 Controller/3.9 renderQrCode QR code generation.html",redirect:"/en/3%20Controller/3.9%20renderQrCode%20QR%20code%20generation.html"},{path:"/en/3 Controller/3.9 renderQrCode QR code generation.html",redirect:"/en/3%20Controller/3.9%20renderQrCode%20QR%20code%20generation.html"},{name:"v-353a9101",path:"/en/4%20AOP/4.1%20Overview.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-353a9101").then(t)}},{path:"/en/4 AOP/4.1 Overview.html",redirect:"/en/4%20AOP/4.1%20Overview.html"},{path:"/en/4 AOP/4.1 Overview.html",redirect:"/en/4%20AOP/4.1%20Overview.html"},{name:"v-6ff5bf1d",path:"/en/4%20AOP/4.2%20Interceptor.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-6ff5bf1d").then(t)}},{path:"/en/4 AOP/4.2 Interceptor.html",redirect:"/en/4%20AOP/4.2%20Interceptor.html"},{path:"/en/4 AOP/4.2 Interceptor.html",redirect:"/en/4%20AOP/4.2%20Interceptor.html"},{name:"v-19c1bfe0",path:"/en/3%20Controller/3.6%20set%20&%20setAttr%20methods.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-19c1bfe0").then(t)}},{path:"/en/3 Controller/3.6 set & setAttr methods.html",redirect:"/en/3%20Controller/3.6%20set%20&%20setAttr%20methods.html"},{path:"/en/3 Controller/3.6 set & setAttr methods.html",redirect:"/en/3%20Controller/3.6%20set%20&%20setAttr%20methods.html"},{name:"v-a00b136e",path:"/en/4%20AOP/4.4%20Clear.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-a00b136e").then(t)}},{path:"/en/4 AOP/4.4 Clear.html",redirect:"/en/4%20AOP/4.4%20Clear.html"},{path:"/en/4 AOP/4.4 Clear.html",redirect:"/en/4%20AOP/4.4%20Clear.html"},{name:"v-03e1fb7e",path:"/en/4%20AOP/4.3%20Before.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-03e1fb7e").then(t)}},{path:"/en/4 AOP/4.3 Before.html",redirect:"/en/4%20AOP/4.3%20Before.html"},{path:"/en/4 AOP/4.3 Before.html",redirect:"/en/4%20AOP/4.3%20Before.html"},{name:"v-6505369f",path:"/en/4%20AOP/4.5%20Inject%20dependency%20injection.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-6505369f").then(t)}},{path:"/en/4 AOP/4.5 Inject dependency injection.html",redirect:"/en/4%20AOP/4.5%20Inject%20dependency%20injection.html"},{path:"/en/4 AOP/4.5 Inject dependency injection.html",redirect:"/en/4%20AOP/4.5%20Inject%20dependency%20injection.html"},{name:"v-d9d991c4",path:"/en/4%20AOP/4.6%20Aop%20tool.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-d9d991c4").then(t)}},{path:"/en/4 AOP/4.6 Aop tool.html",redirect:"/en/4%20AOP/4.6%20Aop%20tool.html"},{path:"/en/4 AOP/4.6 Aop tool.html",redirect:"/en/4%20AOP/4.6%20Aop%20tool.html"},{name:"v-71b5fc87",path:"/en/4%20AOP/4.7%20Routes%20level%20interceptor.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-71b5fc87").then(t)}},{path:"/en/4 AOP/4.7 Routes level interceptor.html",redirect:"/en/4%20AOP/4.7%20Routes%20level%20interceptor.html"},{path:"/en/4 AOP/4.7 Routes level interceptor.html",redirect:"/en/4%20AOP/4.7%20Routes%20level%20interceptor.html"},{name:"v-e08424aa",path:"/en/4%20AOP/4.8%20Proxy%20dynamic%20proxy.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-e08424aa").then(t)}},{path:"/en/4 AOP/4.8 Proxy dynamic proxy.html",redirect:"/en/4%20AOP/4.8%20Proxy%20dynamic%20proxy.html"},{path:"/en/4 AOP/4.8 Proxy dynamic proxy.html",redirect:"/en/4%20AOP/4.8%20Proxy%20dynamic%20proxy.html"},{name:"v-4c0f155b",path:"/en/5%20ActiveRecord/5.10%20Table%20association%20operations.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-4c0f155b").then(t)}},{path:"/en/5 ActiveRecord/5.10 Table association operations.html",redirect:"/en/5%20ActiveRecord/5.10%20Table%20association%20operations.html"},{path:"/en/5 ActiveRecord/5.10 Table association operations.html",redirect:"/en/5%20ActiveRecord/5.10%20Table%20association%20operations.html"},{name:"v-102f273a",path:"/en/5%20ActiveRecord/5.1%20Overview.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-102f273a").then(t)}},{path:"/en/5 ActiveRecord/5.1 Overview.html",redirect:"/en/5%20ActiveRecord/5.1%20Overview.html"},{path:"/en/5 ActiveRecord/5.1 Overview.html",redirect:"/en/5%20ActiveRecord/5.1%20Overview.html"},{name:"v-6df51cb8",path:"/en/5%20ActiveRecord/5.12%20Oracle%20support.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-6df51cb8").then(t)}},{path:"/en/5 ActiveRecord/5.12 Oracle support.html",redirect:"/en/5%20ActiveRecord/5.12%20Oracle%20support.html"},{path:"/en/5 ActiveRecord/5.12 Oracle support.html",redirect:"/en/5%20ActiveRecord/5.12%20Oracle%20support.html"},{name:"v-fa243062",path:"/en/5%20ActiveRecord/5.11%20Composite%20primary%20key.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-fa243062").then(t)}},{path:"/en/5 ActiveRecord/5.11 Composite primary key.html",redirect:"/en/5%20ActiveRecord/5.11%20Composite%20primary%20key.html"},{path:"/en/5 ActiveRecord/5.11 Composite primary key.html",redirect:"/en/5%20ActiveRecord/5.11%20Composite%20primary%20key.html"},{name:"v-11f316bb",path:"/en/5%20ActiveRecord/5.13%20Enjoy%20SQL%20template.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-11f316bb").then(t)}},{path:"/en/5 ActiveRecord/5.13 Enjoy SQL template.html",redirect:"/en/5%20ActiveRecord/5.13%20Enjoy%20SQL%20template.html"},{path:"/en/5 ActiveRecord/5.13 Enjoy SQL template.html",redirect:"/en/5%20ActiveRecord/5.13%20Enjoy%20SQL%20template.html"},{name:"v-2df25b1b",path:"/en/5%20ActiveRecord/5.14%20Multi-data%20source%20support.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-2df25b1b").then(t)}},{path:"/en/5 ActiveRecord/5.14 Multi-data source support.html",redirect:"/en/5%20ActiveRecord/5.14%20Multi-data%20source%20support.html"},{path:"/en/5 ActiveRecord/5.14 Multi-data source support.html",redirect:"/en/5%20ActiveRecord/5.14%20Multi-data%20source%20support.html"},{name:"v-5af4ed21",path:"/en/5%20ActiveRecord/5.15%20Use%20ActiveRecord%20independently.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-5af4ed21").then(t)}},{path:"/en/5 ActiveRecord/5.15 Use ActiveRecord independently.html",redirect:"/en/5%20ActiveRecord/5.15%20Use%20ActiveRecord%20independently.html"},{path:"/en/5 ActiveRecord/5.15 Use ActiveRecord independently.html",redirect:"/en/5%20ActiveRecord/5.15%20Use%20ActiveRecord%20independently.html"},{name:"v-dba12182",path:"/en/5%20ActiveRecord/5.16%20Call%20stored%20procedure.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-dba12182").then(t)}},{path:"/en/5 ActiveRecord/5.16 Call stored procedure.html",redirect:"/en/5%20ActiveRecord/5.16%20Call%20stored%20procedure.html"},{path:"/en/5 ActiveRecord/5.16 Call stored procedure.html",redirect:"/en/5%20ActiveRecord/5.16%20Call%20stored%20procedure.html"},{name:"v-7ed89ec7",path:"/en/5%20ActiveRecord/5.3%20Model.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-7ed89ec7").then(t)}},{path:"/en/5 ActiveRecord/5.3 Model.html",redirect:"/en/5%20ActiveRecord/5.3%20Model.html"},{path:"/en/5 ActiveRecord/5.3 Model.html",redirect:"/en/5%20ActiveRecord/5.3%20Model.html"},{name:"v-082e4a43",path:"/en/5%20ActiveRecord/5.2%20ActiveRecordPlugin.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-082e4a43").then(t)}},{path:"/en/5 ActiveRecord/5.2 ActiveRecordPlugin.html",redirect:"/en/5%20ActiveRecord/5.2%20ActiveRecordPlugin.html"},{path:"/en/5 ActiveRecord/5.2 ActiveRecordPlugin.html",redirect:"/en/5%20ActiveRecord/5.2%20ActiveRecordPlugin.html"},{name:"v-d7c0a0ba",path:"/en/5%20ActiveRecord/5.4%20Generator%20&%20JavaBean.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-d7c0a0ba").then(t)}},{path:"/en/5 ActiveRecord/5.4 Generator & JavaBean.html",redirect:"/en/5%20ActiveRecord/5.4%20Generator%20&%20JavaBean.html"},{path:"/en/5 ActiveRecord/5.4 Generator & JavaBean.html",redirect:"/en/5%20ActiveRecord/5.4%20Generator%20&%20JavaBean.html"},{name:"v-a2e2ad78",path:"/en/5%20ActiveRecord/5.5%20Original%20Db%20Record%20mode.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-a2e2ad78").then(t)}},{path:"/en/5 ActiveRecord/5.5 Original Db Record mode.html",redirect:"/en/5%20ActiveRecord/5.5%20Original%20Db%20Record%20mode.html"},{path:"/en/5 ActiveRecord/5.5 Original Db Record mode.html",redirect:"/en/5%20ActiveRecord/5.5%20Original%20Db%20Record%20mode.html"},{name:"v-b94917f8",path:"/en/5%20ActiveRecord/5.6%20paginate%20pagination.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-b94917f8").then(t)}},{path:"/en/5 ActiveRecord/5.6 paginate pagination.html",redirect:"/en/5%20ActiveRecord/5.6%20paginate%20pagination.html"},{path:"/en/5 ActiveRecord/5.6 paginate pagination.html",redirect:"/en/5%20ActiveRecord/5.6%20paginate%20pagination.html"},{name:"v-6a120dbe",path:"/en/5%20ActiveRecord/5.7%20Database%20transaction%20handling.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-6a120dbe").then(t)}},{path:"/en/5 ActiveRecord/5.7 Database transaction handling.html",redirect:"/en/5%20ActiveRecord/5.7%20Database%20transaction%20handling.html"},{path:"/en/5 ActiveRecord/5.7 Database transaction handling.html",redirect:"/en/5%20ActiveRecord/5.7%20Database%20transaction%20handling.html"},{name:"v-ba25292c",path:"/en/5%20ActiveRecord/5.8%20Cache%20caching.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-ba25292c").then(t)}},{path:"/en/5 ActiveRecord/5.8 Cache caching.html",redirect:"/en/5%20ActiveRecord/5.8%20Cache%20caching.html"},{path:"/en/5 ActiveRecord/5.8 Cache caching.html",redirect:"/en/5%20ActiveRecord/5.8%20Cache%20caching.html"},{name:"v-7f7c3fec",path:"/en/5%20ActiveRecord/5.9%20Dialect%20multiple%20database%20support.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-7f7c3fec").then(t)}},{path:"/en/5 ActiveRecord/5.9 Dialect multiple database support.html",redirect:"/en/5%20ActiveRecord/5.9%20Dialect%20multiple%20database%20support.html"},{path:"/en/5 ActiveRecord/5.9 Dialect multiple database support.html",redirect:"/en/5%20ActiveRecord/5.9%20Dialect%20multiple%20database%20support.html"},{name:"v-6ffa6841",path:"/en/6%20Enjoy%20template%20engine/6.1%20Overview.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-6ffa6841").then(t)}},{path:"/en/6 Enjoy template engine/6.1 Overview.html",redirect:"/en/6%20Enjoy%20template%20engine/6.1%20Overview.html"},{path:"/en/6 Enjoy template engine/6.1 Overview.html",redirect:"/en/6%20Enjoy%20template%20engine/6.1%20Overview.html"},{name:"v-541c0407",path:"/en/6%20Enjoy%20template%20engine/6.10%20Spring%20boot%20integration.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-541c0407").then(t)}},{path:"/en/6 Enjoy template engine/6.10 Spring boot integration.html",redirect:"/en/6%20Enjoy%20template%20engine/6.10%20Spring%20boot%20integration.html"},{path:"/en/6 Enjoy template engine/6.10 Spring boot integration.html",redirect:"/en/6%20Enjoy%20template%20engine/6.10%20Spring%20boot%20integration.html"},{name:"v-f2c9e9e6",path:"/en/6%20Enjoy%20template%20engine/6.11%20Use%20Enjoy%20independently.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-f2c9e9e6").then(t)}},{path:"/en/6 Enjoy template engine/6.11 Use Enjoy independently.html",redirect:"/en/6%20Enjoy%20template%20engine/6.11%20Use%20Enjoy%20independently.html"},{path:"/en/6 Enjoy template engine/6.11 Use Enjoy independently.html",redirect:"/en/6%20Enjoy%20template%20engine/6.11%20Use%20Enjoy%20independently.html"},{name:"v-a8de22f8",path:"/en/6%20Enjoy%20template%20engine/6.2%20Engine%20configuration.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-a8de22f8").then(t)}},{path:"/en/6 Enjoy template engine/6.2 Engine configuration.html",redirect:"/en/6%20Enjoy%20template%20engine/6.2%20Engine%20configuration.html"},{path:"/en/6 Enjoy template engine/6.2 Engine configuration.html",redirect:"/en/6%20Enjoy%20template%20engine/6.2%20Engine%20configuration.html"},{name:"v-14710da1",path:"/en/6%20Enjoy%20template%20engine/6.3%20Expression.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-14710da1").then(t)}},{path:"/en/6 Enjoy template engine/6.3 Expression.html",redirect:"/en/6%20Enjoy%20template%20engine/6.3%20Expression.html"},{path:"/en/6 Enjoy template engine/6.3 Expression.html",redirect:"/en/6%20Enjoy%20template%20engine/6.3%20Expression.html"},{name:"v-8bf1188a",path:"/en/6%20Enjoy%20template%20engine/6.4%20Directive.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-8bf1188a").then(t)}},{path:"/en/6 Enjoy template engine/6.4 Directive.html",redirect:"/en/6%20Enjoy%20template%20engine/6.4%20Directive.html"},{path:"/en/6 Enjoy template engine/6.4 Directive.html",redirect:"/en/6%20Enjoy%20template%20engine/6.4%20Directive.html"},{name:"v-68ee4e99",path:"/en/6%20Enjoy%20template%20engine/6.5%20Comment.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-68ee4e99").then(t)}},{path:"/en/6 Enjoy template engine/6.5 Comment.html",redirect:"/en/6%20Enjoy%20template%20engine/6.5%20Comment.html"},{path:"/en/6 Enjoy template engine/6.5 Comment.html",redirect:"/en/6%20Enjoy%20template%20engine/6.5%20Comment.html"},{name:"v-b4a26204",path:"/en/6%20Enjoy%20template%20engine/6.6%20Raw%20output.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-b4a26204").then(t)}},{path:"/en/6 Enjoy template engine/6.6 Raw output.html",redirect:"/en/6%20Enjoy%20template%20engine/6.6%20Raw%20output.html"},{path:"/en/6 Enjoy template engine/6.6 Raw output.html",redirect:"/en/6%20Enjoy%20template%20engine/6.6%20Raw%20output.html"},{name:"v-fab81c06",path:"/en/6%20Enjoy%20template%20engine/6.7%20Shared%20Method%20extension.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-fab81c06").then(t)}},{path:"/en/6 Enjoy template engine/6.7 Shared Method extension.html",redirect:"/en/6%20Enjoy%20template%20engine/6.7%20Shared%20Method%20extension.html"},{path:"/en/6 Enjoy template engine/6.7 Shared Method extension.html",redirect:"/en/6%20Enjoy%20template%20engine/6.7%20Shared%20Method%20extension.html"},{name:"v-21317702",path:"/en/6%20Enjoy%20template%20engine/6.8%20Shared%20Object%20extension.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-21317702").then(t)}},{path:"/en/6 Enjoy template engine/6.8 Shared Object extension.html",redirect:"/en/6%20Enjoy%20template%20engine/6.8%20Shared%20Object%20extension.html"},{path:"/en/6 Enjoy template engine/6.8 Shared Object extension.html",redirect:"/en/6%20Enjoy%20template%20engine/6.8%20Shared%20Object%20extension.html"},{name:"v-2b3b2a01",path:"/en/7%20EhCachePlugin/7.1%20Overview.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-2b3b2a01").then(t)}},{path:"/en/7 EhCachePlugin/7.1 Overview.html",redirect:"/en/7%20EhCachePlugin/7.1%20Overview.html"},{path:"/en/7 EhCachePlugin/7.1 Overview.html",redirect:"/en/7%20EhCachePlugin/7.1%20Overview.html"},{name:"v-03be4557",path:"/en/7%20EhCachePlugin/7.2%20EhCachePlugin.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-03be4557").then(t)}},{path:"/en/7 EhCachePlugin/7.2 EhCachePlugin.html",redirect:"/en/7%20EhCachePlugin/7.2%20EhCachePlugin.html"},{path:"/en/7 EhCachePlugin/7.2 EhCachePlugin.html",redirect:"/en/7%20EhCachePlugin/7.2%20EhCachePlugin.html"},{name:"v-7eb5ffe1",path:"/en/6%20Enjoy%20template%20engine/6.9%20Extension%20Method%20extension.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-7eb5ffe1").then(t)}},{path:"/en/6 Enjoy template engine/6.9 Extension Method extension.html",redirect:"/en/6%20Enjoy%20template%20engine/6.9%20Extension%20Method%20extension.html"},{path:"/en/6 Enjoy template engine/6.9 Extension Method extension.html",redirect:"/en/6%20Enjoy%20template%20engine/6.9%20Extension%20Method%20extension.html"},{name:"v-9dd148fe",path:"/en/7%20EhCachePlugin/7.3%20CacheInterceptor.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-9dd148fe").then(t)}},{path:"/en/7 EhCachePlugin/7.3 CacheInterceptor.html",redirect:"/en/7%20EhCachePlugin/7.3%20CacheInterceptor.html"},{path:"/en/7 EhCachePlugin/7.3 CacheInterceptor.html",redirect:"/en/7%20EhCachePlugin/7.3%20CacheInterceptor.html"},{name:"v-46f8c37e",path:"/en/7%20EhCachePlugin/7.4%20EvictInterceptor.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-46f8c37e").then(t)}},{path:"/en/7 EhCachePlugin/7.4 EvictInterceptor.html",redirect:"/en/7%20EhCachePlugin/7.4%20EvictInterceptor.html"},{path:"/en/7 EhCachePlugin/7.4 EvictInterceptor.html",redirect:"/en/7%20EhCachePlugin/7.4%20EvictInterceptor.html"},{name:"v-077064e1",path:"/en/7%20EhCachePlugin/7.5%20CacheKit.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-077064e1").then(t)}},{path:"/en/7 EhCachePlugin/7.5 CacheKit.html",redirect:"/en/7%20EhCachePlugin/7.5%20CacheKit.html"},{path:"/en/7 EhCachePlugin/7.5 CacheKit.html",redirect:"/en/7%20EhCachePlugin/7.5%20CacheKit.html"},{name:"v-8ca374fe",path:"/en/7%20EhCachePlugin/7.6%20Introduction%20to%20ehcache.xml.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-8ca374fe").then(t)}},{path:"/en/7 EhCachePlugin/7.6 Introduction to ehcache.xml.html",redirect:"/en/7%20EhCachePlugin/7.6%20Introduction%20to%20ehcache.xml.html"},{path:"/en/7 EhCachePlugin/7.6 Introduction to ehcache.xml.html",redirect:"/en/7%20EhCachePlugin/7.6%20Introduction%20to%20ehcache.xml.html"},{name:"v-1d9930fe",path:"/en/8%20RedisPlugin/8.1%20Overview.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-1d9930fe").then(t)}},{path:"/en/8 RedisPlugin/8.1 Overview.html",redirect:"/en/8%20RedisPlugin/8.1%20Overview.html"},{path:"/en/8 RedisPlugin/8.1 Overview.html",redirect:"/en/8%20RedisPlugin/8.1%20Overview.html"},{name:"v-0b63cdca",path:"/en/8%20RedisPlugin/8.3%20Redis%20and%20Cache.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-0b63cdca").then(t)}},{path:"/en/8 RedisPlugin/8.3 Redis and Cache.html",redirect:"/en/8%20RedisPlugin/8.3%20Redis%20and%20Cache.html"},{path:"/en/8 RedisPlugin/8.3 Redis and Cache.html",redirect:"/en/8%20RedisPlugin/8.3%20Redis%20and%20Cache.html"},{name:"v-8e3ba93a",path:"/en/8%20RedisPlugin/8.2%20RedisPlugin.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-8e3ba93a").then(t)}},{path:"/en/8 RedisPlugin/8.2 RedisPlugin.html",redirect:"/en/8%20RedisPlugin/8.2%20RedisPlugin.html"},{path:"/en/8 RedisPlugin/8.2 RedisPlugin.html",redirect:"/en/8%20RedisPlugin/8.2%20RedisPlugin.html"},{name:"v-5d029d03",path:"/en/8%20RedisPlugin/8.4%20Use%20RedisPlugin%20in%20non-web%20environments.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-5d029d03").then(t)}},{path:"/en/8 RedisPlugin/8.4 Use RedisPlugin in non-web environments.html",redirect:"/en/8%20RedisPlugin/8.4%20Use%20RedisPlugin%20in%20non-web%20environments.html"},{path:"/en/8 RedisPlugin/8.4 Use RedisPlugin in non-web environments.html",redirect:"/en/8%20RedisPlugin/8.4%20Use%20RedisPlugin%20in%20non-web%20environments.html"},{name:"v-7c4ba2a3",path:"/en/9%20Cron4jPlugin/9.1%20Overview.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-7c4ba2a3").then(t)}},{path:"/en/9 Cron4jPlugin/9.1 Overview.html",redirect:"/en/9%20Cron4jPlugin/9.1%20Overview.html"},{path:"/en/9 Cron4jPlugin/9.1 Overview.html",redirect:"/en/9%20Cron4jPlugin/9.1%20Overview.html"},{name:"v-0d393669",path:"/en/9%20Cron4jPlugin/9.2%20Cron4jPlugin.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-0d393669").then(t)}},{path:"/en/9 Cron4jPlugin/9.2 Cron4jPlugin.html",redirect:"/en/9%20Cron4jPlugin/9.2%20Cron4jPlugin.html"},{path:"/en/9 Cron4jPlugin/9.2 Cron4jPlugin.html",redirect:"/en/9%20Cron4jPlugin/9.2%20Cron4jPlugin.html"},{name:"v-7aa09a24",path:"/en/9%20Cron4jPlugin/9.3%20Use%20external%20configuration%20file.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-7aa09a24").then(t)}},{path:"/en/9 Cron4jPlugin/9.3 Use external configuration file.html",redirect:"/en/9%20Cron4jPlugin/9.3%20Use%20external%20configuration%20file.html"},{path:"/en/9 Cron4jPlugin/9.3 Use external configuration file.html",redirect:"/en/9%20Cron4jPlugin/9.3%20Use%20external%20configuration%20file.html"},{name:"v-674f4898",path:"/en/9%20Cron4jPlugin/9.4%20Advanced%20usage.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-674f4898").then(t)}},{path:"/en/9 Cron4jPlugin/9.4 Advanced usage.html",redirect:"/en/9%20Cron4jPlugin/9.4%20Advanced%20usage.html"},{path:"/en/9 Cron4jPlugin/9.4 Advanced usage.html",redirect:"/en/9%20Cron4jPlugin/9.4%20Advanced%20usage.html"},{name:"v-07eea85b",path:"/zh/1%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/1.1%20Maven%20%E5%9F%BA%E7%A1%80.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-07eea85b").then(t)}},{path:"/zh/1 快速上手/1.1 Maven 基础.html",redirect:"/zh/1%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/1.1%20Maven%20%E5%9F%BA%E7%A1%80.html"},{path:"/zh/1 快速上手/1.1 Maven 基础.html",redirect:"/zh/1%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/1.1%20Maven%20%E5%9F%BA%E7%A1%80.html"},{name:"v-2f735cb6",path:"/zh/1%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/1.10%20JBolt%20%E6%8F%92%E4%BB%B6%E4%B8%8B%E5%BC%80%E5%8F%91.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-2f735cb6").then(t)}},{path:"/zh/1 快速上手/1.10 JBolt 插件下开发.html",redirect:"/zh/1%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/1.10%20JBolt%20%E6%8F%92%E4%BB%B6%E4%B8%8B%E5%BC%80%E5%8F%91.html"},{path:"/zh/1 快速上手/1.10 JBolt 插件下开发.html",redirect:"/zh/1%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/1.10%20JBolt%20%E6%8F%92%E4%BB%B6%E4%B8%8B%E5%BC%80%E5%8F%91.html"},{name:"v-38525cd6",path:"/zh/1%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/1.11%20%E7%89%B9%E5%88%AB%E5%A3%B0%E6%98%8E.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-38525cd6").then(t)}},{path:"/zh/1 快速上手/1.11 特别声明.html",redirect:"/zh/1%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/1.11%20%E7%89%B9%E5%88%AB%E5%A3%B0%E6%98%8E.html"},{path:"/zh/1 快速上手/1.11 特别声明.html",redirect:"/zh/1%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/1.11%20%E7%89%B9%E5%88%AB%E5%A3%B0%E6%98%8E.html"},{name:"v-a64181e8",path:"/zh/1%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/1.2%20jfinal-undertow%20%E4%B8%8B%E5%BC%80%E5%8F%91.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-a64181e8").then(t)}},{path:"/zh/1 快速上手/1.2 jfinal-undertow 下开发.html",redirect:"/zh/1%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/1.2%20jfinal-undertow%20%E4%B8%8B%E5%BC%80%E5%8F%91.html"},{path:"/zh/1 快速上手/1.2 jfinal-undertow 下开发.html",redirect:"/zh/1%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/1.2%20jfinal-undertow%20%E4%B8%8B%E5%BC%80%E5%8F%91.html"},{name:"v-1a789f28",path:"/zh/1%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/1.3%20jfinal-undertow%20%E4%B8%8B%E9%83%A8%E7%BD%B2.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-1a789f28").then(t)}},{path:"/zh/1 快速上手/1.3 jfinal-undertow 下部署.html",redirect:"/zh/1%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/1.3%20jfinal-undertow%20%E4%B8%8B%E9%83%A8%E7%BD%B2.html"},{path:"/zh/1 快速上手/1.3 jfinal-undertow 下部署.html",redirect:"/zh/1%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/1.3%20jfinal-undertow%20%E4%B8%8B%E9%83%A8%E7%BD%B2.html"},{name:"v-1c240292",path:"/zh/1%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/1.4%20jfinal-undertow%20%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-1c240292").then(t)}},{path:"/zh/1 快速上手/1.4 jfinal-undertow 高级用法.html",redirect:"/zh/1%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/1.4%20jfinal-undertow%20%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95.html"},{path:"/zh/1 快速上手/1.4 jfinal-undertow 高级用法.html",redirect:"/zh/1%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/1.4%20jfinal-undertow%20%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95.html"},{name:"v-a5a8ee58",path:"/zh/1%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/1.5%20jfinal-undertow%20%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-a5a8ee58").then(t)}},{path:"/zh/1 快速上手/1.5 jfinal-undertow 常见问题.html",redirect:"/zh/1%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/1.5%20jfinal-undertow%20%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98.html"},{path:"/zh/1 快速上手/1.5 jfinal-undertow 常见问题.html",redirect:"/zh/1%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/1.5%20jfinal-undertow%20%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98.html"},{name:"v-b601288a",path:"/zh/1%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/1.0%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-b601288a").then(t)}},{path:"/zh/1 快速上手/1.0 快速上手.html",redirect:"/zh/1%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/1.0%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B.html"},{path:"/zh/1 快速上手/1.0 快速上手.html",redirect:"/zh/1%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/1.0%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B.html"},{name:"v-68e0b3c0",path:"/zh/1%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/1.7%20tomcat%20%E4%B8%8B%E9%83%A8%E7%BD%B2.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-68e0b3c0").then(t)}},{path:"/zh/1 快速上手/1.7 tomcat 下部署.html",redirect:"/zh/1%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/1.7%20tomcat%20%E4%B8%8B%E9%83%A8%E7%BD%B2.html"},{path:"/zh/1 快速上手/1.7 tomcat 下部署.html",redirect:"/zh/1%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/1.7%20tomcat%20%E4%B8%8B%E9%83%A8%E7%BD%B2.html"},{name:"v-8bfe3d50",path:"/zh/1%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/1.6%20jetty-server%20%E4%B8%8B%E5%BC%80%E5%8F%91.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-8bfe3d50").then(t)}},{path:"/zh/1 快速上手/1.6 jetty-server 下开发.html",redirect:"/zh/1%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/1.6%20jetty-server%20%E4%B8%8B%E5%BC%80%E5%8F%91.html"},{path:"/zh/1 快速上手/1.6 jetty-server 下开发.html",redirect:"/zh/1%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/1.6%20jetty-server%20%E4%B8%8B%E5%BC%80%E5%8F%91.html"},{name:"v-c24a1ce0",path:"/zh/1%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/1.8%20%E9%9D%9E%20maven%20%E6%96%B9%E5%BC%8F%E5%BC%80%E5%8F%91.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-c24a1ce0").then(t)}},{path:"/zh/1 快速上手/1.8 非 maven 方式开发.html",redirect:"/zh/1%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/1.8%20%E9%9D%9E%20maven%20%E6%96%B9%E5%BC%8F%E5%BC%80%E5%8F%91.html"},{path:"/zh/1 快速上手/1.8 非 maven 方式开发.html",redirect:"/zh/1%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/1.8%20%E9%9D%9E%20maven%20%E6%96%B9%E5%BC%8F%E5%BC%80%E5%8F%91.html"},{name:"v-67299f6a",path:"/en/3%20Controller/3.5%20getBean%20&%20getModel%20series.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-67299f6a").then(t)}},{path:"/en/3 Controller/3.5 getBean & getModel series.html",redirect:"/en/3%20Controller/3.5%20getBean%20&%20getModel%20series.html"},{path:"/en/3 Controller/3.5 getBean & getModel series.html",redirect:"/en/3%20Controller/3.5%20getBean%20&%20getModel%20series.html"},{name:"v-6fc8b362",path:"/zh/10%20Validator/10.2%20Validator.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-6fc8b362").then(t)}},{path:"/zh/10 Validator/10.2 Validator.html",redirect:"/zh/10%20Validator/10.2%20Validator.html"},{path:"/zh/10 Validator/10.2 Validator.html",redirect:"/zh/10%20Validator/10.2%20Validator.html"},{name:"v-e68f5ea4",path:"/zh/10%20Validator/10.1%20%E6%A6%82%E8%BF%B0.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-e68f5ea4").then(t)}},{path:"/zh/10 Validator/10.1 概述.html",redirect:"/zh/10%20Validator/10.1%20%E6%A6%82%E8%BF%B0.html"},{path:"/zh/10 Validator/10.1 概述.html",redirect:"/zh/10%20Validator/10.1%20%E6%A6%82%E8%BF%B0.html"},{name:"v-3491301b",path:"/zh/10%20Validator/10.3%20Validator%E9%85%8D%E7%BD%AE.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-3491301b").then(t)}},{path:"/zh/10 Validator/10.3 Validator配置.html",redirect:"/zh/10%20Validator/10.3%20Validator%E9%85%8D%E7%BD%AE.html"},{path:"/zh/10 Validator/10.3 Validator配置.html",redirect:"/zh/10%20Validator/10.3%20Validator%E9%85%8D%E7%BD%AE.html"},{name:"v-376ea6dd",path:"/zh/11%20%E5%9B%BD%E9%99%85%E5%8C%96/11.1%20%E6%A6%82%E8%BF%B0.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-376ea6dd").then(t)}},{path:"/zh/11 国际化/11.1 概述.html",redirect:"/zh/11%20%E5%9B%BD%E9%99%85%E5%8C%96/11.1%20%E6%A6%82%E8%BF%B0.html"},{path:"/zh/11 国际化/11.1 概述.html",redirect:"/zh/11%20%E5%9B%BD%E9%99%85%E5%8C%96/11.1%20%E6%A6%82%E8%BF%B0.html"},{name:"v-d744ed5a",path:"/zh/11%20%E5%9B%BD%E9%99%85%E5%8C%96/11.2%20I18n%E4%B8%8ERes.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-d744ed5a").then(t)}},{path:"/zh/11 国际化/11.2 I18n与Res.html",redirect:"/zh/11%20%E5%9B%BD%E9%99%85%E5%8C%96/11.2%20I18n%E4%B8%8ERes.html"},{path:"/zh/11 国际化/11.2 I18n与Res.html",redirect:"/zh/11%20%E5%9B%BD%E9%99%85%E5%8C%96/11.2%20I18n%E4%B8%8ERes.html"},{name:"v-c5da32e8",path:"/zh/11%20%E5%9B%BD%E9%99%85%E5%8C%96/11.3%20I18nInterceptor.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-c5da32e8").then(t)}},{path:"/zh/11 国际化/11.3 I18nInterceptor.html",redirect:"/zh/11%20%E5%9B%BD%E9%99%85%E5%8C%96/11.3%20I18nInterceptor.html"},{path:"/zh/11 国际化/11.3 I18nInterceptor.html",redirect:"/zh/11%20%E5%9B%BD%E9%99%85%E5%8C%96/11.3%20I18nInterceptor.html"},{name:"v-6b9f26fe",path:"/zh/12%20Json%20%E8%BD%AC%E6%8D%A2/12.1%20%E6%A6%82%E8%BF%B0.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-6b9f26fe").then(t)}},{path:"/zh/12 Json 转换/12.1 概述.html",redirect:"/zh/12%20Json%20%E8%BD%AC%E6%8D%A2/12.1%20%E6%A6%82%E8%BF%B0.html"},{path:"/zh/12 Json 转换/12.1 概述.html",redirect:"/zh/12%20Json%20%E8%BD%AC%E6%8D%A2/12.1%20%E6%A6%82%E8%BF%B0.html"},{name:"v-0a557796",path:"/zh/12%20Json%20%E8%BD%AC%E6%8D%A2/12.2%20Json%20%E9%85%8D%E7%BD%AE.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-0a557796").then(t)}},{path:"/zh/12 Json 转换/12.2 Json 配置.html",redirect:"/zh/12%20Json%20%E8%BD%AC%E6%8D%A2/12.2%20Json%20%E9%85%8D%E7%BD%AE.html"},{path:"/zh/12 Json 转换/12.2 Json 配置.html",redirect:"/zh/12%20Json%20%E8%BD%AC%E6%8D%A2/12.2%20Json%20%E9%85%8D%E7%BD%AE.html"},{name:"v-9c01c720",path:"/zh/12%20Json%20%E8%BD%AC%E6%8D%A2/12.3%20Json%20%E7%9A%84%E5%9B%9B%E4%B8%AA%E5%AE%9E%E7%8E%B0.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-9c01c720").then(t)}},{path:"/zh/12 Json 转换/12.3 Json 的四个实现.html",redirect:"/zh/12%20Json%20%E8%BD%AC%E6%8D%A2/12.3%20Json%20%E7%9A%84%E5%9B%9B%E4%B8%AA%E5%AE%9E%E7%8E%B0.html"},{path:"/zh/12 Json 转换/12.3 Json 的四个实现.html",redirect:"/zh/12%20Json%20%E8%BD%AC%E6%8D%A2/12.3%20Json%20%E7%9A%84%E5%9B%9B%E4%B8%AA%E5%AE%9E%E7%8E%B0.html"},{name:"v-afad3fa0",path:"/zh/12%20Json%20%E8%BD%AC%E6%8D%A2/12.4%20Json%20%E8%BD%AC%E6%8D%A2%E7%94%A8%E6%B3%95.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-afad3fa0").then(t)}},{path:"/zh/12 Json 转换/12.4 Json 转换用法.html",redirect:"/zh/12%20Json%20%E8%BD%AC%E6%8D%A2/12.4%20Json%20%E8%BD%AC%E6%8D%A2%E7%94%A8%E6%B3%95.html"},{path:"/zh/12 Json 转换/12.4 Json 转换用法.html",redirect:"/zh/12%20Json%20%E8%BD%AC%E6%8D%A2/12.4%20Json%20%E8%BD%AC%E6%8D%A2%E7%94%A8%E6%B3%95.html"},{name:"v-c42c494e",path:"/zh/13%20JFinal%E6%9E%B6%E6%9E%84%E5%8F%8A%E6%89%A9%E5%B1%95/13.1%20%E6%A6%82%E8%BF%B0.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-c42c494e").then(t)}},{path:"/zh/13 JFinal架构及扩展/13.1 概述.html",redirect:"/zh/13%20JFinal%E6%9E%B6%E6%9E%84%E5%8F%8A%E6%89%A9%E5%B1%95/13.1%20%E6%A6%82%E8%BF%B0.html"},{path:"/zh/13 JFinal架构及扩展/13.1 概述.html",redirect:"/zh/13%20JFinal%E6%9E%B6%E6%9E%84%E5%8F%8A%E6%89%A9%E5%B1%95/13.1%20%E6%A6%82%E8%BF%B0.html"},{name:"v-477bb3b8",path:"/zh/13%20JFinal%E6%9E%B6%E6%9E%84%E5%8F%8A%E6%89%A9%E5%B1%95/13.2%20%E6%9E%B6%E6%9E%84.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-477bb3b8").then(t)}},{path:"/zh/13 JFinal架构及扩展/13.2 架构.html",redirect:"/zh/13%20JFinal%E6%9E%B6%E6%9E%84%E5%8F%8A%E6%89%A9%E5%B1%95/13.2%20%E6%9E%B6%E6%9E%84.html"},{path:"/zh/13 JFinal架构及扩展/13.2 架构.html",redirect:"/zh/13%20JFinal%E6%9E%B6%E6%9E%84%E5%8F%8A%E6%89%A9%E5%B1%95/13.2%20%E6%9E%B6%E6%9E%84.html"},{name:"v-0c29f8b2",path:"/zh/14%20%E5%8D%87%E7%BA%A7JFinal/14.1%20%E6%9E%81%E9%80%9F%E5%8D%87%E7%BA%A7.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-0c29f8b2").then(t)}},{path:"/zh/14 升级JFinal/14.1 极速升级.html",redirect:"/zh/14%20%E5%8D%87%E7%BA%A7JFinal/14.1%20%E6%9E%81%E9%80%9F%E5%8D%87%E7%BA%A7.html"},{path:"/zh/14 升级JFinal/14.1 极速升级.html",redirect:"/zh/14%20%E5%8D%87%E7%BA%A7JFinal/14.1%20%E6%9E%81%E9%80%9F%E5%8D%87%E7%BA%A7.html"},{name:"v-7861a453",path:"/zh/14%20%E5%8D%87%E7%BA%A7JFinal/14.2%20Ret.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-7861a453").then(t)}},{path:"/zh/14 升级JFinal/14.2 Ret.html",redirect:"/zh/14%20%E5%8D%87%E7%BA%A7JFinal/14.2%20Ret.html"},{path:"/zh/14 升级JFinal/14.2 Ret.html",redirect:"/zh/14%20%E5%8D%87%E7%BA%A7JFinal/14.2%20Ret.html"},{name:"v-74d2de46",path:"/zh/14%20%E5%8D%87%E7%BA%A7JFinal/14.3%20configEngine.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-74d2de46").then(t)}},{path:"/zh/14 升级JFinal/14.3 configEngine.html",redirect:"/zh/14%20%E5%8D%87%E7%BA%A7JFinal/14.3%20configEngine.html"},{path:"/zh/14 升级JFinal/14.3 configEngine.html",redirect:"/zh/14%20%E5%8D%87%E7%BA%A7JFinal/14.3%20configEngine.html"},{name:"v-55a5db1e",path:"/zh/14%20%E5%8D%87%E7%BA%A7JFinal/14.4%20baseViewPath.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-55a5db1e").then(t)}},{path:"/zh/14 升级JFinal/14.4 baseViewPath.html",redirect:"/zh/14%20%E5%8D%87%E7%BA%A7JFinal/14.4%20baseViewPath.html"},{path:"/zh/14 升级JFinal/14.4 baseViewPath.html",redirect:"/zh/14%20%E5%8D%87%E7%BA%A7JFinal/14.4%20baseViewPath.html"},{name:"v-7934fc13",path:"/zh/14%20%E5%8D%87%E7%BA%A7JFinal/14.5%20RenderFactory.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-7934fc13").then(t)}},{path:"/zh/14 升级JFinal/14.5 RenderFactory.html",redirect:"/zh/14%20%E5%8D%87%E7%BA%A7JFinal/14.5%20RenderFactory.html"},{path:"/zh/14 升级JFinal/14.5 RenderFactory.html",redirect:"/zh/14%20%E5%8D%87%E7%BA%A7JFinal/14.5%20RenderFactory.html"},{name:"v-0ea52584",path:"/zh/14%20%E5%8D%87%E7%BA%A7JFinal/14.6%20%E5%85%B6%E5%AE%83.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-0ea52584").then(t)}},{path:"/zh/14 升级JFinal/14.6 其它.html",redirect:"/zh/14%20%E5%8D%87%E7%BA%A7JFinal/14.6%20%E5%85%B6%E5%AE%83.html"},{path:"/zh/14 升级JFinal/14.6 其它.html",redirect:"/zh/14%20%E5%8D%87%E7%BA%A7JFinal/14.6%20%E5%85%B6%E5%AE%83.html"},{name:"v-74ddc929",path:"/zh/1%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/1.9%20IDEA%E4%B8%8B%E5%BC%80%E5%8F%91.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-74ddc929").then(t)}},{path:"/zh/1 快速上手/1.9 IDEA下开发.html",redirect:"/zh/1%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/1.9%20IDEA%E4%B8%8B%E5%BC%80%E5%8F%91.html"},{path:"/zh/1 快速上手/1.9 IDEA下开发.html",redirect:"/zh/1%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/1.9%20IDEA%E4%B8%8B%E5%BC%80%E5%8F%91.html"},{name:"v-069efee4",path:"/zh/2%20JFinalConfig/2.1%20%E6%A6%82%E8%BF%B0.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-069efee4").then(t)}},{path:"/zh/2 JFinalConfig/2.1 概述.html",redirect:"/zh/2%20JFinalConfig/2.1%20%E6%A6%82%E8%BF%B0.html"},{path:"/zh/2 JFinalConfig/2.1 概述.html",redirect:"/zh/2%20JFinalConfig/2.1%20%E6%A6%82%E8%BF%B0.html"},{name:"v-5d51c12f",path:"/zh/2%20JFinalConfig/2.2%20configConstant.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-5d51c12f").then(t)}},{path:"/zh/2 JFinalConfig/2.2 configConstant.html",redirect:"/zh/2%20JFinalConfig/2.2%20configConstant.html"},{path:"/zh/2 JFinalConfig/2.2 configConstant.html",redirect:"/zh/2%20JFinalConfig/2.2%20configConstant.html"},{name:"v-02524af7",path:"/zh/2%20JFinalConfig/2.4%20configEngine.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-02524af7").then(t)}},{path:"/zh/2 JFinalConfig/2.4 configEngine.html",redirect:"/zh/2%20JFinalConfig/2.4%20configEngine.html"},{path:"/zh/2 JFinalConfig/2.4 configEngine.html",redirect:"/zh/2%20JFinalConfig/2.4%20configEngine.html"},{name:"v-03977a47",path:"/zh/2%20JFinalConfig/2.3%20configRoute.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-03977a47").then(t)}},{path:"/zh/2 JFinalConfig/2.3 configRoute.html",redirect:"/zh/2%20JFinalConfig/2.3%20configRoute.html"},{path:"/zh/2 JFinalConfig/2.3 configRoute.html",redirect:"/zh/2%20JFinalConfig/2.3%20configRoute.html"},{name:"v-28064997",path:"/zh/2%20JFinalConfig/2.5%20configPlugin.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-28064997").then(t)}},{path:"/zh/2 JFinalConfig/2.5 configPlugin.html",redirect:"/zh/2%20JFinalConfig/2.5%20configPlugin.html"},{path:"/zh/2 JFinalConfig/2.5 configPlugin.html",redirect:"/zh/2%20JFinalConfig/2.5%20configPlugin.html"},{name:"v-34868267",path:"/zh/2%20JFinalConfig/2.6%20configInterceptor.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-34868267").then(t)}},{path:"/zh/2 JFinalConfig/2.6 configInterceptor.html",redirect:"/zh/2%20JFinalConfig/2.6%20configInterceptor.html"},{path:"/zh/2 JFinalConfig/2.6 configInterceptor.html",redirect:"/zh/2%20JFinalConfig/2.6%20configInterceptor.html"},{name:"v-351ae8e7",path:"/zh/2%20JFinalConfig/2.7%20configHandler.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-351ae8e7").then(t)}},{path:"/zh/2 JFinalConfig/2.7 configHandler.html",redirect:"/zh/2%20JFinalConfig/2.7%20configHandler.html"},{path:"/zh/2 JFinalConfig/2.7 configHandler.html",redirect:"/zh/2%20JFinalConfig/2.7%20configHandler.html"},{name:"v-4ca2acd2",path:"/zh/2%20JFinalConfig/2.8%20onStart%20and%20onStop%20%E5%9B%9E%E8%B0%83%E9%85%8D%E7%BD%AE.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-4ca2acd2").then(t)}},{path:"/zh/2 JFinalConfig/2.8 onStart and onStop 回调配置.html",redirect:"/zh/2%20JFinalConfig/2.8%20onStart%20and%20onStop%20%E5%9B%9E%E8%B0%83%E9%85%8D%E7%BD%AE.html"},{path:"/zh/2 JFinalConfig/2.8 onStart and onStop 回调配置.html",redirect:"/zh/2%20JFinalConfig/2.8%20onStart%20and%20onStop%20%E5%9B%9E%E8%B0%83%E9%85%8D%E7%BD%AE.html"},{name:"v-168d4624",path:"/zh/2%20JFinalConfig/2.9%20PropKit%20%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-168d4624").then(t)}},{path:"/zh/2 JFinalConfig/2.9 PropKit 读取配置.html",redirect:"/zh/2%20JFinalConfig/2.9%20PropKit%20%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE.html"},{path:"/zh/2 JFinalConfig/2.9 PropKit 读取配置.html",redirect:"/zh/2%20JFinalConfig/2.9%20PropKit%20%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE.html"},{name:"v-521c3580",path:"/zh/3%20Controller/3.1%20%E6%A6%82%E8%BF%B0.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-521c3580").then(t)}},{path:"/zh/3 Controller/3.1 概述.html",redirect:"/zh/3%20Controller/3.1%20%E6%A6%82%E8%BF%B0.html"},{path:"/zh/3 Controller/3.1 概述.html",redirect:"/zh/3%20Controller/3.1%20%E6%A6%82%E8%BF%B0.html"},{name:"v-874d584e",path:"/zh/3%20Controller/3.10%20session%20%E6%93%8D%E4%BD%9C.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-874d584e").then(t)}},{path:"/zh/3 Controller/3.10 session 操作.html",redirect:"/zh/3%20Controller/3.10%20session%20%E6%93%8D%E4%BD%9C.html"},{path:"/zh/3 Controller/3.10 session 操作.html",redirect:"/zh/3%20Controller/3.10%20session%20%E6%93%8D%E4%BD%9C.html"},{name:"v-697a0f50",path:"/zh/3%20Controller/3.11%20getFile%20%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-697a0f50").then(t)}},{path:"/zh/3 Controller/3.11 getFile 文件上传.html",redirect:"/zh/3%20Controller/3.11%20getFile%20%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0.html"},{path:"/zh/3 Controller/3.11 getFile 文件上传.html",redirect:"/zh/3%20Controller/3.11%20getFile%20%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0.html"},{name:"v-7a3c7de4",path:"/zh/3%20Controller/3.12%20keep%20%E7%B3%BB%E6%96%B9%E6%B3%95.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-7a3c7de4").then(t)}},{path:"/zh/3 Controller/3.12 keep 系方法.html",redirect:"/zh/3%20Controller/3.12%20keep%20%E7%B3%BB%E6%96%B9%E6%B3%95.html"},{path:"/zh/3 Controller/3.12 keep 系方法.html",redirect:"/zh/3%20Controller/3.12%20keep%20%E7%B3%BB%E6%96%B9%E6%B3%95.html"},{name:"v-aa516b2a",path:"/zh/3%20Controller/3.2%20Action.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-aa516b2a").then(t)}},{path:"/zh/3 Controller/3.2 Action.html",redirect:"/zh/3%20Controller/3.2%20Action.html"},{path:"/zh/3 Controller/3.2 Action.html",redirect:"/zh/3%20Controller/3.2%20Action.html"},{name:"v-376a5658",path:"/zh/3%20Controller/3.3%20Action%20%E5%8F%82%E6%95%B0%E6%B3%A8%E5%85%A5.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-376a5658").then(t)}},{path:"/zh/3 Controller/3.3 Action 参数注入.html",redirect:"/zh/3%20Controller/3.3%20Action%20%E5%8F%82%E6%95%B0%E6%B3%A8%E5%85%A5.html"},{path:"/zh/3 Controller/3.3 Action 参数注入.html",redirect:"/zh/3%20Controller/3.3%20Action%20%E5%8F%82%E6%95%B0%E6%B3%A8%E5%85%A5.html"},{name:"v-ce7c74c0",path:"/zh/3%20Controller/3.4%20get%20&%20getPara%20%E7%B3%BB%E5%88%97%E6%96%B9%E6%B3%95.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-ce7c74c0").then(t)}},{path:"/zh/3 Controller/3.4 get & getPara 系列方法.html",redirect:"/zh/3%20Controller/3.4%20get%20&%20getPara%20%E7%B3%BB%E5%88%97%E6%96%B9%E6%B3%95.html"},{path:"/zh/3 Controller/3.4 get & getPara 系列方法.html",redirect:"/zh/3%20Controller/3.4%20get%20&%20getPara%20%E7%B3%BB%E5%88%97%E6%96%B9%E6%B3%95.html"},{name:"v-2ecfe04e",path:"/zh/3%20Controller/3.5%20getBean%20&%20getModel%20%E7%B3%BB%E5%88%97.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-2ecfe04e").then(t)}},{path:"/zh/3 Controller/3.5 getBean & getModel 系列.html",redirect:"/zh/3%20Controller/3.5%20getBean%20&%20getModel%20%E7%B3%BB%E5%88%97.html"},{path:"/zh/3 Controller/3.5 getBean & getModel 系列.html",redirect:"/zh/3%20Controller/3.5%20getBean%20&%20getModel%20%E7%B3%BB%E5%88%97.html"},{name:"v-ee5a7982",path:"/zh/3%20Controller/3.6%20set%20&%20setAttr%20%E6%96%B9%E6%B3%95.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-ee5a7982").then(t)}},{path:"/zh/3 Controller/3.6 set & setAttr 方法.html",redirect:"/zh/3%20Controller/3.6%20set%20&%20setAttr%20%E6%96%B9%E6%B3%95.html"},{path:"/zh/3 Controller/3.6 set & setAttr 方法.html",redirect:"/zh/3%20Controller/3.6%20set%20&%20setAttr%20%E6%96%B9%E6%B3%95.html"},{name:"v-60fd334f",path:"/zh/3%20Controller/3.7%20render%20%E6%96%B9%E6%B3%95.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-60fd334f").then(t)}},{path:"/zh/3 Controller/3.7 render 方法.html",redirect:"/zh/3%20Controller/3.7%20render%20%E6%96%B9%E6%B3%95.html"},{path:"/zh/3 Controller/3.7 render 方法.html",redirect:"/zh/3%20Controller/3.7%20render%20%E6%96%B9%E6%B3%95.html"},{name:"v-55ba108c",path:"/zh/3%20Controller/3.9%20renderQrCode%20%E4%BA%8C%E7%BB%B4%E7%A0%81%E7%94%9F%E6%88%90.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-55ba108c").then(t)}},{path:"/zh/3 Controller/3.9 renderQrCode 二维码生成.html",redirect:"/zh/3%20Controller/3.9%20renderQrCode%20%E4%BA%8C%E7%BB%B4%E7%A0%81%E7%94%9F%E6%88%90.html"},{path:"/zh/3 Controller/3.9 renderQrCode 二维码生成.html",redirect:"/zh/3%20Controller/3.9%20renderQrCode%20%E4%BA%8C%E7%BB%B4%E7%A0%81%E7%94%9F%E6%88%90.html"},{name:"v-ad400136",path:"/zh/3%20Controller/3.8%20renderFile%20%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-ad400136").then(t)}},{path:"/zh/3 Controller/3.8 renderFile 文件下载.html",redirect:"/zh/3%20Controller/3.8%20renderFile%20%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD.html"},{path:"/zh/3 Controller/3.8 renderFile 文件下载.html",redirect:"/zh/3%20Controller/3.8%20renderFile%20%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD.html"},{name:"v-60f47108",path:"/zh/4%20AOP/4.1%20%E6%A6%82%E8%BF%B0.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-60f47108").then(t)}},{path:"/zh/4 AOP/4.1 概述.html",redirect:"/zh/4%20AOP/4.1%20%E6%A6%82%E8%BF%B0.html"},{path:"/zh/4 AOP/4.1 概述.html",redirect:"/zh/4%20AOP/4.1%20%E6%A6%82%E8%BF%B0.html"},{name:"v-8dd3db5a",path:"/zh/4%20AOP/4.2%20Interceptor.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-8dd3db5a").then(t)}},{path:"/zh/4 AOP/4.2 Interceptor.html",redirect:"/zh/4%20AOP/4.2%20Interceptor.html"},{path:"/zh/4 AOP/4.2 Interceptor.html",redirect:"/zh/4%20AOP/4.2%20Interceptor.html"},{name:"v-47bdc4a1",path:"/zh/4%20AOP/4.3%20Before.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-47bdc4a1").then(t)}},{path:"/zh/4 AOP/4.3 Before.html",redirect:"/zh/4%20AOP/4.3%20Before.html"},{path:"/zh/4 AOP/4.3 Before.html",redirect:"/zh/4%20AOP/4.3%20Before.html"},{name:"v-17da8b82",path:"/zh/4%20AOP/4.4%20Clear.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-17da8b82").then(t)}},{path:"/zh/4 AOP/4.4 Clear.html",redirect:"/zh/4%20AOP/4.4%20Clear.html"},{path:"/zh/4 AOP/4.4 Clear.html",redirect:"/zh/4%20AOP/4.4%20Clear.html"},{name:"v-971a23ec",path:"/zh/4%20AOP/4.5%20Inject%20%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-971a23ec").then(t)}},{path:"/zh/4 AOP/4.5 Inject 依赖注入.html",redirect:"/zh/4%20AOP/4.5%20Inject%20%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5.html"},{path:"/zh/4 AOP/4.5 Inject 依赖注入.html",redirect:"/zh/4%20AOP/4.5%20Inject%20%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5.html"},{name:"v-6d58b377",path:"/zh/4%20AOP/4.6%20Aop%20%E5%B7%A5%E5%85%B7.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-6d58b377").then(t)}},{path:"/zh/4 AOP/4.6 Aop 工具.html",redirect:"/zh/4%20AOP/4.6%20Aop%20%E5%B7%A5%E5%85%B7.html"},{path:"/zh/4 AOP/4.6 Aop 工具.html",redirect:"/zh/4%20AOP/4.6%20Aop%20%E5%B7%A5%E5%85%B7.html"},{name:"v-d30df2d6",path:"/zh/4%20AOP/4.7%20Routes%20%E7%BA%A7%E5%88%AB%E6%8B%A6%E6%88%AA%E5%99%A8.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-d30df2d6").then(t)}},{path:"/zh/4 AOP/4.7 Routes 级别拦截器.html",redirect:"/zh/4%20AOP/4.7%20Routes%20%E7%BA%A7%E5%88%AB%E6%8B%A6%E6%88%AA%E5%99%A8.html"},{path:"/zh/4 AOP/4.7 Routes 级别拦截器.html",redirect:"/zh/4%20AOP/4.7%20Routes%20%E7%BA%A7%E5%88%AB%E6%8B%A6%E6%88%AA%E5%99%A8.html"},{name:"v-0f04d02e",path:"/zh/4%20AOP/4.8%20Proxy%20%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-0f04d02e").then(t)}},{path:"/zh/4 AOP/4.8 Proxy 动态代理.html",redirect:"/zh/4%20AOP/4.8%20Proxy%20%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86.html"},{path:"/zh/4 AOP/4.8 Proxy 动态代理.html",redirect:"/zh/4%20AOP/4.8%20Proxy%20%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86.html"},{name:"v-4efb9076",path:"/zh/5%20ActiveRecord/5.1%20%E6%A6%82%E8%BF%B0.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-4efb9076").then(t)}},{path:"/zh/5 ActiveRecord/5.1 概述.html",redirect:"/zh/5%20ActiveRecord/5.1%20%E6%A6%82%E8%BF%B0.html"},{path:"/zh/5 ActiveRecord/5.1 概述.html",redirect:"/zh/5%20ActiveRecord/5.1%20%E6%A6%82%E8%BF%B0.html"},{name:"v-95e4deca",path:"/zh/5%20ActiveRecord/5.11%20%E5%A4%8D%E5%90%88%E4%B8%BB%E9%94%AE.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-95e4deca").then(t)}},{path:"/zh/5 ActiveRecord/5.11 复合主键.html",redirect:"/zh/5%20ActiveRecord/5.11%20%E5%A4%8D%E5%90%88%E4%B8%BB%E9%94%AE.html"},{path:"/zh/5 ActiveRecord/5.11 复合主键.html",redirect:"/zh/5%20ActiveRecord/5.11%20%E5%A4%8D%E5%90%88%E4%B8%BB%E9%94%AE.html"},{name:"v-9374fba2",path:"/zh/5%20ActiveRecord/5.12%20Oracle%E6%94%AF%E6%8C%81.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-9374fba2").then(t)}},{path:"/zh/5 ActiveRecord/5.12 Oracle支持.html",redirect:"/zh/5%20ActiveRecord/5.12%20Oracle%E6%94%AF%E6%8C%81.html"},{path:"/zh/5 ActiveRecord/5.12 Oracle支持.html",redirect:"/zh/5%20ActiveRecord/5.12%20Oracle%E6%94%AF%E6%8C%81.html"},{name:"v-0d70d955",path:"/zh/5%20ActiveRecord/5.10%20%E8%A1%A8%E5%85%B3%E8%81%94%E6%93%8D%E4%BD%9C.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-0d70d955").then(t)}},{path:"/zh/5 ActiveRecord/5.10 表关联操作.html",redirect:"/zh/5%20ActiveRecord/5.10%20%E8%A1%A8%E5%85%B3%E8%81%94%E6%93%8D%E4%BD%9C.html"},{path:"/zh/5 ActiveRecord/5.10 表关联操作.html",redirect:"/zh/5%20ActiveRecord/5.10%20%E8%A1%A8%E5%85%B3%E8%81%94%E6%93%8D%E4%BD%9C.html"},{name:"v-4fe22899",path:"/zh/5%20ActiveRecord/5.13%20Enjoy%20SQL%20%E6%A8%A1%E6%9D%BF.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-4fe22899").then(t)}},{path:"/zh/5 ActiveRecord/5.13 Enjoy SQL 模板.html",redirect:"/zh/5%20ActiveRecord/5.13%20Enjoy%20SQL%20%E6%A8%A1%E6%9D%BF.html"},{path:"/zh/5 ActiveRecord/5.13 Enjoy SQL 模板.html",redirect:"/zh/5%20ActiveRecord/5.13%20Enjoy%20SQL%20%E6%A8%A1%E6%9D%BF.html"},{name:"v-0d33af69",path:"/zh/5%20ActiveRecord/5.14%20%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E6%94%AF%E6%8C%81.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-0d33af69").then(t)}},{path:"/zh/5 ActiveRecord/5.14 多数据源支持.html",redirect:"/zh/5%20ActiveRecord/5.14%20%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E6%94%AF%E6%8C%81.html"},{path:"/zh/5 ActiveRecord/5.14 多数据源支持.html",redirect:"/zh/5%20ActiveRecord/5.14%20%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E6%94%AF%E6%8C%81.html"},{name:"v-6bee94cc",path:"/zh/5%20ActiveRecord/5.15%20%E7%8B%AC%E7%AB%8B%E4%BD%BF%E7%94%A8%20ActiveRecord.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-6bee94cc").then(t)}},{path:"/zh/5 ActiveRecord/5.15 独立使用 ActiveRecord.html",redirect:"/zh/5%20ActiveRecord/5.15%20%E7%8B%AC%E7%AB%8B%E4%BD%BF%E7%94%A8%20ActiveRecord.html"},{path:"/zh/5 ActiveRecord/5.15 独立使用 ActiveRecord.html",redirect:"/zh/5%20ActiveRecord/5.15%20%E7%8B%AC%E7%AB%8B%E4%BD%BF%E7%94%A8%20ActiveRecord.html"},{name:"v-a8ec52d8",path:"/zh/5%20ActiveRecord/5.16%20%E8%B0%83%E7%94%A8%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-a8ec52d8").then(t)}},{path:"/zh/5 ActiveRecord/5.16 调用存储过程.html",redirect:"/zh/5%20ActiveRecord/5.16%20%E8%B0%83%E7%94%A8%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B.html"},{path:"/zh/5 ActiveRecord/5.16 调用存储过程.html",redirect:"/zh/5%20ActiveRecord/5.16%20%E8%B0%83%E7%94%A8%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B.html"},{name:"v-7fdf5b79",path:"/zh/5%20ActiveRecord/5.2%20ActiveRecordPlugin.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-7fdf5b79").then(t)}},{path:"/zh/5 ActiveRecord/5.2 ActiveRecordPlugin.html",redirect:"/zh/5%20ActiveRecord/5.2%20ActiveRecordPlugin.html"},{path:"/zh/5 ActiveRecord/5.2 ActiveRecordPlugin.html",redirect:"/zh/5%20ActiveRecord/5.2%20ActiveRecordPlugin.html"},{name:"v-28b5b627",path:"/zh/5%20ActiveRecord/5.3%20Model.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-28b5b627").then(t)}},{path:"/zh/5 ActiveRecord/5.3 Model.html",redirect:"/zh/5%20ActiveRecord/5.3%20Model.html"},{path:"/zh/5 ActiveRecord/5.3 Model.html",redirect:"/zh/5%20ActiveRecord/5.3%20Model.html"},{name:"v-5546ce10",path:"/zh/5%20ActiveRecord/5.4%20%E7%94%9F%E6%88%90%E5%99%A8%E4%B8%8E%20JavaBean.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-5546ce10").then(t)}},{path:"/zh/5 ActiveRecord/5.4 生成器与 JavaBean.html",redirect:"/zh/5%20ActiveRecord/5.4%20%E7%94%9F%E6%88%90%E5%99%A8%E4%B8%8E%20JavaBean.html"},{path:"/zh/5 ActiveRecord/5.4 生成器与 JavaBean.html",redirect:"/zh/5%20ActiveRecord/5.4%20%E7%94%9F%E6%88%90%E5%99%A8%E4%B8%8E%20JavaBean.html"},{name:"v-0a4e7e1f",path:"/zh/5%20ActiveRecord/5.5%20%E7%8B%AC%E5%88%9BDb%20Record%E6%A8%A1%E5%BC%8F.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-0a4e7e1f").then(t)}},{path:"/zh/5 ActiveRecord/5.5 独创Db Record模式.html",redirect:"/zh/5%20ActiveRecord/5.5%20%E7%8B%AC%E5%88%9BDb%20Record%E6%A8%A1%E5%BC%8F.html"},{path:"/zh/5 ActiveRecord/5.5 独创Db Record模式.html",redirect:"/zh/5%20ActiveRecord/5.5%20%E7%8B%AC%E5%88%9BDb%20Record%E6%A8%A1%E5%BC%8F.html"},{name:"v-a330c5ac",path:"/zh/5%20ActiveRecord/5.6%20paginate%20%E5%88%86%E9%A1%B5.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-a330c5ac").then(t)}},{path:"/zh/5 ActiveRecord/5.6 paginate 分页.html",redirect:"/zh/5%20ActiveRecord/5.6%20paginate%20%E5%88%86%E9%A1%B5.html"},{path:"/zh/5 ActiveRecord/5.6 paginate 分页.html",redirect:"/zh/5%20ActiveRecord/5.6%20paginate%20%E5%88%86%E9%A1%B5.html"},{name:"v-46c9ae0d",path:"/zh/5%20ActiveRecord/5.7%20%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-46c9ae0d").then(t)}},{path:"/zh/5 ActiveRecord/5.7 数据库事务处理.html",redirect:"/zh/5%20ActiveRecord/5.7%20%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86.html"},{path:"/zh/5 ActiveRecord/5.7 数据库事务处理.html",redirect:"/zh/5%20ActiveRecord/5.7%20%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86.html"},{name:"v-231a3ff4",path:"/zh/5%20ActiveRecord/5.8%20Cache%20%E7%BC%93%E5%AD%98.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-231a3ff4").then(t)}},{path:"/zh/5 ActiveRecord/5.8 Cache 缓存.html",redirect:"/zh/5%20ActiveRecord/5.8%20Cache%20%E7%BC%93%E5%AD%98.html"},{path:"/zh/5 ActiveRecord/5.8 Cache 缓存.html",redirect:"/zh/5%20ActiveRecord/5.8%20Cache%20%E7%BC%93%E5%AD%98.html"},{name:"v-696ace50",path:"/zh/5%20ActiveRecord/5.9%20Dialect%E5%A4%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E6%94%AF%E6%8C%81.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-696ace50").then(t)}},{path:"/zh/5 ActiveRecord/5.9 Dialect多数据库支持.html",redirect:"/zh/5%20ActiveRecord/5.9%20Dialect%E5%A4%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E6%94%AF%E6%8C%81.html"},{path:"/zh/5 ActiveRecord/5.9 Dialect多数据库支持.html",redirect:"/zh/5%20ActiveRecord/5.9%20Dialect%E5%A4%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E6%94%AF%E6%8C%81.html"},{name:"v-626dda05",path:"/zh/6%20Enjoy%20%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/6.1%20%E6%A6%82%E8%BF%B0.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-626dda05").then(t)}},{path:"/zh/6 Enjoy 模板引擎/6.1 概述.html",redirect:"/zh/6%20Enjoy%20%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/6.1%20%E6%A6%82%E8%BF%B0.html"},{path:"/zh/6 Enjoy 模板引擎/6.1 概述.html",redirect:"/zh/6%20Enjoy%20%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/6.1%20%E6%A6%82%E8%BF%B0.html"},{name:"v-43c9b5de",path:"/zh/6%20Enjoy%20%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/6.10%20Spring%20boot%20%E6%95%B4%E5%90%88.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-43c9b5de").then(t)}},{path:"/zh/6 Enjoy 模板引擎/6.10 Spring boot 整合.html",redirect:"/zh/6%20Enjoy%20%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/6.10%20Spring%20boot%20%E6%95%B4%E5%90%88.html"},{path:"/zh/6 Enjoy 模板引擎/6.10 Spring boot 整合.html",redirect:"/zh/6%20Enjoy%20%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/6.10%20Spring%20boot%20%E6%95%B4%E5%90%88.html"},{name:"v-72b0650e",path:"/zh/6%20Enjoy%20%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/6.11%20%E7%8B%AC%E7%AB%8B%E4%BD%BF%E7%94%A8%20Enjoy.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-72b0650e").then(t)}},{path:"/zh/6 Enjoy 模板引擎/6.11 独立使用 Enjoy.html",redirect:"/zh/6%20Enjoy%20%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/6.11%20%E7%8B%AC%E7%AB%8B%E4%BD%BF%E7%94%A8%20Enjoy.html"},{path:"/zh/6 Enjoy 模板引擎/6.11 独立使用 Enjoy.html",redirect:"/zh/6%20Enjoy%20%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/6.11%20%E7%8B%AC%E7%AB%8B%E4%BD%BF%E7%94%A8%20Enjoy.html"},{name:"v-25952418",path:"/zh/6%20Enjoy%20%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/6.2%20%E5%BC%95%E6%93%8E%E9%85%8D%E7%BD%AE.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-25952418").then(t)}},{path:"/zh/6 Enjoy 模板引擎/6.2 引擎配置.html",redirect:"/zh/6%20Enjoy%20%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/6.2%20%E5%BC%95%E6%93%8E%E9%85%8D%E7%BD%AE.html"},{path:"/zh/6 Enjoy 模板引擎/6.2 引擎配置.html",redirect:"/zh/6%20Enjoy%20%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/6.2%20%E5%BC%95%E6%93%8E%E9%85%8D%E7%BD%AE.html"},{name:"v-7047fb52",path:"/zh/6%20Enjoy%20%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/6.3%20%E8%A1%A8%E8%BE%BE%E5%BC%8F.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-7047fb52").then(t)}},{path:"/zh/6 Enjoy 模板引擎/6.3 表达式.html",redirect:"/zh/6%20Enjoy%20%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/6.3%20%E8%A1%A8%E8%BE%BE%E5%BC%8F.html"},{path:"/zh/6 Enjoy 模板引擎/6.3 表达式.html",redirect:"/zh/6%20Enjoy%20%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/6.3%20%E8%A1%A8%E8%BE%BE%E5%BC%8F.html"},{name:"v-327b0166",path:"/zh/6%20Enjoy%20%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/6.4%20%E6%8C%87%E4%BB%A4.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-327b0166").then(t)}},{path:"/zh/6 Enjoy 模板引擎/6.4 指令.html",redirect:"/zh/6%20Enjoy%20%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/6.4%20%E6%8C%87%E4%BB%A4.html"},{path:"/zh/6 Enjoy 模板引擎/6.4 指令.html",redirect:"/zh/6%20Enjoy%20%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/6.4%20%E6%8C%87%E4%BB%A4.html"},{name:"v-4d0c018e",path:"/zh/6%20Enjoy%20%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/6.5%20%E6%B3%A8%E9%87%8A.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-4d0c018e").then(t)}},{path:"/zh/6 Enjoy 模板引擎/6.5 注释.html",redirect:"/zh/6%20Enjoy%20%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/6.5%20%E6%B3%A8%E9%87%8A.html"},{path:"/zh/6 Enjoy 模板引擎/6.5 注释.html",redirect:"/zh/6%20Enjoy%20%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/6.5%20%E6%B3%A8%E9%87%8A.html"},{name:"v-877bae90",path:"/zh/6%20Enjoy%20%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/6.6%20%E5%8E%9F%E6%A0%B7%E8%BE%93%E5%87%BA.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-877bae90").then(t)}},{path:"/zh/6 Enjoy 模板引擎/6.6 原样输出.html",redirect:"/zh/6%20Enjoy%20%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/6.6%20%E5%8E%9F%E6%A0%B7%E8%BE%93%E5%87%BA.html"},{path:"/zh/6 Enjoy 模板引擎/6.6 原样输出.html",redirect:"/zh/6%20Enjoy%20%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/6.6%20%E5%8E%9F%E6%A0%B7%E8%BE%93%E5%87%BA.html"},{name:"v-172034dd",path:"/zh/6%20Enjoy%20%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/6.7%20Shared%20Method%20%E6%89%A9%E5%B1%95.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-172034dd").then(t)}},{path:"/zh/6 Enjoy 模板引擎/6.7 Shared Method 扩展.html",redirect:"/zh/6%20Enjoy%20%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/6.7%20Shared%20Method%20%E6%89%A9%E5%B1%95.html"},{path:"/zh/6 Enjoy 模板引擎/6.7 Shared Method 扩展.html",redirect:"/zh/6%20Enjoy%20%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/6.7%20Shared%20Method%20%E6%89%A9%E5%B1%95.html"},{name:"v-d5bcff54",path:"/zh/6%20Enjoy%20%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/6.8%20Shared%20Object%E6%89%A9%E5%B1%95.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-d5bcff54").then(t)}},{path:"/zh/6 Enjoy 模板引擎/6.8 Shared Object扩展.html",redirect:"/zh/6%20Enjoy%20%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/6.8%20Shared%20Object%E6%89%A9%E5%B1%95.html"},{path:"/zh/6 Enjoy 模板引擎/6.8 Shared Object扩展.html",redirect:"/zh/6%20Enjoy%20%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/6.8%20Shared%20Object%E6%89%A9%E5%B1%95.html"},{name:"v-8f755e3c",path:"/zh/6%20Enjoy%20%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/6.9%20Extension%20Method%E6%89%A9%E5%B1%95.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-8f755e3c").then(t)}},{path:"/zh/6 Enjoy 模板引擎/6.9 Extension Method扩展.html",redirect:"/zh/6%20Enjoy%20%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/6.9%20Extension%20Method%E6%89%A9%E5%B1%95.html"},{path:"/zh/6 Enjoy 模板引擎/6.9 Extension Method扩展.html",redirect:"/zh/6%20Enjoy%20%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/6.9%20Extension%20Method%E6%89%A9%E5%B1%95.html"},{name:"v-f066f1e6",path:"/zh/7%20EhCachePlugin/7.2%20EhCachePlugin.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-f066f1e6").then(t)}},{path:"/zh/7 EhCachePlugin/7.2 EhCachePlugin.html",redirect:"/zh/7%20EhCachePlugin/7.2%20EhCachePlugin.html"},{path:"/zh/7 EhCachePlugin/7.2 EhCachePlugin.html",redirect:"/zh/7%20EhCachePlugin/7.2%20EhCachePlugin.html"},{name:"v-6db814f0",path:"/zh/7%20EhCachePlugin/7.1%20%E6%A6%82%E8%BF%B0.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-6db814f0").then(t)}},{path:"/zh/7 EhCachePlugin/7.1 概述.html",redirect:"/zh/7%20EhCachePlugin/7.1%20%E6%A6%82%E8%BF%B0.html"},{path:"/zh/7 EhCachePlugin/7.1 概述.html",redirect:"/zh/7%20EhCachePlugin/7.1%20%E6%A6%82%E8%BF%B0.html"},{name:"v-c09c5b3e",path:"/zh/7%20EhCachePlugin/7.3%20CacheInterceptor.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-c09c5b3e").then(t)}},{path:"/zh/7 EhCachePlugin/7.3 CacheInterceptor.html",redirect:"/zh/7%20EhCachePlugin/7.3%20CacheInterceptor.html"},{path:"/zh/7 EhCachePlugin/7.3 CacheInterceptor.html",redirect:"/zh/7%20EhCachePlugin/7.3%20CacheInterceptor.html"},{name:"v-69c3d5be",path:"/zh/7%20EhCachePlugin/7.4%20EvictInterceptor.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-69c3d5be").then(t)}},{path:"/zh/7 EhCachePlugin/7.4 EvictInterceptor.html",redirect:"/zh/7%20EhCachePlugin/7.4%20EvictInterceptor.html"},{path:"/zh/7 EhCachePlugin/7.4 EvictInterceptor.html",redirect:"/zh/7%20EhCachePlugin/7.4%20EvictInterceptor.html"},{name:"v-158306c1",path:"/zh/7%20EhCachePlugin/7.5%20CacheKit.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-158306c1").then(t)}},{path:"/zh/7 EhCachePlugin/7.5 CacheKit.html",redirect:"/zh/7%20EhCachePlugin/7.5%20CacheKit.html"},{path:"/zh/7 EhCachePlugin/7.5 CacheKit.html",redirect:"/zh/7%20EhCachePlugin/7.5%20CacheKit.html"},{name:"v-2576d6bb",path:"/zh/7%20EhCachePlugin/7.6%20ehcache.xml%E7%AE%80%E4%BB%8B.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-2576d6bb").then(t)}},{path:"/zh/7 EhCachePlugin/7.6 ehcache.xml简介.html",redirect:"/zh/7%20EhCachePlugin/7.6%20ehcache.xml%E7%AE%80%E4%BB%8B.html"},{path:"/zh/7 EhCachePlugin/7.6 ehcache.xml简介.html",redirect:"/zh/7%20EhCachePlugin/7.6%20ehcache.xml%E7%AE%80%E4%BB%8B.html"},{name:"v-23fb8ef0",path:"/zh/8%20RedisPlugin/8.1%20%E6%A6%82%E8%BF%B0.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-23fb8ef0").then(t)}},{path:"/zh/8 RedisPlugin/8.1 概述.html",redirect:"/zh/8%20RedisPlugin/8.1%20%E6%A6%82%E8%BF%B0.html"},{path:"/zh/8 RedisPlugin/8.1 概述.html",redirect:"/zh/8%20RedisPlugin/8.1%20%E6%A6%82%E8%BF%B0.html"},{name:"v-889144ce",path:"/zh/8%20RedisPlugin/8.2%20RedisPlugin.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-889144ce").then(t)}},{path:"/zh/8 RedisPlugin/8.2 RedisPlugin.html",redirect:"/zh/8%20RedisPlugin/8.2%20RedisPlugin.html"},{path:"/zh/8 RedisPlugin/8.2 RedisPlugin.html",redirect:"/zh/8%20RedisPlugin/8.2%20RedisPlugin.html"},{name:"v-ac71321c",path:"/zh/8%20RedisPlugin/8.3%20Redis%E4%B8%8ECache.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-ac71321c").then(t)}},{path:"/zh/8 RedisPlugin/8.3 Redis与Cache.html",redirect:"/zh/8%20RedisPlugin/8.3%20Redis%E4%B8%8ECache.html"},{path:"/zh/8 RedisPlugin/8.3 Redis与Cache.html",redirect:"/zh/8%20RedisPlugin/8.3%20Redis%E4%B8%8ECache.html"},{name:"v-0268e6ef",path:"/zh/8%20RedisPlugin/8.4%20%E9%9D%9Eweb%E7%8E%AF%E5%A2%83%E4%BD%BF%E7%94%A8RedisPlugin.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-0268e6ef").then(t)}},{path:"/zh/8 RedisPlugin/8.4 非web环境使用RedisPlugin.html",redirect:"/zh/8%20RedisPlugin/8.4%20%E9%9D%9Eweb%E7%8E%AF%E5%A2%83%E4%BD%BF%E7%94%A8RedisPlugin.html"},{path:"/zh/8 RedisPlugin/8.4 非web环境使用RedisPlugin.html",redirect:"/zh/8%20RedisPlugin/8.4%20%E9%9D%9Eweb%E7%8E%AF%E5%A2%83%E4%BD%BF%E7%94%A8RedisPlugin.html"},{name:"v-2cfe6eb6",path:"/zh/9%20Cron4jPlugin/9.1%20%E6%A6%82%E8%BF%B0.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-2cfe6eb6").then(t)}},{path:"/zh/9 Cron4jPlugin/9.1 概述.html",redirect:"/zh/9%20Cron4jPlugin/9.1%20%E6%A6%82%E8%BF%B0.html"},{path:"/zh/9 Cron4jPlugin/9.1 概述.html",redirect:"/zh/9%20Cron4jPlugin/9.1%20%E6%A6%82%E8%BF%B0.html"},{name:"v-35108f42",path:"/zh/9%20Cron4jPlugin/9.2%20Cron4jPlugin.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-35108f42").then(t)}},{path:"/zh/9 Cron4jPlugin/9.2 Cron4jPlugin.html",redirect:"/zh/9%20Cron4jPlugin/9.2%20Cron4jPlugin.html"},{path:"/zh/9 Cron4jPlugin/9.2 Cron4jPlugin.html",redirect:"/zh/9%20Cron4jPlugin/9.2%20Cron4jPlugin.html"},{name:"v-bc954fe0",path:"/zh/9%20Cron4jPlugin/9.3%20%E4%BD%BF%E7%94%A8%E5%A4%96%E9%83%A8%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-bc954fe0").then(t)}},{path:"/zh/9 Cron4jPlugin/9.3 使用外部配置文件.html",redirect:"/zh/9%20Cron4jPlugin/9.3%20%E4%BD%BF%E7%94%A8%E5%A4%96%E9%83%A8%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.html"},{path:"/zh/9 Cron4jPlugin/9.3 使用外部配置文件.html",redirect:"/zh/9%20Cron4jPlugin/9.3%20%E4%BD%BF%E7%94%A8%E5%A4%96%E9%83%A8%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.html"},{name:"v-0b234e30",path:"/zh/9%20Cron4jPlugin/9.4%20%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-0b234e30").then(t)}},{path:"/zh/9 Cron4jPlugin/9.4 高级用法.html",redirect:"/zh/9%20Cron4jPlugin/9.4%20%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95.html"},{path:"/zh/9 Cron4jPlugin/9.4 高级用法.html",redirect:"/zh/9%20Cron4jPlugin/9.4%20%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95.html"},{name:"v-70f998d1",path:"/en/3%20Controller/3.4%20get%20&%20getPara%20series%20methods.html",component:En,beforeEnter:(e,n,t)=>{Object(Ke.a)("Layout","v-70f998d1").then(t)}},{path:"/en/3 Controller/3.4 get & getPara series methods.html",redirect:"/en/3%20Controller/3.4%20get%20&%20getPara%20series%20methods.html"},{path:"/en/3 Controller/3.4 get & getPara series methods.html",redirect:"/en/3%20Controller/3.4%20get%20&%20getPara%20series%20methods.html"},{path:"*",component:En}],Cn={title:"JFinal Docs",description:"Java Web 快速开发框架",base:"/jfinal-doc/",headTags:[["link",{rel:"icon",href:"/jfinal-doc/logo.png"}],["link",{rel:"manifest",href:"/jfinal-doc/manifest.json"}],["meta",{name:"theme-color",content:"#3eaf7c"}],["meta",{name:"apple-mobile-web-app-capable",content:"yes"}],["meta",{name:"apple-mobile-web-app-status-bar-style",content:"black"}],["link",{rel:"apple-touch-icon",href:"/jfinal-doc/icons/apple-touch-icon-152x152.png"}],["link",{rel:"mask-icon",href:"/jfinal-doc/icons/safari-pinned-tab.svg",color:"#3eaf7c"}],["meta",{name:"msapplication-TileImage",content:"/icons/msapplication-icon-144x144.png"}],["meta",{name:"msapplication-TileColor",content:"#000000"}],["link",{rel:"icon",href:"/jfinal-doc/favicon.ico"}],["meta",{name:"author",content:"litongjava@qq.com,jfinal@qq.com"}],["meta",{name:"keywords",content:"JFinal,jfinal"}],["script",{crossorigin:"anonymous",async:!0,src:""}]],pages:[{title:"关于作者",frontmatter:{},regularPath:"/about/",relativePath:"about/readme.md",key:"v-4337c678",path:"/about/",lastUpdated:"9/23/2023, 2:14:26 AM",lastUpdatedTimestamp:1695435266e3,headersStr:null,content:"# 关于作者\n\nlitongjav(litongjava@qq.com)\nJfinal (jfinal@qq.com)",normalizedContent:"# 关于作者\n\nlitongjav(litongjava@qq.com)\njfinal (jfinal@qq.com)",charsets:{cjk:!0}},{title:"Home",frontmatter:{home:!0,heroImage:"./jfinallogo.png",heroText:"JFinal",tagline:"基于Java的快速开放框架",actionText:"快速上手 →",actionLink:"/zh/1 快速上手/1.0 快速上手.md",features:[{title:"简洁至上",details:"以 编码 为中心的框架设计，以最少的配置帮助你专注于开发。"},{title:"快速开发",details:"JFinal 是基于 Java 语言的极速 WEB + ORM 框架，其核心设计目标是开发迅速、代码量少、学习简单、功能强大、轻量级、易扩展、Restful。"},{title:"节约时间",details:"在拥有Java语言所有优势的同时再拥有 ruby、python 等动态语言的开发效率！为您节约更多时间，去陪恋人、家人和朋友 ;)"}]},regularPath:"/",relativePath:"README.md",key:"v-6391e5f4",path:"/",lastUpdated:"9/22/2023, 9:37:25 AM",lastUpdatedTimestamp:1695375445e3,headersStr:null,content:"MIT Licensed | Copyright © 2023-present litongjava",normalizedContent:"mit licensed | copyright © 2023-present litongjava",charsets:{cjk:!0}},{title:"1.0 Quick Start",frontmatter:{},regularPath:"/en/1%20Quick%20Start/1.0%20Quick%20Start.html",relativePath:"en/1 Quick Start/1.0 Quick Start.md",key:"v-17295f05",path:"/en/1%20Quick%20Start/1.0%20Quick%20Start.html",lastUpdated:"9/17/2023, 5:25:03 AM",lastUpdatedTimestamp:1694928303e3,headersStr:null,content:'# 1.0 Quick Start\n\nCreate a new Maven project named jfinal-5.1.2-hello. pom.xml content:\n\n<properties>\n  <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n  <java.version>1.8</java.version>\n  <maven.compiler.source>${java.version}</maven.compiler.source>\n  <maven.compiler.target>${java.version}</maven.compiler.target>\n</properties>\n<dependencies>\n  <dependency>\n    <groupId>com.jfinal</groupId>\n    <artifactId>jfinal-undertow</artifactId>\n    <version>3.5</version>\n  </dependency>\n  <dependency>\n  <dependency>\n    <groupId>com.jfinal</groupId>\n    <artifactId>jfinal</artifactId>\n    <version>5.1.2</version>\n  </dependency>\n</dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\nHelloController content:\n\npackage demo;\nimport com.jfinal.core.Controller;\nimport com.jfinal.core.Path;\n\n@Path("/hello")\npublic class HelloController extends Controller {\n  public void index() {\n    renderText("Hello JFinal World.");\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nDemoConfig content:\n\npackage demo;\nimport com.jfinal.config.Constants;\nimport com.jfinal.config.Handlers;\nimport com.jfinal.config.Interceptors;\nimport com.jfinal.config.JFinalConfig;\nimport com.jfinal.config.Plugins;\nimport com.jfinal.config.Routes;\nimport com.jfinal.server.undertow.UndertowServer;\nimport com.jfinal.template.Engine;\n\npublic class DemoConfig extends JFinalConfig {\n   public void configConstant(Constants me) {\n     me.setDevMode(true);\n   }\n\n   public void configRoute(Routes me) {\n     me.scan("demo.");\n   }\n\n   public void configEngine(Engine me) {}\n\n   public void configPlugin(Plugins me) {}\n\n   public void configInterceptor(Interceptors me) {}\n\n   public void configHandler(Handlers me) {}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\nDemoApp content:\n\npackage demo;\nimport com.jfinal.server.undertow.UndertowServer;\n\npublic class DemoApp {\n   public static void main(String[] args) {\n     UndertowServer.start(DemoConfig.class);\n   }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nVisit http://localhost/hello to display "Hello JFinal World."\n\nSource code address: https://github.com/litongjava/java-ee-jfinal-study/tree/master/jfinal-5.0-study/jfinal-5.1.2-hello',normalizedContent:'# 1.0 quick start\n\ncreate a new maven project named jfinal-5.1.2-hello. pom.xml content:\n\n<properties>\n  <project.build.sourceencoding>utf-8</project.build.sourceencoding>\n  <java.version>1.8</java.version>\n  <maven.compiler.source>${java.version}</maven.compiler.source>\n  <maven.compiler.target>${java.version}</maven.compiler.target>\n</properties>\n<dependencies>\n  <dependency>\n    <groupid>com.jfinal</groupid>\n    <artifactid>jfinal-undertow</artifactid>\n    <version>3.5</version>\n  </dependency>\n  <dependency>\n  <dependency>\n    <groupid>com.jfinal</groupid>\n    <artifactid>jfinal</artifactid>\n    <version>5.1.2</version>\n  </dependency>\n</dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\nhellocontroller content:\n\npackage demo;\nimport com.jfinal.core.controller;\nimport com.jfinal.core.path;\n\n@path("/hello")\npublic class hellocontroller extends controller {\n  public void index() {\n    rendertext("hello jfinal world.");\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\ndemoconfig content:\n\npackage demo;\nimport com.jfinal.config.constants;\nimport com.jfinal.config.handlers;\nimport com.jfinal.config.interceptors;\nimport com.jfinal.config.jfinalconfig;\nimport com.jfinal.config.plugins;\nimport com.jfinal.config.routes;\nimport com.jfinal.server.undertow.undertowserver;\nimport com.jfinal.template.engine;\n\npublic class democonfig extends jfinalconfig {\n   public void configconstant(constants me) {\n     me.setdevmode(true);\n   }\n\n   public void configroute(routes me) {\n     me.scan("demo.");\n   }\n\n   public void configengine(engine me) {}\n\n   public void configplugin(plugins me) {}\n\n   public void configinterceptor(interceptors me) {}\n\n   public void confighandler(handlers me) {}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\ndemoapp content:\n\npackage demo;\nimport com.jfinal.server.undertow.undertowserver;\n\npublic class demoapp {\n   public static void main(string[] args) {\n     undertowserver.start(democonfig.class);\n   }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nvisit http://localhost/hello to display "hello jfinal world."\n\nsource code address: https://github.com/litongjava/java-ee-jfinal-study/tree/master/jfinal-5.0-study/jfinal-5.1.2-hello',charsets:{}},{title:"1.1 Maven Basics",frontmatter:{},regularPath:"/en/1%20Quick%20Start/1.1%20Basics%20of%20Maven.html",relativePath:"en/1 Quick Start/1.1 Basics of Maven.md",key:"v-83630578",path:"/en/1%20Quick%20Start/1.1%20Basics%20of%20Maven.html",headers:[{level:3,title:"1. Download",slug:"_1-download",normalizedTitle:"1. download",charIndex:398},{level:3,title:"2. Installation",slug:"_2-installation",normalizedTitle:"2. installation",charIndex:631},{level:3,title:"3. Configure Eclipse to Point to Maven",slug:"_3-configure-eclipse-to-point-to-maven",normalizedTitle:"3. configure eclipse to point to maven",charIndex:1572},{level:3,title:"5. Import the Maven project into Eclipse",slug:"_5-import-the-maven-project-into-eclipse",normalizedTitle:"5. import the maven project into eclipse",charIndex:2550}],lastUpdated:"9/22/2023, 9:39:45 AM",lastUpdatedTimestamp:1695375585e3,headersStr:"1. Download 2. Installation 3. Configure Eclipse to Point to Maven 5. Import the Maven project into Eclipse",content:'# 1.1 Maven Basics\n\nIt is recommended to use maven for developing jfinal projects, instead of manually managing jar packages and building projects in the traditional way. Since maven is widely used, there are many maven-related resources available online. Therefore, this section only introduces a few basic points of using maven. Knowing these points is sufficient to get started with jfinal.\n\n\n# 1. Download\n\nVisit the Maven official download page: http://maven.apache.org/download.cgi Click on apache-maven-3.6.3-bin.zip to download. It is recommended to download at least version 3.6.3, as higher versions are more stable.\n\n\n# 2. Installation\n\nExtract maven to a directory, configure some environment variables to complete the installation. The configuration of environment variables is similar to the configuration of JDK. Only two environment variables need to be configured. Below is an example of configuration in a Linux system:\n\nexport MAVEN_HOME=/Users/james/app/maven\nexport PATH=$PATH:$JAVA_HOME/bin:$MAVEN_HOME/bin\n\n\n1\n2\n\n\nAs shown above, put the above two lines of code in /etc/profile.\n\nor in the ~/.bash_profile file to complete the installation of Maven. After configuring the above environment variables, use the source /etc/profile or source ~/.bash_profile command to activate them.\n\nFor configuring environment variables in Windows, refer here: Portal A and Portal B\n\nFinally, open the command line and enter the following command to check if Maven is successfully installed. If successful, it will display the Maven version number:\n\nmvn -v\n\n\n1\n\n\n\n# 3. Configure Eclipse to Point to Maven\n\nEclipse itself comes with an embedded Maven, but the embedded Maven is not reliable and is not convenient, such as not being able to use Maven\'s command line in the console. So never use the Maven embedded in Eclipse. Below is a brief introduction to the configuration method:\n\nOpen the configuration main window and click on the Installations submenu under Maven on the left.\n\n\n\nClick the add button in the above figure to pop up the following window:\n\nClick the Directory in the above figure to select the directory where Maven was extracted, check the just-added Maven, and uncheck the other two Maven options, only keep the one just installed checked.\n\nFinally, click on the User Settings menu on the left, and then click the Browe button on the right to configure the two settings.xml files. These two files are under the conf subdirectory of the Maven installation directory.\n\nClick the ok button to complete the configuration.\n\n\n# 5. Import the Maven project into Eclipse\n\nMany students find it difficult to use the jfinal demo after downloading it from the homepage and importing it into Eclipse/IDEA. The essential reason is the incorrect method of importing.\n\nThe key point in importing a Maven project is to treat it as a Maven project and import it through the "Maven Import Wizard."\n\nBelow are screenshots of the import process. The first step is to check whether the root directory of the project being imported is clean:\n\n\n\nThe presence of the .settings directory, as well as the .classpath and .project files (note they are hidden files) in the above screenshot, proves that the project has already been imported into Eclipse. Therefore, there\'s no need to re-import; simply select "Existing Projects into Workspace" in the import window to reopen the project.\n\nIf the project is not working, you can delete the aforementioned directories and files and then import them according to the method described in the document below.\n\nIf the above directories and files do not exist in the project root directory, the Maven project needs to be imported:\n\nThe crucial step is to choose "Existing Maven Project":\n\nIf you don\'t import it as a Maven project, Eclipse won\'t generate the correct .settings, .classpath, .project, etc., configurations, causing the project to be unusable (similarly, this applies to the IDEA development environment).\n\nThe final step is to select the directory where the project is located. Ensure you choose the directory where the pom.xml is located:\n\nClick the "Finish" button to complete the import of the Maven project.\n\nA standard Maven project only requires the src directory and the pom.xml file.',normalizedContent:'# 1.1 maven basics\n\nit is recommended to use maven for developing jfinal projects, instead of manually managing jar packages and building projects in the traditional way. since maven is widely used, there are many maven-related resources available online. therefore, this section only introduces a few basic points of using maven. knowing these points is sufficient to get started with jfinal.\n\n\n# 1. download\n\nvisit the maven official download page: http://maven.apache.org/download.cgi click on apache-maven-3.6.3-bin.zip to download. it is recommended to download at least version 3.6.3, as higher versions are more stable.\n\n\n# 2. installation\n\nextract maven to a directory, configure some environment variables to complete the installation. the configuration of environment variables is similar to the configuration of jdk. only two environment variables need to be configured. below is an example of configuration in a linux system:\n\nexport maven_home=/users/james/app/maven\nexport path=$path:$java_home/bin:$maven_home/bin\n\n\n1\n2\n\n\nas shown above, put the above two lines of code in /etc/profile.\n\nor in the ~/.bash_profile file to complete the installation of maven. after configuring the above environment variables, use the source /etc/profile or source ~/.bash_profile command to activate them.\n\nfor configuring environment variables in windows, refer here: portal a and portal b\n\nfinally, open the command line and enter the following command to check if maven is successfully installed. if successful, it will display the maven version number:\n\nmvn -v\n\n\n1\n\n\n\n# 3. configure eclipse to point to maven\n\neclipse itself comes with an embedded maven, but the embedded maven is not reliable and is not convenient, such as not being able to use maven\'s command line in the console. so never use the maven embedded in eclipse. below is a brief introduction to the configuration method:\n\nopen the configuration main window and click on the installations submenu under maven on the left.\n\n\n\nclick the add button in the above figure to pop up the following window:\n\nclick the directory in the above figure to select the directory where maven was extracted, check the just-added maven, and uncheck the other two maven options, only keep the one just installed checked.\n\nfinally, click on the user settings menu on the left, and then click the browe button on the right to configure the two settings.xml files. these two files are under the conf subdirectory of the maven installation directory.\n\nclick the ok button to complete the configuration.\n\n\n# 5. import the maven project into eclipse\n\nmany students find it difficult to use the jfinal demo after downloading it from the homepage and importing it into eclipse/idea. the essential reason is the incorrect method of importing.\n\nthe key point in importing a maven project is to treat it as a maven project and import it through the "maven import wizard."\n\nbelow are screenshots of the import process. the first step is to check whether the root directory of the project being imported is clean:\n\n\n\nthe presence of the .settings directory, as well as the .classpath and .project files (note they are hidden files) in the above screenshot, proves that the project has already been imported into eclipse. therefore, there\'s no need to re-import; simply select "existing projects into workspace" in the import window to reopen the project.\n\nif the project is not working, you can delete the aforementioned directories and files and then import them according to the method described in the document below.\n\nif the above directories and files do not exist in the project root directory, the maven project needs to be imported:\n\nthe crucial step is to choose "existing maven project":\n\nif you don\'t import it as a maven project, eclipse won\'t generate the correct .settings, .classpath, .project, etc., configurations, causing the project to be unusable (similarly, this applies to the idea development environment).\n\nthe final step is to select the directory where the project is located. ensure you choose the directory where the pom.xml is located:\n\nclick the "finish" button to complete the import of the maven project.\n\na standard maven project only requires the src directory and the pom.xml file.',charsets:{}},{title:"1.10 Development under JBolt plugin",frontmatter:{},regularPath:"/en/1%20Quick%20Start/1.10%20Development%20under%20JBolt%20plugin.html",relativePath:"en/1 Quick Start/1.10 Development under JBolt plugin.md",key:"v-04cf41ad",path:"/en/1%20Quick%20Start/1.10%20Development%20under%20JBolt%20plugin.html",lastUpdated:"9/22/2023, 9:39:45 AM",lastUpdatedTimestamp:1695375585e3,headersStr:null,content:"# 1.10 Development under JBolt plugin\n\nJBolt is an ultra-fast development IDE plugin specifically tailored for JFinal community developers in the Eclipse development environment, making it an essential tool for JFinal developers.\n\nJBolt official website: http://www.jbolt.cn\n\nAuthor: Shandong Xiaomu\n\nSupported Eclipse platform versions: Eclipse Java EE version 4.6.3+ (offline package version of Eclipse is recommended)\n\nCurrently, JBolt has been tested and is functional on Windows, Linux desktop versions, and Mac.\n\nInstallation and usage tutorial (video version): Click to watch the video tutorial\n\nInstallation and usage tutorial (illustrated version): http://www.jfinal.com/share/1052\n\nCapabilities of JBolt:\n\nOverall, JBolt provides the ability to visually configure a development environment, automatically import dependent libraries, auto-generate configuration files, and launch the generated project with a single click.\n\n 1.  Based on the configuration information from the project creation wizard, you can one-click generate a JFinal project development environment. This supports the generation of regular dynamic Web projects and Maven projects. It also automatically imports dependent jar packages, generates web.xml, database configuration files, the main jFinalConfig class, IndexController.java, route collection configuration class, server configuration information, and more.\n\n 2.  Supports configuration files and code generation for mainstream databases like MySQL, Oracle, SQL Server, H2, SQLite, PostgreSQL, etc.\n\n 3.  JBolt offers a JFinal Enjoy template editor that allows simultaneous editing of HTML, JS, CSS, and JFinal template codes with template directive prompts and auto-completion.\n\n 4.  JBolt offers a quick wizard to add JFinal Controller, Interceptor, Validator, Handler, and Model.\n\n 5.  After installing JBolt, a customized Eclipse view for JFinal is provided, optimizing the order and position of frequently used operations and menus for a cleaner and more convenient user experience.\n\n 6.  Provides automatic creation, import, and configuration file generation functions for server environments like JFinal-undertow and Jetty.\n\n 7.  Both regular and Maven projects based on JFinal Undertow can be packaged into a JFinal-customized deployment structure. Maven projects use the assembly plugin, while regular projects use the specialized JFinal Packaging Tool for one-click, second-level packaging.\n\n 8.  Integrated one-click generation of a JFinal-based demo tutorial project (in development).\n\n 9.  Wizard for one-click generation of backend development environments and configuration information for WeChat public accounts, enterprise accounts, and mini-programs (in development).\n\n 10. Features built-in BaseController and BaseService with encapsulated common methods, a built-in controller generation template, service generation template, and one-click CRUD and pagination functions (under development).\n\n 11. JBolt provides a set of easily customizable backend management systems, including dictionary, global configuration, WeChat public account management, permission management, user management, role management, login and registration, and more (80% developed).\n\nJBolt Screenshots:\n\nWizard for creating Maven projects:\n\nCommon configurations in JFinalConfig, route configurations, etc.:\n\nJFinal-Undertow Server configuration:\n\nDatabase configuration:\n\nAutomatic import configuration of commonly used third-party libraries:\n\nMore features are under development. If you have specific requirements, please contact us. If your needs are general, we will update them in JBolt. If they are specific, we can customize them for you.",normalizedContent:"# 1.10 development under jbolt plugin\n\njbolt is an ultra-fast development ide plugin specifically tailored for jfinal community developers in the eclipse development environment, making it an essential tool for jfinal developers.\n\njbolt official website: http://www.jbolt.cn\n\nauthor: shandong xiaomu\n\nsupported eclipse platform versions: eclipse java ee version 4.6.3+ (offline package version of eclipse is recommended)\n\ncurrently, jbolt has been tested and is functional on windows, linux desktop versions, and mac.\n\ninstallation and usage tutorial (video version): click to watch the video tutorial\n\ninstallation and usage tutorial (illustrated version): http://www.jfinal.com/share/1052\n\ncapabilities of jbolt:\n\noverall, jbolt provides the ability to visually configure a development environment, automatically import dependent libraries, auto-generate configuration files, and launch the generated project with a single click.\n\n 1.  based on the configuration information from the project creation wizard, you can one-click generate a jfinal project development environment. this supports the generation of regular dynamic web projects and maven projects. it also automatically imports dependent jar packages, generates web.xml, database configuration files, the main jfinalconfig class, indexcontroller.java, route collection configuration class, server configuration information, and more.\n\n 2.  supports configuration files and code generation for mainstream databases like mysql, oracle, sql server, h2, sqlite, postgresql, etc.\n\n 3.  jbolt offers a jfinal enjoy template editor that allows simultaneous editing of html, js, css, and jfinal template codes with template directive prompts and auto-completion.\n\n 4.  jbolt offers a quick wizard to add jfinal controller, interceptor, validator, handler, and model.\n\n 5.  after installing jbolt, a customized eclipse view for jfinal is provided, optimizing the order and position of frequently used operations and menus for a cleaner and more convenient user experience.\n\n 6.  provides automatic creation, import, and configuration file generation functions for server environments like jfinal-undertow and jetty.\n\n 7.  both regular and maven projects based on jfinal undertow can be packaged into a jfinal-customized deployment structure. maven projects use the assembly plugin, while regular projects use the specialized jfinal packaging tool for one-click, second-level packaging.\n\n 8.  integrated one-click generation of a jfinal-based demo tutorial project (in development).\n\n 9.  wizard for one-click generation of backend development environments and configuration information for wechat public accounts, enterprise accounts, and mini-programs (in development).\n\n 10. features built-in basecontroller and baseservice with encapsulated common methods, a built-in controller generation template, service generation template, and one-click crud and pagination functions (under development).\n\n 11. jbolt provides a set of easily customizable backend management systems, including dictionary, global configuration, wechat public account management, permission management, user management, role management, login and registration, and more (80% developed).\n\njbolt screenshots:\n\nwizard for creating maven projects:\n\ncommon configurations in jfinalconfig, route configurations, etc.:\n\njfinal-undertow server configuration:\n\ndatabase configuration:\n\nautomatic import configuration of commonly used third-party libraries:\n\nmore features are under development. if you have specific requirements, please contact us. if your needs are general, we will update them in jbolt. if they are specific, we can customize them for you.",charsets:{}},{title:"1.11 Special Statement",frontmatter:{},regularPath:"/en/1%20Quick%20Start/1.11%20Special%20Statement.html",relativePath:"en/1 Quick Start/1.11 Special Statement.md",key:"v-2d950c67",path:"/en/1%20Quick%20Start/1.11%20Special%20Statement.html",lastUpdated:"9/17/2023, 5:25:03 AM",lastUpdatedTimestamp:1694928303e3,headersStr:null,content:"# 1.11 Special Statement\n\nThe JFinal project is a standard project that adheres to the Java Web specifications. Thus, developers' existing knowledge about project initiation and deployment remains valid. There's no need to treat JFinal projects any differently.\n\nTherefore, all the startup and deployment methods introduced in this chapter pertain solely to the jfinal-undertow and jetty-server integrations provided by JFinal internally. If you encounter startup issues and are not using JFinal's integrated undertow or jetty, then the issue is not related to JFinal, and there's no need to refer to this chapter. Searching online for Java Web startup and deployment solutions should suffice.\n\nIf you choose not to use the undertow or jetty integrations provided by JFinal for startup, you can remove the relevant jar package dependencies. For Maven projects, you can also delete the relevant dependency configurations.\n\nLastly, if you don't deploy using jfinal undertow, then you need to change the packaging type in pom.xml to \"war\", otherwise, a jar package will be produced:\n\n<packaging>war</packaging>\n\n\n1\n\n\nAgain, this issue is not related to JFinal but is basic Maven knowledge.",normalizedContent:"# 1.11 special statement\n\nthe jfinal project is a standard project that adheres to the java web specifications. thus, developers' existing knowledge about project initiation and deployment remains valid. there's no need to treat jfinal projects any differently.\n\ntherefore, all the startup and deployment methods introduced in this chapter pertain solely to the jfinal-undertow and jetty-server integrations provided by jfinal internally. if you encounter startup issues and are not using jfinal's integrated undertow or jetty, then the issue is not related to jfinal, and there's no need to refer to this chapter. searching online for java web startup and deployment solutions should suffice.\n\nif you choose not to use the undertow or jetty integrations provided by jfinal for startup, you can remove the relevant jar package dependencies. for maven projects, you can also delete the relevant dependency configurations.\n\nlastly, if you don't deploy using jfinal undertow, then you need to change the packaging type in pom.xml to \"war\", otherwise, a jar package will be produced:\n\n<packaging>war</packaging>\n\n\n1\n\n\nagain, this issue is not related to jfinal but is basic maven knowledge.",charsets:{}},{title:"1.2 jfinal-undertow Development",frontmatter:{},regularPath:"/en/1%20Quick%20Start/1.2%20Development%20under%20jfinal-undertow.html",relativePath:"en/1 Quick Start/1.2 Development under jfinal-undertow.md",key:"v-1f6782f2",path:"/en/1%20Quick%20Start/1.2%20Development%20under%20jfinal-undertow.html",headers:[{level:3,title:"1. Create a standard Maven Project",slug:"_1-create-a-standard-maven-project",normalizedTitle:"1. create a standard maven project",charIndex:38},{level:3,title:"2. Add jfinal-undertow and jfinal dependencies",slug:"_2-add-jfinal-undertow-and-jfinal-dependencies",normalizedTitle:"2. add jfinal-undertow and jfinal dependencies",charIndex:810},{level:3,title:"3. Add a Java file",slug:"_3-add-a-java-file",normalizedTitle:"3. add a java file",charIndex:1487},{level:3,title:"4. Start the Project",slug:"_4-start-the-project",normalizedTitle:"4. start the project",charIndex:3288},{level:3,title:"5. Open the browser to see the effect",slug:"_5-open-the-browser-to-see-the-effect",normalizedTitle:"5. open the browser to see the effect",charIndex:3414}],lastUpdated:"9/22/2023, 9:39:45 AM",lastUpdatedTimestamp:1695375585e3,headersStr:"1. Create a standard Maven Project 2. Add jfinal-undertow and jfinal dependencies 3. Add a Java file 4. Start the Project 5. Open the browser to see the effect",content:'# 1.2 jfinal-undertow Development\n\n\n# 1. Create a standard Maven Project\n\nSelect "new" from the Eclipse main menu, then select "project".\n\n\nIn the pop-up window, select "Maven Project", click the "next" button to proceed.\n\n\nIn the next window, check "Use default Workspace location" and click "next".\n\n\nIn the next window, enter "webapp" in the Filter bar, select "org.apache.Maven.archetypes Maven-archetype-webapp 1.0", and click "next".\n\n\nIn the next window, enter the Group Id and Artifact Id, and click "finish" to complete the project creation.\n\n\nOnce created, the final directory structure is as follows:\n\n\nNote: In some older versions of Eclipse, after the project is created, the "java" directory might be missing under the main directory. If this happens, you can manually create this directory.\n\n\n# 2. Add jfinal-undertow and jfinal dependencies\n\nOpen the pom.xml file and add the following dependencies:\n\n<dependency>\n    <groupId>com.jfinal</groupId>\n    <artifactId>jfinal-undertow</artifactId>\n    <version>3.5</version>\n</dependency>\n<dependency>\n    <groupId>com.jfinal</groupId>\n    <artifactId>jfinal</artifactId>\n    <version>5.1.2</version>\n</dependency>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nIf you need WebSocket support, add another dependency; if you\'re not developing with WebSocket, you can ignore this.\n\n<dependency>\n    <groupId>io.undertow</groupId>\n    <artifactId>undertow-websockets-jsr</artifactId>\n    <version>2.2.24.Final</version>\n</dependency>\n\n\n1\n2\n3\n4\n5\n\n\n\n# 3. Add a Java file\n\nIn the project src/main/java directory, create a demo package and within the demo package, create a DemoConfig file.\n\npackage demo;\n\nimport com.jfinal.config.*;\nimport com.jfinal.template.Engine;\nimport com.jfinal.server.undertow.UndertowServer;\n\npublic class DemoConfig extends JFinalConfig {\n    /**\n     * Note: The main method for starting can be created in any Java class. It\'s placed in DemoConfig here just for demonstration.\n     * When developing the project, it\'s recommended to create a dedicated App.java or Start.java as the startup entry class to place the main method.\n     */\n    public static void main(String[] args) {\n        UndertowServer.start(DemoConfig.class, 80, true);\n    }\n    public void configConstant(Constants me) {\n        me.setDevMode(true);\n    }\n    public void configRoute(Routes me) {\n    // jfinal 4.9.03 version added route scanning feature, no need to manually add routes\n    // me.add("/hello", HelloController.class);\n    // Use route scanning, the parameter "demo." means only scanning routes under the demo package and its sub-packages\n        me.scan("demo.");\n    }\n    public void configEngine(Engine me) {}\n    public void configPlugin(Plugins me) {}\n    public void configInterceptor(Interceptors me) {}\n    public void configHandler(Handlers me) {}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\nIn the demo package, create the HelloController class file, the content is as follows:\n\npackage demo;\nimport com.jfinal.core.Controller;\n\n@Path("/hello")\npublic class HelloController extends Controller {\n    public void index() {\n        renderText("Hello JFinal World.");\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\njfinal 4.9.03 added a route scanning feature, for details please see: https://jfinal.com/doc/2-3\n\n\n# 4. Start the Project\n\nRight-click on the DemoConfig class file, select "Debug As", then select "Java Application" to run.\n\n\n# 5. Open the browser to see the effect\n\nOpen the browser and enter in the address bar: http://localhost/hello, the output content is "Hello JFinal World" indicating that the project framework has been set up.\n\nFor a complete demo example, you can download from the official JFinal website homepage on the right side: http://www.jfinal.com\n\nNote: jfinal-undertow does not support JSP by default. It is strongly recommended to use jfinal\'s default template engine, enjoy. Those who use it will find it pleasing. If you must use JSP, you can refer to the "JSP Support Issue" at the end of Chapter 1.5 of the documentation: https://jfinal.com/doc/1-5, or use jetty-server as the development environment: https://jfinal.com/doc/1-6',normalizedContent:'# 1.2 jfinal-undertow development\n\n\n# 1. create a standard maven project\n\nselect "new" from the eclipse main menu, then select "project".\n\n\nin the pop-up window, select "maven project", click the "next" button to proceed.\n\n\nin the next window, check "use default workspace location" and click "next".\n\n\nin the next window, enter "webapp" in the filter bar, select "org.apache.maven.archetypes maven-archetype-webapp 1.0", and click "next".\n\n\nin the next window, enter the group id and artifact id, and click "finish" to complete the project creation.\n\n\nonce created, the final directory structure is as follows:\n\n\nnote: in some older versions of eclipse, after the project is created, the "java" directory might be missing under the main directory. if this happens, you can manually create this directory.\n\n\n# 2. add jfinal-undertow and jfinal dependencies\n\nopen the pom.xml file and add the following dependencies:\n\n<dependency>\n    <groupid>com.jfinal</groupid>\n    <artifactid>jfinal-undertow</artifactid>\n    <version>3.5</version>\n</dependency>\n<dependency>\n    <groupid>com.jfinal</groupid>\n    <artifactid>jfinal</artifactid>\n    <version>5.1.2</version>\n</dependency>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nif you need websocket support, add another dependency; if you\'re not developing with websocket, you can ignore this.\n\n<dependency>\n    <groupid>io.undertow</groupid>\n    <artifactid>undertow-websockets-jsr</artifactid>\n    <version>2.2.24.final</version>\n</dependency>\n\n\n1\n2\n3\n4\n5\n\n\n\n# 3. add a java file\n\nin the project src/main/java directory, create a demo package and within the demo package, create a democonfig file.\n\npackage demo;\n\nimport com.jfinal.config.*;\nimport com.jfinal.template.engine;\nimport com.jfinal.server.undertow.undertowserver;\n\npublic class democonfig extends jfinalconfig {\n    /**\n     * note: the main method for starting can be created in any java class. it\'s placed in democonfig here just for demonstration.\n     * when developing the project, it\'s recommended to create a dedicated app.java or start.java as the startup entry class to place the main method.\n     */\n    public static void main(string[] args) {\n        undertowserver.start(democonfig.class, 80, true);\n    }\n    public void configconstant(constants me) {\n        me.setdevmode(true);\n    }\n    public void configroute(routes me) {\n    // jfinal 4.9.03 version added route scanning feature, no need to manually add routes\n    // me.add("/hello", hellocontroller.class);\n    // use route scanning, the parameter "demo." means only scanning routes under the demo package and its sub-packages\n        me.scan("demo.");\n    }\n    public void configengine(engine me) {}\n    public void configplugin(plugins me) {}\n    public void configinterceptor(interceptors me) {}\n    public void confighandler(handlers me) {}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\nin the demo package, create the hellocontroller class file, the content is as follows:\n\npackage demo;\nimport com.jfinal.core.controller;\n\n@path("/hello")\npublic class hellocontroller extends controller {\n    public void index() {\n        rendertext("hello jfinal world.");\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\njfinal 4.9.03 added a route scanning feature, for details please see: https://jfinal.com/doc/2-3\n\n\n# 4. start the project\n\nright-click on the democonfig class file, select "debug as", then select "java application" to run.\n\n\n# 5. open the browser to see the effect\n\nopen the browser and enter in the address bar: http://localhost/hello, the output content is "hello jfinal world" indicating that the project framework has been set up.\n\nfor a complete demo example, you can download from the official jfinal website homepage on the right side: http://www.jfinal.com\n\nnote: jfinal-undertow does not support jsp by default. it is strongly recommended to use jfinal\'s default template engine, enjoy. those who use it will find it pleasing. if you must use jsp, you can refer to the "jsp support issue" at the end of chapter 1.5 of the documentation: https://jfinal.com/doc/1-5, or use jetty-server as the development environment: https://jfinal.com/doc/1-6',charsets:{}},{title:"1.3 Deploying under jfinal-undertow",frontmatter:{},regularPath:"/en/1%20Quick%20Start/1.3%20Deployment%20under%20jfinal-undertow.html",relativePath:"en/1 Quick Start/1.3 Deployment under jfinal-undertow.md",key:"v-b82ecc38",path:"/en/1%20Quick%20Start/1.3%20Deployment%20under%20jfinal-undertow.html",headers:[{level:3,title:"1. Specify that the package is of type jar.",slug:"_1-specify-that-the-package-is-of-type-jar",normalizedTitle:"1. specify that the package is of type jar.",charIndex:42},{level:3,title:"2. Add the maven-jar-plugin plugin.",slug:"_2-add-the-maven-jar-plugin-plugin",normalizedTitle:"2. add the maven-jar-plugin plugin.",charIndex:471},{level:3,title:"3. Add the maven-assembly-plugin plugin",slug:"_3-add-the-maven-assembly-plugin-plugin",normalizedTitle:"3. add the maven-assembly-plugin plugin",charIndex:1567},{level:3,title:"4. Add the package.xml file.",slug:"_4-add-the-package-xml-file",normalizedTitle:"4. add the package.xml file.",charIndex:3424},{level:3,title:"5. Add the startup script to the root directory of your project.",slug:"_5-add-the-startup-script-to-the-root-directory-of-your-project",normalizedTitle:"5. add the startup script to the root directory of your project.",charIndex:6518},{level:3,title:"6. Packaging",slug:"_6-packaging",normalizedTitle:"6. packaging",charIndex:11405},{level:3,title:"7. Deployment",slug:"_7-deployment",normalizedTitle:"7. deployment",charIndex:13126},{level:3,title:"8. fatjar packaging and deployment",slug:"_8-fatjar-packaging-and-deployment",normalizedTitle:"8. fatjar packaging and deployment",charIndex:13425},{level:3,title:"9, the main advantages of jfinal-undertow",slug:"_9-the-main-advantages-of-jfinal-undertow",normalizedTitle:"9, the main advantages of jfinal-undertow",charIndex:14042}],lastUpdated:"9/17/2023, 5:25:03 AM",lastUpdatedTimestamp:1694928303e3,headersStr:"1. Specify that the package is of type jar. 2. Add the maven-jar-plugin plugin. 3. Add the maven-assembly-plugin plugin 4. Add the package.xml file. 5. Add the startup script to the root directory of your project. 6. Packaging 7. Deployment 8. fatjar packaging and deployment 9, the main advantages of jfinal-undertow",content:'# 1.3 Deploying under jfinal-undertow\n\n\n# 1. Specify that the package is of type jar.\n\nModify the pom.xml file and change the value of the packaging tag to jar.\n\n<packaging>jar</packaging\n\n\n1\n\n\nStrongly recommended: It is highly recommended to download jfinal_demo_for_maven.zip from the home page, from which you can get the pom.xml, package.xml, jfinal.sh and other configuration files and script files covered in this chapter. You can save a lot of learning cost.\n\n\n# 2. Add the maven-jar-plugin plugin.\n\n<! --\n\tConfiguration files in a jar package have higher priority than "files of the same name" in the config directory.\n\tTherefore, you need to exclude the configuration files from the src/main/resources directory in the jar package, or else the config directory will not be used when deploying.\n\tOtherwise, the configuration file with the same name in the config directory will not take effect when deployed.\n --\x3e\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-jar-plugin</artifactId\n    <version>2.6</version\n    <configuration\n        <excludes\n            <exclude>*.txt</exclude\n            <exclude>*.xml</exclude\n            <exclude>*.properties</exclude\n            <exclude>exclude_file_name_here</exclude\n            <exclude>exclude_path_here/</exclude\n        </excludes\n    </configuration\n</plugin\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\nmaven-jar-plugin is only to avoid typing the configuration file into a jar package, if it is typed into a fatjar package, you do not need to add this plugin.\n\n\n# 3. Add the maven-assembly-plugin plugin\n\nModify pom.xml and add the maven-assembly-plugin plugin under the plugins tag as follows\n\n<! -- \n    Use mvn clean package to package the assembly. \n    For more information, please refer to the official documentation at http://maven.apache.org/plugins/maven-assembly-plugin/single-mojo.html.\n--\x3e\n<plugin>\n  <groupId>org.apache.maven.plugins</groupId>\n  <artifactId>maven-assembly-plugin</artifactId\n  <version>3.1.0</version>\n  <executions\n    <execution>\n    <id>make-assembly</id>\n    <phase>package</phase\n    <goals\n      <goal>single</goal\n    </goals\n \n    <configuration\n      <! -- Name of the file generated by the package --\x3e\n      <finalName>${project.artifactId}</finalName\n      <! -- Whether compressed files such as jar are compressed when they are packaged into zip, tar.gz, set to false to speed up packaging --\x3e\n      <recompressZippedFiles>false</recompressZippedFiles\n      <! -- Whether to append the id value defined in release.xml to the generated files --\x3e <appendAssemblyId>false</recompressZippedFiles> <!\n      <appendAssemblyId>true</appendAssemblyId\n      <! -- Points to the package description file package.xml --\x3e\n      <descriptors\n        <descriptor>package.xml</descriptor>\n      </descriptors\n      <! -- Base directory for package output --\x3e\n      <outputDirectory>${project.build.directory}/</outputDirectory\n      </configuration\n      </execution\n    </executions\n</plugin\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n\nmaven-assembly-plugin is the official packaging plugin provided by maven, it is very functional and can be configured with many parameters for customized builds, for more detailed documentation refer to its official documentation: http://maven.apache.org/plugins/maven-assembly-plugin/ single-mojo.html\n\n\n# 4. Add the package.xml file.\n\nAdd package.xml file in the root directory of the project, which is the package description file specified in the descriptor tag of the above maven-assembly-plugin, with the following contents:\n\n<?xml version="1.0" encoding="UTF-8"? <?xml version="1.0" encoding="UTF-8"?\n<assembly xmlns="http://maven.apache.org/ASSEMBLY/2.0.0"\n    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n    xsi:schemaLocation="http://maven.apache.org/ASSEMBLY/2.0.0 http://maven.apache.org/xsd/assembly-2.0.0.xsd">\n\t\n  <! -- assembly \n    assembly Packaging Configuration For more configuration, please refer to the official documentation:\n    http://maven.apache.org/plugins/maven-assembly-plugin/assembly.html\n  --\x3e\n\t\n  <id>release</id>\n\t\n  <! --\n      Set the format of the package, you can set multiple formats at the same time, commonly used formats are: dir, zip, tar, tar.gz.\n      The dir format allows you to test the package locally.\n      zip format is easy to unpack and run under windows system.\n      tar, tar.gz format is easy to unpack under linux system.\n  --\x3e\n  <formats\n    <format>dir</format\n    <format>zip</format\n    <! -- <format>tar.gz</format> --\x3e\n  </formats\n \n  <! -- Setting true when hitting zip generates a root directory in the zip package, setting false when hitting dir lesser directories --\x3e\n  <includeBaseDirectory>true</includeBaseDirectory\n\t\n  <fileSets\n    <! -- src/main/resources all copied to config directory --\x3e\n    <fileSet>\n      <directory>${basedir}/src/main/resources</directory\n      <outputDirectory>config</outputDirectory\n    </fileSet\n\t\t\n    <! -- src/main/webapp copy all to webapp directory --\x3e\n    <fileSet>\n      <directory>${basedir}/src/main/webapp</directory>\n      <outputDirectory>webapp</outputDirectory\n    </fileSet\n \n    <! -- Copy the script files under the project root to the root directory --\x3e\n    <fileSet>\n      <directory>${basedir}</directory\n      <outputDirectory>. /</outputDirectory\n      <fileMode>755</fileMode\n      <lineEnding>unix</lineEnding\n      <includes\n        <include>*.sh</include\n      </includes\n    </fileSet\n    \n    <fileSet>\n      <directory>${basedir}</directory>\n      <outputDirectory>. /</outputDirectory\n      <fileMode>755</fileMode\n      <lineEnding>windows</lineEnding\n      <includes\n        <include>*.bat</include\n      </includes\n    </fileSet>\n    \n  </fileSets\t\n \n  <! -- copy dependent jar packages to lib directory --\x3e\n  <dependencySets>\n    <dependencySet\n      <outputDirectory>lib</outputDirectory\t\t\t\n    </dependencySet> <dependencySets> <dependencySet\n  </dependencySets\n\t\n</assembly\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n\n\nThe packaging description file is part of the maven-assembly-plugin. The description file makes it very easy to control the details of the packaging actions. For more detailed documentation, see http://maven.apache.org/plugins/maven-assembly-plugin/assembly. html\n\n\n# 5. Add the startup script to the root directory of your project.\n\nNote: The following scripts are provided in the jfinal demo for maven project downloaded from the right side of the jfinal official home page. Copy the jfinal.sh / jfinal.bat to your own project and modify the MAIN_CLASS variable, then you can put it into use.\n\nThe Linux startup script, jfinal.sh, looks like this:\n\n/bin/bash /bin/bash\n# --------------------------------------------------------------\n# /bin/bash #\n# Instructions for use:\n# 1: Before using this script, you need to change the MAIN_CLASS value to point to the actual startup class.\n# # 1: Before using this script, you need to modify the MAIN_CLASS value to point to the actual startup class.\n# 2: Use the command line . /jfinal.sh start | stop | restart to start/shutdown/restart the project.  \n# /jfinal.sh start | stop | restart\n# 3: JAVA_OPTS can be overridden by passing parameters like undertow.port and undertow.host via -D.\n# The same values in the config file can also be found in undertow.resourcePath, undertow.ioThreads, etc. # 4: JAVA_OPTS can be overridden by passing -D to undertow.port and undertow.host,\n# undertow.workerThreads can be passed in via -D, which minimizes the need to\n# The need to modify the undertow configuration file is minimized\n# This feature minimizes the need to # modify the undertow configuration file.\n# 4: JAVA_OPTS can be passed standard java command line arguments, such as -Xms256m -Xmx1024m and other common arguments.\n# 5: Function start()\n# 5: The start() function gives you 4 ways to start your project on the command line, follow the hints in the comments to choose the right one.\n#The function start() gives you 4 command lines to start your project.\n# --------------------------------------------------------------\n \n# Startup entry class, change here if this script file is used in another project.\nMAIN_CLASS=com.yourpackage.YourMainClass\n \nif [[ "$MAIN_CLASS" == "com.yourpackage.YourMainClass" ]]; then\n    echo "Please change the value of MAIN_CLASS to your own startup class before executing this script."\n\texit 0\nexit 0\n \nCOMMAND="$1"\n \nif [[ "$COMMAND" ! = "start" ]] && [[ "$COMMAND" ! = "stop" ]] && [[ "$COMMAND" ! = "restart" ]]; then\n\techo "Usage: $0 start | stop | restart"\n\texit 0\nexit 0\n \n \n# Java command line parameters, according to the need to open the following configuration, change to their own needs, pay attention to the equal sign before and after there can not be spaces\n# Java_OPTS="-Xms256m -Xmx1024m -Dundertow.port=80 -Dundertow.host=0.0.0.0"\n# JAVA_OPTS="-Dundertow.port=80 -Dundertow.host=0.0.0.0"\n \n# Generate the class path value\nAPP_BASE_PATH=$(cd `dirname $0`; pwd)\nCP=${APP_BASE_PATH}/config:${APP_BASE_PATH}/lib/*\n \nfunction start()\n{\n    # Run as a background process and output information on the console\n    java -Xverify:none ${JAVA_OPTS} -cp ${CP} ${MAIN_CLASS} &\n \n    # Run as a background process and do not output information on the console\n    # nohup java -Xverify:none ${JAVA_OPTS} -cp ${CP} ${MAIN_CLASS} >/dev/null 2>&1 &\n \n    # Run as a background process and output the information to the output.log file\n    # nohup java -Xverify:none ${JAVA_OPTS} -cp ${CP} ${MAIN_CLASS} > output.log &\n \n    # run as a non-background process, mostly used in development, shortcut ctrl + c to stop the service\n    # java -Xverify:none ${JAVA_OPTS} -cp ${CP} ${MAIN_CLASS}\n}\n \nfunction stop()\n{\n    # Support for clustered deployments\n    kill `pgrep -f ${APP_BASE_PATH}` 2>/dev/null\n    \n    # The kill command calls the onStop() method without the -9 parameter, so it is recommended to use the -9 parameter if you don\'t need it.\n    # kill `pgrep -f ${MAIN_CLASS}` 2>/dev/null\n \n    # The following code is equivalent to the above\n    # kill $(pgrep -f ${MAIN_CLASS}) 2>/dev/null\n}\n \nif [[ "$COMMAND" == "start" ]]; then\n\tstart\nelif [[ "$COMMAND" == "stop" ]]; then\n    stop\nstart elif [[ "$COMMAND" == "stop" ]]; then stop\n    stop\n    stop elif [[ "$COMMAND == "stop" ]]; then stop else\nstop\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n\n\nNote that you have to change the value of the MAIN_CLASS variable in the above content according to the project\'s entry class, and the same applies to the jfinal.bat script on Windows.\n\nStart the project with the command . /jfinal.sh start\n\nShut down the project: . /jfinal.sh stop\n\nRestart the project: . /jfinal.sh restart\n\nSpecial Note: When using the above command line, first use mvn clean package to package the project, and then use the cd command to jump to the directory of the package to execute the command. Instead of cd jumping to the root directory of the project, many people make this mistake. See the next subsection, "6. Packaging", for more information on packaging.\n\nFor the sake of space, I won\'t post the windows script here, you can download the jfinal demo on the right side of the homepage of the official website to get it. The latest version of the script can be downloaded here: https://gitee.com/jfinal/jfinal-undertow\n\nHow to use the windows script is as follows:\n\nStart project command: jfinal.bat start\n\nClose the project: jfinal.bat stop\n\nRestart the project: jfinal.bat restart\n\nNote: linux, mac under the script file line feed characters must be \'\\n\', while under windows must be "\\r\\n", otherwise the script can not be executed, and will output unintelligible error messages, difficult to troubleshoot. How to check the line break character in the script file is shown in the document: https://www.jfinal.com/doc/1-5\n\nHighly recommended: It is highly recommended to download jfinal_demo_for_maven.zip from the home page, from which you can get the configuration files and script files such as pom.xml, package.xml, jfinal.sh, and so on, which are covered in the above 5 subsections. Make sure you download the latest version.\n\n\n# 6. Packaging\n\nOpen the command line terminal, cd command to enter the root directory of the project, and run the following command to package the project.\n\nmvn clean package\n\n\n1\n\n\nAfter executing the above package command, the xxx.zip file will appear in the target directory under the project root, unzip the zip file with the command line . /jfinal.sh start to run it.\n\nIn addition to the zip file, a directory will be created under the target, use the command line . /jfinal.sh start to start the project. The contents of this directory are identical to the contents of the zip file.\n\n\n# 7. Deployment\n\nUpload the zip file generated by the above packing commands to the server and decompress it to complete the deployment work. The biggest advantage of developing a project based on jfinal-undertow is that you don\'t need to download, install, and configure a server such as tomcat.\n\n\n# 8. fatjar packaging and deployment\n\nfatjar packaging refers to the project of all classes, all resources and all jar package dependencies are packaged into a single jar package, packaged independent jar package can be easily copied, deployed, run, very suitable for microservices project development, but also very suitable for no web resources or very few web resources project!\n\nYou can download jfinal-demo-for-maven from the homepage of the official website, which has a document describing this method in detail under the doc directory, and will add the fatjar packaging method in the documentation channel.\n\n\n# 9, the main advantages of jfinal-undertow\n\n1: very fast startup, startup speed than tomcat 5 to 8 times faster. jfinal.com official website startup time within 1.5 seconds\n\n2: Undertow is an open source product of Red Hat and is Wildfly\'s default web server, with a Java web server market share higher than Jetty and second only to Tomcat.\n\n3: minimalist and subtle hot deployment design, to achieve extremely fast and lightweight hot deployment, so that the development experience to upgrade another level\n\n4: performance is higher than tomcat, jetty, can replace tomcat, jetty for production environments\n\n5: undertow for embedded and born , can be directly used for production environment deployment , deployment without downloading services , no need to configure services , very suitable for microservices development, deployment\n\n6: Say goodbye to web.xml, say goodbye to tomcat, say goodbye to jetty, save a lot of packaging and deployment time. Make development, packaging, deployment become a happy thing!\n\n7: feature-rich , support classHotSwap, WebSocket, gzip compression, servlet, filter, sessionHotSwap and other features .\n\n8: support fatjar and non-fatjar packaging mode, easy to support microservices\n\n9: development, packaging, deployment integration , the whole process does not need to adjust or modify any part of the project , the real realization of high-speed development from the high-speed deployment .',normalizedContent:'# 1.3 deploying under jfinal-undertow\n\n\n# 1. specify that the package is of type jar.\n\nmodify the pom.xml file and change the value of the packaging tag to jar.\n\n<packaging>jar</packaging\n\n\n1\n\n\nstrongly recommended: it is highly recommended to download jfinal_demo_for_maven.zip from the home page, from which you can get the pom.xml, package.xml, jfinal.sh and other configuration files and script files covered in this chapter. you can save a lot of learning cost.\n\n\n# 2. add the maven-jar-plugin plugin.\n\n<! --\n\tconfiguration files in a jar package have higher priority than "files of the same name" in the config directory.\n\ttherefore, you need to exclude the configuration files from the src/main/resources directory in the jar package, or else the config directory will not be used when deploying.\n\totherwise, the configuration file with the same name in the config directory will not take effect when deployed.\n --\x3e\n<plugin>\n    <groupid>org.apache.maven.plugins</groupid>\n    <artifactid>maven-jar-plugin</artifactid\n    <version>2.6</version\n    <configuration\n        <excludes\n            <exclude>*.txt</exclude\n            <exclude>*.xml</exclude\n            <exclude>*.properties</exclude\n            <exclude>exclude_file_name_here</exclude\n            <exclude>exclude_path_here/</exclude\n        </excludes\n    </configuration\n</plugin\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\nmaven-jar-plugin is only to avoid typing the configuration file into a jar package, if it is typed into a fatjar package, you do not need to add this plugin.\n\n\n# 3. add the maven-assembly-plugin plugin\n\nmodify pom.xml and add the maven-assembly-plugin plugin under the plugins tag as follows\n\n<! -- \n    use mvn clean package to package the assembly. \n    for more information, please refer to the official documentation at http://maven.apache.org/plugins/maven-assembly-plugin/single-mojo.html.\n--\x3e\n<plugin>\n  <groupid>org.apache.maven.plugins</groupid>\n  <artifactid>maven-assembly-plugin</artifactid\n  <version>3.1.0</version>\n  <executions\n    <execution>\n    <id>make-assembly</id>\n    <phase>package</phase\n    <goals\n      <goal>single</goal\n    </goals\n \n    <configuration\n      <! -- name of the file generated by the package --\x3e\n      <finalname>${project.artifactid}</finalname\n      <! -- whether compressed files such as jar are compressed when they are packaged into zip, tar.gz, set to false to speed up packaging --\x3e\n      <recompresszippedfiles>false</recompresszippedfiles\n      <! -- whether to append the id value defined in release.xml to the generated files --\x3e <appendassemblyid>false</recompresszippedfiles> <!\n      <appendassemblyid>true</appendassemblyid\n      <! -- points to the package description file package.xml --\x3e\n      <descriptors\n        <descriptor>package.xml</descriptor>\n      </descriptors\n      <! -- base directory for package output --\x3e\n      <outputdirectory>${project.build.directory}/</outputdirectory\n      </configuration\n      </execution\n    </executions\n</plugin\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n\nmaven-assembly-plugin is the official packaging plugin provided by maven, it is very functional and can be configured with many parameters for customized builds, for more detailed documentation refer to its official documentation: http://maven.apache.org/plugins/maven-assembly-plugin/ single-mojo.html\n\n\n# 4. add the package.xml file.\n\nadd package.xml file in the root directory of the project, which is the package description file specified in the descriptor tag of the above maven-assembly-plugin, with the following contents:\n\n<?xml version="1.0" encoding="utf-8"? <?xml version="1.0" encoding="utf-8"?\n<assembly xmlns="http://maven.apache.org/assembly/2.0.0"\n    xmlns:xsi="http://www.w3.org/2001/xmlschema-instance"\n    xsi:schemalocation="http://maven.apache.org/assembly/2.0.0 http://maven.apache.org/xsd/assembly-2.0.0.xsd">\n\t\n  <! -- assembly \n    assembly packaging configuration for more configuration, please refer to the official documentation:\n    http://maven.apache.org/plugins/maven-assembly-plugin/assembly.html\n  --\x3e\n\t\n  <id>release</id>\n\t\n  <! --\n      set the format of the package, you can set multiple formats at the same time, commonly used formats are: dir, zip, tar, tar.gz.\n      the dir format allows you to test the package locally.\n      zip format is easy to unpack and run under windows system.\n      tar, tar.gz format is easy to unpack under linux system.\n  --\x3e\n  <formats\n    <format>dir</format\n    <format>zip</format\n    <! -- <format>tar.gz</format> --\x3e\n  </formats\n \n  <! -- setting true when hitting zip generates a root directory in the zip package, setting false when hitting dir lesser directories --\x3e\n  <includebasedirectory>true</includebasedirectory\n\t\n  <filesets\n    <! -- src/main/resources all copied to config directory --\x3e\n    <fileset>\n      <directory>${basedir}/src/main/resources</directory\n      <outputdirectory>config</outputdirectory\n    </fileset\n\t\t\n    <! -- src/main/webapp copy all to webapp directory --\x3e\n    <fileset>\n      <directory>${basedir}/src/main/webapp</directory>\n      <outputdirectory>webapp</outputdirectory\n    </fileset\n \n    <! -- copy the script files under the project root to the root directory --\x3e\n    <fileset>\n      <directory>${basedir}</directory\n      <outputdirectory>. /</outputdirectory\n      <filemode>755</filemode\n      <lineending>unix</lineending\n      <includes\n        <include>*.sh</include\n      </includes\n    </fileset\n    \n    <fileset>\n      <directory>${basedir}</directory>\n      <outputdirectory>. /</outputdirectory\n      <filemode>755</filemode\n      <lineending>windows</lineending\n      <includes\n        <include>*.bat</include\n      </includes\n    </fileset>\n    \n  </filesets\t\n \n  <! -- copy dependent jar packages to lib directory --\x3e\n  <dependencysets>\n    <dependencyset\n      <outputdirectory>lib</outputdirectory\t\t\t\n    </dependencyset> <dependencysets> <dependencyset\n  </dependencysets\n\t\n</assembly\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n\n\nthe packaging description file is part of the maven-assembly-plugin. the description file makes it very easy to control the details of the packaging actions. for more detailed documentation, see http://maven.apache.org/plugins/maven-assembly-plugin/assembly. html\n\n\n# 5. add the startup script to the root directory of your project.\n\nnote: the following scripts are provided in the jfinal demo for maven project downloaded from the right side of the jfinal official home page. copy the jfinal.sh / jfinal.bat to your own project and modify the main_class variable, then you can put it into use.\n\nthe linux startup script, jfinal.sh, looks like this:\n\n/bin/bash /bin/bash\n# --------------------------------------------------------------\n# /bin/bash #\n# instructions for use:\n# 1: before using this script, you need to change the main_class value to point to the actual startup class.\n# # 1: before using this script, you need to modify the main_class value to point to the actual startup class.\n# 2: use the command line . /jfinal.sh start | stop | restart to start/shutdown/restart the project.  \n# /jfinal.sh start | stop | restart\n# 3: java_opts can be overridden by passing parameters like undertow.port and undertow.host via -d.\n# the same values in the config file can also be found in undertow.resourcepath, undertow.iothreads, etc. # 4: java_opts can be overridden by passing -d to undertow.port and undertow.host,\n# undertow.workerthreads can be passed in via -d, which minimizes the need to\n# the need to modify the undertow configuration file is minimized\n# this feature minimizes the need to # modify the undertow configuration file.\n# 4: java_opts can be passed standard java command line arguments, such as -xms256m -xmx1024m and other common arguments.\n# 5: function start()\n# 5: the start() function gives you 4 ways to start your project on the command line, follow the hints in the comments to choose the right one.\n#the function start() gives you 4 command lines to start your project.\n# --------------------------------------------------------------\n \n# startup entry class, change here if this script file is used in another project.\nmain_class=com.yourpackage.yourmainclass\n \nif [[ "$main_class" == "com.yourpackage.yourmainclass" ]]; then\n    echo "please change the value of main_class to your own startup class before executing this script."\n\texit 0\nexit 0\n \ncommand="$1"\n \nif [[ "$command" ! = "start" ]] && [[ "$command" ! = "stop" ]] && [[ "$command" ! = "restart" ]]; then\n\techo "usage: $0 start | stop | restart"\n\texit 0\nexit 0\n \n \n# java command line parameters, according to the need to open the following configuration, change to their own needs, pay attention to the equal sign before and after there can not be spaces\n# java_opts="-xms256m -xmx1024m -dundertow.port=80 -dundertow.host=0.0.0.0"\n# java_opts="-dundertow.port=80 -dundertow.host=0.0.0.0"\n \n# generate the class path value\napp_base_path=$(cd `dirname $0`; pwd)\ncp=${app_base_path}/config:${app_base_path}/lib/*\n \nfunction start()\n{\n    # run as a background process and output information on the console\n    java -xverify:none ${java_opts} -cp ${cp} ${main_class} &\n \n    # run as a background process and do not output information on the console\n    # nohup java -xverify:none ${java_opts} -cp ${cp} ${main_class} >/dev/null 2>&1 &\n \n    # run as a background process and output the information to the output.log file\n    # nohup java -xverify:none ${java_opts} -cp ${cp} ${main_class} > output.log &\n \n    # run as a non-background process, mostly used in development, shortcut ctrl + c to stop the service\n    # java -xverify:none ${java_opts} -cp ${cp} ${main_class}\n}\n \nfunction stop()\n{\n    # support for clustered deployments\n    kill `pgrep -f ${app_base_path}` 2>/dev/null\n    \n    # the kill command calls the onstop() method without the -9 parameter, so it is recommended to use the -9 parameter if you don\'t need it.\n    # kill `pgrep -f ${main_class}` 2>/dev/null\n \n    # the following code is equivalent to the above\n    # kill $(pgrep -f ${main_class}) 2>/dev/null\n}\n \nif [[ "$command" == "start" ]]; then\n\tstart\nelif [[ "$command" == "stop" ]]; then\n    stop\nstart elif [[ "$command" == "stop" ]]; then stop\n    stop\n    stop elif [[ "$command == "stop" ]]; then stop else\nstop\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n\n\nnote that you have to change the value of the main_class variable in the above content according to the project\'s entry class, and the same applies to the jfinal.bat script on windows.\n\nstart the project with the command . /jfinal.sh start\n\nshut down the project: . /jfinal.sh stop\n\nrestart the project: . /jfinal.sh restart\n\nspecial note: when using the above command line, first use mvn clean package to package the project, and then use the cd command to jump to the directory of the package to execute the command. instead of cd jumping to the root directory of the project, many people make this mistake. see the next subsection, "6. packaging", for more information on packaging.\n\nfor the sake of space, i won\'t post the windows script here, you can download the jfinal demo on the right side of the homepage of the official website to get it. the latest version of the script can be downloaded here: https://gitee.com/jfinal/jfinal-undertow\n\nhow to use the windows script is as follows:\n\nstart project command: jfinal.bat start\n\nclose the project: jfinal.bat stop\n\nrestart the project: jfinal.bat restart\n\nnote: linux, mac under the script file line feed characters must be \'\\n\', while under windows must be "\\r\\n", otherwise the script can not be executed, and will output unintelligible error messages, difficult to troubleshoot. how to check the line break character in the script file is shown in the document: https://www.jfinal.com/doc/1-5\n\nhighly recommended: it is highly recommended to download jfinal_demo_for_maven.zip from the home page, from which you can get the configuration files and script files such as pom.xml, package.xml, jfinal.sh, and so on, which are covered in the above 5 subsections. make sure you download the latest version.\n\n\n# 6. packaging\n\nopen the command line terminal, cd command to enter the root directory of the project, and run the following command to package the project.\n\nmvn clean package\n\n\n1\n\n\nafter executing the above package command, the xxx.zip file will appear in the target directory under the project root, unzip the zip file with the command line . /jfinal.sh start to run it.\n\nin addition to the zip file, a directory will be created under the target, use the command line . /jfinal.sh start to start the project. the contents of this directory are identical to the contents of the zip file.\n\n\n# 7. deployment\n\nupload the zip file generated by the above packing commands to the server and decompress it to complete the deployment work. the biggest advantage of developing a project based on jfinal-undertow is that you don\'t need to download, install, and configure a server such as tomcat.\n\n\n# 8. fatjar packaging and deployment\n\nfatjar packaging refers to the project of all classes, all resources and all jar package dependencies are packaged into a single jar package, packaged independent jar package can be easily copied, deployed, run, very suitable for microservices project development, but also very suitable for no web resources or very few web resources project!\n\nyou can download jfinal-demo-for-maven from the homepage of the official website, which has a document describing this method in detail under the doc directory, and will add the fatjar packaging method in the documentation channel.\n\n\n# 9, the main advantages of jfinal-undertow\n\n1: very fast startup, startup speed than tomcat 5 to 8 times faster. jfinal.com official website startup time within 1.5 seconds\n\n2: undertow is an open source product of red hat and is wildfly\'s default web server, with a java web server market share higher than jetty and second only to tomcat.\n\n3: minimalist and subtle hot deployment design, to achieve extremely fast and lightweight hot deployment, so that the development experience to upgrade another level\n\n4: performance is higher than tomcat, jetty, can replace tomcat, jetty for production environments\n\n5: undertow for embedded and born , can be directly used for production environment deployment , deployment without downloading services , no need to configure services , very suitable for microservices development, deployment\n\n6: say goodbye to web.xml, say goodbye to tomcat, say goodbye to jetty, save a lot of packaging and deployment time. make development, packaging, deployment become a happy thing!\n\n7: feature-rich , support classhotswap, websocket, gzip compression, servlet, filter, sessionhotswap and other features .\n\n8: support fatjar and non-fatjar packaging mode, easy to support microservices\n\n9: development, packaging, deployment integration , the whole process does not need to adjust or modify any part of the project , the real realization of high-speed development from the high-speed deployment .',charsets:{cjk:!0}},{title:"1.4 Advanced Usage of jfinal-undertow",frontmatter:{},regularPath:"/en/1%20Quick%20Start/1.4%20Advanced%20usage%20of%20jfinal-undertow.html",relativePath:"en/1 Quick Start/1.4 Advanced usage of jfinal-undertow.md",key:"v-76ff6023",path:"/en/1%20Quick%20Start/1.4%20Advanced%20usage%20of%20jfinal-undertow.html",headers:[{level:2,title:"I. Basic Configuration",slug:"i-basic-configuration",normalizedTitle:"i. basic configuration",charIndex:44},{level:3,title:"1. Enable Configuration File",slug:"_1-enable-configuration-file",normalizedTitle:"1. enable configuration file",charIndex:71},{level:3,title:"2. Common Configurations",slug:"_2-common-configurations",normalizedTitle:"2. common configurations",charIndex:572},{level:3,title:"3. Web Resource Load Path Configuration",slug:"_3-web-resource-load-path-configuration",normalizedTitle:"3. web resource load path configuration",charIndex:1284},{level:3,title:"4. Performance Configuration",slug:"_4-performance-configuration",normalizedTitle:"4. performance configuration",charIndex:2740},{level:3,title:"5. Enable gzip Compression",slug:"_5-enable-gzip-compression",normalizedTitle:"5. enable gzip compression",charIndex:3639},{level:3,title:"6. Session Configuration",slug:"_6-session-configuration",normalizedTitle:"6. session configuration",charIndex:4059},{level:3,title:"7. HTTPS Configuration",slug:"_7-https-configuration",normalizedTitle:"7. https configuration",charIndex:4369},{level:3,title:"8. HTTP2 Configuration",slug:"_8-http2-configuration",normalizedTitle:"8. http2 configuration",charIndex:4897},{level:3,title:"9. Redirecting HTTP to HTTPS",slug:"_9-redirecting-http-to-https",normalizedTitle:"9. redirecting http to https",charIndex:5217},{level:3,title:"10. Disable HTTP",slug:"_10-disable-http",normalizedTitle:"10. disable http",charIndex:5495},{level:3,title:"11. Freely Configure Undertow",slug:"_11-freely-configure-undertow",normalizedTitle:"11. freely configure undertow",charIndex:5881},{level:3,title:"12. Add Filter, WebSocket, Servlet, Listener",slug:"_12-add-filter-websocket-servlet-listener",normalizedTitle:"12. add filter, websocket, servlet, listener",charIndex:6615},{level:2,title:"II. SSL Certificates",slug:"ii-ssl-certificates",normalizedTitle:"ii. ssl certificates",charIndex:9485},{level:3,title:"1. Apply for an SSL Certificate",slug:"_1-apply-for-an-ssl-certificate",normalizedTitle:"1. apply for an ssl certificate",charIndex:9510},{level:3,title:"2. Download the Appropriate Certificate Type",slug:"_2-download-the-appropriate-certificate-type",normalizedTitle:"2. download the appropriate certificate type",charIndex:9924},{level:3,title:"3. Launch the Project",slug:"_3-launch-the-project",normalizedTitle:"3. launch the project",charIndex:11239},{level:2,title:"III. Two-Way SSL Authentication",slug:"iii-two-way-ssl-authentication",normalizedTitle:"iii. two-way ssl authentication",charIndex:11368}],lastUpdated:"9/17/2023, 5:25:03 AM",lastUpdatedTimestamp:1694928303e3,headersStr:"I. Basic Configuration 1. Enable Configuration File 2. Common Configurations 3. Web Resource Load Path Configuration 4. Performance Configuration 5. Enable gzip Compression 6. Session Configuration 7. HTTPS Configuration 8. HTTP2 Configuration 9. Redirecting HTTP to HTTPS 10. Disable HTTP 11. Freely Configure Undertow 12. Add Filter, WebSocket, Servlet, Listener II. SSL Certificates 1. Apply for an SSL Certificate 2. Download the Appropriate Certificate Type 3. Launch the Project III. Two-Way SSL Authentication",content:'# 1.4 Advanced Usage of jfinal-undertow\n\n\n# I. Basic Configuration\n\n\n# 1. Enable Configuration File\n\nCreate an undertow.txt file in the src/main/resources directory. This file will be automatically loaded by jfinal undertow and configure it.\n\nIf you prefer not to use the filename "undertow.txt", you can specify your desired filename by passing it as the second parameter of the UndertowServer.create(AppConfig.class, "other.txt") method.\n\nOnce the configuration file is created, you can refer to the following documentation to set up the respective functionalities.\n\n\n# 2. Common Configurations\n\n# \'true\' enables hot reloading\nundertow.devMode=true\nundertow.port=80\nundertow.host=0.0.0.0\n \n# In most cases, it\'s not recommended to set the context path\nundertow.contextPath=/abc\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nSet to \'true\' during development to enable hot reloading. Note that this devMode is unrelated to the devMode in the jfinal project. Please differentiate between them.\n\nImportant: The default value for the older version of undertow.host is localhost. Due to security settings on Linux, projects deployed under localhost may not be accessible from the public internet. Adjust the setting to undertow.host=0.0.0.0. If you\'re using nginx as a proxy, you can keep the localhost setting.\n\n\n# 3. Web Resource Load Path Configuration\n\njfinal undertow can easily load web static resources from the file system directory, class path, or jar packages. Here\'s a configuration example:\n\nundertow.resourcePath = src/main/webapp, classpath:static\n\n\n1\n\n\nAs shown above, "src/main/webapp" indicates loading web static resources from the "src/main/webapp" directory in the project root. "classpath:static" signifies loading web static resources from the static path in the class path or jar packages.\n\nNote: The configuration "classpath:static" was added in jfinal undertow 1.5.\n\nAnother key point about undertow.resourcePath is that configurations prefixed with "classpath:" require manual validation of the existence of the path. It\'s preferable to only specify existing paths. Configurations without the "classpath:" prefix can have both the development and deployment paths configured (separated by commas). jfinal undertow will check the existence of paths at runtime and only activate them if they exist. This is convenient for a one-time configuration suitable for both development and production environments.\n\nImportant: PathKit.getWebRootPath() will point to the first valid directory in the undertow.resourcePath configuration. The engine object in the configEngine(Engine engine) method has already been set by default to engine.setBaseTemplatePath(PathKit.getWebRootPath()). So, this configuration is related to the engine\'s baseTemplatePath.\n\n\n# 4. Performance Configuration\n\n# Number of io threads and worker threads\n# undertow.ioThreads=\n# undertow.workerThreads=\n\n\n1\n2\n3\n\n\nThe default configuration has been optimized for common use cases. Without performance test data as guidance, it\'s recommended to stick to the default settings and avoid adding these configurations.\n\nioThreads represents the number of NIO threads handling io requests. In a production environment, it\'s suggested to set this between one to two times the number of CPU cores. Adjustments should be based on performance test results.\n\nworkerThreads denotes the number of threads processing requests. In production, the default setting can be used, or adjustments can be made based on performance tests. When performance reaches a certain level, increasing the value of workThreads won\'t lead to performance improvements but will increase system resource consumption.\n\n\n# 5. Enable gzip Compression\n\n# gzip compression switch\nundertow.gzip.enable=true\n# Set compression level, default is -1. Can be set between 1 and 9. 1 has the fastest compression speed, 9 has the highest compression rate.\nundertow.gzip.level=-1\n# Minimum content length to trigger compression\nundertow.gzip.minLength=1024\n\n\n1\n2\n3\n4\n5\n6\n\n\nEnabling gzip compression can reduce network traffic and improve access speed.\n\n\n# 6. Session Configuration\n\n# Session expiration time, note the unit is in seconds.\nundertow.session.timeout=1800\n# Support session hot reloading to avoid repeated logins for projects dependent on sessions. Default is true. Only for devMode, no impact in production.\nundertow.session.hotSwap=true\n\n\n1\n2\n3\n4\n\n\n\n# 7. HTTPS Configuration\n\n# Whether to enable ssl\nundertow.ssl.enable=false\n# ssl listening port, set to 443 in a production environment\nundertow.ssl.port=443\n# Keystore type, recommended to use PKCS12\nundertow.ssl.keyStoreType=PKCS12\n# Keystore file\nundertow.ssl.keyStore=demo.pfx\n# Keystore password\nundertow.ssl.keyStorePassword=123456\n# Alias configuration, generally not used\nundertow.ssl.keyAlias=demo\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nInstructions on obtaining an SSL certificate can be found in the following subsection.\n\n\n# 8. HTTP2 Configuration\n\n# Whether to enable http2 when ssl is on. To check if this configuration is active, enter in the Chrome address bar: chrome://net-internals/#http2\nundertow.http2.enable=true\n\n\n1\n2\n\n\nEnabling http2 can significantly speed up access. You don\'t need to worry about https being slower than http.\n\n\n# 9. Redirecting HTTP to HTTPS\n\n# When ssl is enabled, should http requests redirect to https?\nundertow.http.toHttps=false\n# When ssl is enabled, the status code used for redirecting http requests to https. Default value is 302.\nundertow.http.toHttpsStatusCode=302\n\n\n1\n2\n3\n4\n\n\n\n# 10. Disable HTTP\n\n# Whether to disable http when ssl is on\nundertow.http.disable=false\n\n\n1\n2\n\n\nAfter enabling https, you can configure to disable http, so only https can be accessed. This configuration is suitable for mini-program servers.\n\nFor general web projects, it\'s not recommended to use this configuration. Instead, set undertow.http.toHttps=true to redirect http to https.\n\n\n# 11. Freely Configure Undertow\n\nThe above configurations are directly supported by jfinal undertow. If these configurations don\'t meet your requirements, you can freely configure undertow as follows:\n\nUndertowServer.create(YourJFinalConfig.class)\n    .onStart( builder -> {\n        builder.setServerOption(UndertowOptions.PARAMETER_NAME, PARAMETER_VALUE);\t\n     })\n    .start();\n\n\n1\n2\n3\n4\n5\n\n\nAs shown above, using the onStart method and calling builder.setServerOption(...) allows for deeper configuration of undertow. You can also call other APIs in the builder for different types of configurations. UndertowOptions defines many undertow configuration names. Check its documentation comments to find many useful configurations.\n\n\n# 12. Add Filter, WebSocket, Servlet, Listener\n\nIt\'s crucial to note that Undertow is a web server designed for embedding, so the web.xml has been deprecated, meaning you can\'t configure web components through web.xml.\n\nTo address this, jfinal undertow provides UndertowServer.configWeb(...) which allows you to easily add standard Java Web components such as Filter, WebSocket, Servlet, and Listener:\n\nUndertowServer.create(AppConfig.class)\n     .configWeb( builder -> {\n         // Configure Filter\n         builder.addFilter("myFilter", "com.abc.MyFilter");\n         builder.addFilterUrlMapping("myFilter", "/*");\n         builder.addFilterInitParam("myFilter", "key", "value");\n         \n         // Configure Servlet\n         builder.addServlet("myServlet", "com.abc.MyServlet");\n         builder.addServletMapping("myServlet", "*.do");\n         builder.addServletInitParam("myServlet", "key", "value");\n         \n         // Configure Listener\n         builder.addListener("com.abc.MyListener");\n         \n         // Configure WebSocket. MyWebSocket should use the ServerEndpoint annotation\n         builder.addWebSocketEndpoint("com.abc.MyWebSocket");\n      })\n     .start();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\nNote: The JFinalFilter will take over all requests. Thus, servlets mapped in addServletMapping(...) in the above code by default cannot be accessed. You need to configure the UrlSkipHandler in the configHandler(Handlers me) to let jfinal skip these servlet URLs.\n\nThe MyWebSocket in the above code should be annotated with ServerEndpoint to indicate that it\'s a WebSocket component, like:\n\n@ServerEndpoint("/myapp.ws")\npublic class MyWebSocket { \n    @OnMessage\n    public void message(String message, Session session) {\n        for (Session s : session.getOpenSessions()) {\n            s.getAsyncRemote().sendText(message);\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nAn example HTML that works with the above MyWebSocket can be downloaded from the link provided (not accessible in this context). Community members have also shared complete WebSocket code here.\n\nYou need to adjust the URL in the HTML to: "ws://localhost:80/myapp.ws", changing the port number as appropriate.\n\nNote: Since JFinalFilter takes over all URL requests that don\'t have a "." character, it\'s suggested that the URL parameter value in the @ServerEndpoint annotation should end with ".ws". Otherwise, you\'ll receive a 404 error, indicating the resource is not found, like:\n\n@ServerEndpoint("/myapp.ws")\npublic class MyWebSocketEndpoint  {\n    ......\n}\n\n\n1\n2\n3\n4\n\n\nAlternatively, if the URL in the ServerEndpoint doesn\'t end with ".ws", you can refer to jfinal\'s UrlSkipHandler and implement a Handler to skip WebSocket URLs.\n\nLastly, WebSocket support requires adding a dependency. The dependencies to be added can be found in the earlier documentation: link.\n\n\n# II. SSL Certificates\n\n\n# 1. Apply for an SSL Certificate\n\nIt\'s recommended to obtain SSL certificates from platforms like Alibaba Cloud or Tencent Cloud. Both free and paid versions are available. For obtaining an SSL certificate from Alibaba Cloud, refer to the provided link (not accessible in this context).\n\nNote: When applying for a free SSL certificate, the bound domain generally uses a hostname like www, e.g., www.jfinal.com.\n\n\n# 2. Download the Appropriate Certificate Type\n\nOnce the SSL certificate has been approved, you can download it from the control panel as shown in the provided screenshot (not accessible in this context).\n\nAfter clicking the download link, download the Tomcat type of SSL certificate as shown in the second screenshot.\n\nWithin the downloaded certificate, there\'s a file named xxx.pfx, which is the certificate file. Additionally, there\'s a pfx-password.txt file containing the certificate password. Place the xxx.pfx file in the project\'s src/main/resources directory and add the following lines to the undertow.txt configuration file:\n\n# Enable ssl\nundertow.ssl.enable=true\n# ssl listening port, set to 443 in production\nundertow.ssl.port=443\n# Keystore type, typically either PKCS12 or JKS. Adjust based on actual type.\nundertow.ssl.keyStoreType=PKCS12\n# Keystore file\nundertow.ssl.keyStore=demo.pfx\n# Keystore password\nundertow.ssl.keyStorePassword=123456\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nThe "demo.pfx" in the configuration is the filename of the previously downloaded certificate, and "123456" is the certificate password. Adjust these settings based on the actual contents of your download. "PKCS12" is the certificate type; Alibaba Cloud\'s Tomcat type certificate uses PKCS12, while Tencent Cloud might use "JKS".\n\n\n# 3. Launch the Project\n\nStart the project and access it via the domain bound when applying for the certificate using "https".\n\n\n# III. Two-Way SSL Authentication\n\nIf your jfinal undertow project needs to authenticate clients using SSL, configure it as follows:\n\nUndertowServer.create(YourJFinalConfig.class)\n  .onStart( builder -> {\n    builder.setSocketOption(Options.SSL_CLIENT_AUTH_MODE, SslClientAuthMode.REQUESTED);\n  })\n  .start();\n\n\n1\n2\n3\n4\n5\n\n\nThis method was shared by community users at the provided link https://jfinal.com/feedback/7758.',normalizedContent:'# 1.4 advanced usage of jfinal-undertow\n\n\n# i. basic configuration\n\n\n# 1. enable configuration file\n\ncreate an undertow.txt file in the src/main/resources directory. this file will be automatically loaded by jfinal undertow and configure it.\n\nif you prefer not to use the filename "undertow.txt", you can specify your desired filename by passing it as the second parameter of the undertowserver.create(appconfig.class, "other.txt") method.\n\nonce the configuration file is created, you can refer to the following documentation to set up the respective functionalities.\n\n\n# 2. common configurations\n\n# \'true\' enables hot reloading\nundertow.devmode=true\nundertow.port=80\nundertow.host=0.0.0.0\n \n# in most cases, it\'s not recommended to set the context path\nundertow.contextpath=/abc\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nset to \'true\' during development to enable hot reloading. note that this devmode is unrelated to the devmode in the jfinal project. please differentiate between them.\n\nimportant: the default value for the older version of undertow.host is localhost. due to security settings on linux, projects deployed under localhost may not be accessible from the public internet. adjust the setting to undertow.host=0.0.0.0. if you\'re using nginx as a proxy, you can keep the localhost setting.\n\n\n# 3. web resource load path configuration\n\njfinal undertow can easily load web static resources from the file system directory, class path, or jar packages. here\'s a configuration example:\n\nundertow.resourcepath = src/main/webapp, classpath:static\n\n\n1\n\n\nas shown above, "src/main/webapp" indicates loading web static resources from the "src/main/webapp" directory in the project root. "classpath:static" signifies loading web static resources from the static path in the class path or jar packages.\n\nnote: the configuration "classpath:static" was added in jfinal undertow 1.5.\n\nanother key point about undertow.resourcepath is that configurations prefixed with "classpath:" require manual validation of the existence of the path. it\'s preferable to only specify existing paths. configurations without the "classpath:" prefix can have both the development and deployment paths configured (separated by commas). jfinal undertow will check the existence of paths at runtime and only activate them if they exist. this is convenient for a one-time configuration suitable for both development and production environments.\n\nimportant: pathkit.getwebrootpath() will point to the first valid directory in the undertow.resourcepath configuration. the engine object in the configengine(engine engine) method has already been set by default to engine.setbasetemplatepath(pathkit.getwebrootpath()). so, this configuration is related to the engine\'s basetemplatepath.\n\n\n# 4. performance configuration\n\n# number of io threads and worker threads\n# undertow.iothreads=\n# undertow.workerthreads=\n\n\n1\n2\n3\n\n\nthe default configuration has been optimized for common use cases. without performance test data as guidance, it\'s recommended to stick to the default settings and avoid adding these configurations.\n\niothreads represents the number of nio threads handling io requests. in a production environment, it\'s suggested to set this between one to two times the number of cpu cores. adjustments should be based on performance test results.\n\nworkerthreads denotes the number of threads processing requests. in production, the default setting can be used, or adjustments can be made based on performance tests. when performance reaches a certain level, increasing the value of workthreads won\'t lead to performance improvements but will increase system resource consumption.\n\n\n# 5. enable gzip compression\n\n# gzip compression switch\nundertow.gzip.enable=true\n# set compression level, default is -1. can be set between 1 and 9. 1 has the fastest compression speed, 9 has the highest compression rate.\nundertow.gzip.level=-1\n# minimum content length to trigger compression\nundertow.gzip.minlength=1024\n\n\n1\n2\n3\n4\n5\n6\n\n\nenabling gzip compression can reduce network traffic and improve access speed.\n\n\n# 6. session configuration\n\n# session expiration time, note the unit is in seconds.\nundertow.session.timeout=1800\n# support session hot reloading to avoid repeated logins for projects dependent on sessions. default is true. only for devmode, no impact in production.\nundertow.session.hotswap=true\n\n\n1\n2\n3\n4\n\n\n\n# 7. https configuration\n\n# whether to enable ssl\nundertow.ssl.enable=false\n# ssl listening port, set to 443 in a production environment\nundertow.ssl.port=443\n# keystore type, recommended to use pkcs12\nundertow.ssl.keystoretype=pkcs12\n# keystore file\nundertow.ssl.keystore=demo.pfx\n# keystore password\nundertow.ssl.keystorepassword=123456\n# alias configuration, generally not used\nundertow.ssl.keyalias=demo\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\ninstructions on obtaining an ssl certificate can be found in the following subsection.\n\n\n# 8. http2 configuration\n\n# whether to enable http2 when ssl is on. to check if this configuration is active, enter in the chrome address bar: chrome://net-internals/#http2\nundertow.http2.enable=true\n\n\n1\n2\n\n\nenabling http2 can significantly speed up access. you don\'t need to worry about https being slower than http.\n\n\n# 9. redirecting http to https\n\n# when ssl is enabled, should http requests redirect to https?\nundertow.http.tohttps=false\n# when ssl is enabled, the status code used for redirecting http requests to https. default value is 302.\nundertow.http.tohttpsstatuscode=302\n\n\n1\n2\n3\n4\n\n\n\n# 10. disable http\n\n# whether to disable http when ssl is on\nundertow.http.disable=false\n\n\n1\n2\n\n\nafter enabling https, you can configure to disable http, so only https can be accessed. this configuration is suitable for mini-program servers.\n\nfor general web projects, it\'s not recommended to use this configuration. instead, set undertow.http.tohttps=true to redirect http to https.\n\n\n# 11. freely configure undertow\n\nthe above configurations are directly supported by jfinal undertow. if these configurations don\'t meet your requirements, you can freely configure undertow as follows:\n\nundertowserver.create(yourjfinalconfig.class)\n    .onstart( builder -> {\n        builder.setserveroption(undertowoptions.parameter_name, parameter_value);\t\n     })\n    .start();\n\n\n1\n2\n3\n4\n5\n\n\nas shown above, using the onstart method and calling builder.setserveroption(...) allows for deeper configuration of undertow. you can also call other apis in the builder for different types of configurations. undertowoptions defines many undertow configuration names. check its documentation comments to find many useful configurations.\n\n\n# 12. add filter, websocket, servlet, listener\n\nit\'s crucial to note that undertow is a web server designed for embedding, so the web.xml has been deprecated, meaning you can\'t configure web components through web.xml.\n\nto address this, jfinal undertow provides undertowserver.configweb(...) which allows you to easily add standard java web components such as filter, websocket, servlet, and listener:\n\nundertowserver.create(appconfig.class)\n     .configweb( builder -> {\n         // configure filter\n         builder.addfilter("myfilter", "com.abc.myfilter");\n         builder.addfilterurlmapping("myfilter", "/*");\n         builder.addfilterinitparam("myfilter", "key", "value");\n         \n         // configure servlet\n         builder.addservlet("myservlet", "com.abc.myservlet");\n         builder.addservletmapping("myservlet", "*.do");\n         builder.addservletinitparam("myservlet", "key", "value");\n         \n         // configure listener\n         builder.addlistener("com.abc.mylistener");\n         \n         // configure websocket. mywebsocket should use the serverendpoint annotation\n         builder.addwebsocketendpoint("com.abc.mywebsocket");\n      })\n     .start();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\nnote: the jfinalfilter will take over all requests. thus, servlets mapped in addservletmapping(...) in the above code by default cannot be accessed. you need to configure the urlskiphandler in the confighandler(handlers me) to let jfinal skip these servlet urls.\n\nthe mywebsocket in the above code should be annotated with serverendpoint to indicate that it\'s a websocket component, like:\n\n@serverendpoint("/myapp.ws")\npublic class mywebsocket { \n    @onmessage\n    public void message(string message, session session) {\n        for (session s : session.getopensessions()) {\n            s.getasyncremote().sendtext(message);\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nan example html that works with the above mywebsocket can be downloaded from the link provided (not accessible in this context). community members have also shared complete websocket code here.\n\nyou need to adjust the url in the html to: "ws://localhost:80/myapp.ws", changing the port number as appropriate.\n\nnote: since jfinalfilter takes over all url requests that don\'t have a "." character, it\'s suggested that the url parameter value in the @serverendpoint annotation should end with ".ws". otherwise, you\'ll receive a 404 error, indicating the resource is not found, like:\n\n@serverendpoint("/myapp.ws")\npublic class mywebsocketendpoint  {\n    ......\n}\n\n\n1\n2\n3\n4\n\n\nalternatively, if the url in the serverendpoint doesn\'t end with ".ws", you can refer to jfinal\'s urlskiphandler and implement a handler to skip websocket urls.\n\nlastly, websocket support requires adding a dependency. the dependencies to be added can be found in the earlier documentation: link.\n\n\n# ii. ssl certificates\n\n\n# 1. apply for an ssl certificate\n\nit\'s recommended to obtain ssl certificates from platforms like alibaba cloud or tencent cloud. both free and paid versions are available. for obtaining an ssl certificate from alibaba cloud, refer to the provided link (not accessible in this context).\n\nnote: when applying for a free ssl certificate, the bound domain generally uses a hostname like www, e.g., www.jfinal.com.\n\n\n# 2. download the appropriate certificate type\n\nonce the ssl certificate has been approved, you can download it from the control panel as shown in the provided screenshot (not accessible in this context).\n\nafter clicking the download link, download the tomcat type of ssl certificate as shown in the second screenshot.\n\nwithin the downloaded certificate, there\'s a file named xxx.pfx, which is the certificate file. additionally, there\'s a pfx-password.txt file containing the certificate password. place the xxx.pfx file in the project\'s src/main/resources directory and add the following lines to the undertow.txt configuration file:\n\n# enable ssl\nundertow.ssl.enable=true\n# ssl listening port, set to 443 in production\nundertow.ssl.port=443\n# keystore type, typically either pkcs12 or jks. adjust based on actual type.\nundertow.ssl.keystoretype=pkcs12\n# keystore file\nundertow.ssl.keystore=demo.pfx\n# keystore password\nundertow.ssl.keystorepassword=123456\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nthe "demo.pfx" in the configuration is the filename of the previously downloaded certificate, and "123456" is the certificate password. adjust these settings based on the actual contents of your download. "pkcs12" is the certificate type; alibaba cloud\'s tomcat type certificate uses pkcs12, while tencent cloud might use "jks".\n\n\n# 3. launch the project\n\nstart the project and access it via the domain bound when applying for the certificate using "https".\n\n\n# iii. two-way ssl authentication\n\nif your jfinal undertow project needs to authenticate clients using ssl, configure it as follows:\n\nundertowserver.create(yourjfinalconfig.class)\n  .onstart( builder -> {\n    builder.setsocketoption(options.ssl_client_auth_mode, sslclientauthmode.requested);\n  })\n  .start();\n\n\n1\n2\n3\n4\n5\n\n\nthis method was shared by community users at the provided link https://jfinal.com/feedback/7758.',charsets:{}},{title:"1.5 Common issues with jfinal-undertow",frontmatter:{},regularPath:"/en/1%20Quick%20Start/1.5%20Common%20issues%20with%20jfinal-undertow.html",relativePath:"en/1 Quick Start/1.5 Common issues with jfinal-undertow.md",key:"v-274cb101",path:"/en/1%20Quick%20Start/1.5%20Common%20issues%20with%20jfinal-undertow.html",headers:[{level:3,title:"1. Support for Hot Reloading in IDEA",slug:"_1-support-for-hot-reloading-in-idea",normalizedTitle:"1. support for hot reloading in idea",charIndex:45},{level:3,title:"2. Incorrect Template File Path in IDEA",slug:"_2-incorrect-template-file-path-in-idea",normalizedTitle:"2. incorrect template file path in idea",charIndex:1080},{level:3,title:"3. Maven Multi-Module Project Startup Error",slug:"_3-maven-multi-module-project-startup-error",normalizedTitle:"3. maven multi-module project startup error",charIndex:1564},{level:3,title:"4. Type Conversion Exception, Subclass Objects Can't Be Assigned to Base Class Variables",slug:"_4-type-conversion-exception-subclass-objects-can-t-be-assigned-to-base-class-variables",normalizedTitle:"4. type conversion exception, subclass objects can't be assigned to base class variables",charIndex:2227},{level:3,title:"5. Shiro Hot Reloading Issue",slug:"_5-shiro-hot-reloading-issue",normalizedTitle:"5. shiro hot reloading issue",charIndex:3289},{level:3,title:"6. Unable to Access When Deployed on External Network Servers",slug:"_6-unable-to-access-when-deployed-on-external-network-servers",normalizedTitle:"6. unable to access when deployed on external network servers",charIndex:3477},{level:3,title:"7. Issues Using Scripts",slug:"_7-issues-using-scripts",normalizedTitle:"7. issues using scripts",charIndex:3914},{level:3,title:"8. Issues with JSP Support",slug:"_8-issues-with-jsp-support",normalizedTitle:"8. issues with jsp support",charIndex:5164},{level:3,title:"9. Issues with mp4 Not Playing, xls Not Downloading, etc. due to Incorrect contentType",slug:"_9-issues-with-mp4-not-playing-xls-not-downloading-etc-due-to-incorrect-contenttype",normalizedTitle:"9. issues with mp4 not playing, xls not downloading, etc. due to incorrect contenttype",charIndex:6244}],lastUpdated:"9/22/2023, 9:39:45 AM",lastUpdatedTimestamp:1695375585e3,headersStr:"1. Support for Hot Reloading in IDEA 2. Incorrect Template File Path in IDEA 3. Maven Multi-Module Project Startup Error 4. Type Conversion Exception, Subclass Objects Can't Be Assigned to Base Class Variables 5. Shiro Hot Reloading Issue 6. Unable to Access When Deployed on External Network Servers 7. Issues Using Scripts 8. Issues with JSP Support 9. Issues with mp4 Not Playing, xls Not Downloading, etc. due to Incorrect contentType",content:"# 1.5 Common issues with jfinal-undertow\n\n\n# 1. Support for Hot Reloading in IDEA\n\njfinal undertow triggers hot reloading by monitoring modifications to .class files under the target/classes directory.\n\nEclipse has an auto-compile feature which automatically compiles and updates the related .class files in target/classes when the Java source code file is saved. So, by default, Eclipse supports hot reloading. Make sure to enable the auto-compile option in Eclipse, as shown in the following image:\n\nHowever, IDEA does not support auto-compilation by default. Therefore, the .class files in target/classes can't be updated timely, and IDEA doesn't support hot reloading. You may need to find methods online to enable auto-compilation in IDEA. Here's a link that provides a method to trigger compilation using a shortcut for reference:\n\nLink to Guide\n\nIn addition, an older jfinal official document also provided a method:\n\nLink to jfinal Guide\n\nLastly, remember to set undertow.devMode to true to support hot reloading. Refer to previous sections for configuration details.\n\n\n# 2. Incorrect Template File Path in IDEA\n\nIn IDEA, if you open the project directory directly or import a maven project through the pom.xml file, the template file path might be incorrect. The correct import method is shown in the images provided. Ensure that you select \"import project\" and not \"Open\". If a project has been imported once using the correct method, IDEA will generate various configuration files, and thereafter opening the project using \"Open\" won't be an issue.\n\n\n# 3. Maven Multi-Module Project Startup Error\n\nIf a multi-module maven project encounters an error indicating that the template is not found during startup, it's due to the working directory in IDEA multi-modules being set to one directory above the current module during project startup. Therefore, the default undertow.resourcePath configuration value src/main/webapp is incorrect. The correct path should include the current module's name, e.g., undertow.resourcePath = [module_name]/src/main/webapp, src/main/webapp. This configuration supports both IDEA and Eclipse, and is backward compatible with both development tools.\n\nRelated Sharing Related Article\n\n\n# 4. Type Conversion Exception, Subclass Objects Can't Be Assigned to Base Class Variables\n\nIf you encounter a type conversion exception (java.lang.ClassCastException) or a subclass object can't be assigned to a base class variable, this can be resolved by configuring hotSwapClassPrefix.\n\nAdditional exceptions related to this problem include java.lang.VerifyError: Bad type on operand stack and java.lang.IncompatibleClassChangeError.\n\nFor instance, if the class causing the conversion exception is \"com.abc.UserService\", the solution would be:\n\nUndertowServer.create(MyApp.class)\n    .addHotSwapClassPrefix(\"com.abc.\")\n    .start();\n\n\n1\n2\n3\n\n\nThis means that jfinal undertow by default only supports hot reloading for classes under target/classes and for jfinal itself. Therefore, if your class file is in a jar package and needs to be hot reloaded, you need to add it as a hot reload class using the method above.\n\nIn most cases, the class files in your project under target/classes are the ones that need to be hot reloaded, so there won't be any issues.\n\n\n# 5. Shiro Hot Reloading Issue\n\njfinal undertow currently does not support hot reloading for shiro. You can use it by setting undertow.devMode=false, but it won't support hot reloading.\n\n\n# 6. Unable to Access When Deployed on External Network Servers\n\nFor security reasons, early versions of jfinal undertow had undertow.host default configured as localhost. If you can't access it from an external network server, use the following configuration:\n\nundertow.host=0.0.0.0\n\n\n1\n\n\nIf you still can't access after adding the above configuration, check if the relevant port number is open (assuming you're using Alibaba Cloud).\n\n\n# 7. Issues Using Scripts\n\nThe jfinal official jfinal.sh and jfinal.bat script files contain detailed usage instructions. Generally, there won't be issues if you follow the instructions.\n\nHowever, a peculiar issue you might encounter is if you create a script file yourself and even if you copy content from the jfinal official script, it just doesn't work. This could be due to the line ending characters in the script file. For Linux and Mac, the line ending character must be '\\n', while for Windows it must be \"\\r\\n\".\n\nTo check the line ending character of the script file, first open a Java source code file in Eclipse, then click the \"Show Whitespace Characters\" icon in the toolbar. Afterward, open the script file in Eclipse, and the line ending character will be displayed at the end of each line. A single character indicates '\\n', otherwise, it's '\\r\\n'.\n\nNote that this issue is unrelated to jfinal; it's a restriction of the operating system.\n\nImportant: Recently, some users found a new reason for the script startup failure. The reason is that the jetty dependency was not removed from pom.xml, leading to the exception: java.lang.NoClassDefFoundError: com/jfinal/config/JFinalConfig. Removing the jetty dependency can resolve this.\n\n\n# 8. Issues with JSP Support\n\nTo enhance application security, newer versions of jfinal by default do not allow direct access to .jsp files. This means you can't directly input a .jsp filename in the browser's address bar to access a JSP file. However, you can access the JSP file using renderJsp(xxx.jsp). If you indeed need direct access to JSP files, you need the following configuration:\n\npublic void configConstant(Constants me) {\n    me.setDenyAccessJsp(false);\n}\n\n\n1\n2\n3\n\n\nTo support JSP functionality in jfinal undertow, a similar configuration is needed:\n\nUndertowServer.create(DemoConfig.class)\n   .configWeb(wb -> {\n      wb.getDeploymentInfo().addServlet(JspServletBuilder.createServlet(\"Default Jsp Servlet\", \"*.jsp\"));\n \n      HashMap<String, TagLibraryInfo> tagLibraryInfo = new HashMap<>();\n      JspServletBuilder.setupDeployment(wb.getDeploymentInfo(), new HashMap<>(),\n      tagLibraryInfo, new HackInstanceManager());\n   })\n   .start();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nFor more information, you can refer to the following resources:\n\nResource 1 Resource 2 GitHub Repo\n\n\n# 9. Issues with mp4 Not Playing, xls Not Downloading, etc. due to Incorrect contentType\n\nYou might need to add a configuration similar to the following:\n\nUndertowServer\n  .create()\n  .configWeb(\n      builder -> {\n          MimeMapping xlsMimeMapping = new MimeMapping(\"xls\",\"application/vnd.ms-excel\");\n          builder.getDeploymentInfo().addMimeMapping(xlsMimeMapping);\n      })\n  .start();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nThe above is an example for xls files. For mp4 files, a similar configuration is needed. For related references, see:\n\nReference 1 Reference 2",normalizedContent:"# 1.5 common issues with jfinal-undertow\n\n\n# 1. support for hot reloading in idea\n\njfinal undertow triggers hot reloading by monitoring modifications to .class files under the target/classes directory.\n\neclipse has an auto-compile feature which automatically compiles and updates the related .class files in target/classes when the java source code file is saved. so, by default, eclipse supports hot reloading. make sure to enable the auto-compile option in eclipse, as shown in the following image:\n\nhowever, idea does not support auto-compilation by default. therefore, the .class files in target/classes can't be updated timely, and idea doesn't support hot reloading. you may need to find methods online to enable auto-compilation in idea. here's a link that provides a method to trigger compilation using a shortcut for reference:\n\nlink to guide\n\nin addition, an older jfinal official document also provided a method:\n\nlink to jfinal guide\n\nlastly, remember to set undertow.devmode to true to support hot reloading. refer to previous sections for configuration details.\n\n\n# 2. incorrect template file path in idea\n\nin idea, if you open the project directory directly or import a maven project through the pom.xml file, the template file path might be incorrect. the correct import method is shown in the images provided. ensure that you select \"import project\" and not \"open\". if a project has been imported once using the correct method, idea will generate various configuration files, and thereafter opening the project using \"open\" won't be an issue.\n\n\n# 3. maven multi-module project startup error\n\nif a multi-module maven project encounters an error indicating that the template is not found during startup, it's due to the working directory in idea multi-modules being set to one directory above the current module during project startup. therefore, the default undertow.resourcepath configuration value src/main/webapp is incorrect. the correct path should include the current module's name, e.g., undertow.resourcepath = [module_name]/src/main/webapp, src/main/webapp. this configuration supports both idea and eclipse, and is backward compatible with both development tools.\n\nrelated sharing related article\n\n\n# 4. type conversion exception, subclass objects can't be assigned to base class variables\n\nif you encounter a type conversion exception (java.lang.classcastexception) or a subclass object can't be assigned to a base class variable, this can be resolved by configuring hotswapclassprefix.\n\nadditional exceptions related to this problem include java.lang.verifyerror: bad type on operand stack and java.lang.incompatibleclasschangeerror.\n\nfor instance, if the class causing the conversion exception is \"com.abc.userservice\", the solution would be:\n\nundertowserver.create(myapp.class)\n    .addhotswapclassprefix(\"com.abc.\")\n    .start();\n\n\n1\n2\n3\n\n\nthis means that jfinal undertow by default only supports hot reloading for classes under target/classes and for jfinal itself. therefore, if your class file is in a jar package and needs to be hot reloaded, you need to add it as a hot reload class using the method above.\n\nin most cases, the class files in your project under target/classes are the ones that need to be hot reloaded, so there won't be any issues.\n\n\n# 5. shiro hot reloading issue\n\njfinal undertow currently does not support hot reloading for shiro. you can use it by setting undertow.devmode=false, but it won't support hot reloading.\n\n\n# 6. unable to access when deployed on external network servers\n\nfor security reasons, early versions of jfinal undertow had undertow.host default configured as localhost. if you can't access it from an external network server, use the following configuration:\n\nundertow.host=0.0.0.0\n\n\n1\n\n\nif you still can't access after adding the above configuration, check if the relevant port number is open (assuming you're using alibaba cloud).\n\n\n# 7. issues using scripts\n\nthe jfinal official jfinal.sh and jfinal.bat script files contain detailed usage instructions. generally, there won't be issues if you follow the instructions.\n\nhowever, a peculiar issue you might encounter is if you create a script file yourself and even if you copy content from the jfinal official script, it just doesn't work. this could be due to the line ending characters in the script file. for linux and mac, the line ending character must be '\\n', while for windows it must be \"\\r\\n\".\n\nto check the line ending character of the script file, first open a java source code file in eclipse, then click the \"show whitespace characters\" icon in the toolbar. afterward, open the script file in eclipse, and the line ending character will be displayed at the end of each line. a single character indicates '\\n', otherwise, it's '\\r\\n'.\n\nnote that this issue is unrelated to jfinal; it's a restriction of the operating system.\n\nimportant: recently, some users found a new reason for the script startup failure. the reason is that the jetty dependency was not removed from pom.xml, leading to the exception: java.lang.noclassdeffounderror: com/jfinal/config/jfinalconfig. removing the jetty dependency can resolve this.\n\n\n# 8. issues with jsp support\n\nto enhance application security, newer versions of jfinal by default do not allow direct access to .jsp files. this means you can't directly input a .jsp filename in the browser's address bar to access a jsp file. however, you can access the jsp file using renderjsp(xxx.jsp). if you indeed need direct access to jsp files, you need the following configuration:\n\npublic void configconstant(constants me) {\n    me.setdenyaccessjsp(false);\n}\n\n\n1\n2\n3\n\n\nto support jsp functionality in jfinal undertow, a similar configuration is needed:\n\nundertowserver.create(democonfig.class)\n   .configweb(wb -> {\n      wb.getdeploymentinfo().addservlet(jspservletbuilder.createservlet(\"default jsp servlet\", \"*.jsp\"));\n \n      hashmap<string, taglibraryinfo> taglibraryinfo = new hashmap<>();\n      jspservletbuilder.setupdeployment(wb.getdeploymentinfo(), new hashmap<>(),\n      taglibraryinfo, new hackinstancemanager());\n   })\n   .start();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nfor more information, you can refer to the following resources:\n\nresource 1 resource 2 github repo\n\n\n# 9. issues with mp4 not playing, xls not downloading, etc. due to incorrect contenttype\n\nyou might need to add a configuration similar to the following:\n\nundertowserver\n  .create()\n  .configweb(\n      builder -> {\n          mimemapping xlsmimemapping = new mimemapping(\"xls\",\"application/vnd.ms-excel\");\n          builder.getdeploymentinfo().addmimemapping(xlsmimemapping);\n      })\n  .start();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nthe above is an example for xls files. for mp4 files, a similar configuration is needed. for related references, see:\n\nreference 1 reference 2",charsets:{}},{title:"1.6 Development under jetty-server",frontmatter:{},regularPath:"/en/1%20Quick%20Start/1.6%20Development%20under%20jetty-server.html",relativePath:"en/1 Quick Start/1.6 Development under jetty-server.md",key:"v-116ab898",path:"/en/1%20Quick%20Start/1.6%20Development%20under%20jetty-server.html",headers:[{level:3,title:"1. Create a standard maven project",slug:"_1-create-a-standard-maven-project",normalizedTitle:"1. create a standard maven project",charIndex:41},{level:3,title:"2. Add jetty server and jfinal dependencies",slug:"_2-add-jetty-server-and-jfinal-dependencies",normalizedTitle:"2. add jetty server and jfinal dependencies",charIndex:149},{level:3,title:"3. Add Java files",slug:"_3-add-java-files",normalizedTitle:"3. add java files",charIndex:1203},{level:3,title:"4. Add JFinalFilter to web.xml",slug:"_4-add-jfinalfilter-to-web-xml",normalizedTitle:"4. add jfinalfilter to web.xml",charIndex:1479},{level:3,title:"5. Launch the project",slug:"_5-launch-the-project",normalizedTitle:"5. launch the project",charIndex:2433},{level:3,title:"6. Open the browser to see the results",slug:"_6-open-the-browser-to-see-the-results",normalizedTitle:"6. open the browser to see the results",charIndex:2528},{level:3,title:"7. Common problem-solving:",slug:"_7-common-problem-solving",normalizedTitle:"7. common problem-solving:",charIndex:2640}],lastUpdated:"9/17/2023, 5:25:03 AM",lastUpdatedTimestamp:1694928303e3,headersStr:"1. Create a standard maven project 2. Add jetty server and jfinal dependencies 3. Add Java files 4. Add JFinalFilter to web.xml 5. Launch the project 6. Open the browser to see the results 7. Common problem-solving:",content:'# 1.6 Development under jetty-server\n\n\n# 1. Create a standard maven project\n\nThis is exactly the same as the section related to jfinal undertow.\n\n\n# 2. Add jetty server and jfinal dependencies\n\n<dependency>\n    <groupId>com.jfinal</groupId>\n    <artifactId>jfinal</artifactId>\n    <version>5.1.2</version>\n</dependency>\n \n<dependency>\n    <groupId>com.jfinal</groupId>\n    <artifactId>jetty-server</artifactId>\n    <version>2019.3</version>\n    <scope>provided</scope>\n</dependency>\n \n\x3c!-- The following dependency is only needed when using JSP --\x3e\n<dependency>\n    <groupId>org.eclipse.jetty</groupId>\n    <artifactId>jetty-jsp</artifactId>\n    <version>9.2.26.v20180806</version>\n    <scope>provided</scope>\n</dependency>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\nThe scope of the jetty-server dependency is provided, which is only used during the development phase. It\'s not required during deployment and will be automatically skipped during packaging.\n\nNote: If you are using IDEA for development, the scope still needs to be set to compile to avoid missing jar package warnings. Remember to change it back to provided during packaging to avoid including unnecessary jar packages.\n\n\n# 3. Add Java files\n\nThis is almost identical to the section related to jfinal undertow, with the only difference being the content within the main method, as shown below:\n\npublic static void main(String[] args) {\n    JFinal.start("src/main/webapp", 80, "/", 5);\n}\n\n\n1\n2\n3\n\n\n\n# 4. Add JFinalFilter to web.xml\n\n<?xml version="1.0" encoding="UTF-8"?>\n<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" id="WebApp_ID" version="2.5">\n  <display-name>jfinal offical website</display-name>\n  \n  <filter>\n    <filter-name>jfinal</filter-name>\n    <filter-class>com.jfinal.core.JFinalFilter</filter-class>\n    <init-param>\n       <param-name>configClass</param-name>\n       <param-value>demo.DemoConfig</param-value>\n    </init-param>\n  </filter>\n  \n  <filter-mapping>\n    <filter-name>jfinal</filter-name>\n    <url-pattern>/*</url-pattern>\n  </filter-mapping>\n \n</web-app>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\nFor development under jetty-server or tomcat, the above XML file needs to be configured.\n\n\n# 5. Launch the project\n\nThis is exactly the same as the section related to jfinal undertow.\n\n\n# 6. Open the browser to see the results\n\nThis is exactly the same as the section related to jfinal undertow.\n\n\n# 7. Common problem-solving:\n\n 1. Encountering a NoClassDefFoundError exception\n\nOne reason might be that the jar file downloaded to the local maven library is corrupted. Look at which class file threw the NoClassDefFoundError in the exception. Delete its directory in the local maven library and let maven re-download it from the central library. For instance, if you\'re using jfinal version 3.6, delete the 3.6 subdirectory under the /com/jfinal/jfinal directory in the maven repository.\n\nAnother reason could be the inclusion of multiple different versions of the same jar package. Simply delete the redundant ones. The issues mentioned above are fundamentally unrelated to jfinal. They are basic exceptions encountered during Java development.',normalizedContent:'# 1.6 development under jetty-server\n\n\n# 1. create a standard maven project\n\nthis is exactly the same as the section related to jfinal undertow.\n\n\n# 2. add jetty server and jfinal dependencies\n\n<dependency>\n    <groupid>com.jfinal</groupid>\n    <artifactid>jfinal</artifactid>\n    <version>5.1.2</version>\n</dependency>\n \n<dependency>\n    <groupid>com.jfinal</groupid>\n    <artifactid>jetty-server</artifactid>\n    <version>2019.3</version>\n    <scope>provided</scope>\n</dependency>\n \n\x3c!-- the following dependency is only needed when using jsp --\x3e\n<dependency>\n    <groupid>org.eclipse.jetty</groupid>\n    <artifactid>jetty-jsp</artifactid>\n    <version>9.2.26.v20180806</version>\n    <scope>provided</scope>\n</dependency>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\nthe scope of the jetty-server dependency is provided, which is only used during the development phase. it\'s not required during deployment and will be automatically skipped during packaging.\n\nnote: if you are using idea for development, the scope still needs to be set to compile to avoid missing jar package warnings. remember to change it back to provided during packaging to avoid including unnecessary jar packages.\n\n\n# 3. add java files\n\nthis is almost identical to the section related to jfinal undertow, with the only difference being the content within the main method, as shown below:\n\npublic static void main(string[] args) {\n    jfinal.start("src/main/webapp", 80, "/", 5);\n}\n\n\n1\n2\n3\n\n\n\n# 4. add jfinalfilter to web.xml\n\n<?xml version="1.0" encoding="utf-8"?>\n<web-app xmlns:xsi="http://www.w3.org/2001/xmlschema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" xsi:schemalocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" id="webapp_id" version="2.5">\n  <display-name>jfinal offical website</display-name>\n  \n  <filter>\n    <filter-name>jfinal</filter-name>\n    <filter-class>com.jfinal.core.jfinalfilter</filter-class>\n    <init-param>\n       <param-name>configclass</param-name>\n       <param-value>demo.democonfig</param-value>\n    </init-param>\n  </filter>\n  \n  <filter-mapping>\n    <filter-name>jfinal</filter-name>\n    <url-pattern>/*</url-pattern>\n  </filter-mapping>\n \n</web-app>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\nfor development under jetty-server or tomcat, the above xml file needs to be configured.\n\n\n# 5. launch the project\n\nthis is exactly the same as the section related to jfinal undertow.\n\n\n# 6. open the browser to see the results\n\nthis is exactly the same as the section related to jfinal undertow.\n\n\n# 7. common problem-solving:\n\n 1. encountering a noclassdeffounderror exception\n\none reason might be that the jar file downloaded to the local maven library is corrupted. look at which class file threw the noclassdeffounderror in the exception. delete its directory in the local maven library and let maven re-download it from the central library. for instance, if you\'re using jfinal version 3.6, delete the 3.6 subdirectory under the /com/jfinal/jfinal directory in the maven repository.\n\nanother reason could be the inclusion of multiple different versions of the same jar package. simply delete the redundant ones. the issues mentioned above are fundamentally unrelated to jfinal. they are basic exceptions encountered during java development.',charsets:{}},{title:"1.7 Deployment under tomcat",frontmatter:{},regularPath:"/en/1%20Quick%20Start/1.7%20Deployment%20under%20tomcat.html",relativePath:"en/1 Quick Start/1.7 Deployment under tomcat.md",key:"v-cb1aad04",path:"/en/1%20Quick%20Start/1.7%20Deployment%20under%20tomcat.html",headers:[{level:3,title:"0. Check web.xml configuration",slug:"_0-check-web-xml-configuration",normalizedTitle:"0. check web.xml configuration",charIndex:34},{level:3,title:"1. Specify the packaging type as war",slug:"_1-specify-the-packaging-type-as-war",normalizedTitle:"1. specify the packaging type as war",charIndex:1429},{level:3,title:"2. Remove jfinal-undertow and jetty-server dependencies",slug:"_2-remove-jfinal-undertow-and-jetty-server-dependencies",normalizedTitle:"2. remove jfinal-undertow and jetty-server dependencies",charIndex:1578},{level:3,title:"3. Add servlet API dependency",slug:"_3-add-servlet-api-dependency",normalizedTitle:"3. add servlet api dependency",charIndex:1796},{level:3,title:"4. Packaging",slug:"_4-packaging",normalizedTitle:"4. packaging",charIndex:2230},{level:3,title:"5. Deployment",slug:"_5-deployment",normalizedTitle:"5. deployment",charIndex:2389}],lastUpdated:"9/17/2023, 5:25:03 AM",lastUpdatedTimestamp:1694928303e3,headersStr:"0. Check web.xml configuration 1. Specify the packaging type as war 2. Remove jfinal-undertow and jetty-server dependencies 3. Add servlet API dependency 4. Packaging 5. Deployment",content:'# 1.7 Deployment under tomcat\n\n\n# 0. Check web.xml configuration\n\nA few students develop using jfinal-undertow and deploy with tomcat. However, jfinal-undertow doesn\'t require the web.xml file, leading to deployment failures in tomcat.\n\nTherefore, when deploying under tomcat, you need to check if the web.xml exists and ensure that it is configured correctly. The configuration format is as follows:\n\n<?xml version="1.0" encoding="UTF-8"?>\n<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" id="WebApp_ID" version="2.5">\n  <display-name>jfinal offical website</display-name>\n  \n  <filter>\n    <filter-name>jfinal</filter-name>\n    <filter-class>com.jfinal.core.JFinalFilter</filter-class>\n    <init-param>\n       <param-name>configClass</param-name>\n       <param-value>demo.DemoConfig</param-value>\n    </init-param>\n  </filter>\n  \n  <filter-mapping>\n    <filter-name>jfinal</filter-name>\n    <url-pattern>/*</url-pattern>\n  </filter-mapping>\n \n</web-app>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\nNote: The para-value configuration depends on your project\'s specific XxxConfig package name and class name. Ensure to modify it accordingly. The rest of the configurations can be copied as is.\n\n\n# 1. Specify the packaging type as war\n\nModify the pom.xml file and change the value of the packaging tag to war.\n\n<packaging>war</packaging>\n\n\n1\n\n\n\n# 2. Remove jfinal-undertow and jetty-server dependencies\n\nModify the pom.xml file and delete all dependencies related to jfinal-undertow and jetty-server, otherwise, there will be conflicts when deployed in tomcat.\n\n\n# 3. Add servlet API dependency\n\nIf your project code uses the servlet API, you need to add the following dependency for packaging:\n\n<dependency>\n    <groupId>javax.servlet</groupId>\n    <artifactId>javax.servlet-api</artifactId>\n    <version>4.0.1</version>\n    <scope>provided</scope>\n</dependency>\n\n\n1\n2\n3\n4\n5\n6\n\n\nYou can add this dependency when prompted during packaging. If packaging passes without issues, you can ignore it.\n\n\n# 4. Packaging\n\nOpen the console, navigate to the project root directory, and execute the following command to create a war package:\n\nmvn clean package\n\n\n1\n\n\n\n# 5. Deployment\n\nProjects developed with jfinal are standard java web projects, so there\'s nothing special about the deployment process. Some deployment tips can be found in this blog post: https://my.oschina.net/jfinal/blog/353062\n\nNote: This section only introduces development under jfinal-undertow or jetty-server and deployment under tomcat. Only in these two modes do you need to remove their dependencies. If you are using the traditional java web development method, you don\'t need to pay attention to this section. Please especially note the special statement: https://www.jfinal.com/doc/1-11',normalizedContent:'# 1.7 deployment under tomcat\n\n\n# 0. check web.xml configuration\n\na few students develop using jfinal-undertow and deploy with tomcat. however, jfinal-undertow doesn\'t require the web.xml file, leading to deployment failures in tomcat.\n\ntherefore, when deploying under tomcat, you need to check if the web.xml exists and ensure that it is configured correctly. the configuration format is as follows:\n\n<?xml version="1.0" encoding="utf-8"?>\n<web-app xmlns:xsi="http://www.w3.org/2001/xmlschema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" xsi:schemalocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" id="webapp_id" version="2.5">\n  <display-name>jfinal offical website</display-name>\n  \n  <filter>\n    <filter-name>jfinal</filter-name>\n    <filter-class>com.jfinal.core.jfinalfilter</filter-class>\n    <init-param>\n       <param-name>configclass</param-name>\n       <param-value>demo.democonfig</param-value>\n    </init-param>\n  </filter>\n  \n  <filter-mapping>\n    <filter-name>jfinal</filter-name>\n    <url-pattern>/*</url-pattern>\n  </filter-mapping>\n \n</web-app>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\nnote: the para-value configuration depends on your project\'s specific xxxconfig package name and class name. ensure to modify it accordingly. the rest of the configurations can be copied as is.\n\n\n# 1. specify the packaging type as war\n\nmodify the pom.xml file and change the value of the packaging tag to war.\n\n<packaging>war</packaging>\n\n\n1\n\n\n\n# 2. remove jfinal-undertow and jetty-server dependencies\n\nmodify the pom.xml file and delete all dependencies related to jfinal-undertow and jetty-server, otherwise, there will be conflicts when deployed in tomcat.\n\n\n# 3. add servlet api dependency\n\nif your project code uses the servlet api, you need to add the following dependency for packaging:\n\n<dependency>\n    <groupid>javax.servlet</groupid>\n    <artifactid>javax.servlet-api</artifactid>\n    <version>4.0.1</version>\n    <scope>provided</scope>\n</dependency>\n\n\n1\n2\n3\n4\n5\n6\n\n\nyou can add this dependency when prompted during packaging. if packaging passes without issues, you can ignore it.\n\n\n# 4. packaging\n\nopen the console, navigate to the project root directory, and execute the following command to create a war package:\n\nmvn clean package\n\n\n1\n\n\n\n# 5. deployment\n\nprojects developed with jfinal are standard java web projects, so there\'s nothing special about the deployment process. some deployment tips can be found in this blog post: https://my.oschina.net/jfinal/blog/353062\n\nnote: this section only introduces development under jfinal-undertow or jetty-server and deployment under tomcat. only in these two modes do you need to remove their dependencies. if you are using the traditional java web development method, you don\'t need to pay attention to this section. please especially note the special statement: https://www.jfinal.com/doc/1-11',charsets:{}},{title:"1.8 Development without Maven",frontmatter:{},regularPath:"/en/1%20Quick%20Start/1.8%20Development%20without%20Maven.html",relativePath:"en/1 Quick Start/1.8 Development without Maven.md",key:"v-a978cb8c",path:"/en/1%20Quick%20Start/1.8%20Development%20without%20Maven.html",headers:[{level:3,title:"1. Create a Dynamic Web Project",slug:"_1-create-a-dynamic-web-project",normalizedTitle:"1. create a dynamic web project",charIndex:175},{level:3,title:"2. Fill in the basic project information",slug:"_2-fill-in-the-basic-project-information",normalizedTitle:"2. fill in the basic project information",charIndex:213},{level:3,title:"3. Modify the Default Output Folder. It is recommended to input WebRoot\\WEB-INF\\classes",slug:"_3-modify-the-default-output-folder-it-is-recommended-to-input-webroot-web-inf-classes",normalizedTitle:"3. modify the default output folder. it is recommended to input webroot\\web-inf\\classes",charIndex:331},{level:3,title:"4. Modify the Content directory, it's recommended to input WebRoot",slug:"_4-modify-the-content-directory-it-s-recommended-to-input-webroot",normalizedTitle:"4. modify the content directory, it's recommended to input webroot",charIndex:579},{level:3,title:"5. Add JFinal library files",slug:"_5-add-jfinal-library-files",normalizedTitle:"5. add jfinal library files",charIndex:833},{level:3,title:"6. Modify web.xml",slug:"_6-modify-web-xml",normalizedTitle:"6. modify web.xml",charIndex:1235},{level:3,title:"7. Add Java files",slug:"_7-add-java-files",normalizedTitle:"7. add java files",charIndex:1682},{level:3,title:"8. Start the project",slug:"_8-start-the-project",normalizedTitle:"8. start the project",charIndex:2931},{level:3,title:"9. Open a browser to see the result",slug:"_9-open-a-browser-to-see-the-result",normalizedTitle:"9. open a browser to see the result",charIndex:3413}],lastUpdated:"9/22/2023, 9:39:45 AM",lastUpdatedTimestamp:1695375585e3,headersStr:"1. Create a Dynamic Web Project 2. Fill in the basic project information 3. Modify the Default Output Folder. It is recommended to input WebRoot\\WEB-INF\\classes 4. Modify the Content directory, it's recommended to input WebRoot 5. Add JFinal library files 6. Modify web.xml 7. Add Java files 8. Start the project 9. Open a browser to see the result",content:'# 1.8 Development without Maven\n\nThe demonstration below uses Eclipse Java EE edition as an example. You can download it from: https://www.eclipse.org/downloads/packages/\n\n\n# 1. Create a Dynamic Web Project\n\n\n\n\n# 2. Fill in the basic project information\n\n\n\nNote in the above image: Always select "None" for the Target runtime.\n\n\n# 3. Modify the Default Output Folder. It is recommended to input WebRoot\\WEB-INF\\classes\n\nImportant: The Default out folder here must be consistent with the WebRoot\\WEB-INF\\classes directory to use JFinal\'s integrated Jetty for project startup.\n\n\n# 4. Modify the Content directory, it\'s recommended to input WebRoot\n\n\n\nNote in the above image: You can also use the default value WebContent, but in the previous step, WebRoot\\WEB-INF\\classes should be changed to WebContent\\WEB-INF\\classes to match.\n\n\n# 5. Add JFinal library files\n\nCopy jfinal-5.0.0.jar and jetty-server-2019.3.jar to the project\'s WEB-INF\\lib directory. Note: The jetty-server-2019.3.jar is used during development and isn\'t needed in a production environment.\n\nThe required jar files can be downloaded from the jfinal.com homepage. The file jfinal-5.0.0-all.zip contains commonly used jar files and instructions on how to use them.\n\n\n# 6. Modify web.xml\n\nAdd the following content to web.xml:\n\n<filter>\n    <filter-name>jfinal</filter-name>\n    <filter-class>com.jfinal.core.JFinalFilter</filter-class>\n    <init-param>\n       <param-name>configClass</param-name>\n       <param-value>demo.DemoConfig</param-value>\n    </init-param>\n</filter>\n<filter-mapping>\n    <filter-name>jfinal</filter-name>\n    <url-pattern>/*</url-pattern>\n</filter-mapping>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 7. Add Java files\n\nCreate a demo package in the project\'s src directory. Inside the demo package, create the DemoConfig file with the following content:\n\npackage demo;\nimport com.jfinal.config.*;\npublic class DemoConfig extends JFinalConfig {\n    public void configConstant(Constants me) {\n       me.setDevMode(true);\n    }\n    \n    public void configRoute(Routes me) {\n       // jfinal 4.9.03 版新增了路由扫描功能，不必手动添加路由\n       // me.add("/hello", HelloController.class);\n       \n       // 使用路由扫描，参数 "demo." 表示只扫描 demo 包及其子包下的路由\n       me.scan("demo.");\n    }\n    \n    public void configEngine(Engine me) {}\n    public void configPlugin(Plugins me) {}\n    public void configInterceptor(Interceptors me) {}\n    public void configHandler(Handlers me) {}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\nNote: The DemoConfig.java file\'s package and its filename must match the param-value tag in web.xml (in this example, it\'s demo.DemoConfig).\n\nCreate the HelloController class file in the demo package with the following content:\n\npackage demo;\nimport com.jfinal.core.Controller;\n \n@Path("/hello")\npublic class HelloController extends Controller {\n    public void index() {\n       renderText("Hello JFinal World.");\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 8. Start the project\n\nCreate a start-up item as shown:\n\nRight-click on Java Application and select the New menu item to create a new Java Application start-up item as shown:\n\nIn the Main class input box on the right window, input: com.jfinal.core.JFinal and click the Debug button to start the project:\n\nAlternatively, you can use any main method to start the integrated jetty as shown:\n\npublic static void main(String[] args) {\n\tJFinal.start("WebRoot", 80, "/", 5);\n}\n\n\n1\n2\n3\n\n\n\n# 9. Open a browser to see the result\n\nOpen a browser and enter: http://localhost/hello. If you see "Hello JFinal World," it means the project framework setup is complete. For a complete demo example, download from the JFinal official website: http://www.jfinal.com\n\nNote: When developing or running a project under tomcat, you should first delete the jetty-server-xxx.jar package to avoid conflicts. Tomcat starts the project differently from the above method because the above method requires the jetty-server-xxx.jar.\n\nWe strongly recommend using the standard Maven project structure for development. This section describes the older method of manually adding jar files.',normalizedContent:'# 1.8 development without maven\n\nthe demonstration below uses eclipse java ee edition as an example. you can download it from: https://www.eclipse.org/downloads/packages/\n\n\n# 1. create a dynamic web project\n\n\n\n\n# 2. fill in the basic project information\n\n\n\nnote in the above image: always select "none" for the target runtime.\n\n\n# 3. modify the default output folder. it is recommended to input webroot\\web-inf\\classes\n\nimportant: the default out folder here must be consistent with the webroot\\web-inf\\classes directory to use jfinal\'s integrated jetty for project startup.\n\n\n# 4. modify the content directory, it\'s recommended to input webroot\n\n\n\nnote in the above image: you can also use the default value webcontent, but in the previous step, webroot\\web-inf\\classes should be changed to webcontent\\web-inf\\classes to match.\n\n\n# 5. add jfinal library files\n\ncopy jfinal-5.0.0.jar and jetty-server-2019.3.jar to the project\'s web-inf\\lib directory. note: the jetty-server-2019.3.jar is used during development and isn\'t needed in a production environment.\n\nthe required jar files can be downloaded from the jfinal.com homepage. the file jfinal-5.0.0-all.zip contains commonly used jar files and instructions on how to use them.\n\n\n# 6. modify web.xml\n\nadd the following content to web.xml:\n\n<filter>\n    <filter-name>jfinal</filter-name>\n    <filter-class>com.jfinal.core.jfinalfilter</filter-class>\n    <init-param>\n       <param-name>configclass</param-name>\n       <param-value>demo.democonfig</param-value>\n    </init-param>\n</filter>\n<filter-mapping>\n    <filter-name>jfinal</filter-name>\n    <url-pattern>/*</url-pattern>\n</filter-mapping>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 7. add java files\n\ncreate a demo package in the project\'s src directory. inside the demo package, create the democonfig file with the following content:\n\npackage demo;\nimport com.jfinal.config.*;\npublic class democonfig extends jfinalconfig {\n    public void configconstant(constants me) {\n       me.setdevmode(true);\n    }\n    \n    public void configroute(routes me) {\n       // jfinal 4.9.03 版新增了路由扫描功能，不必手动添加路由\n       // me.add("/hello", hellocontroller.class);\n       \n       // 使用路由扫描，参数 "demo." 表示只扫描 demo 包及其子包下的路由\n       me.scan("demo.");\n    }\n    \n    public void configengine(engine me) {}\n    public void configplugin(plugins me) {}\n    public void configinterceptor(interceptors me) {}\n    public void confighandler(handlers me) {}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\nnote: the democonfig.java file\'s package and its filename must match the param-value tag in web.xml (in this example, it\'s demo.democonfig).\n\ncreate the hellocontroller class file in the demo package with the following content:\n\npackage demo;\nimport com.jfinal.core.controller;\n \n@path("/hello")\npublic class hellocontroller extends controller {\n    public void index() {\n       rendertext("hello jfinal world.");\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 8. start the project\n\ncreate a start-up item as shown:\n\nright-click on java application and select the new menu item to create a new java application start-up item as shown:\n\nin the main class input box on the right window, input: com.jfinal.core.jfinal and click the debug button to start the project:\n\nalternatively, you can use any main method to start the integrated jetty as shown:\n\npublic static void main(string[] args) {\n\tjfinal.start("webroot", 80, "/", 5);\n}\n\n\n1\n2\n3\n\n\n\n# 9. open a browser to see the result\n\nopen a browser and enter: http://localhost/hello. if you see "hello jfinal world," it means the project framework setup is complete. for a complete demo example, download from the jfinal official website: http://www.jfinal.com\n\nnote: when developing or running a project under tomcat, you should first delete the jetty-server-xxx.jar package to avoid conflicts. tomcat starts the project differently from the above method because the above method requires the jetty-server-xxx.jar.\n\nwe strongly recommend using the standard maven project structure for development. this section describes the older method of manually adding jar files.',charsets:{cjk:!0}},{title:"1.9 Development under IDEA",frontmatter:{},regularPath:"/en/1%20Quick%20Start/1.9%20Development%20under%20IDEA.html",relativePath:"en/1 Quick Start/1.9 Development under IDEA.md",key:"v-f5799bd0",path:"/en/1%20Quick%20Start/1.9%20Development%20under%20IDEA.html",headers:[{level:3,title:"1. Hot Reload",slug:"_1-hot-reload",normalizedTitle:"1. hot reload",charIndex:33},{level:3,title:"2. Multi-module",slug:"_2-multi-module",normalizedTitle:"2. multi-module",charIndex:1056},{level:3,title:"3. Incorrect template file path in IDEA",slug:"_3-incorrect-template-file-path-in-idea",normalizedTitle:"3. incorrect template file path in idea",charIndex:1250}],lastUpdated:"9/17/2023, 5:25:03 AM",lastUpdatedTimestamp:1694928303e3,headersStr:"1. Hot Reload 2. Multi-module 3. Incorrect template file path in IDEA",content:"# 1.9 Development under IDEA\n\n\n# 1. Hot Reload\n\nBoth jfinal-undertow and jetty-server trigger hot reloading by monitoring whether the class file has been updated. However, by default, IDEA doesn't support automatic compilation, so its class files won't be updated during development. Hence, IDEA doesn't support hot reloading by default. You can search online to find configurations for enabling IDEA's auto-compilation feature to support hot reloading. Below are some resources:\n\nhttps://jfinal.com/share/2541\n\nhttps://jfinal.com/share/2434\n\nhttps://my.oschina.net/fdblog/blog/172229\n\nhttps://jfinal.com/share/1357\n\nYou can also use the Shift + F9 shortcut key to start. After modifying the code, use Ctrl + F5 to restart. This method is faster than the traditional maven jetty plugin. Note that before using Ctrl + F5 to restart, you need to switch the focus to the debug window with Alt + 5. When developing in IDEA, try to use shortcut keys as much as possible and avoid using the mouse, as this will significantly increase development efficiency.\n\n\n# 2. Multi-module\n\nWhen developing with multiple modules under jfinal undertow using Maven, if you need to load resources across modules, you can refer here:\n\nhttp://www.jfinal.com/share/1285\n\n\n# 3. Incorrect template file path in IDEA\n\nFor details, see: https://jfinal.com/doc/1-5",normalizedContent:"# 1.9 development under idea\n\n\n# 1. hot reload\n\nboth jfinal-undertow and jetty-server trigger hot reloading by monitoring whether the class file has been updated. however, by default, idea doesn't support automatic compilation, so its class files won't be updated during development. hence, idea doesn't support hot reloading by default. you can search online to find configurations for enabling idea's auto-compilation feature to support hot reloading. below are some resources:\n\nhttps://jfinal.com/share/2541\n\nhttps://jfinal.com/share/2434\n\nhttps://my.oschina.net/fdblog/blog/172229\n\nhttps://jfinal.com/share/1357\n\nyou can also use the shift + f9 shortcut key to start. after modifying the code, use ctrl + f5 to restart. this method is faster than the traditional maven jetty plugin. note that before using ctrl + f5 to restart, you need to switch the focus to the debug window with alt + 5. when developing in idea, try to use shortcut keys as much as possible and avoid using the mouse, as this will significantly increase development efficiency.\n\n\n# 2. multi-module\n\nwhen developing with multiple modules under jfinal undertow using maven, if you need to load resources across modules, you can refer here:\n\nhttp://www.jfinal.com/share/1285\n\n\n# 3. incorrect template file path in idea\n\nfor details, see: https://jfinal.com/doc/1-5",charsets:{}},{title:"10.1 Overview",frontmatter:{},regularPath:"/en/10%20Validator/10.1%20Overview.html",relativePath:"en/10 Validator/10.1 Overview.md",key:"v-71de89a7",path:"/en/10%20Validator/10.1%20Overview.html",lastUpdated:"9/22/2023, 7:24:41 AM",lastUpdatedTimestamp:1695367481e3,headersStr:null,content:"# 10.1 Overview\n\nValidator is a validation component in JFinal that offers very convenient validation methods within the Validator class. It's easy to learn and convenient to use.",normalizedContent:"# 10.1 overview\n\nvalidator is a validation component in jfinal that offers very convenient validation methods within the validator class. it's easy to learn and convenient to use.",charsets:{}},{title:"10.2 Validator",frontmatter:{},regularPath:"/en/10%20Validator/10.2%20Validator.html",relativePath:"en/10 Validator/10.2 Validator.md",key:"v-4cbd53d9",path:"/en/10%20Validator/10.2%20Validator.html",headers:[{level:3,title:"1. Basic Usage",slug:"_1-basic-usage",normalizedTitle:"1. basic usage",charIndex:21},{level:3,title:"2. setRet(...) and getRet()",slug:"_2-setret-and-getret",normalizedTitle:"2. setret(...) and getret()",charIndex:1369},{level:3,title:"3. Advanced Usage",slug:"_3-advanced-usage",normalizedTitle:"3. advanced usage",charIndex:2276}],lastUpdated:"9/22/2023, 7:24:41 AM",lastUpdatedTimestamp:1695367481e3,headersStr:"1. Basic Usage 2. setRet(...) and getRet() 3. Advanced Usage",content:'# 10.2 Validator\n\n\n# 1. Basic Usage\n\nThe Validator class implements the Interceptor interface, making it an interceptor as well. Its configuration is identical to that of other interceptors. Here\'s a basic example:\n\npublic class LoginValidator extends Validator {\n    protected void validate(Controller c) {\n       validateRequiredString("name", "nameMsg", "Please enter your username");\n       validateRequiredString("pass", "passMsg", "Please enter your password");\n    }\n    protected void handleError(Controller c) {\n       c.keepPara("name");\n       c.render("login.html");\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nIn the validate(Controller c) method, you can call various validateXxx(...) methods for server-side validation. The handleError(Controller c) method allows you to call c.keepPara(...) to retain submitted values and send them back to the page. This method is only invoked when validation fails.\n\nThe handleError method uses keepXxx methods to retain the data from the form and pass it back to the page, which saves the user from re-entering form fields that have already been validated.\n\nFor model objects, you can use the keepModel(...) method, and for traditional Java bean objects, you can use keepBean(...).\n\nThe keepPara(...) method keeps all data as a String by default. If you wish to keep them in a specific type, you can use keepPara(Class, …).\n\n\n# 2. setRet(...) and getRet()\n\nJFinal 4.0 introduced the setRet(Ret) and getRet() methods. Here\'s a typical example:\n\npublic class LoginValidator extends Validator {\n \n   protected void validate(Controller c) {\n      setRet(Ret.fail());\n      \t\n      validateRequired("userName", "msg", "Email can\'t be empty");\n      validateEmail("userName", "msg", "Email format is incorrect");\n      validateRequired("password", "msg", "Password can\'t be empty");\n      validateCaptcha("captcha", "msg", "Captcha is incorrect");\n   }\n   \t\n   protected void handleError(Controller c) {\n      c.renderJson(getRet());\n   }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\nIn this example, setRet(Ret.fail()) injects a Ret object into the LoginValidator. Subsequent validateXxx methods will store all validation results in this Ret object. In the handleError method, c.renderJson(getRet()) retrieves and renders this Ret object.\n\n\n# 3. Advanced Usage\n\nThough the Validator class offers a rich set of validateXxx(...) methods, there are limits. If these methods don\'t meet your needs, you can use validateRegex(...) or ordinary Java code:\n\nprotected void validate(Controller c) {\n    String nickName = c.getPara("nickName");\n    if (userService.isExists(nickName)) {\n        addError("msg", "Nickname is already taken. Please choose another one.");\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\nIn this example, common Java code combined with addError(...) allows for unlimited, flexible custom validation.\n\nYou can also set the validator to skip remaining validations after encountering the first failure:\n\nprotected void validate(Controller c) {\n    this.setShortCircuit(true);\n    ....\n}\n\n\n1\n2\n3\n4\n\n\nsetShortCircuit(boolean) sets the validation mode to "short-circuit," meaning it will skip the rest of the validations if one fails.',normalizedContent:'# 10.2 validator\n\n\n# 1. basic usage\n\nthe validator class implements the interceptor interface, making it an interceptor as well. its configuration is identical to that of other interceptors. here\'s a basic example:\n\npublic class loginvalidator extends validator {\n    protected void validate(controller c) {\n       validaterequiredstring("name", "namemsg", "please enter your username");\n       validaterequiredstring("pass", "passmsg", "please enter your password");\n    }\n    protected void handleerror(controller c) {\n       c.keeppara("name");\n       c.render("login.html");\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nin the validate(controller c) method, you can call various validatexxx(...) methods for server-side validation. the handleerror(controller c) method allows you to call c.keeppara(...) to retain submitted values and send them back to the page. this method is only invoked when validation fails.\n\nthe handleerror method uses keepxxx methods to retain the data from the form and pass it back to the page, which saves the user from re-entering form fields that have already been validated.\n\nfor model objects, you can use the keepmodel(...) method, and for traditional java bean objects, you can use keepbean(...).\n\nthe keeppara(...) method keeps all data as a string by default. if you wish to keep them in a specific type, you can use keeppara(class, …).\n\n\n# 2. setret(...) and getret()\n\njfinal 4.0 introduced the setret(ret) and getret() methods. here\'s a typical example:\n\npublic class loginvalidator extends validator {\n \n   protected void validate(controller c) {\n      setret(ret.fail());\n      \t\n      validaterequired("username", "msg", "email can\'t be empty");\n      validateemail("username", "msg", "email format is incorrect");\n      validaterequired("password", "msg", "password can\'t be empty");\n      validatecaptcha("captcha", "msg", "captcha is incorrect");\n   }\n   \t\n   protected void handleerror(controller c) {\n      c.renderjson(getret());\n   }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\nin this example, setret(ret.fail()) injects a ret object into the loginvalidator. subsequent validatexxx methods will store all validation results in this ret object. in the handleerror method, c.renderjson(getret()) retrieves and renders this ret object.\n\n\n# 3. advanced usage\n\nthough the validator class offers a rich set of validatexxx(...) methods, there are limits. if these methods don\'t meet your needs, you can use validateregex(...) or ordinary java code:\n\nprotected void validate(controller c) {\n    string nickname = c.getpara("nickname");\n    if (userservice.isexists(nickname)) {\n        adderror("msg", "nickname is already taken. please choose another one.");\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\nin this example, common java code combined with adderror(...) allows for unlimited, flexible custom validation.\n\nyou can also set the validator to skip remaining validations after encountering the first failure:\n\nprotected void validate(controller c) {\n    this.setshortcircuit(true);\n    ....\n}\n\n\n1\n2\n3\n4\n\n\nsetshortcircuit(boolean) sets the validation mode to "short-circuit," meaning it will skip the rest of the validations if one fails.',charsets:{}},{title:"10.3 Validator Configuration",frontmatter:{},regularPath:"/en/10%20Validator/10.3%20Validator%20configuration.html",relativePath:"en/10 Validator/10.3 Validator configuration.md",key:"v-1879c6ae",path:"/en/10%20Validator/10.3%20Validator%20configuration.html",lastUpdated:"9/22/2023, 7:24:41 AM",lastUpdatedTimestamp:1695367481e3,headersStr:null,content:"# 10.3 Validator Configuration\n\nThe configuration of a Validator is identical to that of an interceptor. You can use the @Before annotation to specify which Validator class should be used before invoking a particular action method in a controller. Here's a sample code snippet:\n\npublic class UserController extends Controller {\n    @Before(LoginValidator.class)  // Configuration is identical to that of interceptors\n    public void login() {\n        // Login logic here\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\nIn this example, the LoginValidator class is invoked before the login action method in the UserController. If the Validator passes, the login method will execute. If the Validator fails, the handleError method in the LoginValidator will be invoked. This setup allows you to isolate validation logic from your controller, making the code more maintainable and easier to test.",normalizedContent:"# 10.3 validator configuration\n\nthe configuration of a validator is identical to that of an interceptor. you can use the @before annotation to specify which validator class should be used before invoking a particular action method in a controller. here's a sample code snippet:\n\npublic class usercontroller extends controller {\n    @before(loginvalidator.class)  // configuration is identical to that of interceptors\n    public void login() {\n        // login logic here\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\nin this example, the loginvalidator class is invoked before the login action method in the usercontroller. if the validator passes, the login method will execute. if the validator fails, the handleerror method in the loginvalidator will be invoked. this setup allows you to isolate validation logic from your controller, making the code more maintainable and easier to test.",charsets:{}},{title:"11.1 Overview",frontmatter:{},regularPath:"/en/11%20Internationalization/11.1%20Overview.html",relativePath:"en/11 Internationalization/11.1 Overview.md",key:"v-59df37df",path:"/en/11%20Internationalization/11.1%20Overview.html",lastUpdated:"9/22/2023, 7:42:33 AM",lastUpdatedTimestamp:1695368553e3,headersStr:null,content:"# 11.1 Overview\n\nJFinal provides rapid support for internationalization (i18n) with only three class files involved in its internationalization module. This makes it much easier to implement and use compared to other frameworks like Spring. JFinal's lightweight approach to i18n allows developers to easily localize their applications without dealing with the complexities often associated with larger frameworks.",normalizedContent:"# 11.1 overview\n\njfinal provides rapid support for internationalization (i18n) with only three class files involved in its internationalization module. this makes it much easier to implement and use compared to other frameworks like spring. jfinal's lightweight approach to i18n allows developers to easily localize their applications without dealing with the complexities often associated with larger frameworks.",charsets:{}},{title:"11.2 I18n and Res",frontmatter:{},regularPath:"/en/11%20Internationalization/11.2%20I18n%20&%20Res.html",relativePath:"en/11 Internationalization/11.2 I18n & Res.md",key:"v-79559791",path:"/en/11%20Internationalization/11.2%20I18n%20&%20Res.html",headers:[{level:3,title:"Create Resource Files",slug:"create-resource-files",normalizedTitle:"create resource files",charIndex:226},{level:3,title:"Configuration",slug:"configuration",normalizedTitle:"configuration",charIndex:587},{level:3,title:"Code Example",slug:"code-example",normalizedTitle:"code example",charIndex:954},{level:3,title:"Usage in JFinal Template Engine",slug:"usage-in-jfinal-template-engine",normalizedTitle:"usage in jfinal template engine",charIndex:1965}],lastUpdated:"9/22/2023, 7:42:33 AM",lastUpdatedTimestamp:1695368553e3,headersStr:"Create Resource Files Configuration Code Example Usage in JFinal Template Engine",content:'# 11.2 I18n and Res\n\nThe I18n object can obtain the corresponding Res object through the baseName and locale parameters. The Res object provides APIs to retrieve internationalized data.\n\nHere are the specific usage steps:\n\n\n# Create Resource Files\n\n * Create resource files named i18n_en_US.properties and i18n_zh_CN.properties. Here, i18n is the baseName of the resource file, which can be any name. In this example, we use "i18n" as the baseName.\n\n# Content of i18n_en_US.properties\n\nmsg=Hello {0}, today is {1}.\n\n\n1\n\n\n# Content of i18n_zh_CN.properties\n\nmsg=你好 {0}, 今天是 {1}.\n\n\n1\n\n\n\n# Configuration\n\n * In your YourJFinalConfig class, configure the default baseName for the resource file using me.setI18nDefaultBaseName("i18n");\n\nNote: Java internationalization specifications require .properties files to be edited using a specialized editor to prevent encoding issues. One commonly used editor is Properties Editor, which can be downloaded here.\n\n\n# Code Example\n\nHere is a code example based on the above steps:\n\n// Get the corresponding Res object through the locale parameter "en_US"\nRes resEn = I18n.use("en_US");\n// Directly retrieve data\nString msgEn = resEn.get("msg");\n// Retrieve and format data using parameters\nString msgEnFormat = resEn.format("msg", "james", new Date());\n\n// Get the corresponding Res object through the locale parameter "zh_CN"\nRes resZh = I18n.use("zh_CN");\n// Directly retrieve data\nString msgZh = resZh.get("msg");\n// Retrieve and format data using parameters\nString msgZhFormat = resZh.format("msg", "詹波", new Date());\n\n// Additionally, I18n can also load resource files that have not been configured using me.setI18nDefaultBaseName().\n// The only difference is that you need to specify the baseName parameter.\n// The following example requires the creation of an "otherRes_en_US.properties" file first.\nRes otherRes = I18n.use("otherRes", "en_US");\notherRes.get("msg");\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# Usage in JFinal Template Engine\n\nHere is how to use it in the JFinal template engine:\n\n#(_res.get("msg"))\n\n\n1\n\n\nNote: The above usage requires adding the I18nInterceptor, which will be introduced in the next section.',normalizedContent:'# 11.2 i18n and res\n\nthe i18n object can obtain the corresponding res object through the basename and locale parameters. the res object provides apis to retrieve internationalized data.\n\nhere are the specific usage steps:\n\n\n# create resource files\n\n * create resource files named i18n_en_us.properties and i18n_zh_cn.properties. here, i18n is the basename of the resource file, which can be any name. in this example, we use "i18n" as the basename.\n\n# content of i18n_en_us.properties\n\nmsg=hello {0}, today is {1}.\n\n\n1\n\n\n# content of i18n_zh_cn.properties\n\nmsg=你好 {0}, 今天是 {1}.\n\n\n1\n\n\n\n# configuration\n\n * in your yourjfinalconfig class, configure the default basename for the resource file using me.seti18ndefaultbasename("i18n");\n\nnote: java internationalization specifications require .properties files to be edited using a specialized editor to prevent encoding issues. one commonly used editor is properties editor, which can be downloaded here.\n\n\n# code example\n\nhere is a code example based on the above steps:\n\n// get the corresponding res object through the locale parameter "en_us"\nres resen = i18n.use("en_us");\n// directly retrieve data\nstring msgen = resen.get("msg");\n// retrieve and format data using parameters\nstring msgenformat = resen.format("msg", "james", new date());\n\n// get the corresponding res object through the locale parameter "zh_cn"\nres reszh = i18n.use("zh_cn");\n// directly retrieve data\nstring msgzh = reszh.get("msg");\n// retrieve and format data using parameters\nstring msgzhformat = reszh.format("msg", "詹波", new date());\n\n// additionally, i18n can also load resource files that have not been configured using me.seti18ndefaultbasename().\n// the only difference is that you need to specify the basename parameter.\n// the following example requires the creation of an "otherres_en_us.properties" file first.\nres otherres = i18n.use("otherres", "en_us");\notherres.get("msg");\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# usage in jfinal template engine\n\nhere is how to use it in the jfinal template engine:\n\n#(_res.get("msg"))\n\n\n1\n\n\nnote: the above usage requires adding the i18ninterceptor, which will be introduced in the next section.',charsets:{cjk:!0}},{title:"11.3 I18nInterceptor",frontmatter:{},regularPath:"/en/11%20Internationalization/11.3%20I18nInterceptor.html",relativePath:"en/11 Internationalization/11.3 I18nInterceptor.md",key:"v-3269c38d",path:"/en/11%20Internationalization/11.3%20I18nInterceptor.html",headers:[{level:3,title:"Configuration",slug:"configuration",normalizedTitle:"configuration",charIndex:188},{level:3,title:"Usage in Template",slug:"usage-in-template",normalizedTitle:"usage in template",charIndex:359},{level:3,title:"Customization",slug:"customization",normalizedTitle:"customization",charIndex:1495},{level:3,title:"Advanced Usage",slug:"advanced-usage",normalizedTitle:"advanced usage",charIndex:1829}],lastUpdated:"9/22/2023, 7:42:33 AM",lastUpdatedTimestamp:1695368553e3,headersStr:"Configuration Usage in Template Customization Advanced Usage",content:'# 11.3 I18nInterceptor\n\nThe I18nInterceptor is a component provided for web applications to handle internationalization. Below is an example of how to use it in a Freemarker template:\n\n\n# Configuration\n\nFirst, configure I18nInterceptor as a global interceptor.\n\npublic void configInterceptor(Interceptors me) {\n  me.add(new I18nInterceptor());\n}\n\n\n1\n2\n3\n\n\n\n# Usage in Template\n\nThen, in the JFinal template engine, you can use the _res object to get internationalized data.\n\n#(_res.get("msg"))\n\n\n1\n\n\nThe above code configures I18nInterceptor to intercept action requests and allows the Freemarker template files to use an object named _res to get internationalized data. The specific workflow of I18nInterceptor is as follows:\n\n 1. Tries to get the locale parameter from the request using controller.getPara("_locale"). If obtained, it saves it in a cookie.\n\n 2. If controller.getPara("_locale") does not get a value, it tries to get the locale parameter from controller.getCookie("_locale").\n\n 3. If the above two steps still don\'t yield a locale parameter value, the value of I18n.defaultLocale is used as the locale.\n\n 4. Using the locale value obtained in the previous steps, I18n.use(locale) is called to get a Res object. This Res object is then passed to the view using controller.setAttr("_res", res).\n\n 5. If I18nInterceptor.isSwitchView is set to true, it will also change the rendered view, enabling the overall template file to switch. Details can be checked in the source code.\n\n\n# Customization\n\nThe variable names "_locale" and "_res" used in I18nInterceptor can be specified when creating the I18nInterceptor object. If not specified, default values will be used. You can also extend I18nInterceptor and override methods like getLocalPara, getResName, and getBaseName to implement more personalized features.\n\n\n# Advanced Usage\n\nIn some web systems, the page requires a lot of text to be internationalized, and the CSS and HTML may also vary greatly due to internationalization. For such use-cases, you can create multiple sets of internationalized views with the same name and categorize these views in subdirectories based on locale. Finally, use the I18nInterceptor to dynamically switch views based on the locale. You just need to set I18nInterceptor.isSwitchView to true to achieve this, saving time and effort.',normalizedContent:'# 11.3 i18ninterceptor\n\nthe i18ninterceptor is a component provided for web applications to handle internationalization. below is an example of how to use it in a freemarker template:\n\n\n# configuration\n\nfirst, configure i18ninterceptor as a global interceptor.\n\npublic void configinterceptor(interceptors me) {\n  me.add(new i18ninterceptor());\n}\n\n\n1\n2\n3\n\n\n\n# usage in template\n\nthen, in the jfinal template engine, you can use the _res object to get internationalized data.\n\n#(_res.get("msg"))\n\n\n1\n\n\nthe above code configures i18ninterceptor to intercept action requests and allows the freemarker template files to use an object named _res to get internationalized data. the specific workflow of i18ninterceptor is as follows:\n\n 1. tries to get the locale parameter from the request using controller.getpara("_locale"). if obtained, it saves it in a cookie.\n\n 2. if controller.getpara("_locale") does not get a value, it tries to get the locale parameter from controller.getcookie("_locale").\n\n 3. if the above two steps still don\'t yield a locale parameter value, the value of i18n.defaultlocale is used as the locale.\n\n 4. using the locale value obtained in the previous steps, i18n.use(locale) is called to get a res object. this res object is then passed to the view using controller.setattr("_res", res).\n\n 5. if i18ninterceptor.isswitchview is set to true, it will also change the rendered view, enabling the overall template file to switch. details can be checked in the source code.\n\n\n# customization\n\nthe variable names "_locale" and "_res" used in i18ninterceptor can be specified when creating the i18ninterceptor object. if not specified, default values will be used. you can also extend i18ninterceptor and override methods like getlocalpara, getresname, and getbasename to implement more personalized features.\n\n\n# advanced usage\n\nin some web systems, the page requires a lot of text to be internationalized, and the css and html may also vary greatly due to internationalization. for such use-cases, you can create multiple sets of internationalized views with the same name and categorize these views in subdirectories based on locale. finally, use the i18ninterceptor to dynamically switch views based on the locale. you just need to set i18ninterceptor.isswitchview to true to achieve this, saving time and effort.',charsets:{}},{title:"12.1 Overview",frontmatter:{},regularPath:"/en/12%20Json%20conversion/12.1%20Overview.html",relativePath:"en/12 Json conversion/12.1 Overview.md",key:"v-692f6704",path:"/en/12%20Json%20conversion/12.1%20Overview.html",lastUpdated:"9/22/2023, 7:48:43 AM",lastUpdatedTimestamp:1695368923e3,headersStr:null,content:"# 12.1 Overview\n\nJFinal's JSON module centers around the abstract class Json, which is designed for easy extension with third-party implementations. JFinal officially provides three JSON implementations: JFinalJson, FastJson, and Jackson. All three implementations extend the abstract class Json.\n\nThe core abstraction of the Json class is as follows:\n\npublic abstract class Json {\n    public abstract String toJson(Object object);\n    public abstract <T> T parse(String jsonString, Class <T> type);\n}\n\n\n1\n2\n3\n4\n\n\nAs shown in the code above, the Json abstraction consists of two methods for converting between Java objects and JSON strings. The toJson(...) method converts any Java type to a JSON string, while the parse method reverses a JSON string back into an object of a specified generic type.",normalizedContent:"# 12.1 overview\n\njfinal's json module centers around the abstract class json, which is designed for easy extension with third-party implementations. jfinal officially provides three json implementations: jfinaljson, fastjson, and jackson. all three implementations extend the abstract class json.\n\nthe core abstraction of the json class is as follows:\n\npublic abstract class json {\n    public abstract string tojson(object object);\n    public abstract <t> t parse(string jsonstring, class <t> type);\n}\n\n\n1\n2\n3\n4\n\n\nas shown in the code above, the json abstraction consists of two methods for converting between java objects and json strings. the tojson(...) method converts any java type to a json string, while the parse method reverses a json string back into an object of a specified generic type.",charsets:{}},{title:"12.2 Json Configuration",frontmatter:{},regularPath:"/en/12%20Json%20conversion/12.2%20Json%20configuration.html",relativePath:"en/12 Json conversion/12.2 Json configuration.md",key:"v-19c0b0c7",path:"/en/12%20Json%20conversion/12.2%20Json%20configuration.html",lastUpdated:"9/22/2023, 7:48:43 AM",lastUpdatedTimestamp:1695368923e3,headersStr:null,content:"# 12.2 Json Configuration\n\nJFinal officially provides three implementations of the Json abstract class: JFinalJson, FastJson, and Jackson. If you don't configure it, the default implementation used is JFinalJson. To switch to another implementation, you need to configure it in configConstant as follows:\n\npublic void configConstant(Constants me) {\n    me.setJsonFactory(new FastJsonFactory());\n}\n\n\n1\n2\n3\n\n\nThe above configuration switches the system default from JFinalJson to FastJson. You can also extend the Json abstract class and JsonFactory to implement a custom Json implementation.\n\nSuppose you have extended your own MyJson and MyJsonFactory, then you can switch to your own implementation using the following method:\n\npublic void configConstant(Constants me) {\n    me.setJsonFactory(new MyJsonFactory());\n}\n\n\n1\n2\n3\n\n\nIn addition, JFinal officially provides the MixedJson and MixedJsonFactory implementations. This implementation uses JFinalJson for converting to JSON strings and FastJson for parsing back into objects.\n\nIf you wish to configure this in a non-web context, you need to use JsonManager. For example:\n\nJsonManager.me().setDefaultJsonFactory(new MixedJsonFactory());\n\n\n1\n\n\nYou can also configure the format of the Date type after it's converted to JSON:\n\npublic void configConstant(Constants me) {\n    me.setJsonDatePattern(\"yyyy-MM-dd\");\n}\n\n\n1\n2\n3\n\n\nNote: When using MixedJsonFactory, FastJsonFactory, or JacksonFactory, you need to add their dependencies. Specific dependencies will be discussed in the next section.",normalizedContent:"# 12.2 json configuration\n\njfinal officially provides three implementations of the json abstract class: jfinaljson, fastjson, and jackson. if you don't configure it, the default implementation used is jfinaljson. to switch to another implementation, you need to configure it in configconstant as follows:\n\npublic void configconstant(constants me) {\n    me.setjsonfactory(new fastjsonfactory());\n}\n\n\n1\n2\n3\n\n\nthe above configuration switches the system default from jfinaljson to fastjson. you can also extend the json abstract class and jsonfactory to implement a custom json implementation.\n\nsuppose you have extended your own myjson and myjsonfactory, then you can switch to your own implementation using the following method:\n\npublic void configconstant(constants me) {\n    me.setjsonfactory(new myjsonfactory());\n}\n\n\n1\n2\n3\n\n\nin addition, jfinal officially provides the mixedjson and mixedjsonfactory implementations. this implementation uses jfinaljson for converting to json strings and fastjson for parsing back into objects.\n\nif you wish to configure this in a non-web context, you need to use jsonmanager. for example:\n\njsonmanager.me().setdefaultjsonfactory(new mixedjsonfactory());\n\n\n1\n\n\nyou can also configure the format of the date type after it's converted to json:\n\npublic void configconstant(constants me) {\n    me.setjsondatepattern(\"yyyy-mm-dd\");\n}\n\n\n1\n2\n3\n\n\nnote: when using mixedjsonfactory, fastjsonfactory, or jacksonfactory, you need to add their dependencies. specific dependencies will be discussed in the next section.",charsets:{}},{title:"12.3 Four Implementations of Json",frontmatter:{},regularPath:"/en/12%20Json%20conversion/12.3%20Four%20implementations%20of%20Json.html",relativePath:"en/12 Json conversion/12.3 Four implementations of Json.md",key:"v-ed335bf2",path:"/en/12%20Json%20conversion/12.3%20Four%20implementations%20of%20Json.html",headers:[{level:3,title:"1. JFinalJson",slug:"_1-jfinaljson",normalizedTitle:"1. jfinaljson",charIndex:197},{level:3,title:"2. FastJson",slug:"_2-fastjson",normalizedTitle:"2. fastjson",charIndex:1457},{level:3,title:"3. Jackson",slug:"_3-jackson",normalizedTitle:"3. jackson",charIndex:1912},{level:3,title:"4. MixedJson",slug:"_4-mixedjson",normalizedTitle:"4. mixedjson",charIndex:2244}],lastUpdated:"9/22/2023, 7:48:43 AM",lastUpdatedTimestamp:1695368923e3,headersStr:"1. JFinalJson 2. FastJson 3. Jackson 4. MixedJson",content:"# 12.3 Four Implementations of Json\n\nJFinal officially provides four implementations of the Json abstract class: JFinalJson, FastJson, Jackson, and MixedJson, which can meet most requirements.\n\n\n# 1. JFinalJson\n\nJFinalJson is the earliest implementation provided by JFinal. The most important feature of this implementation is that when converting a JFinal Model, it first gets the Map attrs attribute from the Model and then converts this Map object. Even if you have generated getter methods in your Model, they will not be called during conversion.\n\nSeveral reasons for converting Model.attrs rather than using getter methods are:\n\nA: Supports the conversion of multi-table join query results.\n\nB: Early JFinal users did not generate getter methods for Model.\n\nNote: JFinalJson only supports object-to-JSON-string conversion and does not support the reverse JSON-string-to-object conversion. You can use MixedJson to support reverse conversion: me.setJsonFactory(new MixedJsonFactory());.\n\n# Advanced Features\n\n * Convert Model and Record field names to camel case:\n   \n   JFinalJson.setModelAndRecordFieldNameToCamelCase();\n   \n   \n   1\n   \n\n * Skip null value fields during conversion:\n   \n   JFinalJson.setSkipNullValueField(true);\n   \n   \n   1\n   \n\n * Add custom addToJson extension methods:\n   \n   JFinalJson.addToJson(Timestamp.class, (value, depth, ret) -> {\n       ret.addLong(((Timestamp)value).getTime());\n   });\n   \n   \n   1\n   2\n   3\n   \n\n\n# 2. FastJson\n\nFastJson is a wrapper around the third-party FastJson library. This implementation heavily depends on the getter methods of Model and Java beans. You can configure various FastJson conversion parameters according to its official documentation.\n\nTo use FastJson, you need to add its dependency:\n\n<dependency>\n    <groupId>com.alibaba</groupId>\n    <artifactId>fastjson</artifactId>\n    <version>1.2.68</version>\n</dependency>\n\n\n1\n2\n3\n4\n5\n\n\n\n# 3. Jackson\n\nThis implementation is similar to FastJson and is a wrapper around the third-party Jackson library.\n\nTo use Jackson, you need to add its dependency:\n\n<dependency>\n    <groupId>com.fasterxml.jackson.core</groupId>\n    <artifactId>jackson-databind</artifactId>\n    <version>2.11.0</version>\n</dependency>\n\n\n1\n2\n3\n4\n5\n\n\n\n# 4. MixedJson\n\nMixedJson is another wrapper around JFinalJson and FastJson. It uses JFinalJson for Object-to-JSON-string conversion and FastJson for JSON-string-to-Object conversion.\n\nThis implementation combines the advantages of both JFinalJson and FastJson. The former does not support JSON-string-to-Object conversion, while the latter does not support the conversion of dynamic fields in join table SQL queries.\n\nTo use MixedJson, you need to add the FastJson dependency:\n\n<dependency>\n    <groupId>com.alibaba</groupId>\n    <artifactId>fastjson</artifactId>\n    <version>1.2.68</version>\n</dependency>\n\n\n1\n2\n3\n4\n5\n",normalizedContent:"# 12.3 four implementations of json\n\njfinal officially provides four implementations of the json abstract class: jfinaljson, fastjson, jackson, and mixedjson, which can meet most requirements.\n\n\n# 1. jfinaljson\n\njfinaljson is the earliest implementation provided by jfinal. the most important feature of this implementation is that when converting a jfinal model, it first gets the map attrs attribute from the model and then converts this map object. even if you have generated getter methods in your model, they will not be called during conversion.\n\nseveral reasons for converting model.attrs rather than using getter methods are:\n\na: supports the conversion of multi-table join query results.\n\nb: early jfinal users did not generate getter methods for model.\n\nnote: jfinaljson only supports object-to-json-string conversion and does not support the reverse json-string-to-object conversion. you can use mixedjson to support reverse conversion: me.setjsonfactory(new mixedjsonfactory());.\n\n# advanced features\n\n * convert model and record field names to camel case:\n   \n   jfinaljson.setmodelandrecordfieldnametocamelcase();\n   \n   \n   1\n   \n\n * skip null value fields during conversion:\n   \n   jfinaljson.setskipnullvaluefield(true);\n   \n   \n   1\n   \n\n * add custom addtojson extension methods:\n   \n   jfinaljson.addtojson(timestamp.class, (value, depth, ret) -> {\n       ret.addlong(((timestamp)value).gettime());\n   });\n   \n   \n   1\n   2\n   3\n   \n\n\n# 2. fastjson\n\nfastjson is a wrapper around the third-party fastjson library. this implementation heavily depends on the getter methods of model and java beans. you can configure various fastjson conversion parameters according to its official documentation.\n\nto use fastjson, you need to add its dependency:\n\n<dependency>\n    <groupid>com.alibaba</groupid>\n    <artifactid>fastjson</artifactid>\n    <version>1.2.68</version>\n</dependency>\n\n\n1\n2\n3\n4\n5\n\n\n\n# 3. jackson\n\nthis implementation is similar to fastjson and is a wrapper around the third-party jackson library.\n\nto use jackson, you need to add its dependency:\n\n<dependency>\n    <groupid>com.fasterxml.jackson.core</groupid>\n    <artifactid>jackson-databind</artifactid>\n    <version>2.11.0</version>\n</dependency>\n\n\n1\n2\n3\n4\n5\n\n\n\n# 4. mixedjson\n\nmixedjson is another wrapper around jfinaljson and fastjson. it uses jfinaljson for object-to-json-string conversion and fastjson for json-string-to-object conversion.\n\nthis implementation combines the advantages of both jfinaljson and fastjson. the former does not support json-string-to-object conversion, while the latter does not support the conversion of dynamic fields in join table sql queries.\n\nto use mixedjson, you need to add the fastjson dependency:\n\n<dependency>\n    <groupid>com.alibaba</groupid>\n    <artifactid>fastjson</artifactid>\n    <version>1.2.68</version>\n</dependency>\n\n\n1\n2\n3\n4\n5\n",charsets:{}},{title:"12.4 Usage of JSON Conversion in JFinal",frontmatter:{},regularPath:"/en/12%20Json%20conversion/12.4%20Json%20conversion%20usage.html",relativePath:"en/12 Json conversion/12.4 Json conversion usage.md",key:"v-7be768f6",path:"/en/12%20Json%20conversion/12.4%20Json%20conversion%20usage.html",headers:[{level:3,title:"1. Using Configured JSON Implementation for Conversion",slug:"_1-using-configured-json-implementation-for-conversion",normalizedTitle:"1. using configured json implementation for conversion",charIndex:245},{level:3,title:"2. Using a Specified JSON Implementation for Conversion",slug:"_2-using-a-specified-json-implementation-for-conversion",normalizedTitle:"2. using a specified json implementation for conversion",charIndex:672}],lastUpdated:"9/22/2023, 7:48:43 AM",lastUpdatedTimestamp:1695368923e3,headersStr:"1. Using Configured JSON Implementation for Conversion 2. Using a Specified JSON Implementation for Conversion",content:"# 12.4 Usage of JSON Conversion in JFinal\n\nThe usage of JSON conversion in JFinal can be divided into two categories: one is to use the configured JSON conversion, and the other is to specify a particular implementation for JSON conversion.\n\n\n# 1. Using Configured JSON Implementation for Conversion\n\nThe following code will use the JSON implementation configured as described in the previous sections:\n\n// Use renderJson in the Controller for JSON conversion and rendering to the client\nrenderJson();\nrenderJson(key, object);\nrenderJson(new String[]{...});\n\n// Use JsonKit utility class for JSON conversion\nJsonKit.toJson(...);\nJsonKit.parse(...);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 2. Using a Specified JSON Implementation for Conversion\n\nThe following code will use a specified JSON implementation for conversion:\n\n// Temporarily specify to use FastJson implementation\nFastJson.getJson().toJson(...);\nFastJson.getJson().parse(...);\n\n// Pass the converted JSON string directly to the Controller.renderJson(..) method\nrenderJson(FastJson.getJson().toJson(...));\n\n\n1\n2\n3\n4\n5\n6\n\n\nThe above usage allows you to temporarily break away from the configured JSON implementation and use a specified JSON implementation instead. This is useful in situations where you might need different JSON conversion strategies for different parts of your application.",normalizedContent:"# 12.4 usage of json conversion in jfinal\n\nthe usage of json conversion in jfinal can be divided into two categories: one is to use the configured json conversion, and the other is to specify a particular implementation for json conversion.\n\n\n# 1. using configured json implementation for conversion\n\nthe following code will use the json implementation configured as described in the previous sections:\n\n// use renderjson in the controller for json conversion and rendering to the client\nrenderjson();\nrenderjson(key, object);\nrenderjson(new string[]{...});\n\n// use jsonkit utility class for json conversion\njsonkit.tojson(...);\njsonkit.parse(...);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 2. using a specified json implementation for conversion\n\nthe following code will use a specified json implementation for conversion:\n\n// temporarily specify to use fastjson implementation\nfastjson.getjson().tojson(...);\nfastjson.getjson().parse(...);\n\n// pass the converted json string directly to the controller.renderjson(..) method\nrenderjson(fastjson.getjson().tojson(...));\n\n\n1\n2\n3\n4\n5\n6\n\n\nthe above usage allows you to temporarily break away from the configured json implementation and use a specified json implementation instead. this is useful in situations where you might need different json conversion strategies for different parts of your application.",charsets:{}},{title:"13.1 Overview",frontmatter:{},regularPath:"/en/13%20JFinal%20architecture%20and%20extensions/13.1%20Overview.html",relativePath:"en/13 JFinal architecture and extensions/13.1 Overview.md",key:"v-2b288f64",path:"/en/13%20JFinal%20architecture%20and%20extensions/13.1%20Overview.html",headers:[{level:2,title:"Five Main Components",slug:"five-main-components",normalizedTitle:"five main components",charIndex:377},{level:2,title:"Extensibility",slug:"extensibility",normalizedTitle:"extensibility",charIndex:1131},{level:2,title:"Typical Extensions",slug:"typical-extensions",normalizedTitle:"typical extensions",charIndex:1483}],lastUpdated:"9/22/2023, 7:51:24 AM",lastUpdatedTimestamp:1695369084e3,headersStr:"Five Main Components Extensibility Typical Extensions",content:"# 13.1 Overview\n\nJFinal adopts a microkernel-based, full-range extensible architecture. \"Full-range\" refers to the spatial expression of its extension methods. JFinal is composed of five main components: Handler, Interceptor, Controller, Render, and Plugin. This chapter will provide a brief introduction to this architecture and some commonly used extensions based on it.\n\n\n# Five Main Components\n\n 1. Handler: Responsible for the pre-processing and post-processing of incoming HTTP requests. Handlers can be used for tasks such as URL rewriting, filtering, and more.\n\n 2. Interceptor: A mechanism that allows you to add behavior to methods inside Controllers. They can be used for logging, security checks, transactions, etc.\n\n 3. Controller: The core component where the business logic resides. It maps URLs to specific methods and handles client requests.\n\n 4. Render: Responsible for the view rendering process. JFinal supports multiple view technologies, and you can easily extend it to support others.\n\n 5. Plugin: Used for extending JFinal's capabilities, like adding support for databases, queues, and other services.\n\n\n# Extensibility\n\nThe architecture is designed to be highly extensible, allowing developers to easily add custom functionalities or modify existing ones. Whether you need to add a custom authentication mechanism, integrate a new view rendering engine, or extend the Controller with new functionalities, JFinal's architecture makes it straightforward.\n\n\n# Typical Extensions\n\nSome of the typical extensions that can be built based on this architecture include:\n\n 1. Custom Handlers: For tasks like URL rewriting, request and response modification.\n\n 2. Custom Interceptors: For things like logging, security checks, or method-level annotations.\n\n 3. Custom Controllers: For implementing specific business logic or RESTful APIs.\n\n 4. Custom Renders: To integrate different view technologies other than the ones provided by default.\n\n 5. Custom Plugins: For integrating different databases, messaging queues, or any third-party libraries.\n\nThe next sections will delve deeper into these components and provide examples and best practices for extending them.",normalizedContent:"# 13.1 overview\n\njfinal adopts a microkernel-based, full-range extensible architecture. \"full-range\" refers to the spatial expression of its extension methods. jfinal is composed of five main components: handler, interceptor, controller, render, and plugin. this chapter will provide a brief introduction to this architecture and some commonly used extensions based on it.\n\n\n# five main components\n\n 1. handler: responsible for the pre-processing and post-processing of incoming http requests. handlers can be used for tasks such as url rewriting, filtering, and more.\n\n 2. interceptor: a mechanism that allows you to add behavior to methods inside controllers. they can be used for logging, security checks, transactions, etc.\n\n 3. controller: the core component where the business logic resides. it maps urls to specific methods and handles client requests.\n\n 4. render: responsible for the view rendering process. jfinal supports multiple view technologies, and you can easily extend it to support others.\n\n 5. plugin: used for extending jfinal's capabilities, like adding support for databases, queues, and other services.\n\n\n# extensibility\n\nthe architecture is designed to be highly extensible, allowing developers to easily add custom functionalities or modify existing ones. whether you need to add a custom authentication mechanism, integrate a new view rendering engine, or extend the controller with new functionalities, jfinal's architecture makes it straightforward.\n\n\n# typical extensions\n\nsome of the typical extensions that can be built based on this architecture include:\n\n 1. custom handlers: for tasks like url rewriting, request and response modification.\n\n 2. custom interceptors: for things like logging, security checks, or method-level annotations.\n\n 3. custom controllers: for implementing specific business logic or restful apis.\n\n 4. custom renders: to integrate different view technologies other than the ones provided by default.\n\n 5. custom plugins: for integrating different databases, messaging queues, or any third-party libraries.\n\nthe next sections will delve deeper into these components and provide examples and best practices for extending them.",charsets:{}},{title:"13.2 Architecture",frontmatter:{},regularPath:"/en/13%20JFinal%20architecture%20and%20extensions/13.2%20Architecture.html",relativePath:"en/13 JFinal architecture and extensions/13.2 Architecture.md",key:"v-45973972",path:"/en/13%20JFinal%20architecture%20and%20extensions/13.2%20Architecture.html",lastUpdated:"9/22/2023, 7:51:24 AM",lastUpdatedTimestamp:1695369084e3,headersStr:null,content:"# 13.2 Architecture\n\nThe JFinal top-level architecture diagram is shown below:\n! architecture",normalizedContent:"# 13.2 architecture\n\nthe jfinal top-level architecture diagram is shown below:\n! architecture",charsets:{}},{title:"14.1 Quick Upgrade",frontmatter:{},regularPath:"/en/14%20Upgrade%20JFinal/14.1%20Rapid%20upgrade.html",relativePath:"en/14 Upgrade JFinal/14.1 Rapid upgrade.md",key:"v-63841533",path:"/en/14%20Upgrade%20JFinal/14.1%20Rapid%20upgrade.html",headers:[{level:3,title:"I. Upgrading Versions Prior to jfinal 3.0",slug:"i-upgrading-versions-prior-to-jfinal-3-0",normalizedTitle:"i. upgrading versions prior to jfinal 3.0",charIndex:25},{level:2,title:"II. Upgrading Versions After jfinal 3.0",slug:"ii-upgrading-versions-after-jfinal-3-0",normalizedTitle:"ii. upgrading versions after jfinal 3.0",charIndex:294},{level:3,title:"1. Upgrading to 3.1",slug:"_1-upgrading-to-3-1",normalizedTitle:"1. upgrading to 3.1",charIndex:338},{level:3,title:"2. Upgrading to 3.2",slug:"_2-upgrading-to-3-2",normalizedTitle:"2. upgrading to 3.2",charIndex:406},{level:3,title:"3. Upgrading to 3.3",slug:"_3-upgrading-to-3-3",normalizedTitle:"3. upgrading to 3.3",charIndex:507},{level:3,title:"4. Upgrading to 3.4",slug:"_4-upgrading-to-3-4",normalizedTitle:"4. upgrading to 3.4",charIndex:693},{level:3,title:"5. Upgrading to 3.5",slug:"_5-upgrading-to-3-5",normalizedTitle:"5. upgrading to 3.5",charIndex:965},{level:3,title:"6. Upgrading to 3.6",slug:"_6-upgrading-to-3-6",normalizedTitle:"6. upgrading to 3.6",charIndex:1044},{level:3,title:"7. Upgrading to 3.8",slug:"_7-upgrading-to-3-8",normalizedTitle:"7. upgrading to 3.8",charIndex:1365},{level:3,title:"8. Upgrading to 4.0",slug:"_8-upgrading-to-4-0",normalizedTitle:"8. upgrading to 4.0",charIndex:1525},{level:3,title:"9. Upgrading to 4.1",slug:"_9-upgrading-to-4-1",normalizedTitle:"9. upgrading to 4.1",charIndex:1593},{level:3,title:"10. Upgrading to 4.2",slug:"_10-upgrading-to-4-2",normalizedTitle:"10. upgrading to 4.2",charIndex:1661},{level:3,title:"11. Upgrading to 4.3",slug:"_11-upgrading-to-4-3",normalizedTitle:"11. upgrading to 4.3",charIndex:1730},{level:3,title:"12. Upgrading to 4.4",slug:"_12-upgrading-to-4-4",normalizedTitle:"12. upgrading to 4.4",charIndex:1799},{level:3,title:"13. Upgrading to 4.5",slug:"_13-upgrading-to-4-5",normalizedTitle:"13. upgrading to 4.5",charIndex:1868},{level:3,title:"14. Upgrading to 4.6",slug:"_14-upgrading-to-4-6",normalizedTitle:"14. upgrading to 4.6",charIndex:2057},{level:3,title:"15. Upgrading to 4.7",slug:"_15-upgrading-to-4-7",normalizedTitle:"15. upgrading to 4.7",charIndex:2126},{level:3,title:"16. Upgrading to 4.8",slug:"_16-upgrading-to-4-8",normalizedTitle:"16. upgrading to 4.8",charIndex:2195},{level:3,title:"17. Upgrading to 4.9",slug:"_17-upgrading-to-4-9",normalizedTitle:"17. upgrading to 4.9",charIndex:2580},{level:3,title:"17. Upgrading to 4.9.01",slug:"_17-upgrading-to-4-9-01",normalizedTitle:"17. upgrading to 4.9.01",charIndex:2760},{level:3,title:"18. Upgrading to 4.9.02",slug:"_18-upgrading-to-4-9-02",normalizedTitle:"18. upgrading to 4.9.02",charIndex:2868},{level:3,title:"19. Upgrading to 4.9.03",slug:"_19-upgrading-to-4-9-03",normalizedTitle:"19. upgrading to 4.9.03",charIndex:2963},{level:3,title:"20. Upgrading to 4.9.04",slug:"_20-upgrading-to-4-9-04",normalizedTitle:"20. upgrading to 4.9.04",charIndex:3035},{level:3,title:"21. Upgrading to 4.9.05",slug:"_21-upgrading-to-4-9-05",normalizedTitle:"21. upgrading to 4.9.05",charIndex:3188},{level:3,title:"22. Upgrading to 4.9.06",slug:"_22-upgrading-to-4-9-06",normalizedTitle:"22. upgrading to 4.9.06",charIndex:3348},{level:3,title:"23. Upgrading to 4.9.07",slug:"_23-upgrading-to-4-9-07",normalizedTitle:"23. upgrading to 4.9.07",charIndex:3549},{level:3,title:"24. Upgrading to 4.9.08",slug:"_24-upgrading-to-4-9-08",normalizedTitle:"24. upgrading to 4.9.08",charIndex:3621},{level:3,title:"25. Upgrading to 4.9.09",slug:"_25-upgrading-to-4-9-09",normalizedTitle:"25. upgrading to 4.9.09",charIndex:3693},{level:3,title:"26. Upgrading to 4.9.10",slug:"_26-upgrading-to-4-9-10",normalizedTitle:"26. upgrading to 4.9.10",charIndex:3765},{level:3,title:"27. Upgrading to 4.9.11",slug:"_27-upgrading-to-4-9-11",normalizedTitle:"27. upgrading to 4.9.11",charIndex:3837},{level:3,title:"28. Upgrading to 4.9.12",slug:"_28-upgrading-to-4-9-12",normalizedTitle:"28. upgrading to 4.9.12",charIndex:3909},{level:3,title:"29. Upgrading to 4.9.13",slug:"_29-upgrading-to-4-9-13",normalizedTitle:"29. upgrading to 4.9.13",charIndex:4044},{level:3,title:"30. Upgrading to 4.9.14",slug:"_30-upgrading-to-4-9-14",normalizedTitle:"30. upgrading to 4.9.14",charIndex:4116},{level:3,title:"31. Upgrading to 4.9.15",slug:"_31-upgrading-to-4-9-15",normalizedTitle:"31. upgrading to 4.9.15",charIndex:4188},{level:3,title:"32. Upgrading to 4.9.16",slug:"_32-upgrading-to-4-9-16",normalizedTitle:"32. upgrading to 4.9.16",charIndex:4371},{level:3,title:"33. Upgrading to 4.9.17",slug:"_33-upgrading-to-4-9-17",normalizedTitle:"33. upgrading to 4.9.17",charIndex:4585},{level:3,title:"34. Upgrading to 4.9.18",slug:"_34-upgrading-to-4-9-18",normalizedTitle:"34. upgrading to 4.9.18",charIndex:4657},{level:3,title:"35. Upgrading to 4.9.19",slug:"_35-upgrading-to-4-9-19",normalizedTitle:"35. upgrading to 4.9.19",charIndex:4765},{level:3,title:"36. Upgrading to 4.9.20",slug:"_36-upgrading-to-4-9-20",normalizedTitle:"36. upgrading to 4.9.20",charIndex:4837},{level:3,title:"37. Upgrading to 4.9.21",slug:"_37-upgrading-to-4-9-21",normalizedTitle:"37. upgrading to 4.9.21",charIndex:5001},{level:3,title:"38. Upgrading to 5.0.0",slug:"_38-upgrading-to-5-0-0",normalizedTitle:"38. upgrading to 5.0.0",charIndex:5180},{level:3,title:"39. Upgrading to 5.0.1",slug:"_39-upgrading-to-5-0-1",normalizedTitle:"39. upgrading to 5.0.1",charIndex:5251},{level:3,title:"40. Upgrading to 5.0.2",slug:"_40-upgrading-to-5-0-2",normalizedTitle:"40. upgrading to 5.0.2",charIndex:5322},{level:3,title:"41. Upgrading to 5.0.3",slug:"_41-upgrading-to-5-0-3",normalizedTitle:"41. upgrading to 5.0.3",charIndex:5515},{level:3,title:"42. Upgrading to 5.0.4",slug:"_42-upgrading-to-5-0-4",normalizedTitle:"42. upgrading to 5.0.4",charIndex:5586},{level:3,title:"43. Upgrading to 5.0.5",slug:"_43-upgrading-to-5-0-5",normalizedTitle:"43. upgrading to 5.0.5",charIndex:5657},{level:3,title:"44. Upgrading to 5.0.6",slug:"_44-upgrading-to-5-0-6",normalizedTitle:"44. upgrading to 5.0.6",charIndex:5728},{level:3,title:"45. Upgrading to 5.0.7",slug:"_45-upgrading-to-5-0-7",normalizedTitle:"45. upgrading to 5.0.7",charIndex:5939},{level:3,title:"46. Upgrading to 5.0.8",slug:"_46-upgrading-to-5-0-8",normalizedTitle:"46. upgrading to 5.0.8",charIndex:6010},{level:3,title:"47. Upgrading to 5.0.8",slug:"_47-upgrading-to-5-0-8",normalizedTitle:"47. upgrading to 5.0.8",charIndex:6081},{level:3,title:"48. Upgrading to 5.0.9",slug:"_48-upgrading-to-5-0-9",normalizedTitle:"48. upgrading to 5.0.9",charIndex:6152},{level:3,title:"49. Upgrading to 5.1.0",slug:"_49-upgrading-to-5-1-0",normalizedTitle:"49. upgrading to 5.1.0",charIndex:6223},{level:3,title:"50. Upgrading to 5.1.1",slug:"_50-upgrading-to-5-1-1",normalizedTitle:"50. upgrading to 5.1.1",charIndex:6294},{level:3,title:"51. Upgrading to 5.1.2",slug:"_51-upgrading-to-5-1-2",normalizedTitle:"51. upgrading to 5.1.2",charIndex:6365}],lastUpdated:"9/22/2023, 7:59:19 AM",lastUpdatedTimestamp:1695369559e3,headersStr:"I. Upgrading Versions Prior to jfinal 3.0 II. Upgrading Versions After jfinal 3.0 1. Upgrading to 3.1 2. Upgrading to 3.2 3. Upgrading to 3.3 4. Upgrading to 3.4 5. Upgrading to 3.5 6. Upgrading to 3.6 7. Upgrading to 3.8 8. Upgrading to 4.0 9. Upgrading to 4.1 10. Upgrading to 4.2 11. Upgrading to 4.3 12. Upgrading to 4.4 13. Upgrading to 4.5 14. Upgrading to 4.6 15. Upgrading to 4.7 16. Upgrading to 4.8 17. Upgrading to 4.9 17. Upgrading to 4.9.01 18. Upgrading to 4.9.02 19. Upgrading to 4.9.03 20. Upgrading to 4.9.04 21. Upgrading to 4.9.05 22. Upgrading to 4.9.06 23. Upgrading to 4.9.07 24. Upgrading to 4.9.08 25. Upgrading to 4.9.09 26. Upgrading to 4.9.10 27. Upgrading to 4.9.11 28. Upgrading to 4.9.12 29. Upgrading to 4.9.13 30. Upgrading to 4.9.14 31. Upgrading to 4.9.15 32. Upgrading to 4.9.16 33. Upgrading to 4.9.17 34. Upgrading to 4.9.18 35. Upgrading to 4.9.19 36. Upgrading to 4.9.20 37. Upgrading to 4.9.21 38. Upgrading to 5.0.0 39. Upgrading to 5.0.1 40. Upgrading to 5.0.2 41. Upgrading to 5.0.3 42. Upgrading to 5.0.4 43. Upgrading to 5.0.5 44. Upgrading to 5.0.6 45. Upgrading to 5.0.7 46. Upgrading to 5.0.8 47. Upgrading to 5.0.8 48. Upgrading to 5.0.9 49. Upgrading to 5.1.0 50. Upgrading to 5.1.1 51. Upgrading to 5.1.2",content:'# 14.1 Quick Upgrade\n\n\n# I. Upgrading Versions Prior to jfinal 3.0\n\njfinal 3.0 is a major version upgrade. For upgrades from previous versions to jfinal 3.0, please refer to sections 14.2, 14.3, 14.4, and 14.5. The content in these sections is minimal, making the upgrade quite convenient.\n\n\n# II. Upgrading Versions After jfinal 3.0\n\n\n# 1. Upgrading to 3.1\n\nNo modifications required, smooth upgrade.\n\n\n# 2. Upgrading to 3.2\n\nIStringSource is renamed to ISource. Follow section 14.2 for upgrading Ret.\n\n\n# 3. Upgrading to 3.3\n\nThe java.io.Writer in directive extensions has been changed to com.jfinal.template.io.Writer. Eclipse/IDEA development tools will automatically provide prompts.\n\n\n# 4. Upgrading to 3.4\n\nBecause the defaultDatePattern in Json has been changed from null to "yyyy-MM-dd HH:mm:ss", and datePattern attribute is removed in JFinalJson, you need to configure me.setJsonDatePattern(null) or a specific value in configConstant(Constants me).\n\n\n# 5. Upgrading to 3.5\n\nISource.getKey() is renamed to ISource.getCacheKey().\n\n\n# 6. Upgrading to 3.6\n\nDb and Model have added an \'s\' suffix to findById and deleteById methods for multi-primary keys (composite primary keys), changing them to findByIds and deleteByIds.\n\nIf you are using the jfinal weixin project\'s MsgController, you need to configure me.setMappingSuperClass(true) in configRoutes.\n\n\n# 7. Upgrading to 3.8\n\nMethods using Aop configuration should now use AopManager, for example, change Aop.addMapping(...) to AopManager.me().addMapping(...).\n\n\n# 8. Upgrading to 4.0\n\nNo modifications required, smooth upgrade.\n\n\n# 9. Upgrading to 4.1\n\nNo modifications required, smooth upgrade.\n\n\n# 10. Upgrading to 4.2\n\nNo modifications required, smooth upgrade.\n\n\n# 11. Upgrading to 4.3\n\nNo modifications required, smooth upgrade.\n\n\n# 12. Upgrading to 4.4\n\nNo modifications required, smooth upgrade.\n\n\n# 13. Upgrading to 4.5\n\nDirect access to .jsp files is not supported by default. If you need to access .jsp files directly, you need to add the configuration: me.setDenyAccessJsp(false).\n\n\n# 14. Upgrading to 4.6\n\nNo modifications required, smooth upgrade.\n\n\n# 15. Upgrading to 4.7\n\nNo modifications required, smooth upgrade.\n\n\n# 16. Upgrading to 4.8\n\nThe Controller.getPara(String) method in jfinal 4.8 and earlier versions returned an empty string ("") when a form field existed, rather than returning null. In jfinal 4.8, this has been changed to treat an empty string as null.\n\nFor those who need to quickly upgrade older projects, you can introduce BaseController and use the old version\'s implementation.\n\n\n# 17. Upgrading to 4.9\n\njfinal 4.9 has refactored JFinalJson.java. If you have extended the JFinalJson class in previous projects, note that the extension interface has changed.\n\n\n# 17. Upgrading to 4.9.01\n\nNo modifications required, smooth upgrade.\n\n(Continued due to character limit)\n\n\n# 18. Upgrading to 4.9.02\n\nEngine.setWriterBufferSize(int) is renamed to setBufferSize(int).\n\n\n# 19. Upgrading to 4.9.03\n\nNo modifications required, smooth upgrade.\n\n\n# 20. Upgrading to 4.9.04\n\nNo modifications required, smooth upgrade. This version only fixes a bug in com.jfinal.plugin.redis.Cache.hgetCounter(...).\n\n\n# 21. Upgrading to 4.9.05\n\nNo modifications required, smooth upgrade. This version adds a new each method in Model and Db, which does not affect the upgrade.\n\n\n# 22. Upgrading to 4.9.06\n\nThe MetaBuilder.filter(...) method is renamed to skip. The usage logic has not changed. This method is rarely used, so only those who have used it need to modify the code.\n\n\n# 23. Upgrading to 4.9.07\n\nNo modifications required, smooth upgrade.\n\n\n# 24. Upgrading to 4.9.08\n\nNo modifications required, smooth upgrade.\n\n\n# 25. Upgrading to 4.9.09\n\nNo modifications required, smooth upgrade.\n\n\n# 26. Upgrading to 4.9.10\n\nNo modifications required, smooth upgrade.\n\n\n# 27. Upgrading to 4.9.11\n\nNo modifications required, smooth upgrade.\n\n\n# 28. Upgrading to 4.9.12\n\nDo not use this version, as the template will generate extra blank lines. Please use subsequent versions.\n\n\n# 29. Upgrading to 4.9.13\n\nNo modifications required, smooth upgrade.\n\n\n# 30. Upgrading to 4.9.14\n\nNo modifications required, smooth upgrade.\n\n\n# 31. Upgrading to 4.9.15\n\nNo modifications required, smooth upgrade. Note that if you\'re upgrading across multiple versions, you should read the section about upgrading to 4.9.13.\n\n\n# 32. Upgrading to 4.9.16\n\nThis version upgrades the Redis plugin\'s dependencies on jedis and fst. Therefore, if you are using the jfinal Redis plugin, you need to upgrade your jedis dependency to version 3.6.3.\n\n\n# 33. Upgrading to 4.9.17\n\nNo modifications required, smooth upgrade.\n\n\n# 34. Upgrading to 4.9.18\n\nIf you use file upload, the cos dependency must be upgraded to version 2022.2.\n\n\n# 35. Upgrading to 4.9.19\n\nNo modifications required, smooth upgrade.\n\n\n# 36. Upgrading to 4.9.20\n\nRet.create(Object,Object) is renamed to Ret.of(Object, Object). Ret.ok(Object, Object) and Ret.fail(Object, Object) have been removed.\n\n\n# 37. Upgrading to 4.9.21\n\nTo maintain compatibility, this version restores the Ret.ok(Object, Object) and Ret.fail(Object, Object) methods that were removed in version 4.9.20.\n\n\n# 38. Upgrading to 5.0.0\n\nNo modifications required, smooth upgrade.\n\n\n# 39. Upgrading to 5.0.1\n\nNo modifications required, smooth upgrade.\n\n\n# 40. Upgrading to 5.0.2\n\nThe Enjoy template engine\'s static method call and static property access expressions are disabled by default. To enable them, you need the following configuration.\n\n\n# 41. Upgrading to 5.0.3\n\nNo modifications required, smooth upgrade.\n\n\n# 42. Upgrading to 5.0.4\n\nNo modifications required, smooth upgrade.\n\n\n# 43. Upgrading to 5.0.5\n\nNo modifications required, smooth upgrade.\n\n\n# 44. Upgrading to 5.0.6\n\nThe unit of the timeOut parameter in the lock(...) and withLock(...) methods of the Redis plugin, which was added in version 5.0.3, has been changed from "milliseconds" to "seconds".\n\n\n# 45. Upgrading to 5.0.7\n\nNo modifications required, smooth upgrade.\n\n\n# 46. Upgrading to 5.0.8\n\nNo modifications required, smooth upgrade.\n\n\n# 47. Upgrading to 5.0.8\n\nNo modifications required, smooth upgrade.\n\n\n# 48. Upgrading to 5.0.9\n\nNo modifications required, smooth upgrade.\n\n\n# 49. Upgrading to 5.1.0\n\nNo modifications required, smooth upgrade.\n\n\n# 50. Upgrading to 5.1.1\n\nNo modifications required, smooth upgrade.\n\n\n# 51. Upgrading to 5.1.2\n\nThe Runnable/Callable parameters in ScheduledKit methods have been moved to the last position.',normalizedContent:'# 14.1 quick upgrade\n\n\n# i. upgrading versions prior to jfinal 3.0\n\njfinal 3.0 is a major version upgrade. for upgrades from previous versions to jfinal 3.0, please refer to sections 14.2, 14.3, 14.4, and 14.5. the content in these sections is minimal, making the upgrade quite convenient.\n\n\n# ii. upgrading versions after jfinal 3.0\n\n\n# 1. upgrading to 3.1\n\nno modifications required, smooth upgrade.\n\n\n# 2. upgrading to 3.2\n\nistringsource is renamed to isource. follow section 14.2 for upgrading ret.\n\n\n# 3. upgrading to 3.3\n\nthe java.io.writer in directive extensions has been changed to com.jfinal.template.io.writer. eclipse/idea development tools will automatically provide prompts.\n\n\n# 4. upgrading to 3.4\n\nbecause the defaultdatepattern in json has been changed from null to "yyyy-mm-dd hh:mm:ss", and datepattern attribute is removed in jfinaljson, you need to configure me.setjsondatepattern(null) or a specific value in configconstant(constants me).\n\n\n# 5. upgrading to 3.5\n\nisource.getkey() is renamed to isource.getcachekey().\n\n\n# 6. upgrading to 3.6\n\ndb and model have added an \'s\' suffix to findbyid and deletebyid methods for multi-primary keys (composite primary keys), changing them to findbyids and deletebyids.\n\nif you are using the jfinal weixin project\'s msgcontroller, you need to configure me.setmappingsuperclass(true) in configroutes.\n\n\n# 7. upgrading to 3.8\n\nmethods using aop configuration should now use aopmanager, for example, change aop.addmapping(...) to aopmanager.me().addmapping(...).\n\n\n# 8. upgrading to 4.0\n\nno modifications required, smooth upgrade.\n\n\n# 9. upgrading to 4.1\n\nno modifications required, smooth upgrade.\n\n\n# 10. upgrading to 4.2\n\nno modifications required, smooth upgrade.\n\n\n# 11. upgrading to 4.3\n\nno modifications required, smooth upgrade.\n\n\n# 12. upgrading to 4.4\n\nno modifications required, smooth upgrade.\n\n\n# 13. upgrading to 4.5\n\ndirect access to .jsp files is not supported by default. if you need to access .jsp files directly, you need to add the configuration: me.setdenyaccessjsp(false).\n\n\n# 14. upgrading to 4.6\n\nno modifications required, smooth upgrade.\n\n\n# 15. upgrading to 4.7\n\nno modifications required, smooth upgrade.\n\n\n# 16. upgrading to 4.8\n\nthe controller.getpara(string) method in jfinal 4.8 and earlier versions returned an empty string ("") when a form field existed, rather than returning null. in jfinal 4.8, this has been changed to treat an empty string as null.\n\nfor those who need to quickly upgrade older projects, you can introduce basecontroller and use the old version\'s implementation.\n\n\n# 17. upgrading to 4.9\n\njfinal 4.9 has refactored jfinaljson.java. if you have extended the jfinaljson class in previous projects, note that the extension interface has changed.\n\n\n# 17. upgrading to 4.9.01\n\nno modifications required, smooth upgrade.\n\n(continued due to character limit)\n\n\n# 18. upgrading to 4.9.02\n\nengine.setwriterbuffersize(int) is renamed to setbuffersize(int).\n\n\n# 19. upgrading to 4.9.03\n\nno modifications required, smooth upgrade.\n\n\n# 20. upgrading to 4.9.04\n\nno modifications required, smooth upgrade. this version only fixes a bug in com.jfinal.plugin.redis.cache.hgetcounter(...).\n\n\n# 21. upgrading to 4.9.05\n\nno modifications required, smooth upgrade. this version adds a new each method in model and db, which does not affect the upgrade.\n\n\n# 22. upgrading to 4.9.06\n\nthe metabuilder.filter(...) method is renamed to skip. the usage logic has not changed. this method is rarely used, so only those who have used it need to modify the code.\n\n\n# 23. upgrading to 4.9.07\n\nno modifications required, smooth upgrade.\n\n\n# 24. upgrading to 4.9.08\n\nno modifications required, smooth upgrade.\n\n\n# 25. upgrading to 4.9.09\n\nno modifications required, smooth upgrade.\n\n\n# 26. upgrading to 4.9.10\n\nno modifications required, smooth upgrade.\n\n\n# 27. upgrading to 4.9.11\n\nno modifications required, smooth upgrade.\n\n\n# 28. upgrading to 4.9.12\n\ndo not use this version, as the template will generate extra blank lines. please use subsequent versions.\n\n\n# 29. upgrading to 4.9.13\n\nno modifications required, smooth upgrade.\n\n\n# 30. upgrading to 4.9.14\n\nno modifications required, smooth upgrade.\n\n\n# 31. upgrading to 4.9.15\n\nno modifications required, smooth upgrade. note that if you\'re upgrading across multiple versions, you should read the section about upgrading to 4.9.13.\n\n\n# 32. upgrading to 4.9.16\n\nthis version upgrades the redis plugin\'s dependencies on jedis and fst. therefore, if you are using the jfinal redis plugin, you need to upgrade your jedis dependency to version 3.6.3.\n\n\n# 33. upgrading to 4.9.17\n\nno modifications required, smooth upgrade.\n\n\n# 34. upgrading to 4.9.18\n\nif you use file upload, the cos dependency must be upgraded to version 2022.2.\n\n\n# 35. upgrading to 4.9.19\n\nno modifications required, smooth upgrade.\n\n\n# 36. upgrading to 4.9.20\n\nret.create(object,object) is renamed to ret.of(object, object). ret.ok(object, object) and ret.fail(object, object) have been removed.\n\n\n# 37. upgrading to 4.9.21\n\nto maintain compatibility, this version restores the ret.ok(object, object) and ret.fail(object, object) methods that were removed in version 4.9.20.\n\n\n# 38. upgrading to 5.0.0\n\nno modifications required, smooth upgrade.\n\n\n# 39. upgrading to 5.0.1\n\nno modifications required, smooth upgrade.\n\n\n# 40. upgrading to 5.0.2\n\nthe enjoy template engine\'s static method call and static property access expressions are disabled by default. to enable them, you need the following configuration.\n\n\n# 41. upgrading to 5.0.3\n\nno modifications required, smooth upgrade.\n\n\n# 42. upgrading to 5.0.4\n\nno modifications required, smooth upgrade.\n\n\n# 43. upgrading to 5.0.5\n\nno modifications required, smooth upgrade.\n\n\n# 44. upgrading to 5.0.6\n\nthe unit of the timeout parameter in the lock(...) and withlock(...) methods of the redis plugin, which was added in version 5.0.3, has been changed from "milliseconds" to "seconds".\n\n\n# 45. upgrading to 5.0.7\n\nno modifications required, smooth upgrade.\n\n\n# 46. upgrading to 5.0.8\n\nno modifications required, smooth upgrade.\n\n\n# 47. upgrading to 5.0.8\n\nno modifications required, smooth upgrade.\n\n\n# 48. upgrading to 5.0.9\n\nno modifications required, smooth upgrade.\n\n\n# 49. upgrading to 5.1.0\n\nno modifications required, smooth upgrade.\n\n\n# 50. upgrading to 5.1.1\n\nno modifications required, smooth upgrade.\n\n\n# 51. upgrading to 5.1.2\n\nthe runnable/callable parameters in scheduledkit methods have been moved to the last position.',charsets:{}},{title:"14.2 Ret",frontmatter:{},regularPath:"/en/14%20Upgrade%20JFinal/14.2%20Ret.html",relativePath:"en/14 Upgrade JFinal/14.2 Ret.md",key:"v-5fcbb630",path:"/en/14%20Upgrade%20JFinal/14.2%20Ret.html",lastUpdated:"9/22/2023, 7:59:19 AM",lastUpdatedTimestamp:1695369559e3,headersStr:null,content:'# 14.2 Ret\n\nIf the project to be upgraded has never used Ret, then this section can be ignored. If you are using jfinal 3.2, 3.3, 3.4, or higher versions of jfinal, you can also ignore this section.\n\nJFinal 3.2 has improved the Ret utility class to make it more suitable for API projects that interact using JSON data formats. The new version has only one status name: state, with values of either "ok" or "fail." The old version has two status names: isOk and isFail, with values of either "true" or "false."\n\nTherefore, the JSON data generated by the new and old versions of the Ret object will differ. For most web projects, the upgrade method is as follows:\n\n * Use the search and replace function to replace ret.isOk with ret.state == "ok" in HTML and JS files.\n\n * Use the search and replace function to replace ret.isFail with ret.state == "fail" in HTML and JS files.\n\nIf you want to minimize code changes during the upgrade, you can call the Ret.setToOldWorkMode() method to continue using the old version mode.',normalizedContent:'# 14.2 ret\n\nif the project to be upgraded has never used ret, then this section can be ignored. if you are using jfinal 3.2, 3.3, 3.4, or higher versions of jfinal, you can also ignore this section.\n\njfinal 3.2 has improved the ret utility class to make it more suitable for api projects that interact using json data formats. the new version has only one status name: state, with values of either "ok" or "fail." the old version has two status names: isok and isfail, with values of either "true" or "false."\n\ntherefore, the json data generated by the new and old versions of the ret object will differ. for most web projects, the upgrade method is as follows:\n\n * use the search and replace function to replace ret.isok with ret.state == "ok" in html and js files.\n\n * use the search and replace function to replace ret.isfail with ret.state == "fail" in html and js files.\n\nif you want to minimize code changes during the upgrade, you can call the ret.settooldworkmode() method to continue using the old version mode.',charsets:{}},{title:"14.3 configEngine",frontmatter:{},regularPath:"/en/14%20Upgrade%20JFinal/14.3%20configEngine.html",relativePath:"en/14 Upgrade JFinal/14.3 configEngine.md",key:"v-227bbac2",path:"/en/14%20Upgrade%20JFinal/14.3%20configEngine.html",lastUpdated:"9/22/2023, 7:59:19 AM",lastUpdatedTimestamp:1695369559e3,headersStr:null,content:'# 14.3 configEngine\n\nJFinal 3.0 introduced a new template engine module. Classes that inherit from JFinalConfig need to add a public void configEngine(Engine me) method for configuring the template engine. Here\'s an example code snippet:\n\npublic void configEngine(Engine me) {\n  me.setDevMode(true);\n  \n  me.addSharedFunction("/view/common/layout.html");\n  me.addSharedFunction("/view/common/paginate.html");\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\nIf your project upgrade doesn\'t require using the Template Engine, you can leave this method empty.\n\nBy default, JFinal 3.0 sets the ViewType to ViewType.JFINAL_TEMPLATE. If an older project is using the Freemarker template and you do not wish to change the template type, you need to specify me.setViewType(ViewType.FREE_MARKER) within the configConstant method. If you\'ve already specified the ViewType in the past, you can ignore this step.',normalizedContent:'# 14.3 configengine\n\njfinal 3.0 introduced a new template engine module. classes that inherit from jfinalconfig need to add a public void configengine(engine me) method for configuring the template engine. here\'s an example code snippet:\n\npublic void configengine(engine me) {\n  me.setdevmode(true);\n  \n  me.addsharedfunction("/view/common/layout.html");\n  me.addsharedfunction("/view/common/paginate.html");\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\nif your project upgrade doesn\'t require using the template engine, you can leave this method empty.\n\nby default, jfinal 3.0 sets the viewtype to viewtype.jfinal_template. if an older project is using the freemarker template and you do not wish to change the template type, you need to specify me.setviewtype(viewtype.free_marker) within the configconstant method. if you\'ve already specified the viewtype in the past, you can ignore this step.',charsets:{}},{title:"14.4 baseViewPath",frontmatter:{},regularPath:"/en/14%20Upgrade%20JFinal/14.4%20baseViewPath.html",relativePath:"en/14 Upgrade JFinal/14.4 baseViewPath.md",key:"v-d21c7354",path:"/en/14%20Upgrade%20JFinal/14.4%20baseViewPath.html",lastUpdated:"9/22/2023, 7:59:19 AM",lastUpdatedTimestamp:1695369559e3,headersStr:null,content:'# 14.4 baseViewPath\n\nThe setting for baseViewPath has been moved from the configConstant(...) method to the Routes object, and it can be set separately for different Routes objects. Here\'s an example:\n\npublic class FrontRoutes extends Routes {\n \n  public void config() {\n    setBaseViewPath("/_view");\n \n    add("/", IndexController.class, "/index");\n    add("/project", ProjectController.class);\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nThe advantage of moving it from configConstant(...) to configRoute(...) is that you can set it differently for various Routes, reducing redundant code. Different modules may very likely have different baseViewPaths. The code example above is for cases where Routes have been broken down into smaller parts. If your application has not split the Routes, you can simply configure it in configRoute as follows:\n\npublic void configRoute(Routes me) {\n   me.setBaseViewPath("/_view");\n \n   me.add("/", IndexController.class);\n}\n\n\n1\n2\n3\n4\n5\n',normalizedContent:'# 14.4 baseviewpath\n\nthe setting for baseviewpath has been moved from the configconstant(...) method to the routes object, and it can be set separately for different routes objects. here\'s an example:\n\npublic class frontroutes extends routes {\n \n  public void config() {\n    setbaseviewpath("/_view");\n \n    add("/", indexcontroller.class, "/index");\n    add("/project", projectcontroller.class);\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nthe advantage of moving it from configconstant(...) to configroute(...) is that you can set it differently for various routes, reducing redundant code. different modules may very likely have different baseviewpaths. the code example above is for cases where routes have been broken down into smaller parts. if your application has not split the routes, you can simply configure it in configroute as follows:\n\npublic void configroute(routes me) {\n   me.setbaseviewpath("/_view");\n \n   me.add("/", indexcontroller.class);\n}\n\n\n1\n2\n3\n4\n5\n',charsets:{}},{title:"14.5 RenderFactory",frontmatter:{},regularPath:"/en/14%20Upgrade%20JFinal/14.5%20RenderFactory.html",relativePath:"en/14 Upgrade JFinal/14.5 RenderFactory.md",key:"v-51802670",path:"/en/14%20Upgrade%20JFinal/14.5%20RenderFactory.html",lastUpdated:"9/22/2023, 7:59:19 AM",lastUpdatedTimestamp:1695369559e3,headersStr:null,content:"# 14.5 RenderFactory\n\nJFinal 3.0 has undergone a complete overhaul of the render module, extracting the IRenderFactory interface. The original RenderFactory has become the default implementation of the interface, eliminating the previous IMainRenderFactory, IErrorRenderFactory, and IXmlRenderFactory interfaces. All extensions and customizations related to render can now be achieved by inheriting from RenderFactory. The 3.0 version of the render module allows for switching and customization of all renders, and the extension approach is entirely consistent. If older projects have extended IMainRenderFactory, they only need to be upgraded as follows:\n\npublic class MyRenderFactory extends RenderFactory {\n  public Render getRender(String view) {\n     return new MyRender(view);\n  }\n}\n\n\n1\n2\n3\n4\n5\n\n\nSimilarly, if you have previously extended IErrorRenderFactory or IXmlRenderFactory, you only need to add the getErrorRender(...) and getXmlRender(...) methods to the MyRenderFactory class above. After the extension, configure it in configConstant as follows:\n\npublic void configConstant(Constants me) {\n  me.setRenderFactory(new MyRenderFactory());\n}\n\n\n1\n2\n3\n\n\nJFinal 3.0 adopts a completely consistent extension method for all renders, making it easier to learn, more convenient to use, and straightforward to upgrade. Additionally, the me() method in the original RenderFactory class has been discontinued. If older projects depend on this, they only need to change RenderFactory.me() directly to RenderManager.me().getRenderFactory().",normalizedContent:"# 14.5 renderfactory\n\njfinal 3.0 has undergone a complete overhaul of the render module, extracting the irenderfactory interface. the original renderfactory has become the default implementation of the interface, eliminating the previous imainrenderfactory, ierrorrenderfactory, and ixmlrenderfactory interfaces. all extensions and customizations related to render can now be achieved by inheriting from renderfactory. the 3.0 version of the render module allows for switching and customization of all renders, and the extension approach is entirely consistent. if older projects have extended imainrenderfactory, they only need to be upgraded as follows:\n\npublic class myrenderfactory extends renderfactory {\n  public render getrender(string view) {\n     return new myrender(view);\n  }\n}\n\n\n1\n2\n3\n4\n5\n\n\nsimilarly, if you have previously extended ierrorrenderfactory or ixmlrenderfactory, you only need to add the geterrorrender(...) and getxmlrender(...) methods to the myrenderfactory class above. after the extension, configure it in configconstant as follows:\n\npublic void configconstant(constants me) {\n  me.setrenderfactory(new myrenderfactory());\n}\n\n\n1\n2\n3\n\n\njfinal 3.0 adopts a completely consistent extension method for all renders, making it easier to learn, more convenient to use, and straightforward to upgrade. additionally, the me() method in the original renderfactory class has been discontinued. if older projects depend on this, they only need to change renderfactory.me() directly to rendermanager.me().getrenderfactory().",charsets:{}},{title:"14.6 Others",frontmatter:{},regularPath:"/en/14%20Upgrade%20JFinal/14.6%20Others.html",relativePath:"en/14 Upgrade JFinal/14.6 Others.md",key:"v-389654ca",path:"/en/14%20Upgrade%20JFinal/14.6%20Others.html",lastUpdated:"9/22/2023, 7:59:19 AM",lastUpdatedTimestamp:1695369559e3,headersStr:null,content:'# 14.6 Others\n\nThe chained usage of Ret.put(...).put(...) needs to be changed to Ret.set(...).set(...), as Ret now inherits from HashMap. This is done to avoid conflicts with HashMap.put(...). Scenarios where Ret.get(...) returns a generic value should be changed to Ret.getAs(...).\n\nThe setFreeMarkerExtension and setVelocityExtension methods in the Constants parameter of configConstant(...) have been uniformly changed to use the setViewExtension method. setMainRenderFactory and setErrorRenderFactory have been replaced by setRenderFactory.\n\nThe renderXml(...) method, which used to rely on XmlRender implemented with Freemarker syntax, has been changed to be implemented by the JFinal Template Engine. Projects using renderXml(...) will need to modify their template content.\n\nOfficial JFinal QQ Group: Search for the QQ group using the keyword "jfinal."\n\nWe strongly recommend joining the JFinal Club to get the source code for the JFinal best practices project, jfinal-club. This allows you to master the simplest usage in the fastest and easiest way, saving you the time of reading the documentation: http://www.jfinal.com/club',normalizedContent:'# 14.6 others\n\nthe chained usage of ret.put(...).put(...) needs to be changed to ret.set(...).set(...), as ret now inherits from hashmap. this is done to avoid conflicts with hashmap.put(...). scenarios where ret.get(...) returns a generic value should be changed to ret.getas(...).\n\nthe setfreemarkerextension and setvelocityextension methods in the constants parameter of configconstant(...) have been uniformly changed to use the setviewextension method. setmainrenderfactory and seterrorrenderfactory have been replaced by setrenderfactory.\n\nthe renderxml(...) method, which used to rely on xmlrender implemented with freemarker syntax, has been changed to be implemented by the jfinal template engine. projects using renderxml(...) will need to modify their template content.\n\nofficial jfinal qq group: search for the qq group using the keyword "jfinal."\n\nwe strongly recommend joining the jfinal club to get the source code for the jfinal best practices project, jfinal-club. this allows you to master the simplest usage in the fastest and easiest way, saving you the time of reading the documentation: http://www.jfinal.com/club',charsets:{}},{title:"2.1 Overview",frontmatter:{},regularPath:"/en/2%20JFinalConfig/2.1%20Overview.html",relativePath:"en/2 JFinalConfig/2.1 Overview.md",key:"v-5b606711",path:"/en/2%20JFinalConfig/2.1%20Overview.html",lastUpdated:"9/17/2023, 5:34:57 AM",lastUpdatedTimestamp:1694928897e3,headersStr:null,content:"# 2.1 Overview\n\nWeb projects based on JFinal require the creation of a subclass derived from the JFinalConfig class. This class is used to configure the entire web project.\n\nThe JFinalConfig subclass needs to implement six abstract methods, as shown below:\n\npublic class DemoConfig extends JFinalConfig {\n    public void configConstant(Constants me) {}\n    public void configRoute(Routes me) {}\n    public void configEngine(Engine me) {}\n    public void configPlugin(Plugins me) {}\n    public void configInterceptor(Interceptors me) {}\n    public void configHandler(Handlers me) {}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n",normalizedContent:"# 2.1 overview\n\nweb projects based on jfinal require the creation of a subclass derived from the jfinalconfig class. this class is used to configure the entire web project.\n\nthe jfinalconfig subclass needs to implement six abstract methods, as shown below:\n\npublic class democonfig extends jfinalconfig {\n    public void configconstant(constants me) {}\n    public void configroute(routes me) {}\n    public void configengine(engine me) {}\n    public void configplugin(plugins me) {}\n    public void configinterceptor(interceptors me) {}\n    public void confighandler(handlers me) {}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n",charsets:{}},{title:"2.2 configConstant",frontmatter:{},regularPath:"/en/2%20JFinalConfig/2.2%20configConstant.html",relativePath:"en/2 JFinalConfig/2.2 configConstant.md",key:"v-4d79010e",path:"/en/2%20JFinalConfig/2.2%20configConstant.html",headers:[{level:3,title:"1. Common Configurations",slug:"_1-common-configurations",normalizedTitle:"1. common configurations",charIndex:25},{level:3,title:"2. Other Configurations",slug:"_2-other-configurations",normalizedTitle:"2. other configurations",charIndex:1980}],lastUpdated:"9/17/2023, 5:34:57 AM",lastUpdatedTimestamp:1694928897e3,headersStr:"1. Common Configurations 2. Other Configurations",content:'# 2.2 configConstant\n\n\n# 1. Common Configurations\n\nThis method is used to configure JFinal constant values, such as the development mode constant "devMode". The following code presents some commonly used configurations:\n\npublic void configConstant(Constants me) {\n    // Configure development mode, true indicates development mode.\n    me.setDevMode(true);\n    \n    // Configure AOP proxy to use cglib, otherwise, JFinal\'s default dynamic compilation proxy will be used.\n    me.setToCglibProxyFactory();\n    \n    // Configure dependency injection.\n    me.setInjectDependency(true);\n    \n    // Configure whether to inject dependencies into the superclass of the injected class.\n    me.setInjectSuperClass(false);\n    \n    // Configure to use the slf4j logging system; otherwise, log4j will be used by default.\n    // You can also configure your extended logging system implementation with me.setLogFactory(...).\n    me.setToSlf4jLogFactory();\n    \n    // Set the Json conversion factory implementation class, more details in Chapter 12.\n    me.setJsonFactory(new MixedJsonFactory());\n    \n    // Configure the view type, the default is the JFinal enjoy template engine.\n    me.setViewType(ViewType.JFINAL_TEMPLATE);\n    \n    // Configure the basic download path, the default is "download" under webapp.\n    me.setBaseDownloadPath(...);\n    \n    // Configure the basic upload path, the default is "upload" under webapp.\n    me.setBaseUploadPath(...);\n    \n    // Configure 404 and 500 pages.\n    me.setError404View("/common/404.html");\n    me.setError500View("/common/500.html");\n    \n    // Enable parsing of json requests, a new feature in version 5.0.0.\n    me.setResolveJsonRequest(true);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n\n\nIn development mode, JFinal will generate a report for every request, such as displaying the current request\'s URL, Controller, Method, and the parameters carried by the request.\n\n\n# 2. Other Configurations\n\nOther configurations:\n\npublic void configConstant(Constants me) {\n    // Configure encoding, the default is UTF8.\n    me.setEncoding("UTF8");\n    \n    // Configure the date pattern used for converting Date type in JSON.\n    me.setJsonDatePattern("yyyy-MM-dd HH:mm");\n    \n    // Configure whether to deny direct access to JSP. This is related to directly accessing .jsp files, and not related to renderJsp(xxx.jsp).\n    me.setDenyAccessJsp(true);\n    \n    // Configure the maximum data size for file uploads, default is 10M.\n    me.setMaxPostSize(10 * 1024 * 1024);\n    \n    // Configure the cache for CAPTCHA. Configuring a centralized shared cache can support distributed systems and clusters.\n    me.setCaptchaCache(...);\n    \n    // Configure the separator for urlPara parameters, the default is "-".\n    me.setUrlParaSeparator("-");\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n',normalizedContent:'# 2.2 configconstant\n\n\n# 1. common configurations\n\nthis method is used to configure jfinal constant values, such as the development mode constant "devmode". the following code presents some commonly used configurations:\n\npublic void configconstant(constants me) {\n    // configure development mode, true indicates development mode.\n    me.setdevmode(true);\n    \n    // configure aop proxy to use cglib, otherwise, jfinal\'s default dynamic compilation proxy will be used.\n    me.settocglibproxyfactory();\n    \n    // configure dependency injection.\n    me.setinjectdependency(true);\n    \n    // configure whether to inject dependencies into the superclass of the injected class.\n    me.setinjectsuperclass(false);\n    \n    // configure to use the slf4j logging system; otherwise, log4j will be used by default.\n    // you can also configure your extended logging system implementation with me.setlogfactory(...).\n    me.settoslf4jlogfactory();\n    \n    // set the json conversion factory implementation class, more details in chapter 12.\n    me.setjsonfactory(new mixedjsonfactory());\n    \n    // configure the view type, the default is the jfinal enjoy template engine.\n    me.setviewtype(viewtype.jfinal_template);\n    \n    // configure the basic download path, the default is "download" under webapp.\n    me.setbasedownloadpath(...);\n    \n    // configure the basic upload path, the default is "upload" under webapp.\n    me.setbaseuploadpath(...);\n    \n    // configure 404 and 500 pages.\n    me.seterror404view("/common/404.html");\n    me.seterror500view("/common/500.html");\n    \n    // enable parsing of json requests, a new feature in version 5.0.0.\n    me.setresolvejsonrequest(true);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n\n\nin development mode, jfinal will generate a report for every request, such as displaying the current request\'s url, controller, method, and the parameters carried by the request.\n\n\n# 2. other configurations\n\nother configurations:\n\npublic void configconstant(constants me) {\n    // configure encoding, the default is utf8.\n    me.setencoding("utf8");\n    \n    // configure the date pattern used for converting date type in json.\n    me.setjsondatepattern("yyyy-mm-dd hh:mm");\n    \n    // configure whether to deny direct access to jsp. this is related to directly accessing .jsp files, and not related to renderjsp(xxx.jsp).\n    me.setdenyaccessjsp(true);\n    \n    // configure the maximum data size for file uploads, default is 10m.\n    me.setmaxpostsize(10 * 1024 * 1024);\n    \n    // configure the cache for captcha. configuring a centralized shared cache can support distributed systems and clusters.\n    me.setcaptchacache(...);\n    \n    // configure the separator for urlpara parameters, the default is "-".\n    me.seturlparaseparator("-");\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n',charsets:{}},{title:"2.3 configRoute",frontmatter:{},regularPath:"/en/2%20JFinalConfig/2.3%20configRoute.html",relativePath:"en/2 JFinalConfig/2.3 configRoute.md",key:"v-988f09b2",path:"/en/2%20JFinalConfig/2.3%20configRoute.html",headers:[{level:3,title:"1. Common Configurations",slug:"_1-common-configurations",normalizedTitle:"1. common configurations",charIndex:22},{level:3,title:"2. Route Scanning (new feature in jfinal 4.9.03)",slug:"_2-route-scanning-new-feature-in-jfinal-4-9-03",normalizedTitle:"2. route scanning (new feature in jfinal 4.9.03)",charIndex:1799}],lastUpdated:"9/17/2023, 5:34:57 AM",lastUpdatedTimestamp:1694928897e3,headersStr:"1. Common Configurations 2. Route Scanning (new feature in jfinal 4.9.03)",content:'# 2.3 configRoute\n\n\n# 1. Common Configurations\n\nThis method is used to configure access routes. The following code maps the path "/hello" to the HelloController. With this configuration, accessing http://localhost/hello will call the HelloController.index() method, while http://localhost/hello/methodName will call the HelloController.methodName() method.\n\npublic void configRoute(Routes me) {\n    // If you want to map public methods in the controller superclass to action, configure it to true, but it\'s generally not necessary.\n    me.setMappingSuperClass(false);\n    \n    // Configure baseViewPath to allow the render(...) method to omit the baseViewPath prefix.\n    me.setBaseViewPath("/view");\n    \n    // Configure interceptors that apply to all Controllers registered in this Routes object.\n    me.addInterceptor(new FrontInterceptor());\n    \n    // Route scanning, a feature added in jfinal 4.9.03. The parameter "com.xxx." specifies the package to scan.\n    // Scanning only occurs within this package and its sub-packages.\n    me.scan("com.xxx.");\n    \n    // Manually add routes. Note: If you use route scanning, do not manually add routes. Choose one or the other.\n    me.add("/hello", HelloController.class);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\nThe Routes.setBaseViewPath(baseViewPath) method sets the base path for view rendering for all Controllers within this Routes. This base path, combined with the viewPath parameter passed to the Routes.add(...) method and the view parameter passed to the Controller.render(view) method, determines the final view path according to the following rule:\n\nfinalView = baseViewPath + viewPath + view\n\n\n1\n\n\nNote: If the view starts with the "/" character, it\'s an absolute path, and both baseViewPath and viewPath will be ignored.\n\n\n# 2. Route Scanning (new feature in jfinal 4.9.03)\n\nStarting from jfinal 4.9.03, route scanning was introduced. For this feature, the @Path annotation must be used in the Controller declaration, e.g.:\n\n@Path("/project")\npublic class ProjectController extends Controller {\n   ...\n}\n \n// The following code configures a viewPath for the controller.\n@Path(value="/", viewPath="/index")\npublic class IndexController extends Controller {\n   ...\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nThe @Path annotation can configure both controllerPath and viewPath parameters. If viewPath is omitted, it defaults to the value of the first parameter. The two parameters of the @Path annotation are equivalent to the first and third parameters of the Routes.add(controllerPath, controllerClass, viewPath) method.\n\nAfter using the @Path annotation, route scanning can be enabled with simple configuration:\n\npublic void configRoute(Routes me) {\n   me.scan("com.xxx.");\n}\n\n\n1\n2\n3\n\n\nBy using the scan(...) method, route scanning is activated. In the code above, the parameter "com.xxx." means that only the "com.xxx." package and its sub-packages will be scanned.\n\nIf you need to categorize routes, set baseViewPath categorically, or configure interceptors at the Routes level categorically, you can refer to the configuration used in the jfinal club project as shown above.\n\nStarting from the jfinal 3.6 version, a new configuration method was introduced:\n\npublic void configRoute(Routes me) {\n  me.setMappingSuperClass(false);\n}\n\n\n1\n2\n3\n\n\nThis method determines whether public methods in the controller superclass should be mapped as actions. By default, this is set to false, meaning methods in the superclass won\'t become actions.\n\nNote: This configuration was introduced in version 3.6, so older jfinal projects that need superclass methods as actions should set this to true.\n\nThis configuration is essentially a performance optimization to speed up project startup. If Routes is split into multiple sub-Routes, it\'s recommended to configure this in the sub-Routes that need it, as it can work independently within sub-Routes. Other Routes without this configuration can still benefit from this performance optimization.',normalizedContent:'# 2.3 configroute\n\n\n# 1. common configurations\n\nthis method is used to configure access routes. the following code maps the path "/hello" to the hellocontroller. with this configuration, accessing http://localhost/hello will call the hellocontroller.index() method, while http://localhost/hello/methodname will call the hellocontroller.methodname() method.\n\npublic void configroute(routes me) {\n    // if you want to map public methods in the controller superclass to action, configure it to true, but it\'s generally not necessary.\n    me.setmappingsuperclass(false);\n    \n    // configure baseviewpath to allow the render(...) method to omit the baseviewpath prefix.\n    me.setbaseviewpath("/view");\n    \n    // configure interceptors that apply to all controllers registered in this routes object.\n    me.addinterceptor(new frontinterceptor());\n    \n    // route scanning, a feature added in jfinal 4.9.03. the parameter "com.xxx." specifies the package to scan.\n    // scanning only occurs within this package and its sub-packages.\n    me.scan("com.xxx.");\n    \n    // manually add routes. note: if you use route scanning, do not manually add routes. choose one or the other.\n    me.add("/hello", hellocontroller.class);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\nthe routes.setbaseviewpath(baseviewpath) method sets the base path for view rendering for all controllers within this routes. this base path, combined with the viewpath parameter passed to the routes.add(...) method and the view parameter passed to the controller.render(view) method, determines the final view path according to the following rule:\n\nfinalview = baseviewpath + viewpath + view\n\n\n1\n\n\nnote: if the view starts with the "/" character, it\'s an absolute path, and both baseviewpath and viewpath will be ignored.\n\n\n# 2. route scanning (new feature in jfinal 4.9.03)\n\nstarting from jfinal 4.9.03, route scanning was introduced. for this feature, the @path annotation must be used in the controller declaration, e.g.:\n\n@path("/project")\npublic class projectcontroller extends controller {\n   ...\n}\n \n// the following code configures a viewpath for the controller.\n@path(value="/", viewpath="/index")\npublic class indexcontroller extends controller {\n   ...\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nthe @path annotation can configure both controllerpath and viewpath parameters. if viewpath is omitted, it defaults to the value of the first parameter. the two parameters of the @path annotation are equivalent to the first and third parameters of the routes.add(controllerpath, controllerclass, viewpath) method.\n\nafter using the @path annotation, route scanning can be enabled with simple configuration:\n\npublic void configroute(routes me) {\n   me.scan("com.xxx.");\n}\n\n\n1\n2\n3\n\n\nby using the scan(...) method, route scanning is activated. in the code above, the parameter "com.xxx." means that only the "com.xxx." package and its sub-packages will be scanned.\n\nif you need to categorize routes, set baseviewpath categorically, or configure interceptors at the routes level categorically, you can refer to the configuration used in the jfinal club project as shown above.\n\nstarting from the jfinal 3.6 version, a new configuration method was introduced:\n\npublic void configroute(routes me) {\n  me.setmappingsuperclass(false);\n}\n\n\n1\n2\n3\n\n\nthis method determines whether public methods in the controller superclass should be mapped as actions. by default, this is set to false, meaning methods in the superclass won\'t become actions.\n\nnote: this configuration was introduced in version 3.6, so older jfinal projects that need superclass methods as actions should set this to true.\n\nthis configuration is essentially a performance optimization to speed up project startup. if routes is split into multiple sub-routes, it\'s recommended to configure this in the sub-routes that need it, as it can work independently within sub-routes. other routes without this configuration can still benefit from this performance optimization.',charsets:{}},{title:"2.4 configEngine",frontmatter:{},regularPath:"/en/2%20JFinalConfig/2.4%20configEngine.html",relativePath:"en/2 JFinalConfig/2.4 configEngine.md",key:"v-2a13c901",path:"/en/2%20JFinalConfig/2.4%20configEngine.html",lastUpdated:"9/17/2023, 5:34:57 AM",lastUpdatedTimestamp:1694928897e3,headersStr:null,content:'# 2.4 configEngine\n\nThis method is used to configure the Template Engine. Below is a code example:\n\npublic void configEngine(Engine me) {\n    me.addSharedFunction("/view/common/layout.html");\n    me.addSharedFunction("/view/common/paginate.html");\n    me.addSharedFunction("/view/admin/common/layout.html");\n}\n\n\n1\n2\n3\n4\n5\n\n\nThe above method adds three template files, which define template functions, to the template engine. A more detailed introduction can be found in the Template Engine chapter.\n\nNote: The configurations me.setToClassPathSourceFactory(), me.setBaseTemplatePath(...), and me.setDevMode(...) should be placed at the beginning since the subsequent configurations like me.addSharedFunction(...) depend on these initial settings.\n\nStarting from jfinal 4.9.02, a new configuration was added to support Chinese expressions, variable names, method names, and template function names:\n\nEngine.setChineseExpression(true);\n\n\n1\n\n\nThis configuration should be placed before addSharedTemplateFunction(...) and addSqlTemplate(...) to ensure it takes effect promptly. This setting is global and applies to all Engine instances.',normalizedContent:'# 2.4 configengine\n\nthis method is used to configure the template engine. below is a code example:\n\npublic void configengine(engine me) {\n    me.addsharedfunction("/view/common/layout.html");\n    me.addsharedfunction("/view/common/paginate.html");\n    me.addsharedfunction("/view/admin/common/layout.html");\n}\n\n\n1\n2\n3\n4\n5\n\n\nthe above method adds three template files, which define template functions, to the template engine. a more detailed introduction can be found in the template engine chapter.\n\nnote: the configurations me.settoclasspathsourcefactory(), me.setbasetemplatepath(...), and me.setdevmode(...) should be placed at the beginning since the subsequent configurations like me.addsharedfunction(...) depend on these initial settings.\n\nstarting from jfinal 4.9.02, a new configuration was added to support chinese expressions, variable names, method names, and template function names:\n\nengine.setchineseexpression(true);\n\n\n1\n\n\nthis configuration should be placed before addsharedtemplatefunction(...) and addsqltemplate(...) to ensure it takes effect promptly. this setting is global and applies to all engine instances.',charsets:{}},{title:"2.5 configPlugin",frontmatter:{},regularPath:"/en/2%20JFinalConfig/2.5%20configPlugin.html",relativePath:"en/2 JFinalConfig/2.5 configPlugin.md",key:"v-4fc7c7a1",path:"/en/2%20JFinalConfig/2.5%20configPlugin.html",lastUpdated:"9/17/2023, 5:34:57 AM",lastUpdatedTimestamp:1694928897e3,headersStr:null,content:"# 2.5 configPlugin\n\nThis method is used to configure JFinal's Plugin. The code below sets up the Druid database connection pool plugin and the ActiveRecord database access plugin. With this configuration, you can easily operate the database in the application using ActiveRecord.\n\npublic void configPlugin(Plugins me) {\n    DruidPlugin dp = new DruidPlugin(jdbcUrl, userName, password);\n    me.add(dp);\n    \n    ActiveRecordPlugin arp = new ActiveRecordPlugin(dp);\n    arp.addMapping(\"user\", User.class);\n    me.add(arp);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nJFinal's plugin architecture is one of its main extension methods, allowing for easy creation and application of plugins in projects.",normalizedContent:"# 2.5 configplugin\n\nthis method is used to configure jfinal's plugin. the code below sets up the druid database connection pool plugin and the activerecord database access plugin. with this configuration, you can easily operate the database in the application using activerecord.\n\npublic void configplugin(plugins me) {\n    druidplugin dp = new druidplugin(jdbcurl, username, password);\n    me.add(dp);\n    \n    activerecordplugin arp = new activerecordplugin(dp);\n    arp.addmapping(\"user\", user.class);\n    me.add(arp);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\njfinal's plugin architecture is one of its main extension methods, allowing for easy creation and application of plugins in projects.",charsets:{}},{title:"2.6 configInterceptor",frontmatter:{},regularPath:"/en/2%20JFinalConfig/2.6%20configInterceptor.html",relativePath:"en/2 JFinalConfig/2.6 configInterceptor.md",key:"v-45ec0b87",path:"/en/2%20JFinalConfig/2.6%20configInterceptor.html",headers:[{level:3,title:"1. Configuring Global Interceptors",slug:"_1-configuring-global-interceptors",normalizedTitle:"1. configuring global interceptors",charIndex:28},{level:3,title:"2. Levels/Granularity of Interceptor Configuration",slug:"_2-levels-granularity-of-interceptor-configuration",normalizedTitle:"2. levels/granularity of interceptor configuration",charIndex:1414}],lastUpdated:"9/17/2023, 5:34:57 AM",lastUpdatedTimestamp:1694928897e3,headersStr:"1. Configuring Global Interceptors 2. Levels/Granularity of Interceptor Configuration",content:'# 2.6 configInterceptor\n\n\n# 1. Configuring Global Interceptors\n\nThe configInterceptor method is used to configure global interceptors. Global interceptors are divided into two categories: Control Layer and Business Layer. Below is a configuration example:\n\npublic void configInterceptor(Interceptors me) {\n    // The following two lines of code configure global interceptors for the control layer\n    me.add(new AuthInterceptor());\n    me.addGlobalActionInterceptor(new AaaInterceptor());\n    \n    // The line below configures the global interceptor for the business layer\n    me.addGlobalServiceInterceptor(new BbbInterceptor());\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nThe above methods me.add(...) and me.addGlobalActionInterceptor(...) are completely equivalent and both configure interceptors that intercept all action methods in Controllers. Meanwhile, the interceptor configured by me.addGlobalServiceInterceptor(...) will intercept all public methods in the business layer.\n\nNote: The so-called "business layer" mentioned above essentially refers to anything other than the "control layer". It doesn\'t necessarily have to be the business layer; it could be any class other than the controller.\n\nInterceptors configured in the manner mentioned above can be removed at the method definition location using the @Clear annotation. The specific usage will be detailed in subsequent sections related to the @Clear annotation.\n\n\n# 2. Levels/Granularity of Interceptor Configuration\n\nThe granularity of Interceptor configuration is divided into four levels: Global, Routes, Class, and Method. The configuration granularity mentioned above is global. Configurations for the Routes, Class, and Method levels will be detailed in subsequent sections.',normalizedContent:'# 2.6 configinterceptor\n\n\n# 1. configuring global interceptors\n\nthe configinterceptor method is used to configure global interceptors. global interceptors are divided into two categories: control layer and business layer. below is a configuration example:\n\npublic void configinterceptor(interceptors me) {\n    // the following two lines of code configure global interceptors for the control layer\n    me.add(new authinterceptor());\n    me.addglobalactioninterceptor(new aaainterceptor());\n    \n    // the line below configures the global interceptor for the business layer\n    me.addglobalserviceinterceptor(new bbbinterceptor());\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nthe above methods me.add(...) and me.addglobalactioninterceptor(...) are completely equivalent and both configure interceptors that intercept all action methods in controllers. meanwhile, the interceptor configured by me.addglobalserviceinterceptor(...) will intercept all public methods in the business layer.\n\nnote: the so-called "business layer" mentioned above essentially refers to anything other than the "control layer". it doesn\'t necessarily have to be the business layer; it could be any class other than the controller.\n\ninterceptors configured in the manner mentioned above can be removed at the method definition location using the @clear annotation. the specific usage will be detailed in subsequent sections related to the @clear annotation.\n\n\n# 2. levels/granularity of interceptor configuration\n\nthe granularity of interceptor configuration is divided into four levels: global, routes, class, and method. the configuration granularity mentioned above is global. configurations for the routes, class, and method levels will be detailed in subsequent sections.',charsets:{}},{title:"2.7 configHandler",frontmatter:{},regularPath:"/en/2%20JFinalConfig/2.7%20configHandler.html",relativePath:"en/2 JFinalConfig/2.7 configHandler.md",key:"v-1b8306f2",path:"/en/2%20JFinalConfig/2.7%20configHandler.html",lastUpdated:"9/17/2023, 5:34:57 AM",lastUpdatedTimestamp:1694928897e3,headersStr:null,content:"# 2.7 configHandler\n\nThis method is used to configure JFinal's Handler. The following code configures a handler named ResourceHandler. Handlers can take over all web requests and have complete control over the application, making it easy to implement higher-level functional extensions.\n\npublic void configHandler(Handlers me) {\n    me.add(new ResourceHandler());\n}\n\n\n1\n2\n3\n\n\nFor specific usage, you can refer to the official implementations of several functionalities given in the jfinal source code: https://gitee.com/jfinal/jfinal/tree/master/src/main/java/com/jfinal/ext/handler",normalizedContent:"# 2.7 confighandler\n\nthis method is used to configure jfinal's handler. the following code configures a handler named resourcehandler. handlers can take over all web requests and have complete control over the application, making it easy to implement higher-level functional extensions.\n\npublic void confighandler(handlers me) {\n    me.add(new resourcehandler());\n}\n\n\n1\n2\n3\n\n\nfor specific usage, you can refer to the official implementations of several functionalities given in the jfinal source code: https://gitee.com/jfinal/jfinal/tree/master/src/main/java/com/jfinal/ext/handler",charsets:{}},{title:"2.8 onStart and onStop callback configuration",frontmatter:{},regularPath:"/en/2%20JFinalConfig/2.8%20onStart%20and%20onStop%20callback%20configuration.html",relativePath:"en/2 JFinalConfig/2.8 onStart and onStop callback configuration.md",key:"v-609bd3cd",path:"/en/2%20JFinalConfig/2.8%20onStart%20and%20onStop%20callback%20configuration.html",lastUpdated:"9/17/2023, 5:34:57 AM",lastUpdatedTimestamp:1694928897e3,headersStr:null,content:"# 2.8 onStart and onStop callback configuration\n\nIn the JFinalConfig subclass, you can add onStart() and onStop() methods. JFinal will callback these two methods respectively after the system has finished starting and before the system shuts down:\n\n// Called after the system has started\npublic void onStart() {\n}\n \n// Called before the system shuts down\npublic void onStop() {\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nThese two methods provide a convenient way for developers to perform additional operations after the project starts and before it shuts down. For example, after the system starts, you can create a scheduling thread or write back to the cache before the system shuts down.\n\nNote: In versions of jfinal prior to 3.6, these two methods were named afterJFinalStart() and beforeJFinalStop(). To reduce the cognitive load, code input, and the likelihood of input errors, jfinal version 3.6 changed to the current shorter method names. The old method names are still retained and can still be used, making it easy for older projects to upgrade to the latest version of jfinal.",normalizedContent:"# 2.8 onstart and onstop callback configuration\n\nin the jfinalconfig subclass, you can add onstart() and onstop() methods. jfinal will callback these two methods respectively after the system has finished starting and before the system shuts down:\n\n// called after the system has started\npublic void onstart() {\n}\n \n// called before the system shuts down\npublic void onstop() {\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nthese two methods provide a convenient way for developers to perform additional operations after the project starts and before it shuts down. for example, after the system starts, you can create a scheduling thread or write back to the cache before the system shuts down.\n\nnote: in versions of jfinal prior to 3.6, these two methods were named afterjfinalstart() and beforejfinalstop(). to reduce the cognitive load, code input, and the likelihood of input errors, jfinal version 3.6 changed to the current shorter method names. the old method names are still retained and can still be used, making it easy for older projects to upgrade to the latest version of jfinal.",charsets:{}},{title:"2.9 PropKit configuration reading",frontmatter:{},regularPath:"/en/2%20JFinalConfig/2.9%20PropKit%20configuration%20reading.html",relativePath:"en/2 JFinalConfig/2.9 PropKit configuration reading.md",key:"v-30c04aed",path:"/en/2%20JFinalConfig/2.9%20PropKit%20configuration%20reading.html",lastUpdated:"9/17/2023, 5:34:57 AM",lastUpdatedTimestamp:1694928897e3,headersStr:null,content:'# 2.9 PropKit configuration reading\n\nThe PropKit utility class is used to read external key-value pair configuration files. PropKit can be used anywhere in the system with extreme convenience. The format of the configuration file is as follows:\n\nuserName=james\nemail=no-reply@jfinal.com\ndevMode=true\n\n\n1\n2\n3\n\n\nBelow is a code example of PropKit:\n\nPropKit.use("config.txt");\nString userName = PropKit.get("userName");\nString email = PropKit.get("email");\n \n// Using Prop in combination\nProp p = PropKit.use("config.txt");\nBoolean devMode = p.getBoolean("devMode");\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nBelow is a specific usage example in a project:\n\npublic class AppConfig extends JFinalConfig {\n  public void configConstant(Constants me) {\n    // The first time you use the \'use\' method to load a configuration, it becomes the primary configuration. You can directly retrieve its values using PropKit.get(...)\n    PropKit.use("a_little_config.txt");\n    me.setDevMode(PropKit.getBoolean("devMode"));\n  }\n \n  public void configPlugin(Plugins me) {\n    // For configurations not loaded for the first time using \'use\', you need to specify the configuration file name each time using \'use\' before retrieving its values.\n    String redisHost = PropKit.use("redis_config.txt").get("host");\n    int redisPort = PropKit.use("redis_config.txt").getInt("port");\n    RedisPlugin rp = new RedisPlugin("myRedis", redisHost, redisPort);\n    me.add(rp);\n \n    // For configurations not loaded for the first time using \'use\', you can also first obtain a Prop object and then retrieve its values through this object.\n    Prop p = PropKit.use("db_config.txt");\n    DruidPlugin dp = new DruidPlugin(p.get("jdbcUrl"), p.get("user")…);\n    me.add(dp);\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\nAs shown in the code above, PropKit can load multiple configuration files simultaneously. You can directly operate on the first configuration file loaded using the PorpKit.get(...) method. For configuration files not loaded first, you need to use PropKit.use(...).get(...) to operate.\n\nPropKit\'s use is not limited to within the YourJFinalConfig class; it can be used anywhere in the project. Additionally, after the PropKit.use(...) method loads the configuration file content, it caches the data in memory. You can clear the cached content using PropKit.useless(...).',normalizedContent:'# 2.9 propkit configuration reading\n\nthe propkit utility class is used to read external key-value pair configuration files. propkit can be used anywhere in the system with extreme convenience. the format of the configuration file is as follows:\n\nusername=james\nemail=no-reply@jfinal.com\ndevmode=true\n\n\n1\n2\n3\n\n\nbelow is a code example of propkit:\n\npropkit.use("config.txt");\nstring username = propkit.get("username");\nstring email = propkit.get("email");\n \n// using prop in combination\nprop p = propkit.use("config.txt");\nboolean devmode = p.getboolean("devmode");\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nbelow is a specific usage example in a project:\n\npublic class appconfig extends jfinalconfig {\n  public void configconstant(constants me) {\n    // the first time you use the \'use\' method to load a configuration, it becomes the primary configuration. you can directly retrieve its values using propkit.get(...)\n    propkit.use("a_little_config.txt");\n    me.setdevmode(propkit.getboolean("devmode"));\n  }\n \n  public void configplugin(plugins me) {\n    // for configurations not loaded for the first time using \'use\', you need to specify the configuration file name each time using \'use\' before retrieving its values.\n    string redishost = propkit.use("redis_config.txt").get("host");\n    int redisport = propkit.use("redis_config.txt").getint("port");\n    redisplugin rp = new redisplugin("myredis", redishost, redisport);\n    me.add(rp);\n \n    // for configurations not loaded for the first time using \'use\', you can also first obtain a prop object and then retrieve its values through this object.\n    prop p = propkit.use("db_config.txt");\n    druidplugin dp = new druidplugin(p.get("jdbcurl"), p.get("user")…);\n    me.add(dp);\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\nas shown in the code above, propkit can load multiple configuration files simultaneously. you can directly operate on the first configuration file loaded using the porpkit.get(...) method. for configuration files not loaded first, you need to use propkit.use(...).get(...) to operate.\n\npropkit\'s use is not limited to within the yourjfinalconfig class; it can be used anywhere in the project. additionally, after the propkit.use(...) method loads the configuration file content, it caches the data in memory. you can clear the cached content using propkit.useless(...).',charsets:{}},{title:"3.1 Overview",frontmatter:{},regularPath:"/en/3%20Controller/3.1%20Overview.html",relativePath:"en/3 Controller/3.1 Overview.md",key:"v-0bef0f2d",path:"/en/3%20Controller/3.1%20Overview.html",lastUpdated:"9/17/2023, 5:50:29 AM",lastUpdatedTimestamp:1694929829e3,headersStr:null,content:"# 3.1 Overview\n\nController is one of JFinal's core classes, serving as the controller in the MVC pattern. Web applications based on JFinal need their controllers to inherit from this class. The Controller is where Action methods are defined and is a way to organize Actions. A Controller can contain multiple Actions. Importantly, the Controller is thread-safe.",normalizedContent:"# 3.1 overview\n\ncontroller is one of jfinal's core classes, serving as the controller in the mvc pattern. web applications based on jfinal need their controllers to inherit from this class. the controller is where action methods are defined and is a way to organize actions. a controller can contain multiple actions. importantly, the controller is thread-safe.",charsets:{}},{title:"3.10 session operations",frontmatter:{},regularPath:"/en/3%20Controller/3.10%20session%20operations.html",relativePath:"en/3 Controller/3.10 session operations.md",key:"v-2bad717e",path:"/en/3%20Controller/3.10%20session%20operations.html",headers:[{level:3,title:"Setting Session Attributes",slug:"setting-session-attributes",normalizedTitle:"setting session attributes",charIndex:216},{level:3,title:"Getting Session Attributes",slug:"getting-session-attributes",normalizedTitle:"getting session attributes",charIndex:737},{level:3,title:"Directly Accessing the Session",slug:"directly-accessing-the-session",normalizedTitle:"directly accessing the session",charIndex:1019},{level:3,title:"Considerations for Scalability",slug:"considerations-for-scalability",normalizedTitle:"considerations for scalability",charIndex:1352}],lastUpdated:"9/17/2023, 5:50:29 AM",lastUpdatedTimestamp:1694929829e3,headersStr:"Setting Session Attributes Getting Session Attributes Directly Accessing the Session Considerations for Scalability",content:'# 3.10 session operations\n\nSessions are used in web applications to store temporary data about a user\'s interactions and maintain state between HTTP requests. In JFinal, working with sessions is straightforward.\n\n\n# Setting Session Attributes\n\nYou can use the setSessionAttr(key, value) method to store data in a session. The data will be associated with a specific key.\n\nFor example, after a successful login, you might want to store the logged-in user\'s details in the session:\n\npublic void login() {\n   User user = loginService.login(...);\n   if (user != null) {\n      setSessionAttr("loginUser", user);\n   }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\nIn the above example, the logged-in user\'s details are stored in the session with the key "loginUser".\n\n\n# Getting Session Attributes\n\nTo retrieve data from the session, you can use the getSessionAttr(key) method:\n\npublic User getLoggedInUser() {\n   return getSessionAttr("loginUser");\n}\n\n\n1\n2\n3\n\n\nThis will fetch the user details associated with the key "loginUser" from the session.\n\n\n# Directly Accessing the Session\n\nIf you need more control over the session, you can directly get the session object using the getSession() method. This allows you to use the full set of session-related APIs:\n\nHttpSession session = getSession();\nsession.setMaxInactiveInterval(300);  // Set the session timeout to 5 minutes\n\n\n1\n2\n\n\n\n# Considerations for Scalability\n\nWhile sessions are a powerful tool for maintaining state, they can pose challenges in distributed and clustered environments. This is because session data is typically stored in memory, and sharing this data across multiple servers or instances can be complex.\n\nTo ensure scalability and fault tolerance, it\'s often recommended to minimize the use of sessions or store session data in a centralized and distributed data store like Redis or a database. This approach ensures that session data is available to all instances of the application, even if one instance fails or if new instances are added.\n\nIn summary, while sessions are convenient for storing temporary data, it\'s essential to use them judiciously, especially when building scalable web applications.',normalizedContent:'# 3.10 session operations\n\nsessions are used in web applications to store temporary data about a user\'s interactions and maintain state between http requests. in jfinal, working with sessions is straightforward.\n\n\n# setting session attributes\n\nyou can use the setsessionattr(key, value) method to store data in a session. the data will be associated with a specific key.\n\nfor example, after a successful login, you might want to store the logged-in user\'s details in the session:\n\npublic void login() {\n   user user = loginservice.login(...);\n   if (user != null) {\n      setsessionattr("loginuser", user);\n   }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\nin the above example, the logged-in user\'s details are stored in the session with the key "loginuser".\n\n\n# getting session attributes\n\nto retrieve data from the session, you can use the getsessionattr(key) method:\n\npublic user getloggedinuser() {\n   return getsessionattr("loginuser");\n}\n\n\n1\n2\n3\n\n\nthis will fetch the user details associated with the key "loginuser" from the session.\n\n\n# directly accessing the session\n\nif you need more control over the session, you can directly get the session object using the getsession() method. this allows you to use the full set of session-related apis:\n\nhttpsession session = getsession();\nsession.setmaxinactiveinterval(300);  // set the session timeout to 5 minutes\n\n\n1\n2\n\n\n\n# considerations for scalability\n\nwhile sessions are a powerful tool for maintaining state, they can pose challenges in distributed and clustered environments. this is because session data is typically stored in memory, and sharing this data across multiple servers or instances can be complex.\n\nto ensure scalability and fault tolerance, it\'s often recommended to minimize the use of sessions or store session data in a centralized and distributed data store like redis or a database. this approach ensures that session data is available to all instances of the application, even if one instance fails or if new instances are added.\n\nin summary, while sessions are convenient for storing temporary data, it\'s essential to use them judiciously, especially when building scalable web applications.',charsets:{}},{title:"3.11 File Upload with getFile",frontmatter:{},regularPath:"/en/3%20Controller/3.11%20getFile%20file%20upload.html",relativePath:"en/3 Controller/3.11 getFile file upload.md",key:"v-26e24795",path:"/en/3%20Controller/3.11%20getFile%20file%20upload.html",headers:[{level:3,title:"Maven Dependency for File Upload",slug:"maven-dependency-for-file-upload",normalizedTitle:"maven dependency for file upload",charIndex:200},{level:3,title:"Using getFile",slug:"using-getfile",normalizedTitle:"using getfile",charIndex:804},{level:3,title:"Configuring the Upload Path",slug:"configuring-the-upload-path",normalizedTitle:"configuring the upload path",charIndex:1876}],lastUpdated:"9/17/2023, 5:50:29 AM",lastUpdatedTimestamp:1694929829e3,headersStr:"Maven Dependency for File Upload Using getFile Configuring the Upload Path",content:'# 3.11 File Upload with getFile\n\nFile uploading is a common operation in web applications. In JFinal, this operation is made easy through the getFile series of methods provided by the Controller.\n\n\n# Maven Dependency for File Upload\n\nIf you\'re planning to use file upload functionality in your JFinal application, it\'s necessary to include the cos dependency in your Maven project:\n\n<dependency>\n    <groupId>com.jfinal</groupId>\n    <artifactId>cos</artifactId>\n    <version>2022.2</version>\n</dependency>\n\n\n1\n2\n3\n4\n5\n\n\nNote: Starting from JFinal version 4.9.18, support for uploading files larger than 2GB has been added. From this version onwards, you need to ensure you\'re using cos version 2022.2 or later. Earlier versions of JFinal are compatible with cos version 2020.4 and its predecessors.\n\n\n# Using getFile\n\nWhen dealing with file uploads in web forms, ensure that the form\'s encoding type is set to "multipart/form-data". This encoding type allows for the efficient transfer of file data:\n\n<form action="/upload" method="post" enctype="multipart/form-data">\n    <input type="file" name="fileField">\n    <input type="submit" value="Upload">\n</form>\n\n\n1\n2\n3\n4\n\n\nIn your controller, you can retrieve the uploaded file using the getFile method:\n\npublic void upload() {\n    // Get the uploaded file\n    UploadFile file = getFile("fileField");\n    \n    // Now, you can process the uploaded file\n    String fileName = file.getFileName();\n    String filePath = file.getUploadPath();\n    // ... and so on\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nImportant Note: When handling multipart requests (where the form\'s encoding type is "multipart/form-data"), always call the getFile method before using any getPara methods. This is because multipart requests need to be parsed to extract both file and non-file data. The same principle applies when working with Interceptors and Validators.\n\n\n# Configuring the Upload Path\n\nBy default, files are uploaded to an "upload" subdirectory located at the root of your project. This default path is referred to as the base upload path.\n\nYou can configure this path in the JFinalConfig.configConstant(Constants me) method using the setBaseUploadPath method:\n\npublic void configConstant(Constants me) {\n    me.setBaseUploadPath("/custom/path");\n}\n\n\n1\n2\n3\n\n\nThe path specified can be either an absolute path (starting with a "/" or a drive letter on Windows) or a relative path (relative to the root of the project). Using an absolute path can be particularly useful when deploying multiple instances of an application on a single machine, allowing all instances to share a common directory for file uploads.\n\nIn summary, JFinal offers a streamlined approach to handling file uploads, allowing developers to focus on the logic of their applications rather than the intricacies of file handling.',normalizedContent:'# 3.11 file upload with getfile\n\nfile uploading is a common operation in web applications. in jfinal, this operation is made easy through the getfile series of methods provided by the controller.\n\n\n# maven dependency for file upload\n\nif you\'re planning to use file upload functionality in your jfinal application, it\'s necessary to include the cos dependency in your maven project:\n\n<dependency>\n    <groupid>com.jfinal</groupid>\n    <artifactid>cos</artifactid>\n    <version>2022.2</version>\n</dependency>\n\n\n1\n2\n3\n4\n5\n\n\nnote: starting from jfinal version 4.9.18, support for uploading files larger than 2gb has been added. from this version onwards, you need to ensure you\'re using cos version 2022.2 or later. earlier versions of jfinal are compatible with cos version 2020.4 and its predecessors.\n\n\n# using getfile\n\nwhen dealing with file uploads in web forms, ensure that the form\'s encoding type is set to "multipart/form-data". this encoding type allows for the efficient transfer of file data:\n\n<form action="/upload" method="post" enctype="multipart/form-data">\n    <input type="file" name="filefield">\n    <input type="submit" value="upload">\n</form>\n\n\n1\n2\n3\n4\n\n\nin your controller, you can retrieve the uploaded file using the getfile method:\n\npublic void upload() {\n    // get the uploaded file\n    uploadfile file = getfile("filefield");\n    \n    // now, you can process the uploaded file\n    string filename = file.getfilename();\n    string filepath = file.getuploadpath();\n    // ... and so on\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nimportant note: when handling multipart requests (where the form\'s encoding type is "multipart/form-data"), always call the getfile method before using any getpara methods. this is because multipart requests need to be parsed to extract both file and non-file data. the same principle applies when working with interceptors and validators.\n\n\n# configuring the upload path\n\nby default, files are uploaded to an "upload" subdirectory located at the root of your project. this default path is referred to as the base upload path.\n\nyou can configure this path in the jfinalconfig.configconstant(constants me) method using the setbaseuploadpath method:\n\npublic void configconstant(constants me) {\n    me.setbaseuploadpath("/custom/path");\n}\n\n\n1\n2\n3\n\n\nthe path specified can be either an absolute path (starting with a "/" or a drive letter on windows) or a relative path (relative to the root of the project). using an absolute path can be particularly useful when deploying multiple instances of an application on a single machine, allowing all instances to share a common directory for file uploads.\n\nin summary, jfinal offers a streamlined approach to handling file uploads, allowing developers to focus on the logic of their applications rather than the intricacies of file handling.',charsets:{}},{title:"3.12 keep series methods",frontmatter:{},regularPath:"/en/3%20Controller/3.12%20keep%20series%20methods.html",relativePath:"en/3 Controller/3.12 keep series methods.md",key:"v-1ed93ef9",path:"/en/3%20Controller/3.12%20keep%20series%20methods.html",headers:[{level:3,title:"1. keepPara:",slug:"_1-keeppara",normalizedTitle:"1. keeppara:",charIndex:436},{level:3,title:"2. keepModel and keepBean:",slug:"_2-keepmodel-and-keepbean",normalizedTitle:"2. keepmodel and keepbean:",charIndex:1282}],lastUpdated:"9/17/2023, 5:50:29 AM",lastUpdatedTimestamp:1694929829e3,headersStr:"1. keepPara: 2. keepModel and keepBean:",content:'# 3.12 keep series methods\n\nIn web development, especially when working with forms, there are often scenarios where a form is submitted with incomplete or incorrect data. In such cases, it\'s a good user experience to show the form back to the user with the data they had entered, so they can correct or complete the form without having to fill in everything from scratch. JFinal provides the keep series methods to facilitate this.\n\n\n# 1. keepPara:\n\nThe keepPara method retains the values of form fields when the form is redisplayed:\n\n * To keep all form fields:\n   \n   keepPara();\n   \n   \n   1\n   \n\n * To specify which form fields to keep:\n   \n   keepPara("nickName", "email", ...);\n   \n   \n   1\n   \n\nWithout any arguments, keepPara() retains all form fields. The kept parameters are returned to the page as String type. However, if you need to maintain the type of a form field, you can do so as follows:\n\n * To keep the type as Date:\n   \n   keepPara(Date.class, "createAt");\n   \n   \n   1\n   \n\n * To keep the type as Integer:\n   \n   keepPara(Integer.class, "age");\n   \n   \n   1\n   \n\nThe benefit of specifying the type is that, when these kept values are used in view templates (like Enjoy templates), they can be treated as their respective types without any type conversion.\n\n\n# 2. keepModel and keepBean:\n\nkeepModel is used to retain form fields that are prefixed with a modelName:\n\n<input name="blog.title"   value="#(blog.title ??)"/>\n<input name="blog.content" value="#(blog.content ??)" />\n\n\n1\n2\n\n\nIn the above HTML form, the fields are prefixed with blog, which corresponds to a model. When the form is submitted, you\'d typically use getModel to bind the form data to a Blog model. If the submitted data has errors or is incomplete, you can use keepModel to retain the form values:\n\nkeepModel(Blog.class);\n\n\n1\n\n\nkeepBean works similarly to keepModel, but it\'s designed for traditional JavaBeans instead of JFinal\'s Model. However, if a Model class has setter methods (e.g., generated using a code generator), you can also use keepBean for it.\n\nThe key difference is that both keepModel and keepBean retain not just the values but also their original types. This means you don\'t need to specify types explicitly, making it easier to work with form data in the application logic and templates.\n\nIn summary, JFinal\'s keep series methods make it convenient to handle form submissions, especially in scenarios where user input might be incomplete or erroneous. By retaining form data, you enhance the user experience, preventing users from re-entering all data from scratch.',normalizedContent:'# 3.12 keep series methods\n\nin web development, especially when working with forms, there are often scenarios where a form is submitted with incomplete or incorrect data. in such cases, it\'s a good user experience to show the form back to the user with the data they had entered, so they can correct or complete the form without having to fill in everything from scratch. jfinal provides the keep series methods to facilitate this.\n\n\n# 1. keeppara:\n\nthe keeppara method retains the values of form fields when the form is redisplayed:\n\n * to keep all form fields:\n   \n   keeppara();\n   \n   \n   1\n   \n\n * to specify which form fields to keep:\n   \n   keeppara("nickname", "email", ...);\n   \n   \n   1\n   \n\nwithout any arguments, keeppara() retains all form fields. the kept parameters are returned to the page as string type. however, if you need to maintain the type of a form field, you can do so as follows:\n\n * to keep the type as date:\n   \n   keeppara(date.class, "createat");\n   \n   \n   1\n   \n\n * to keep the type as integer:\n   \n   keeppara(integer.class, "age");\n   \n   \n   1\n   \n\nthe benefit of specifying the type is that, when these kept values are used in view templates (like enjoy templates), they can be treated as their respective types without any type conversion.\n\n\n# 2. keepmodel and keepbean:\n\nkeepmodel is used to retain form fields that are prefixed with a modelname:\n\n<input name="blog.title"   value="#(blog.title ??)"/>\n<input name="blog.content" value="#(blog.content ??)" />\n\n\n1\n2\n\n\nin the above html form, the fields are prefixed with blog, which corresponds to a model. when the form is submitted, you\'d typically use getmodel to bind the form data to a blog model. if the submitted data has errors or is incomplete, you can use keepmodel to retain the form values:\n\nkeepmodel(blog.class);\n\n\n1\n\n\nkeepbean works similarly to keepmodel, but it\'s designed for traditional javabeans instead of jfinal\'s model. however, if a model class has setter methods (e.g., generated using a code generator), you can also use keepbean for it.\n\nthe key difference is that both keepmodel and keepbean retain not just the values but also their original types. this means you don\'t need to specify types explicitly, making it easier to work with form data in the application logic and templates.\n\nin summary, jfinal\'s keep series methods make it convenient to handle form submissions, especially in scenarios where user input might be incomplete or erroneous. by retaining form data, you enhance the user experience, preventing users from re-entering all data from scratch.',charsets:{}},{title:"3.2 Action",frontmatter:{},regularPath:"/en/3%20Controller/3.2%20Action.html",relativePath:"en/3 Controller/3.2 Action.md",key:"v-3f5f6775",path:"/en/3%20Controller/3.2%20Action.html",headers:[{level:3,title:"1. Definition of Action",slug:"_1-definition-of-action",normalizedTitle:"1. definition of action",charIndex:17},{level:3,title:"2. @NotAction Annotation",slug:"_2-notaction-annotation",normalizedTitle:"2. @notaction annotation",charIndex:723},{level:3,title:"3. Routing Mapping for Controller Superclass",slug:"_3-routing-mapping-for-controller-superclass",normalizedTitle:"3. routing mapping for controller superclass",charIndex:1187}],lastUpdated:"9/17/2023, 5:50:29 AM",lastUpdatedTimestamp:1694929829e3,headersStr:"1. Definition of Action 2. @NotAction Annotation 3. Routing Mapping for Controller Superclass",content:'# 3.2 Action\n\n\n# 1. Definition of Action\n\nPublic methods defined within a Controller are known as Actions. An Action represents the smallest unit of a request. Action methods must be defined inside a Controller and should be publicly visible.\n\npublic class HelloController extends Controller {\n    public void index() {\n       renderText("This method is an action");\n    }\n    public String test() {\n       return "index.html";\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nIn the above code, two Actions are defined: HelloController.index() and HelloController.test().\n\nActions can have return values. These return values can be obtained in interceptors using invocation.getReturnValue(), which can be useful for controlling rendering.\n\n\n# 2. @NotAction Annotation\n\nIf you want a public method in a controller not to act as an action, you can use the @NotAction annotation. The @NotAction annotation is often used for intermediate Controllers that inherit from a BaseController, for example:\n\npublic class BaseController extends Controller {\n   \n   // Doesn\'t wish to be an action, only for child class or interceptor calls\n   @NotAction\n   public void getLoginUser() {\n   \n   }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 3. Routing Mapping for Controller Superclass\n\nStarting from JFinal 3.6, by default, all methods in the controller superclass won\'t be mapped as actions. (Meaning, in the JFinal 3.6 version, the @NotAction in the above BaseController example is no longer necessary, as BaseController is the superclass of your final controller, XxxController).\n\nIf you want the methods in the superclass to be mapped as actions, just add the following configuration:\n\npublic void configRoute(Routes me) {\n    me.setMappingSuperClass(true);\n}\n\n\n1\n2\n3\n\n\nThis feature is for performance optimization. Projects with a large number of routes can speed up the startup. If this configuration is set in the "child Routes", it will only be effective for that "child Routes", for example:\n\npublic FrontRoutes extends Routes {\n   public void config() {\n      // The configuration here is only effective for routes under FrontRoutes. It is recommended to configure this way to improve performance.\n      setMappingSuperClass(true);\n      \n      add("/weixin", WeixinController.class);\n   }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nMore details about "child Routes" can be found in the second chapter, the configRoute section.',normalizedContent:'# 3.2 action\n\n\n# 1. definition of action\n\npublic methods defined within a controller are known as actions. an action represents the smallest unit of a request. action methods must be defined inside a controller and should be publicly visible.\n\npublic class hellocontroller extends controller {\n    public void index() {\n       rendertext("this method is an action");\n    }\n    public string test() {\n       return "index.html";\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nin the above code, two actions are defined: hellocontroller.index() and hellocontroller.test().\n\nactions can have return values. these return values can be obtained in interceptors using invocation.getreturnvalue(), which can be useful for controlling rendering.\n\n\n# 2. @notaction annotation\n\nif you want a public method in a controller not to act as an action, you can use the @notaction annotation. the @notaction annotation is often used for intermediate controllers that inherit from a basecontroller, for example:\n\npublic class basecontroller extends controller {\n   \n   // doesn\'t wish to be an action, only for child class or interceptor calls\n   @notaction\n   public void getloginuser() {\n   \n   }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 3. routing mapping for controller superclass\n\nstarting from jfinal 3.6, by default, all methods in the controller superclass won\'t be mapped as actions. (meaning, in the jfinal 3.6 version, the @notaction in the above basecontroller example is no longer necessary, as basecontroller is the superclass of your final controller, xxxcontroller).\n\nif you want the methods in the superclass to be mapped as actions, just add the following configuration:\n\npublic void configroute(routes me) {\n    me.setmappingsuperclass(true);\n}\n\n\n1\n2\n3\n\n\nthis feature is for performance optimization. projects with a large number of routes can speed up the startup. if this configuration is set in the "child routes", it will only be effective for that "child routes", for example:\n\npublic frontroutes extends routes {\n   public void config() {\n      // the configuration here is only effective for routes under frontroutes. it is recommended to configure this way to improve performance.\n      setmappingsuperclass(true);\n      \n      add("/weixin", weixincontroller.class);\n   }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nmore details about "child routes" can be found in the second chapter, the configroute section.',charsets:{}},{title:"3.3 Action parameter injection",frontmatter:{},regularPath:"/en/3%20Controller/3.3%20Action%20parameter%20injection.html",relativePath:"en/3 Controller/3.3 Action parameter injection.md",key:"v-4cfa6386",path:"/en/3%20Controller/3.3%20Action%20parameter%20injection.html",lastUpdated:"9/17/2023, 5:50:29 AM",lastUpdatedTimestamp:1694929829e3,headersStr:null,content:'# 3.3 Action parameter injection\n\nAction parameter injection refers to passing parameters to the action method, which can eliminate the need for the getPara(...) code and directly obtain parameter values. Below is a code example:\n\npublic class ProjectController extends Controller {\n    public void index(Project project) {\n       project.save();\n       render("index.html");\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\nAction parameter injection can replace the getPara, getBean, and getModel series of methods to obtain parameters. When using the File and UploadFile parameters, it can replace the getFile method to implement file upload. Another advantage of this method of passing parameters is that it is convenient for seamless integration with third parties like Swagger, allowing for API documentation generation.\n\nNote that if you don\'t want a Controller\'s public method with parameters to become an action, you can use the @NotAction annotation to indicate this.\n\nImportant usage: If the action parameter is a model or bean, and was previously obtained using getBean(User.class, "") with the second parameter being an empty string or null, then the equivalent parameter injection only requires the @Para("") annotation:\n\npublic void action(@Para("")User user) { …. }\n\n\n1\n\n\nTo use the Action parameter injection function, you need to configure your development tool to retain method parameter names during compilation. Note that older versions of Eclipse do not support Java 8 and this configuration option. It\'s recommended to use at least the Eclipse Mars version. [The document then shows various screenshots for configuring Eclipse and IntelliJ IDEA.]\n\nIn IntelliJ IDEA, you simply need to add a compilation parameter -parameters.\n\nIf you are using the Maven plugin for compilation, add a <compilerArgument>-parameters</compilerArgument> property to the maven-compiler-plugin.\n\nThe red arrows in the screenshots above point to the critical configuration. Below is the XML configuration content, which is identical to the content in the screenshot, provided for easy copying:\n\n<plugin>\n   <groupId>org.apache.maven.plugins</groupId>\n   <artifactId>maven-compiler-plugin</artifactId>\n   <version>3.6.1</version>\n   <configuration>\n      <source>1.8</source>\n      <target>1.8</target>\n      <encoding>UTF-8</encoding>\n      \x3c!-- Java 8 retain parameter name compilation argument --\x3e\n      <compilerArgument>-parameters</compilerArgument>\n   </configuration>\n</plugin>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nFinally, note that starting from JFinal version 3.5, action parameter injection functionality is directly supported. If you\'re using JFinal versions 3.2, 3.3, or 3.4 and wish to support this feature, you need to use the JFinal jfinal-java8 branch release. Its Maven coordinates are provided above. If your JFinal version is 3.5 or higher, you can ignore this.',normalizedContent:'# 3.3 action parameter injection\n\naction parameter injection refers to passing parameters to the action method, which can eliminate the need for the getpara(...) code and directly obtain parameter values. below is a code example:\n\npublic class projectcontroller extends controller {\n    public void index(project project) {\n       project.save();\n       render("index.html");\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\naction parameter injection can replace the getpara, getbean, and getmodel series of methods to obtain parameters. when using the file and uploadfile parameters, it can replace the getfile method to implement file upload. another advantage of this method of passing parameters is that it is convenient for seamless integration with third parties like swagger, allowing for api documentation generation.\n\nnote that if you don\'t want a controller\'s public method with parameters to become an action, you can use the @notaction annotation to indicate this.\n\nimportant usage: if the action parameter is a model or bean, and was previously obtained using getbean(user.class, "") with the second parameter being an empty string or null, then the equivalent parameter injection only requires the @para("") annotation:\n\npublic void action(@para("")user user) { …. }\n\n\n1\n\n\nto use the action parameter injection function, you need to configure your development tool to retain method parameter names during compilation. note that older versions of eclipse do not support java 8 and this configuration option. it\'s recommended to use at least the eclipse mars version. [the document then shows various screenshots for configuring eclipse and intellij idea.]\n\nin intellij idea, you simply need to add a compilation parameter -parameters.\n\nif you are using the maven plugin for compilation, add a <compilerargument>-parameters</compilerargument> property to the maven-compiler-plugin.\n\nthe red arrows in the screenshots above point to the critical configuration. below is the xml configuration content, which is identical to the content in the screenshot, provided for easy copying:\n\n<plugin>\n   <groupid>org.apache.maven.plugins</groupid>\n   <artifactid>maven-compiler-plugin</artifactid>\n   <version>3.6.1</version>\n   <configuration>\n      <source>1.8</source>\n      <target>1.8</target>\n      <encoding>utf-8</encoding>\n      \x3c!-- java 8 retain parameter name compilation argument --\x3e\n      <compilerargument>-parameters</compilerargument>\n   </configuration>\n</plugin>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nfinally, note that starting from jfinal version 3.5, action parameter injection functionality is directly supported. if you\'re using jfinal versions 3.2, 3.3, or 3.4 and wish to support this feature, you need to use the jfinal jfinal-java8 branch release. its maven coordinates are provided above. if your jfinal version is 3.5 or higher, you can ignore this.',charsets:{}},{title:"3.8 renderFile file download",frontmatter:{},regularPath:"/en/3%20Controller/3.8%20renderFile%20file%20download.html",relativePath:"en/3 Controller/3.8 renderFile file download.md",key:"v-71ecdd5e",path:"/en/3%20Controller/3.8%20renderFile%20file%20download.html",headers:[{level:3,title:"1. Basic Usage of renderFile",slug:"_1-basic-usage-of-renderfile",normalizedTitle:"1. basic usage of renderfile",charIndex:35},{level:3,title:"2. Configuring baseDownloadPath",slug:"_2-configuring-basedownloadpath",normalizedTitle:"2. configuring basedownloadpath",charIndex:849},{level:3,title:"3. renderFile(File file)",slug:"_3-renderfile-file-file",normalizedTitle:"3. renderfile(file file)",charIndex:1993},{level:3,title:"4. Renaming the Download File",slug:"_4-renaming-the-download-file",normalizedTitle:"4. renaming the download file",charIndex:2419}],lastUpdated:"9/17/2023, 5:50:29 AM",lastUpdatedTimestamp:1694929829e3,headersStr:"1. Basic Usage of renderFile 2. Configuring baseDownloadPath 3. renderFile(File file) 4. Renaming the Download File",content:'# 3.8 renderFile file download\n\n\n# 1. Basic Usage of renderFile\n\nThe renderFile series of methods are used for file downloads.\n\nThe renderFile method uses a baseDownloadPath parameter as the base path to locate the file. In a standard maven project setup, this parameter defaults to the directory: src/main/webapp/download.\n\nHere\'s how to use it under the default configuration:\n\n// The final downloaded file will be: src/main/webapp/download/file.zip\nrenderFile("file.zip");\n \n// The final downloaded file will be: src/main/webapp/download/abc/def/file.zip\nrenderFile("abc/deb/file.zip");\n\n\n1\n2\n3\n4\n5\n\n\nAs shown above, the final downloaded file is always: baseDownloadPath + the parameter passed into renderFile.\n\nThe existence of baseDownloadPath effectively fixes a base path. renderFile always uses this path as the base to locate the file.\n\n\n# 2. Configuring baseDownloadPath\n\nbaseDownloadPath can also be freely configured in configConstant(Constants me). For example:\n\nme.setBaseDownloadPath("files");\n\n\n1\n\n\nIn the context of a standard maven project, the baseDownloadPath value from the configuration above will point to the directory src/main/webapp/files.\n\nAdditionally, baseDownloadPath can also be configured as an absolute path, allowing it to point outside the project. For example:\n\n// For Linux/Mac systems, paths starting with "/" are absolute paths.\nme.setBaseDownloadPath("/var/download");\n \n// For Windows systems, paths starting with a drive letter are also absolute paths.\nme.setBaseDownloadPath("D:/download");\n\n\n1\n2\n3\n4\n5\n\n\nIn the configuration above, in Linux, paths that start with "/" are considered absolute. So, renderFile will look for the download file under the "/var/download" path.\n\nThis kind of configuration allows separation between project resources and download resources. It\'s also beneficial for cluster deployment (single-machine multi-instance deployment) where multiple nodes can share the same directory and the same set of downloadable files.\n\n\n# 3. renderFile(File file)\n\nThe renderFile(File file) method directly uses the File parameter to get the download file, freeing it from the constraints of baseDownloadPath. It can point to a file located anywhere, like:\n\nString file = "D:/my-project/share/files/jfinal-all.zip";\nrenderFile(new File(file));\n\n\n1\n2\n\n\nAs shown, the File points to a file at an arbitrary location, bypassing the constraints of baseDownloadPath.\n\n\n# 4. Renaming the Download File\n\nIf you don\'t want to use the original filename of the download file, you can specify a new download filename:\n\nrenderFile("OldFileName.txt", "NewFileName.txt");\n\n\n1\n\n\nIn this way, users downloading the file will see it as "NewFileName.txt", regardless of its original name on the server.',normalizedContent:'# 3.8 renderfile file download\n\n\n# 1. basic usage of renderfile\n\nthe renderfile series of methods are used for file downloads.\n\nthe renderfile method uses a basedownloadpath parameter as the base path to locate the file. in a standard maven project setup, this parameter defaults to the directory: src/main/webapp/download.\n\nhere\'s how to use it under the default configuration:\n\n// the final downloaded file will be: src/main/webapp/download/file.zip\nrenderfile("file.zip");\n \n// the final downloaded file will be: src/main/webapp/download/abc/def/file.zip\nrenderfile("abc/deb/file.zip");\n\n\n1\n2\n3\n4\n5\n\n\nas shown above, the final downloaded file is always: basedownloadpath + the parameter passed into renderfile.\n\nthe existence of basedownloadpath effectively fixes a base path. renderfile always uses this path as the base to locate the file.\n\n\n# 2. configuring basedownloadpath\n\nbasedownloadpath can also be freely configured in configconstant(constants me). for example:\n\nme.setbasedownloadpath("files");\n\n\n1\n\n\nin the context of a standard maven project, the basedownloadpath value from the configuration above will point to the directory src/main/webapp/files.\n\nadditionally, basedownloadpath can also be configured as an absolute path, allowing it to point outside the project. for example:\n\n// for linux/mac systems, paths starting with "/" are absolute paths.\nme.setbasedownloadpath("/var/download");\n \n// for windows systems, paths starting with a drive letter are also absolute paths.\nme.setbasedownloadpath("d:/download");\n\n\n1\n2\n3\n4\n5\n\n\nin the configuration above, in linux, paths that start with "/" are considered absolute. so, renderfile will look for the download file under the "/var/download" path.\n\nthis kind of configuration allows separation between project resources and download resources. it\'s also beneficial for cluster deployment (single-machine multi-instance deployment) where multiple nodes can share the same directory and the same set of downloadable files.\n\n\n# 3. renderfile(file file)\n\nthe renderfile(file file) method directly uses the file parameter to get the download file, freeing it from the constraints of basedownloadpath. it can point to a file located anywhere, like:\n\nstring file = "d:/my-project/share/files/jfinal-all.zip";\nrenderfile(new file(file));\n\n\n1\n2\n\n\nas shown, the file points to a file at an arbitrary location, bypassing the constraints of basedownloadpath.\n\n\n# 4. renaming the download file\n\nif you don\'t want to use the original filename of the download file, you can specify a new download filename:\n\nrenderfile("oldfilename.txt", "newfilename.txt");\n\n\n1\n\n\nin this way, users downloading the file will see it as "newfilename.txt", regardless of its original name on the server.',charsets:{}},{title:"3.7 render method",frontmatter:{},regularPath:"/en/3%20Controller/3.7%20render%20method.html",relativePath:"en/3 Controller/3.7 render method.md",key:"v-3fa8e144",path:"/en/3%20Controller/3.7%20render%20method.html",headers:[{level:3,title:"1. render(String view)",slug:"_1-render-string-view",normalizedTitle:"1. render(string view)",charIndex:24},{level:3,title:"2. Configuring the template engine for render(String view)",slug:"_2-configuring-the-template-engine-for-render-string-view",normalizedTitle:"2. configuring the template engine for render(string view)",charIndex:1303},{level:3,title:"3. Other methods in the render series",slug:"_3-other-methods-in-the-render-series",normalizedTitle:"3. other methods in the render series",charIndex:1847},{level:3,title:"4. Customizing the implementation class of Controller.render series methods",slug:"_4-customizing-the-implementation-class-of-controller-render-series-methods",normalizedTitle:"4. customizing the implementation class of controller.render series methods",charIndex:2574}],lastUpdated:"9/17/2023, 6:05:19 AM",lastUpdatedTimestamp:1694930719e3,headersStr:"1. render(String view) 2. Configuring the template engine for render(String view) 3. Other methods in the render series 4. Customizing the implementation class of Controller.render series methods",content:'# 3.7 render method\n\n\n# 1. render(String view)\n\nThe render(String view) method will render the template pointed to by the view parameter. The rule for the final template file pointed to by the view is:\n\nString template = baseViewPath + viewPath + view\n\n\n1\n\n\nIn this formula:\n\n * view is the parameter carried by the render(String view) method.\n * baseViewPath and viewPath are two values specified during route configuration.\n\nFor example:\n\npublic void configRoute(Routes me) {\n   // The baseViewPath is "/_view". This value will be taken by all Controllers mapped under this Routes object.\n   me.setBaseViewPath("/_view");\n   \n   // basePath is the third parameter "/index".\n   me.add("/", IndexController.class, "/index");\n   \n   // If the third parameter is omitted, basePath takes the value of the first parameter: "/project".\n   me.add("/project", ProjectController.class);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nFor the above configuration, when using render in IndexController, the template file will be:\n\npublic class IndexController extends Controller {\n   public void demo() {\n     // The template points to: "/_view/index/abc.html".\n     render("abc.html");\n   }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\nThe above render("abc.html") will point to the template located under the webapp directory at "/_view/index/abc.html".\n\n\n# 2. Configuring the template engine for render(String view)\n\nThe render(String view) method will render the template file based on the me.setViewType(ViewType) method configured in configConstant(Constants me). For instance:\n\npublic void configConstant(Constants me) {\n  me.setViewType(ViewType.JFINAL_TEMPLATE);\n}\n\n\n1\n2\n3\n\n\nThis configuration will use JFinal\'s built-in enjoy template engine to render the template. Note that this configuration only affects the Controller.render(String view) method; other render methods remain unchanged.\n\n\n# 3. Other methods in the render series\n\nThe render series methods will render different types of views and return them to the client. JFinal currently supports views such as: JFinal Template, FreeMarker, JSP, Velocity, JSON, File, Text, Html, and QrCode. Besides the views supported by JFinal, you can also infinitely extend the view types by inheriting the Render abstract class.\n\nHere are some usage examples:\n\n// Render the template named "test.html" with the JFinal Template view type.\nrenderTemplate("test.html");\n \n// Generate a QR code.\nrenderQrCode("content");\n \n// Render the template named "test.html" with the FreeMarker view type.\nrenderFreeMarker("test.html");\n \n// ... (other examples)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 4. Customizing the implementation class of Controller.render series methods\n\nJFinal provides the RenderFactory to customize the implementation class of all render methods in the Controller. Here is the code to customize the Controller.render(String view) implementation class:\n\n// Customize a MyRender.\npublic class MyRender extends Render {\n  ...\n}\n \n// Extend RenderFactory to switch Controller.render(String view)\n// to our custom MyRender.\npublic class MyRenderFactory extends RenderFactory {\n   public Render getRender(String view) {\n      return new MyRender(view);\n   }\n}\n \n// Configure to take effect.\npublic void configConstant(Constants me) {\n   me.setRenderFactory(new MyRenderFactory());\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\nIn the above code, the MyRenderFactory.getRender(...) method overrides the parent class RenderFactory.getRender(...) method, switching the implementation class of Controller.render(String view). Similarly, the implementation class of all render methods in the Controller can be switched to custom classes in this way, providing great flexibility.',normalizedContent:'# 3.7 render method\n\n\n# 1. render(string view)\n\nthe render(string view) method will render the template pointed to by the view parameter. the rule for the final template file pointed to by the view is:\n\nstring template = baseviewpath + viewpath + view\n\n\n1\n\n\nin this formula:\n\n * view is the parameter carried by the render(string view) method.\n * baseviewpath and viewpath are two values specified during route configuration.\n\nfor example:\n\npublic void configroute(routes me) {\n   // the baseviewpath is "/_view". this value will be taken by all controllers mapped under this routes object.\n   me.setbaseviewpath("/_view");\n   \n   // basepath is the third parameter "/index".\n   me.add("/", indexcontroller.class, "/index");\n   \n   // if the third parameter is omitted, basepath takes the value of the first parameter: "/project".\n   me.add("/project", projectcontroller.class);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nfor the above configuration, when using render in indexcontroller, the template file will be:\n\npublic class indexcontroller extends controller {\n   public void demo() {\n     // the template points to: "/_view/index/abc.html".\n     render("abc.html");\n   }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\nthe above render("abc.html") will point to the template located under the webapp directory at "/_view/index/abc.html".\n\n\n# 2. configuring the template engine for render(string view)\n\nthe render(string view) method will render the template file based on the me.setviewtype(viewtype) method configured in configconstant(constants me). for instance:\n\npublic void configconstant(constants me) {\n  me.setviewtype(viewtype.jfinal_template);\n}\n\n\n1\n2\n3\n\n\nthis configuration will use jfinal\'s built-in enjoy template engine to render the template. note that this configuration only affects the controller.render(string view) method; other render methods remain unchanged.\n\n\n# 3. other methods in the render series\n\nthe render series methods will render different types of views and return them to the client. jfinal currently supports views such as: jfinal template, freemarker, jsp, velocity, json, file, text, html, and qrcode. besides the views supported by jfinal, you can also infinitely extend the view types by inheriting the render abstract class.\n\nhere are some usage examples:\n\n// render the template named "test.html" with the jfinal template view type.\nrendertemplate("test.html");\n \n// generate a qr code.\nrenderqrcode("content");\n \n// render the template named "test.html" with the freemarker view type.\nrenderfreemarker("test.html");\n \n// ... (other examples)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 4. customizing the implementation class of controller.render series methods\n\njfinal provides the renderfactory to customize the implementation class of all render methods in the controller. here is the code to customize the controller.render(string view) implementation class:\n\n// customize a myrender.\npublic class myrender extends render {\n  ...\n}\n \n// extend renderfactory to switch controller.render(string view)\n// to our custom myrender.\npublic class myrenderfactory extends renderfactory {\n   public render getrender(string view) {\n      return new myrender(view);\n   }\n}\n \n// configure to take effect.\npublic void configconstant(constants me) {\n   me.setrenderfactory(new myrenderfactory());\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\nin the above code, the myrenderfactory.getrender(...) method overrides the parent class renderfactory.getrender(...) method, switching the implementation class of controller.render(string view). similarly, the implementation class of all render methods in the controller can be switched to custom classes in this way, providing great flexibility.',charsets:{}},{title:"3.9 renderQrCode QR code generation",frontmatter:{},regularPath:"/en/3%20Controller/3.9%20renderQrCode%20QR%20code%20generation.html",relativePath:"en/3 Controller/3.9 renderQrCode QR code generation.md",key:"v-38993dc4",path:"/en/3%20Controller/3.9%20renderQrCode%20QR%20code%20generation.html",headers:[{level:3,title:"1. Usage of renderQrCode",slug:"_1-usage-of-renderqrcode",normalizedTitle:"1. usage of renderqrcode",charIndex:42},{level:3,title:"2. Maven Dependency",slug:"_2-maven-dependency",normalizedTitle:"2. maven dependency",charIndex:1075}],lastUpdated:"9/17/2023, 5:50:29 AM",lastUpdatedTimestamp:1694929829e3,headersStr:"1. Usage of renderQrCode 2. Maven Dependency",content:"# 3.9 renderQrCode QR code generation\n\n\n# 1. Usage of renderQrCode\n\nGenerating QR codes using renderQrCode is extremely simple and convenient. Here's a common use case:\n\n// Data carried by the QR code\nString data = \"weixin://wxpay/bizpayurl?appid=xx&mch_id=xx......\";\n \n// Render the QR code image with a length and width of 200 pixels\nrenderQrCode(data, 200, 200);\n\n\n1\n2\n3\n4\n5\n\n\nIn the above example, the data represents the information carried by the QR code. This information will be read by a QR code scanner.\n\nFurthermore, renderQrCode allows you to specify the \"error correction level\" of the QR code. For example:\n\n// The last parameter 'M' denotes the error correction level\nrenderQrCode(data, 200, 200, 'M');\n\n\n1\n2\n\n\nThe error correction parameter ensures that the QR code can still be read correctly even if a part of it is obscured or damaged.\n\nThe error correction levels in descending order of robustness are: 'H', 'Q', 'M', and 'L'. Their respective error correction rates are: 30%, 25%, 15%, and 7%. If this parameter is not specified, the default is 'L'.\n\n\n# 2. Maven Dependency\n\nTo use the renderQrCode method, you need to introduce a third-party dependency. Here's the Maven dependency:\n\n<dependency>\n    <groupId>com.google.zxing</groupId>\n    <artifactId>javase</artifactId>\n    <version>3.2.1</version>\n</dependency>\n\n\n1\n2\n3\n4\n5\n\n\nWith this dependency, you'll be able to generate QR codes seamlessly in your JFinal application. QR codes are widely used in various applications, such as payments, ticketing, and more, because of their ability to encode a significant amount of data into a compact visual format.",normalizedContent:"# 3.9 renderqrcode qr code generation\n\n\n# 1. usage of renderqrcode\n\ngenerating qr codes using renderqrcode is extremely simple and convenient. here's a common use case:\n\n// data carried by the qr code\nstring data = \"weixin://wxpay/bizpayurl?appid=xx&mch_id=xx......\";\n \n// render the qr code image with a length and width of 200 pixels\nrenderqrcode(data, 200, 200);\n\n\n1\n2\n3\n4\n5\n\n\nin the above example, the data represents the information carried by the qr code. this information will be read by a qr code scanner.\n\nfurthermore, renderqrcode allows you to specify the \"error correction level\" of the qr code. for example:\n\n// the last parameter 'm' denotes the error correction level\nrenderqrcode(data, 200, 200, 'm');\n\n\n1\n2\n\n\nthe error correction parameter ensures that the qr code can still be read correctly even if a part of it is obscured or damaged.\n\nthe error correction levels in descending order of robustness are: 'h', 'q', 'm', and 'l'. their respective error correction rates are: 30%, 25%, 15%, and 7%. if this parameter is not specified, the default is 'l'.\n\n\n# 2. maven dependency\n\nto use the renderqrcode method, you need to introduce a third-party dependency. here's the maven dependency:\n\n<dependency>\n    <groupid>com.google.zxing</groupid>\n    <artifactid>javase</artifactid>\n    <version>3.2.1</version>\n</dependency>\n\n\n1\n2\n3\n4\n5\n\n\nwith this dependency, you'll be able to generate qr codes seamlessly in your jfinal application. qr codes are widely used in various applications, such as payments, ticketing, and more, because of their ability to encode a significant amount of data into a compact visual format.",charsets:{}},{title:"4.1 Overview",frontmatter:{},regularPath:"/en/4%20AOP/4.1%20Overview.html",relativePath:"en/4 AOP/4.1 Overview.md",key:"v-353a9101",path:"/en/4%20AOP/4.1%20Overview.html",lastUpdated:"9/17/2023, 6:05:19 AM",lastUpdatedTimestamp:1694930719e3,headersStr:null,content:"# 4.1 Overview\n\nAspect-Oriented Programming (AOP) is a programming paradigm that focuses on the separation of cross-cutting concerns in a software application. Cross-cutting concerns are aspects of a program that affect multiple modules and are often difficult to modularize using traditional Object-Oriented Programming (OOP) techniques. Examples of cross-cutting concerns include logging, security, and transaction management.\n\nHowever, traditional AOP implementations can be quite complex. They often introduce many concepts such as Aspect, Advice, Joinpoint, Pointcut, Introduction, Weaving, and Around. Moreover, they usually require the integration of an Inversion of Control (IOC) container and are typically configured using verbose XML or annotations.\n\nThere are several challenges with traditional AOP:\n\n 1. Learning Curve: There's a steep learning curve due to the myriad of concepts introduced.\n 2. Development Efficiency: The need for extensive configuration and understanding of the various AOP concepts can slow down development.\n 3. Performance Overhead: Traditional AOP can introduce runtime overhead, especially if it involves dynamic proxying or bytecode weaving.\n 4. Startup Latency: In the development phase, AOP can cause the application to start slower, affecting the developer's productivity.\n\nJFinal takes a streamlined approach to AOP. It focuses on the core objectives of AOP and reduces the number of concepts to the bare minimum. In JFinal's AOP, there are only three main concepts:\n\n 1. Interceptor: A code that is executed before or after a method.\n 2. Before: An annotation or directive that specifies that a certain interceptor should run before a method.\n 3. Clear: An annotation or directive that specifies clearing out certain interceptors for a method.\n\nFurthermore, JFinal's AOP does not require an IOC container, nor does it need verbose XML configurations. This makes JFinal's AOP simpler to understand, faster to develop with, and more performant at runtime.\n\nIn summary, JFinal's approach to AOP is designed to provide developers with the benefits of aspect-oriented techniques without the complexities and overheads of traditional AOP implementations.",normalizedContent:"# 4.1 overview\n\naspect-oriented programming (aop) is a programming paradigm that focuses on the separation of cross-cutting concerns in a software application. cross-cutting concerns are aspects of a program that affect multiple modules and are often difficult to modularize using traditional object-oriented programming (oop) techniques. examples of cross-cutting concerns include logging, security, and transaction management.\n\nhowever, traditional aop implementations can be quite complex. they often introduce many concepts such as aspect, advice, joinpoint, pointcut, introduction, weaving, and around. moreover, they usually require the integration of an inversion of control (ioc) container and are typically configured using verbose xml or annotations.\n\nthere are several challenges with traditional aop:\n\n 1. learning curve: there's a steep learning curve due to the myriad of concepts introduced.\n 2. development efficiency: the need for extensive configuration and understanding of the various aop concepts can slow down development.\n 3. performance overhead: traditional aop can introduce runtime overhead, especially if it involves dynamic proxying or bytecode weaving.\n 4. startup latency: in the development phase, aop can cause the application to start slower, affecting the developer's productivity.\n\njfinal takes a streamlined approach to aop. it focuses on the core objectives of aop and reduces the number of concepts to the bare minimum. in jfinal's aop, there are only three main concepts:\n\n 1. interceptor: a code that is executed before or after a method.\n 2. before: an annotation or directive that specifies that a certain interceptor should run before a method.\n 3. clear: an annotation or directive that specifies clearing out certain interceptors for a method.\n\nfurthermore, jfinal's aop does not require an ioc container, nor does it need verbose xml configurations. this makes jfinal's aop simpler to understand, faster to develop with, and more performant at runtime.\n\nin summary, jfinal's approach to aop is designed to provide developers with the benefits of aspect-oriented techniques without the complexities and overheads of traditional aop implementations.",charsets:{}},{title:"4.2 Interceptor",frontmatter:{},regularPath:"/en/4%20AOP/4.2%20Interceptor.html",relativePath:"en/4 AOP/4.2 Interceptor.md",key:"v-6ff5bf1d",path:"/en/4%20AOP/4.2%20Interceptor.html",headers:[{level:3,title:"1. Basic Usage",slug:"_1-basic-usage",normalizedTitle:"1. basic usage",charIndex:22},{level:3,title:"2. Global Sharing and Thread Safety",slug:"_2-global-sharing-and-thread-safety",normalizedTitle:"2. global sharing and thread safety",charIndex:3550}],lastUpdated:"9/17/2023, 6:05:19 AM",lastUpdatedTimestamp:1694930719e3,headersStr:"1. Basic Usage 2. Global Sharing and Thread Safety",content:"# 4.2 Interceptor\n\n\n# 1. Basic Usage\n\nAn Interceptor can intercept methods, providing an opportunity to add aspect code before and after the method, achieving the core goal of AOP. The Interceptor interface only defines one method: public void intercept(Invocation inv). Here's a simple example:\n\npublic class DemoInterceptor implements Interceptor {\n    public void intercept(Invocation inv) {\n       System.out.println(\"Before method invoking\");\n       inv.invoke();\n       System.out.println(\"After method invoking\");\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nIn the code above, the DemoInterceptor will intercept the target method and output text to the console both before and after the method's invocation. The line inv.invoke() is the call to the target method; inserting aspect code before and after this line can easily implement AOP.\n\nNote: You must call the inv.invoke() method to pass the current call to subsequent Interceptors and the Action.\n\nCommon Mistake: To date, many students forget to call the inv.invoke() method, resulting in the action in the controller not being executed. Here's another reminder: always call inv.invoke() once, unless you deliberately avoid calling the remaining interceptors and action. In such cases, you still need to use inv.getController().render()/renderJson() to call the related render() method to respond to the client.\n\nInvocation, as the only parameter in the Interceptor interface's intercept method, offers many convenient methods to use in the interceptor. Here are the methods in Invocation:\n\nMETHOD                         DESCRIPTION\nvoid invoke()                  Pass this call and invoke the remaining interceptors and the\n                               target method\nController getController()     Get the Controller object for the Action call (only for\n                               control layer interception)\nString getActionKey()          Get the action key value for the Action call (only for\n                               control layer interception)\nString getControllerKey()      Get the Controller key value for the Action call (only for\n                               control layer interception)\nString getViewPath()           Get the view path for the Action call (only for control\n                               layer interception)\n<T> getTarget()                Get the object to which the intercepted method belongs\nMethod getMethod()             Get the Method object of the intercepted method\nString getMethodName()         Get the method name of the intercepted method\nObject[] getArgs()             Get all parameter values of the intercepted method\nObject getArg(int)             Get the specified index parameter value of the intercepted\n                               method\n<T> getReturnValue()           Get the return value of the intercepted method\nvoid setArg(int)               Set the specified index parameter value of the intercepted\n                               method\nvoid setReturnValue(Object)    Set the return value of the intercepted method\nboolean isActionInvocation()   Determine if it's an Action call, i.e., control layer\n                               interception\n\nPlease correct a typo in the third line from the bottom in the screenshot above: setArg(int) should be changed to setArg(int, Object).\n\nNote: In version 4.9.03 of jfinal, getControllerKey() was renamed to getControllerPath(). The original method is still available and can be used. The renaming to getControllerPath() allows multiple Controllers to share the same controllerPath value.\n\n\n# 2. Global Sharing and Thread Safety\n\nInterceptors are globally shared. Therefore, if you use attributes within them, you must ensure that these attributes are thread-safe. The following code is incorrect:\n\npublic class MyInterceptor implements Interceptor {\n \n   private int value = 123;\n   \n   public void intercept(Invocation inv) {\n       // Multiple threads will access the value concurrently, causing confusion\n       value++;\n       \n       inv.invoke();\n   }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\nAs shown in the code above, the value attribute will be accessed by multiple threads, leading to thread safety issues.",normalizedContent:"# 4.2 interceptor\n\n\n# 1. basic usage\n\nan interceptor can intercept methods, providing an opportunity to add aspect code before and after the method, achieving the core goal of aop. the interceptor interface only defines one method: public void intercept(invocation inv). here's a simple example:\n\npublic class demointerceptor implements interceptor {\n    public void intercept(invocation inv) {\n       system.out.println(\"before method invoking\");\n       inv.invoke();\n       system.out.println(\"after method invoking\");\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nin the code above, the demointerceptor will intercept the target method and output text to the console both before and after the method's invocation. the line inv.invoke() is the call to the target method; inserting aspect code before and after this line can easily implement aop.\n\nnote: you must call the inv.invoke() method to pass the current call to subsequent interceptors and the action.\n\ncommon mistake: to date, many students forget to call the inv.invoke() method, resulting in the action in the controller not being executed. here's another reminder: always call inv.invoke() once, unless you deliberately avoid calling the remaining interceptors and action. in such cases, you still need to use inv.getcontroller().render()/renderjson() to call the related render() method to respond to the client.\n\ninvocation, as the only parameter in the interceptor interface's intercept method, offers many convenient methods to use in the interceptor. here are the methods in invocation:\n\nmethod                         description\nvoid invoke()                  pass this call and invoke the remaining interceptors and the\n                               target method\ncontroller getcontroller()     get the controller object for the action call (only for\n                               control layer interception)\nstring getactionkey()          get the action key value for the action call (only for\n                               control layer interception)\nstring getcontrollerkey()      get the controller key value for the action call (only for\n                               control layer interception)\nstring getviewpath()           get the view path for the action call (only for control\n                               layer interception)\n<t> gettarget()                get the object to which the intercepted method belongs\nmethod getmethod()             get the method object of the intercepted method\nstring getmethodname()         get the method name of the intercepted method\nobject[] getargs()             get all parameter values of the intercepted method\nobject getarg(int)             get the specified index parameter value of the intercepted\n                               method\n<t> getreturnvalue()           get the return value of the intercepted method\nvoid setarg(int)               set the specified index parameter value of the intercepted\n                               method\nvoid setreturnvalue(object)    set the return value of the intercepted method\nboolean isactioninvocation()   determine if it's an action call, i.e., control layer\n                               interception\n\nplease correct a typo in the third line from the bottom in the screenshot above: setarg(int) should be changed to setarg(int, object).\n\nnote: in version 4.9.03 of jfinal, getcontrollerkey() was renamed to getcontrollerpath(). the original method is still available and can be used. the renaming to getcontrollerpath() allows multiple controllers to share the same controllerpath value.\n\n\n# 2. global sharing and thread safety\n\ninterceptors are globally shared. therefore, if you use attributes within them, you must ensure that these attributes are thread-safe. the following code is incorrect:\n\npublic class myinterceptor implements interceptor {\n \n   private int value = 123;\n   \n   public void intercept(invocation inv) {\n       // multiple threads will access the value concurrently, causing confusion\n       value++;\n       \n       inv.invoke();\n   }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\nas shown in the code above, the value attribute will be accessed by multiple threads, leading to thread safety issues.",charsets:{}},{title:"3.6 set & setAttr methods",frontmatter:{},regularPath:"/en/3%20Controller/3.6%20set%20&%20setAttr%20methods.html",relativePath:"en/3 Controller/3.6 set & setAttr methods.md",key:"v-19c1bfe0",path:"/en/3%20Controller/3.6%20set%20&%20setAttr%20methods.html",lastUpdated:"9/17/2023, 5:50:29 AM",lastUpdatedTimestamp:1694929829e3,headersStr:null,content:'# 3.6 set & setAttr methods\n\nThe setAttr(String, Object) method invokes HttpServletRequest.setAttribute(String, Object). This method allows various data to be passed to the View and displayed in the View. By inspecting the JFinal source code of the Controller, it can be seen that the setAttr(String, Object) method internally just calls the underlying HttpServletRequest method:\n\nprivate HttpServletRequest request;\n \npublic Controller setAttr(String name, Object value) {\n    request.setAttribute(name, value);\n    return this;\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\nNew in JFinal 3.6: To further reduce the amount of code and increase development efficiency, JFinal 3.6 introduced the set method as a substitute for setAttr. Here\'s how to use it:\n\nset("article", article);\n \n// Chaining usage\nset("project", project).set("replyList", replyList).render("index.html");\n\n\n1\n2\n3\n4\n\n\nJFinal\'s pursuit of reducing code, enhancing development efficiency, and lowering the learning curve is relentless.',normalizedContent:'# 3.6 set & setattr methods\n\nthe setattr(string, object) method invokes httpservletrequest.setattribute(string, object). this method allows various data to be passed to the view and displayed in the view. by inspecting the jfinal source code of the controller, it can be seen that the setattr(string, object) method internally just calls the underlying httpservletrequest method:\n\nprivate httpservletrequest request;\n \npublic controller setattr(string name, object value) {\n    request.setattribute(name, value);\n    return this;\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\nnew in jfinal 3.6: to further reduce the amount of code and increase development efficiency, jfinal 3.6 introduced the set method as a substitute for setattr. here\'s how to use it:\n\nset("article", article);\n \n// chaining usage\nset("project", project).set("replylist", replylist).render("index.html");\n\n\n1\n2\n3\n4\n\n\njfinal\'s pursuit of reducing code, enhancing development efficiency, and lowering the learning curve is relentless.',charsets:{}},{title:"4.4 Clear",frontmatter:{},regularPath:"/en/4%20AOP/4.4%20Clear.html",relativePath:"en/4 AOP/4.4 Clear.md",key:"v-a00b136e",path:"/en/4%20AOP/4.4%20Clear.html",lastUpdated:"9/17/2023, 6:05:19 AM",lastUpdatedTimestamp:1694930719e3,headersStr:null,content:"# 4.4 Clear\n\nInterceptors are divided into four levels from top to bottom: Global, Routes, Class, and Method. Clear is used to remove interceptors from the level where it is located and all higher levels.\n\nWhen Clear is declared at the Method level, it will clear the interceptors at the Global, Routes, and Class levels. When declared at the Class level, it will clear the interceptors at the Global and Routes levels. When the Clear annotation carries parameters, it clears the specified interceptors in the target level.\n\nTips to remember Clear usage:\n\n * There are four levels of interceptors: Global, Routes, Class, and Method.\n * Clearing only targets all higher levels from where Clear is declared, without affecting the current and lower levels.\n * When no parameters are provided, all interceptors are cleared. When parameters are present, the specified interceptors are cleared.\n\nIn certain application scenarios, it's necessary to remove Global or Class interceptors. For instance, in a backend management system that has a global authorization interceptor, the login action must clear it to complete the login process. Here's a code example:\n\n// The login method needs to remove this authorization interceptor to log in properly.\n@Before(AuthInterceptor.class)\npublic class UserController extends Controller {\n    // AuthInterceptor has been cleared by Clear, so it won't be intercepted.\n    @Clear\n    public void login() {\n    }\n    \n    // This method will be intercepted by AuthInterceptor.\n    public void show() {\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nWhen the Clear annotation has parameters, it can clear specified interceptors. Below is a more comprehensive example:\n\n@Before(AAA.class)\npublic class UserController extends Controller {\n  @Clear\n  @Before(BBB.class)\n  public void login() {\n     // Global and Class level interceptors will be cleared, but BBB declared on this method remains unaffected.\n  }\n \n  @Clear({AAA.class, CCC.class})// Clear specified interceptors AAA and CCC.\n  @Before(CCC.class)\n  public void show() {\n     // Although CCC is specified to be cleared in the Clear annotation, it cannot be cleared because the clear operation targets only the higher levels.\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\nThe above clear operations were used on methods, but they can also be applied to classes. For example:\n\n@Clear(AAA.class)\npublic class UserController {\n   public void index() {\n      ...\n   }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\nAs shown above, @Clear(AAA.class) will clear the AAA.java interceptor that's configured in the higher layers, namely Global and Route.",normalizedContent:"# 4.4 clear\n\ninterceptors are divided into four levels from top to bottom: global, routes, class, and method. clear is used to remove interceptors from the level where it is located and all higher levels.\n\nwhen clear is declared at the method level, it will clear the interceptors at the global, routes, and class levels. when declared at the class level, it will clear the interceptors at the global and routes levels. when the clear annotation carries parameters, it clears the specified interceptors in the target level.\n\ntips to remember clear usage:\n\n * there are four levels of interceptors: global, routes, class, and method.\n * clearing only targets all higher levels from where clear is declared, without affecting the current and lower levels.\n * when no parameters are provided, all interceptors are cleared. when parameters are present, the specified interceptors are cleared.\n\nin certain application scenarios, it's necessary to remove global or class interceptors. for instance, in a backend management system that has a global authorization interceptor, the login action must clear it to complete the login process. here's a code example:\n\n// the login method needs to remove this authorization interceptor to log in properly.\n@before(authinterceptor.class)\npublic class usercontroller extends controller {\n    // authinterceptor has been cleared by clear, so it won't be intercepted.\n    @clear\n    public void login() {\n    }\n    \n    // this method will be intercepted by authinterceptor.\n    public void show() {\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nwhen the clear annotation has parameters, it can clear specified interceptors. below is a more comprehensive example:\n\n@before(aaa.class)\npublic class usercontroller extends controller {\n  @clear\n  @before(bbb.class)\n  public void login() {\n     // global and class level interceptors will be cleared, but bbb declared on this method remains unaffected.\n  }\n \n  @clear({aaa.class, ccc.class})// clear specified interceptors aaa and ccc.\n  @before(ccc.class)\n  public void show() {\n     // although ccc is specified to be cleared in the clear annotation, it cannot be cleared because the clear operation targets only the higher levels.\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\nthe above clear operations were used on methods, but they can also be applied to classes. for example:\n\n@clear(aaa.class)\npublic class usercontroller {\n   public void index() {\n      ...\n   }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\nas shown above, @clear(aaa.class) will clear the aaa.java interceptor that's configured in the higher layers, namely global and route.",charsets:{}},{title:"4.3 Before",frontmatter:{},regularPath:"/en/4%20AOP/4.3%20Before.html",relativePath:"en/4 AOP/4.3 Before.md",key:"v-03e1fb7e",path:"/en/4%20AOP/4.3%20Before.html",lastUpdated:"9/17/2023, 6:05:19 AM",lastUpdatedTimestamp:1694930719e3,headersStr:null,content:"# 4.3 Before\n\nThe Before annotation is used to configure interceptors. This annotation can configure Class and Method level interceptors. Here's a code example:\n\n// Configures a Class-level interceptor, which will intercept all methods in this class\n@Before(AaaInter.class)\npublic class BlogController extends Controller {\n \n  // Configures multiple Method-level interceptors, only intercepting this method\n  @Before({BbbInter.class, CccInter.class})\n  public void index() {\n  }\n \n  // No Method-level interceptor configured, but it will be intercepted by the Class-level interceptor AaaInter\n  public void show() {\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\nAs shown in the code above, the Before annotation can configure interceptors at the Class and Method levels. The former intercepts all methods in this class, and the latter only intercepts this method. Additionally, Before can configure multiple interceptors at once. You just need to separate multiple interceptors with commas inside curly braces.\n\nIn addition to Class and Method level interceptors, JFinal also supports global interceptors and Routes interceptors. Global interceptors are divided into global control layer interceptors and global business layer interceptors. The former intercepts all Action methods in the control layer, while the latter intercepts all methods in the business layer.\n\nGlobal interceptors need to be configured in YourJFinalConfig. Here's a configuration example:\n\npublic class YourJFinalConfig extends JFinalConfig {\n   public void configInterceptor(Interceptors me) {\n      // Add a global control layer interceptor\n      me.addGlobalActionInterceptor(new GlobalActionInterceptor());\n  \n      // Add a global business layer interceptor\n      me.addGlobalServiceInterceptor(new GlobalServiceInterceptor());\n  \n      // A method retained for backward compatibility; its function is exactly the same as addGlobalActionInterceptor\n      me.add(new GlobalActionInterceptor());\n   }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nWhen a Method is intercepted by multiple level interceptors, the order of execution for each level is as follows: Global, Routes, Class, Method. If there are multiple interceptors at the same level, the order of execution within the same level is: those configured earlier execute first.",normalizedContent:"# 4.3 before\n\nthe before annotation is used to configure interceptors. this annotation can configure class and method level interceptors. here's a code example:\n\n// configures a class-level interceptor, which will intercept all methods in this class\n@before(aaainter.class)\npublic class blogcontroller extends controller {\n \n  // configures multiple method-level interceptors, only intercepting this method\n  @before({bbbinter.class, cccinter.class})\n  public void index() {\n  }\n \n  // no method-level interceptor configured, but it will be intercepted by the class-level interceptor aaainter\n  public void show() {\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\nas shown in the code above, the before annotation can configure interceptors at the class and method levels. the former intercepts all methods in this class, and the latter only intercepts this method. additionally, before can configure multiple interceptors at once. you just need to separate multiple interceptors with commas inside curly braces.\n\nin addition to class and method level interceptors, jfinal also supports global interceptors and routes interceptors. global interceptors are divided into global control layer interceptors and global business layer interceptors. the former intercepts all action methods in the control layer, while the latter intercepts all methods in the business layer.\n\nglobal interceptors need to be configured in yourjfinalconfig. here's a configuration example:\n\npublic class yourjfinalconfig extends jfinalconfig {\n   public void configinterceptor(interceptors me) {\n      // add a global control layer interceptor\n      me.addglobalactioninterceptor(new globalactioninterceptor());\n  \n      // add a global business layer interceptor\n      me.addglobalserviceinterceptor(new globalserviceinterceptor());\n  \n      // a method retained for backward compatibility; its function is exactly the same as addglobalactioninterceptor\n      me.add(new globalactioninterceptor());\n   }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nwhen a method is intercepted by multiple level interceptors, the order of execution for each level is as follows: global, routes, class, method. if there are multiple interceptors at the same level, the order of execution within the same level is: those configured earlier execute first.",charsets:{}},{title:"4.5 Inject dependency injection",frontmatter:{},regularPath:"/en/4%20AOP/4.5%20Inject%20dependency%20injection.html",relativePath:"en/4 AOP/4.5 Inject dependency injection.md",key:"v-6505369f",path:"/en/4%20AOP/4.5%20Inject%20dependency%20injection.html",lastUpdated:"9/17/2023, 6:05:19 AM",lastUpdatedTimestamp:1694930719e3,headersStr:null,content:"# 4.5 Inject dependency injection\n\nUsing the @Inject annotation, you can inject dependent objects into the Controller and Interceptor. To use the injection function, you need the following configuration:\n\npublic void configConstant(Constants me) {\n    // Enable the injection for jfinal web project components: Controller, Interceptor, and Validator.\n    me.setInjectDependency(true);\n    \n    // Enable injection for superclasses. If not enabled, injection can be done in the superclass using Aop.get(...).\n    me.setInjectSuperClass(true);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nThe above me.setInjectDependency(true) is a configuration pertaining to jfinal web components. However, Aop.get(...) and Aop.inject(...) can support injection without any additional configuration.\n\nOnce configured, it can be used in controllers, for example:\n\npublic class AccountController {\n   \n   @Inject\n   AccountService service;    // Here, the dependent object will be injected\n   \n   public void index() {\n       service.justDoIt();    // Call the method of the injected object\n   }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n@Inject can also be used for property injection in interceptors, for example:\n\npublic class MyInterceptor implements Interceptor {\n    \n    @Inject\n    Service service;    // Here, the dependent object will be injected\n    \n    public void intercept(Invocation inv) {\n        service.justDoIt();    // Call the method of the injected object\n        inv.invoke();\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nSpecial Note: The prerequisite for using Inject is that the object creation of the class annotated with @Inject is managed by jfinal. This allows jfinal the opportunity to perform injection. For example, the creation of Controller, Interceptor, and Validator is managed by jfinal, so these three components can use @Inject for injection.\n\nAdditionally, the injection action can be passed downward. For instance, if a Controller uses @Inject to inject an AaaService, then within AaaService, you can use @Inject to inject a BbbService, and so on.\n\nIf the object you need to create isn't managed by jfinal, you can use the Aop.get(...) method for the creation and injection of dependent objects, for example:\n\npublic class MyKit {\n   \n   static Service service = Aop.get(Service.class);\n   \n   public void doIt() {\n      service.justDoIt();\n   }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nSince the creation of MyKit isn't managed by jfinal, you cannot use @Inject for dependency injection. However, the creation and assembly of Controller and Interceptor are managed by jfinal, so they can use @Inject to inject dependencies.\n\nWith Aop.get(...), you can create and inject objects anywhere. Moreover, you can use Aop.inject(...) to only inject dependencies into objects without creating them.\n\nThe @Inject annotation also supports specifying the injected implementation class. For example, in the following code, a MyService object will be injected for Service:\n\n@Inject(MyService.class)\nService service;\n\n\n1\n2\n\n\nIf the @Inject(...) annotation doesn't specify the type of injection, you can still specify the type of injection using AopManager.me().addMapping(...), for instance:\n\nAopManager.me().addMapping(Service.class, MyService.class);\n\n\n1\n\n\nWith the above mapping, the following code will inject MyService for Service:\n\npublic class IndexController {\n    \n    @Inject\n    Service service;\n    \n    public void index() {\n        service.justDoIt();\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n",normalizedContent:"# 4.5 inject dependency injection\n\nusing the @inject annotation, you can inject dependent objects into the controller and interceptor. to use the injection function, you need the following configuration:\n\npublic void configconstant(constants me) {\n    // enable the injection for jfinal web project components: controller, interceptor, and validator.\n    me.setinjectdependency(true);\n    \n    // enable injection for superclasses. if not enabled, injection can be done in the superclass using aop.get(...).\n    me.setinjectsuperclass(true);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nthe above me.setinjectdependency(true) is a configuration pertaining to jfinal web components. however, aop.get(...) and aop.inject(...) can support injection without any additional configuration.\n\nonce configured, it can be used in controllers, for example:\n\npublic class accountcontroller {\n   \n   @inject\n   accountservice service;    // here, the dependent object will be injected\n   \n   public void index() {\n       service.justdoit();    // call the method of the injected object\n   }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n@inject can also be used for property injection in interceptors, for example:\n\npublic class myinterceptor implements interceptor {\n    \n    @inject\n    service service;    // here, the dependent object will be injected\n    \n    public void intercept(invocation inv) {\n        service.justdoit();    // call the method of the injected object\n        inv.invoke();\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nspecial note: the prerequisite for using inject is that the object creation of the class annotated with @inject is managed by jfinal. this allows jfinal the opportunity to perform injection. for example, the creation of controller, interceptor, and validator is managed by jfinal, so these three components can use @inject for injection.\n\nadditionally, the injection action can be passed downward. for instance, if a controller uses @inject to inject an aaaservice, then within aaaservice, you can use @inject to inject a bbbservice, and so on.\n\nif the object you need to create isn't managed by jfinal, you can use the aop.get(...) method for the creation and injection of dependent objects, for example:\n\npublic class mykit {\n   \n   static service service = aop.get(service.class);\n   \n   public void doit() {\n      service.justdoit();\n   }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nsince the creation of mykit isn't managed by jfinal, you cannot use @inject for dependency injection. however, the creation and assembly of controller and interceptor are managed by jfinal, so they can use @inject to inject dependencies.\n\nwith aop.get(...), you can create and inject objects anywhere. moreover, you can use aop.inject(...) to only inject dependencies into objects without creating them.\n\nthe @inject annotation also supports specifying the injected implementation class. for example, in the following code, a myservice object will be injected for service:\n\n@inject(myservice.class)\nservice service;\n\n\n1\n2\n\n\nif the @inject(...) annotation doesn't specify the type of injection, you can still specify the type of injection using aopmanager.me().addmapping(...), for instance:\n\naopmanager.me().addmapping(service.class, myservice.class);\n\n\n1\n\n\nwith the above mapping, the following code will inject myservice for service:\n\npublic class indexcontroller {\n    \n    @inject\n    service service;\n    \n    public void index() {\n        service.justdoit();\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n",charsets:{}},{title:"4.6 Aop tool",frontmatter:{},regularPath:"/en/4%20AOP/4.6%20Aop%20tool.html",relativePath:"en/4 AOP/4.6 Aop tool.md",key:"v-d9d991c4",path:"/en/4%20AOP/4.6%20Aop%20tool.html",headers:[{level:3,title:"1. Aop",slug:"_1-aop",normalizedTitle:"1. aop",charIndex:19},{level:3,title:"2. AopManager",slug:"_2-aopmanager",normalizedTitle:"2. aopmanager",charIndex:791}],lastUpdated:"9/17/2023, 6:05:19 AM",lastUpdatedTimestamp:1694930719e3,headersStr:"1. Aop 2. AopManager",content:"# 4.6 Aop tool\n\n\n# 1. Aop\n\n# 1.1 get(...)\n\nAop.get(...) allows the creation of objects at any time and space and performs dependency injection on them. For instance:\n\nService service = Aop.get(Service.class);\n\n\n1\n\n\nThe above code creates a Service object. If the Service has interceptors configured with @Before, they will be activated. If the properties in Service are annotated with @Inject, they will be injected with dependent objects.\n\n# 1.2 inject(...)\n\nAop.inject(...) can inject target objects at any time and space. This method, compared to Aop.get(...), lacks the object creation functionality:\n\nService service = new Service(...);\nAop.inject(service);\n\n\n1\n2\n\n\nThe above code will inject dependencies into properties of the Service class that have been annotated with @Inject.\n\n\n# 2. AopManager\n\nAopManager is used to manage various Aop configurations.\n\n# 2.1 addMapping(...)\n\naddMapping is used to establish a mapping relationship between an interface/abstract class and its implementation class. For instance:\n\nAopManager.me().addMapping(Service.class, MyService.class);\n\n\n1\n\n\nWith the mapping above, the following code will create a MyService object for Service, not a Service object:\n\n// Here, the retrieved object is MyService\nAop.get(Service.class);\n \n// Here, the injected object is MyService\n@Inject\nService service;\n\n\n1\n2\n3\n4\n5\n6\n\n\nThe purpose of AopManager.me().addMapping(...) is to specify the concrete implementation class to be injected for an interface or abstract class.\n\n# 2.2 addSingletonObject(...)\n\nSince Aop does not support passing parameters to constructors when creating objects, addSingletonObject(...) is provided to add singleton objects:\n\n// The Service class constructor has two parameters passed in\nService service = new Service(paraAaa, paraBbb);\nAopManager.me().addSingletonObject(service);\n\n\n1\n2\n3\n\n\nAfter completing the above code, you can retrieve the singleton object anywhere as follows:\n\n// Retrieving uses the singleton object\nservice = Aop.get(Service.class);\n \n// Injection can also use the previously configured singleton object\n@Inject\nService service;\n\n\n1\n2\n3\n4\n5\n6\n\n\nBefore adding as a singleton object, dependencies can be injected into it:\n\nService service = new Service(paraAaa, paraBbb);\n// Here, dependencies are injected into Service\nAop.inject(service);\n \n// After injecting dependencies for the singleton, add it as a singleton for subsequent use\nAopManager.me().addSingletonObject(service);\n\n\n1\n2\n3\n4\n5\n6\n\n\n# 2.3 setAopFactory(...)\n\nsetAopFactory(...) allows users to extend the AopFactory implementation class to implement more extensible features. For example, the jboot project extension for injecting remote access objects: https://gitee.com/JbootProjects/jboot/blob/master/src/main/java/io/jboot/aop/JbootAopFactory.java. In JbootAopFactory.java, doInjectRPC implements remote procedure call injection.",normalizedContent:"# 4.6 aop tool\n\n\n# 1. aop\n\n# 1.1 get(...)\n\naop.get(...) allows the creation of objects at any time and space and performs dependency injection on them. for instance:\n\nservice service = aop.get(service.class);\n\n\n1\n\n\nthe above code creates a service object. if the service has interceptors configured with @before, they will be activated. if the properties in service are annotated with @inject, they will be injected with dependent objects.\n\n# 1.2 inject(...)\n\naop.inject(...) can inject target objects at any time and space. this method, compared to aop.get(...), lacks the object creation functionality:\n\nservice service = new service(...);\naop.inject(service);\n\n\n1\n2\n\n\nthe above code will inject dependencies into properties of the service class that have been annotated with @inject.\n\n\n# 2. aopmanager\n\naopmanager is used to manage various aop configurations.\n\n# 2.1 addmapping(...)\n\naddmapping is used to establish a mapping relationship between an interface/abstract class and its implementation class. for instance:\n\naopmanager.me().addmapping(service.class, myservice.class);\n\n\n1\n\n\nwith the mapping above, the following code will create a myservice object for service, not a service object:\n\n// here, the retrieved object is myservice\naop.get(service.class);\n \n// here, the injected object is myservice\n@inject\nservice service;\n\n\n1\n2\n3\n4\n5\n6\n\n\nthe purpose of aopmanager.me().addmapping(...) is to specify the concrete implementation class to be injected for an interface or abstract class.\n\n# 2.2 addsingletonobject(...)\n\nsince aop does not support passing parameters to constructors when creating objects, addsingletonobject(...) is provided to add singleton objects:\n\n// the service class constructor has two parameters passed in\nservice service = new service(paraaaa, parabbb);\naopmanager.me().addsingletonobject(service);\n\n\n1\n2\n3\n\n\nafter completing the above code, you can retrieve the singleton object anywhere as follows:\n\n// retrieving uses the singleton object\nservice = aop.get(service.class);\n \n// injection can also use the previously configured singleton object\n@inject\nservice service;\n\n\n1\n2\n3\n4\n5\n6\n\n\nbefore adding as a singleton object, dependencies can be injected into it:\n\nservice service = new service(paraaaa, parabbb);\n// here, dependencies are injected into service\naop.inject(service);\n \n// after injecting dependencies for the singleton, add it as a singleton for subsequent use\naopmanager.me().addsingletonobject(service);\n\n\n1\n2\n3\n4\n5\n6\n\n\n# 2.3 setaopfactory(...)\n\nsetaopfactory(...) allows users to extend the aopfactory implementation class to implement more extensible features. for example, the jboot project extension for injecting remote access objects: https://gitee.com/jbootprojects/jboot/blob/master/src/main/java/io/jboot/aop/jbootaopfactory.java. in jbootaopfactory.java, doinjectrpc implements remote procedure call injection.",charsets:{}},{title:"4.7 Routes level interceptor",frontmatter:{},regularPath:"/en/4%20AOP/4.7%20Routes%20level%20interceptor.html",relativePath:"en/4 AOP/4.7 Routes level interceptor.md",key:"v-71b5fc87",path:"/en/4%20AOP/4.7%20Routes%20level%20interceptor.html",lastUpdated:"9/17/2023, 6:05:19 AM",lastUpdatedTimestamp:1694930719e3,headersStr:null,content:'# 4.7 Routes level interceptor\n\nRoutes level interceptor refers to the interceptors added in Routes. Below is an example:\n\n/**\n * Backend routes\n */\npublic class AdminRoutes extends Routes {\n \n  public void config() {\n     // Here we configure the Routes level interceptor, multiple can be configured\n     addInterceptor(new AdminAuthInterceptor());\n \n     add("/admin", IndexAdminController.class, "/index");\n     add("/admin/project", ProjectAdminController.class, "/project");\n     add("/admin/share", ShareAdminController.class, "/share");\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\nIn the example above, AdminAuthInterceptor will intercept all action methods in IndexAdminController, ProjectAdminController, and ShareAdminController.\n\nThe functionality of Routes interceptors allows configuring the same interceptor for multiple Controllers with a single line of code, reducing code redundancy. The Routes level interceptor will be called before the Class level interceptor.',normalizedContent:'# 4.7 routes level interceptor\n\nroutes level interceptor refers to the interceptors added in routes. below is an example:\n\n/**\n * backend routes\n */\npublic class adminroutes extends routes {\n \n  public void config() {\n     // here we configure the routes level interceptor, multiple can be configured\n     addinterceptor(new adminauthinterceptor());\n \n     add("/admin", indexadmincontroller.class, "/index");\n     add("/admin/project", projectadmincontroller.class, "/project");\n     add("/admin/share", shareadmincontroller.class, "/share");\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\nin the example above, adminauthinterceptor will intercept all action methods in indexadmincontroller, projectadmincontroller, and shareadmincontroller.\n\nthe functionality of routes interceptors allows configuring the same interceptor for multiple controllers with a single line of code, reducing code redundancy. the routes level interceptor will be called before the class level interceptor.',charsets:{}},{title:"4.8 Proxy dynamic proxy",frontmatter:{},regularPath:"/en/4%20AOP/4.8%20Proxy%20dynamic%20proxy.html",relativePath:"en/4 AOP/4.8 Proxy dynamic proxy.md",key:"v-e08424aa",path:"/en/4%20AOP/4.8%20Proxy%20dynamic%20proxy.html",lastUpdated:"9/17/2023, 6:05:19 AM",lastUpdatedTimestamp:1694930719e3,headersStr:null,content:'# 4.8 Proxy dynamic proxy\n\n\n# 4.8 Proxy Dynamic Proxy\n\nThe Proxy dynamic proxy is the underlying implementation mechanism of jfinal AOP. The jfinal 4.0 version added the com.jfinal.proxy module to eliminate the dependency on cglib/asm for dynamic proxy implementation.\n\nThe proxy module needs to run under the JDK environment. If you need to run it under JRE, you can add the following configuration for support:\n\npublic void configConstant(Constants me) {\n \n  // Configuration method for versions before 4.6: me.setProxyFactory(new CglibProxyFactory());\n  me.setToCglibProxyFactory();  // New configuration method in version 4.6\n}\n\n\n1\n2\n3\n4\n5\n\n\nThe above configuration will switch to the cglib implementation of the proxy module. You need to add its maven dependency in pom.xml:\n\n<dependency>\n   <groupId>cglib</groupId>\n   <artifactId>cglib-nodep</artifactId>\n   <version>3.2.5</version>\n</dependency>\n\n\n1\n2\n3\n4\n5\n\n\nIf you are using it in a "non-web environment", the configuration method is as follows:\n\n// Configuration method for versions before 4.6: ProxyManager.me().setProxyFactory(new CglibProxyFactory());\nProxyManager.me().setToCglibProxyFactory();\n\n\n1\n2\n',normalizedContent:'# 4.8 proxy dynamic proxy\n\n\n# 4.8 proxy dynamic proxy\n\nthe proxy dynamic proxy is the underlying implementation mechanism of jfinal aop. the jfinal 4.0 version added the com.jfinal.proxy module to eliminate the dependency on cglib/asm for dynamic proxy implementation.\n\nthe proxy module needs to run under the jdk environment. if you need to run it under jre, you can add the following configuration for support:\n\npublic void configconstant(constants me) {\n \n  // configuration method for versions before 4.6: me.setproxyfactory(new cglibproxyfactory());\n  me.settocglibproxyfactory();  // new configuration method in version 4.6\n}\n\n\n1\n2\n3\n4\n5\n\n\nthe above configuration will switch to the cglib implementation of the proxy module. you need to add its maven dependency in pom.xml:\n\n<dependency>\n   <groupid>cglib</groupid>\n   <artifactid>cglib-nodep</artifactid>\n   <version>3.2.5</version>\n</dependency>\n\n\n1\n2\n3\n4\n5\n\n\nif you are using it in a "non-web environment", the configuration method is as follows:\n\n// configuration method for versions before 4.6: proxymanager.me().setproxyfactory(new cglibproxyfactory());\nproxymanager.me().settocglibproxyfactory();\n\n\n1\n2\n',charsets:{}},{title:"5.10 Table Association Operations",frontmatter:{},regularPath:"/en/5%20ActiveRecord/5.10%20Table%20association%20operations.html",relativePath:"en/5 ActiveRecord/5.10 Table association operations.md",key:"v-4c0f155b",path:"/en/5%20ActiveRecord/5.10%20Table%20association%20operations.html",lastUpdated:"9/21/2023, 8:42:09 AM",lastUpdatedTimestamp:1695285729e3,headersStr:null,content:'# 5.10 Table Association Operations\n\nJFinal ActiveRecord natively supports table association operations, so there is no need to learn anything new—a classic case of "less is more." There are mainly two ways to perform table association operations: First, directly use SQL to get associated data; Second, add methods in the Model to fetch associated data.\n\nSuppose there are two database tables: user and blog, and there is a one-to-many relationship from user to blog. The blog table uses user_id to associate with the user table. The following code demonstrates how to use the first method to get user_name:\n\npublic void relation() {\n  String sql = "select b.*, u.user_name from blog b inner join user u on b.user_id=u.id where b.id=?";\n  Blog blog = Blog.dao.findFirst(sql, 123);\n  String name = blog.getStr("user_name");\n}\n\n\n1\n2\n3\n4\n5\n\n\nThe code below demonstrates the second method for retrieving the associated User in Blog and the associated Blog in User:\n\npublic class Blog extends Model<Blog>{\n    public static final Blog dao = new Blog().dao();\n    \n    public User getUser() {\n       return User.dao.findById(get("user_id"));\n    }\n}\n \npublic class User extends Model<User>{\n    public static final User dao = new User().dao();\n    \n    public List<Blog> getBlogs() {\n       return Blog.dao.find("select * from blog where user_id=?", get("id"));\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\nThe above code creates a new dao object within the specific Model; this usage is solely for table association operations. For other cases, the dao object should be held by the Service layer.',normalizedContent:'# 5.10 table association operations\n\njfinal activerecord natively supports table association operations, so there is no need to learn anything new—a classic case of "less is more." there are mainly two ways to perform table association operations: first, directly use sql to get associated data; second, add methods in the model to fetch associated data.\n\nsuppose there are two database tables: user and blog, and there is a one-to-many relationship from user to blog. the blog table uses user_id to associate with the user table. the following code demonstrates how to use the first method to get user_name:\n\npublic void relation() {\n  string sql = "select b.*, u.user_name from blog b inner join user u on b.user_id=u.id where b.id=?";\n  blog blog = blog.dao.findfirst(sql, 123);\n  string name = blog.getstr("user_name");\n}\n\n\n1\n2\n3\n4\n5\n\n\nthe code below demonstrates the second method for retrieving the associated user in blog and the associated blog in user:\n\npublic class blog extends model<blog>{\n    public static final blog dao = new blog().dao();\n    \n    public user getuser() {\n       return user.dao.findbyid(get("user_id"));\n    }\n}\n \npublic class user extends model<user>{\n    public static final user dao = new user().dao();\n    \n    public list<blog> getblogs() {\n       return blog.dao.find("select * from blog where user_id=?", get("id"));\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\nthe above code creates a new dao object within the specific model; this usage is solely for table association operations. for other cases, the dao object should be held by the service layer.',charsets:{}},{title:"5.1 Overview",frontmatter:{},regularPath:"/en/5%20ActiveRecord/5.1%20Overview.html",relativePath:"en/5 ActiveRecord/5.1 Overview.md",key:"v-102f273a",path:"/en/5%20ActiveRecord/5.1%20Overview.html",lastUpdated:"9/17/2023, 6:16:57 AM",lastUpdatedTimestamp:1694931417e3,headersStr:null,content:"# 5.1 Overview\n\nMajor Update: Starting from jfinal 3.0, a SQL management module has been added. It is much more enjoyable than using XML to manage SQL in mybatis. For a quick look, visit: http://www.jfinal.com/doc/5-13\n\nActiveRecord is one of the core components of JFinal. Operating the database through ActiveRecord will greatly reduce the amount of code and significantly improve development efficiency.\n\nThe essence of the ActiveRecord pattern is: a Model object uniquely corresponds to a record in a database table, and the correspondence relies on the primary key value of the database table.\n\nTherefore, the ActiveRecord pattern requires the database table to have a primary key. When the database table doesn't have a primary key, you can only use the Db + Record mode to operate the database.",normalizedContent:"# 5.1 overview\n\nmajor update: starting from jfinal 3.0, a sql management module has been added. it is much more enjoyable than using xml to manage sql in mybatis. for a quick look, visit: http://www.jfinal.com/doc/5-13\n\nactiverecord is one of the core components of jfinal. operating the database through activerecord will greatly reduce the amount of code and significantly improve development efficiency.\n\nthe essence of the activerecord pattern is: a model object uniquely corresponds to a record in a database table, and the correspondence relies on the primary key value of the database table.\n\ntherefore, the activerecord pattern requires the database table to have a primary key. when the database table doesn't have a primary key, you can only use the db + record mode to operate the database.",charsets:{}},{title:"5.12 Oracle Support",frontmatter:{},regularPath:"/en/5%20ActiveRecord/5.12%20Oracle%20support.html",relativePath:"en/5 ActiveRecord/5.12 Oracle support.md",key:"v-6df51cb8",path:"/en/5%20ActiveRecord/5.12%20Oracle%20support.html",lastUpdated:"9/21/2023, 8:42:09 AM",lastUpdatedTimestamp:1695285729e3,headersStr:null,content:'# 5.12 Oracle Support\n\nOracle databases have some specific characteristics, and JFinal has made some additional adjustments to accommodate Oracle users. Below is a complete Oracle configuration example:\n\npublic class DemoConfig extends JFinalConfig {\n  public void configPlugin(Plugins me) {\n    DruidPlugin dp = new DruidPlugin(……);\n    me.add(dp);\n    // Configure Oracle driver, this line can be omitted when using DruidPlugin\n    dp.setDriverClass("oracle.jdbc.driver.OracleDriver");\n    \n    ActiveRecordPlugin arp = new ActiveRecordPlugin(dp);\n    me.add(arp);\n    // Configure Oracle dialect\n    arp.setDialect(new OracleDialect());\n    // Configure case-insensitive container factory for attribute names (field names)\n    arp.setContainerFactory(new CaseInsensitiveContainerFactory());\n    arp.addMapping("user", "user_id", User.class);\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\nSince Oracle databases automatically convert attribute names (field names) to uppercase, you need to manually specify the primary key name in uppercase, like: arp.addMapping("user", "ID", User.class). If you want ActiveRecord to be case-insensitive to attribute names (field names), you can achieve this by setting CaseInsensitiveContainerFactory. With this setting, specifying arp.addMapping("user", "ID", User.class) is no longer necessary.\n\nMoreover, Oracle does not directly support auto-increment primary keys. JFinal provides a convenient solution for this. Enabling Oracle to support auto-incrementing primary keys mainly involves two steps:\n\n 1. Creating a sequence. In this example, the sequence name is MY_SEQ.\n\nCREATE SEQUENCE MY_SEQ\n INCREMENT BY 1\n MINVALUE 1\n MAXVALUE 9999999999999999\n START WITH 1\n CACHE 20;\n\n\n1\n2\n3\n4\n5\n6\n\n 2. Use the sequence in your model:\n\n// Create User and use the sequence\nUser user = new User().set("id", "MY_SEQ.nextval").set("age", 18);\nuser.save();\n// Get the id value\nInteger id = user.get("id");\n\n\n1\n2\n3\n4\n5\n\n\nUsing the sequence is simple; you just need to use yourModel.set(primaryKeyName, sequenceName + ".nextval"). Note that the ".nextval" suffix must be in lowercase, as OracleDialect is case-sensitive to this value.\n\nNote: For pagination and sorting SQL statements in Oracle, two conditions must be met:\n\n 1. The SQL statement must have a sorting condition.\n 2. If the sorting condition is not unique, it must be followed by a unique condition, such as a primary key.\n\nRelevant Blog: http://database.51cto.com/art/201010/231533.htm\n\nFeedback: http://www.jfinal.com/feedback/64#replyContent',normalizedContent:'# 5.12 oracle support\n\noracle databases have some specific characteristics, and jfinal has made some additional adjustments to accommodate oracle users. below is a complete oracle configuration example:\n\npublic class democonfig extends jfinalconfig {\n  public void configplugin(plugins me) {\n    druidplugin dp = new druidplugin(……);\n    me.add(dp);\n    // configure oracle driver, this line can be omitted when using druidplugin\n    dp.setdriverclass("oracle.jdbc.driver.oracledriver");\n    \n    activerecordplugin arp = new activerecordplugin(dp);\n    me.add(arp);\n    // configure oracle dialect\n    arp.setdialect(new oracledialect());\n    // configure case-insensitive container factory for attribute names (field names)\n    arp.setcontainerfactory(new caseinsensitivecontainerfactory());\n    arp.addmapping("user", "user_id", user.class);\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\nsince oracle databases automatically convert attribute names (field names) to uppercase, you need to manually specify the primary key name in uppercase, like: arp.addmapping("user", "id", user.class). if you want activerecord to be case-insensitive to attribute names (field names), you can achieve this by setting caseinsensitivecontainerfactory. with this setting, specifying arp.addmapping("user", "id", user.class) is no longer necessary.\n\nmoreover, oracle does not directly support auto-increment primary keys. jfinal provides a convenient solution for this. enabling oracle to support auto-incrementing primary keys mainly involves two steps:\n\n 1. creating a sequence. in this example, the sequence name is my_seq.\n\ncreate sequence my_seq\n increment by 1\n minvalue 1\n maxvalue 9999999999999999\n start with 1\n cache 20;\n\n\n1\n2\n3\n4\n5\n6\n\n 2. use the sequence in your model:\n\n// create user and use the sequence\nuser user = new user().set("id", "my_seq.nextval").set("age", 18);\nuser.save();\n// get the id value\ninteger id = user.get("id");\n\n\n1\n2\n3\n4\n5\n\n\nusing the sequence is simple; you just need to use yourmodel.set(primarykeyname, sequencename + ".nextval"). note that the ".nextval" suffix must be in lowercase, as oracledialect is case-sensitive to this value.\n\nnote: for pagination and sorting sql statements in oracle, two conditions must be met:\n\n 1. the sql statement must have a sorting condition.\n 2. if the sorting condition is not unique, it must be followed by a unique condition, such as a primary key.\n\nrelevant blog: http://database.51cto.com/art/201010/231533.htm\n\nfeedback: http://www.jfinal.com/feedback/64#replycontent',charsets:{}},{title:"5.11 Composite Primary Keys",frontmatter:{},regularPath:"/en/5%20ActiveRecord/5.11%20Composite%20primary%20key.html",relativePath:"en/5 ActiveRecord/5.11 Composite primary key.md",key:"v-fa243062",path:"/en/5%20ActiveRecord/5.11%20Composite%20primary%20key.html",lastUpdated:"9/21/2023, 8:42:09 AM",lastUpdatedTimestamp:1695285729e3,headersStr:null,content:'# 5.11 Composite Primary Keys\n\nStarting from version 2.0, JFinal ActiveRecord supports composite primary keys with a minimalist design. For Models, you need to specify the composite primary key names during mapping. Here is a specific example:\n\nActiveRecordPlugin arp = new ActiveRecordPlugin(druidPlugin);\n// For multi-data sources, specify the composite primary key names as the second argument\narp.addMapping("user_role", "userId, roleId", UserRole.class);\n\n// Use the specified composite primary keys to find records\nUserRole.dao.findByIds(123, 456);\n\n// Use the specified composite primary keys to delete records\nUserRole.dao.deleteByIds(123, 456);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nAs shown in the code above, for Models, you only need to specify the composite primary key names when adding Model mapping. In subsequent operations, JFinal will check the number of composite primary keys supported. An exception will be thrown if the number of composite primary keys is incorrect, ensuring data safety, especially when there are insufficient composite keys. Composite primary keys are not limited to just two; they can be any number that the database supports.\n\nFor the Db + Record model, no configuration is needed for using composite primary keys; you can use them directly:\n\nDb.findByIds("user_role", "roleId, userId", 123, 456);\nDb.deleteByIds("user_role", "roleId, userId", 123, 456);\n\n\n1\n2\n',normalizedContent:'# 5.11 composite primary keys\n\nstarting from version 2.0, jfinal activerecord supports composite primary keys with a minimalist design. for models, you need to specify the composite primary key names during mapping. here is a specific example:\n\nactiverecordplugin arp = new activerecordplugin(druidplugin);\n// for multi-data sources, specify the composite primary key names as the second argument\narp.addmapping("user_role", "userid, roleid", userrole.class);\n\n// use the specified composite primary keys to find records\nuserrole.dao.findbyids(123, 456);\n\n// use the specified composite primary keys to delete records\nuserrole.dao.deletebyids(123, 456);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nas shown in the code above, for models, you only need to specify the composite primary key names when adding model mapping. in subsequent operations, jfinal will check the number of composite primary keys supported. an exception will be thrown if the number of composite primary keys is incorrect, ensuring data safety, especially when there are insufficient composite keys. composite primary keys are not limited to just two; they can be any number that the database supports.\n\nfor the db + record model, no configuration is needed for using composite primary keys; you can use them directly:\n\ndb.findbyids("user_role", "roleid, userid", 123, 456);\ndb.deletebyids("user_role", "roleid, userid", 123, 456);\n\n\n1\n2\n',charsets:{}},{title:"5.13 Enjoy SQL Template",frontmatter:{},regularPath:"/en/5%20ActiveRecord/5.13%20Enjoy%20SQL%20template.html",relativePath:"en/5 ActiveRecord/5.13 Enjoy SQL template.md",key:"v-11f316bb",path:"/en/5%20ActiveRecord/5.13%20Enjoy%20SQL%20template.html",headers:[{level:2,title:"1. Basic Configuration",slug:"_1-basic-configuration",normalizedTitle:"1. basic configuration",charIndex:479},{level:2,title:"2. #sql Directive",slug:"_2-sql-directive",normalizedTitle:"2. #sql directive",charIndex:1087},{level:2,title:"3. #para Directive",slug:"_3-para-directive",normalizedTitle:"3. #para directive",charIndex:1373},{level:3,title:"3.1 Using int Constants #para(int)",slug:"_3-1-using-int-constants-para-int",normalizedTitle:"3.1 using int constants #para(int)",charIndex:1396},{level:3,title:"3.2 Using Non-int Constants #para(expr)",slug:"_3-2-using-non-int-constants-para-expr",normalizedTitle:"3.2 using non-int constants #para(expr)",charIndex:1767},{level:3,title:"3.3 Comparison between #para(int) and #para(expression)",slug:"_3-3-comparison-between-para-int-and-para-expression",normalizedTitle:"3.3 comparison between #para(int) and #para(expression)",charIndex:2101},{level:3,title:"3.4 Support for like and in Clauses (new in 5.0.0)",slug:"_3-4-support-for-like-and-in-clauses-new-in-5-0-0",normalizedTitle:"3.4 support for like and in clauses (new in 5.0.0)",charIndex:2266},{level:2,title:"4. #namespace Directive",slug:"_4-namespace-directive",normalizedTitle:"4. #namespace directive",charIndex:2496},{level:2,title:"5. template() vs getSqlPara()",slug:"_5-template-vs-getsqlpara",normalizedTitle:"5. template() vs getsqlpara()",charIndex:2871},{level:2,title:"6. templateByString()",slug:"_6-templatebystring",normalizedTitle:"6. templatebystring()",charIndex:3045},{level:2,title:"7. Pagination",slug:"_7-pagination",normalizedTitle:"7. pagination",charIndex:3340},{level:2,title:"8. Advanced Usage",slug:"_8-advanced-usage",normalizedTitle:"8. advanced usage",charIndex:3491},{level:2,title:"9. Multiple Data Sources",slug:"_9-multiple-data-sources",normalizedTitle:"9. multiple data sources",charIndex:3617},{level:2,title:"10. SQL Content Compression",slug:"_10-sql-content-compression",normalizedTitle:"10. sql content compression",charIndex:3794}],lastUpdated:"9/21/2023, 8:42:09 AM",lastUpdatedTimestamp:1695285729e3,headersStr:"1. Basic Configuration 2. #sql Directive 3. #para Directive 3.1 Using int Constants #para(int) 3.2 Using Non-int Constants #para(expr) 3.3 Comparison between #para(int) and #para(expression) 3.4 Support for like and in Clauses (new in 5.0.0) 4. #namespace Directive 5. template() vs getSqlPara() 6. templateByString() 7. Pagination 8. Advanced Usage 9. Multiple Data Sources 10. SQL Content Compression",content:'# 5.13 Enjoy SQL Template\n\nJFinal uses its built-in Enjoy Template Engine to provide a minimalistic SQL template management feature. The engine only has three directives: #sql, #para, and #namespace, making it extremely easy to learn.\n\nNote: Besides these three SQL management directives, all other features of the jfinal template engine can also be applied in SQL management. For more details on the jfinal template engine, refer to Chapter 6: http://www.jfinal.com/doc/6-1\n\n\n# 1. Basic Configuration\n\nTo enable SQL management in ActiveRecordPlugin, use the following example code:\n\nActiveRecordPlugin arp = new ActiveRecordPlugin(druidPlugin);\narp.addSqlTemplate("all.sql");\n_MappingKit.mapping(arp);\nme.add(arp);\n\n\n1\n2\n3\n4\n\n\nIn the example above, arp.addSqlTemplate("all.sql") reads the "all.sql" file from the class path or jar file. You can add multiple external SQL files by calling addSqlTemplate multiple times.\n\nYou can also set arp.setDevMode(true) if you want hot reload of SQL files during development. By default, it uses the dev mode configuration from configConstant.\n\n\n# 2. #sql Directive\n\nThe #sql directive is used to define SQL templates. Here\'s an example:\n\n#sql("findGirl")\n  select * from girl where age > ? and age < ? and weight < 50\n#end\n\n\n1\n2\n3\n\n\nTo get this SQL in Java code:\n\nString sql = Db.getSql("findGirl");\nDb.find(sql, 16, 23);\n\n\n1\n2\n\n\n\n# 3. #para Directive\n\n\n# 3.1 Using int Constants #para(int)\n\nThe #para directive generates question mark placeholders and corresponding parameter values in SQL templates. Two usages are supported; the first is passing an int constant:\n\n#sql("findGirl")\n  select * from girl where age > #para(0) and weight < #para(1)\n#end\n\n\n1\n2\n3\n\n\nIn Java code:\n\nDb.template("findGirl", 18, 50).find();\n\n\n1\n\n\n\n# 3.2 Using Non-int Constants #para(expr)\n\nThe second usage allows you to pass any expression other than an int constant:\n\n#sql("findGirl")\n  select * from girl where age > #para(age) and weight < #para(weight)\n#end\n\n\n1\n2\n3\n\n\nIn Java code:\n\nKv cond = Kv.of("age", 18).set("weight", 50);\nDb.template("findGirl", cond).find();\n\n\n1\n2\n\n\n\n# 3.3 Comparison between #para(int) and #para(expression)\n\nThe #para(int) method requires passing an int constant, while #para(expression) requires passing a Map.\n\n\n# 3.4 Support for like and in Clauses (new in 5.0.0)\n\nYou can now use #para with like and in by passing a second parameter:\n\nselect * from t title like #para(title, "like")\nselect * from t title id in #para(idList, "in")\n\n\n1\n2\n\n\n\n# 4. #namespace Directive\n\nThe #namespace directive specifies a namespace for SQL statements, allowing multiple modules to use the same SQL key for better modularity.\n\n#namespace("japan")\n  #sql("findGirl")\n    select * from girl where age > #para(0) and age < #para(1) and weight < 50\n  #end\n#end\n\n\n1\n2\n3\n4\n5\n\n\nIn Java:\n\nDb.template("japan.findGirl", 17, 21).find();\n\n\n1\n\n\n\n# 5. template() vs getSqlPara()\n\nTo reduce code and improve development experience, jfinal 4.0 introduced the template method, which is essentially the same as getSqlPara.\n\n\n# 6. templateByString()\n\nIf you want to keep SQL templates in a String variable instead of an external file, you can use the templateByString method:\n\nString sqlTemplate = "select * from girl where age > #para(0) and weight < #para(1)";\nDb.templateByString(sqlTemplate, 18, 50).find();\n\n\n1\n2\n\n\n\n# 7. Pagination\n\nFor pagination, you can use the paginate method with template or getSqlPara:\n\nDb.template("findGirl", 18, 50).paginate(1, 10);\n\n\n1\n\n\n\n# 8. Advanced Usage\n\nYou can use all the existing directives in the JFinal Template Engine to generate complex SQL queries.\n\n\n# 9. Multiple Data Sources\n\nIn a multi-datasource environment, you can use Db.use(...) to specify the datasource:\n\nDb.use(otherDataSource).template(sqlKey, para).find();\n\n\n1\n\n\n\n# 10. SQL Content Compression\n\njfinal 4.9 added a whitespace compression feature to the Engine, which can also be applied to SQL templates:\n\nEngine engine = arp.getEngine();\nengine.setCompressorOn(\' \');\n\n\n1\n2\n\n\nYou can also use the newline character \'\\n\' as a compression delimiter:\n\nengine.setCompressorOn(\'\\n\');\n\n\n1\n',normalizedContent:'# 5.13 enjoy sql template\n\njfinal uses its built-in enjoy template engine to provide a minimalistic sql template management feature. the engine only has three directives: #sql, #para, and #namespace, making it extremely easy to learn.\n\nnote: besides these three sql management directives, all other features of the jfinal template engine can also be applied in sql management. for more details on the jfinal template engine, refer to chapter 6: http://www.jfinal.com/doc/6-1\n\n\n# 1. basic configuration\n\nto enable sql management in activerecordplugin, use the following example code:\n\nactiverecordplugin arp = new activerecordplugin(druidplugin);\narp.addsqltemplate("all.sql");\n_mappingkit.mapping(arp);\nme.add(arp);\n\n\n1\n2\n3\n4\n\n\nin the example above, arp.addsqltemplate("all.sql") reads the "all.sql" file from the class path or jar file. you can add multiple external sql files by calling addsqltemplate multiple times.\n\nyou can also set arp.setdevmode(true) if you want hot reload of sql files during development. by default, it uses the dev mode configuration from configconstant.\n\n\n# 2. #sql directive\n\nthe #sql directive is used to define sql templates. here\'s an example:\n\n#sql("findgirl")\n  select * from girl where age > ? and age < ? and weight < 50\n#end\n\n\n1\n2\n3\n\n\nto get this sql in java code:\n\nstring sql = db.getsql("findgirl");\ndb.find(sql, 16, 23);\n\n\n1\n2\n\n\n\n# 3. #para directive\n\n\n# 3.1 using int constants #para(int)\n\nthe #para directive generates question mark placeholders and corresponding parameter values in sql templates. two usages are supported; the first is passing an int constant:\n\n#sql("findgirl")\n  select * from girl where age > #para(0) and weight < #para(1)\n#end\n\n\n1\n2\n3\n\n\nin java code:\n\ndb.template("findgirl", 18, 50).find();\n\n\n1\n\n\n\n# 3.2 using non-int constants #para(expr)\n\nthe second usage allows you to pass any expression other than an int constant:\n\n#sql("findgirl")\n  select * from girl where age > #para(age) and weight < #para(weight)\n#end\n\n\n1\n2\n3\n\n\nin java code:\n\nkv cond = kv.of("age", 18).set("weight", 50);\ndb.template("findgirl", cond).find();\n\n\n1\n2\n\n\n\n# 3.3 comparison between #para(int) and #para(expression)\n\nthe #para(int) method requires passing an int constant, while #para(expression) requires passing a map.\n\n\n# 3.4 support for like and in clauses (new in 5.0.0)\n\nyou can now use #para with like and in by passing a second parameter:\n\nselect * from t title like #para(title, "like")\nselect * from t title id in #para(idlist, "in")\n\n\n1\n2\n\n\n\n# 4. #namespace directive\n\nthe #namespace directive specifies a namespace for sql statements, allowing multiple modules to use the same sql key for better modularity.\n\n#namespace("japan")\n  #sql("findgirl")\n    select * from girl where age > #para(0) and age < #para(1) and weight < 50\n  #end\n#end\n\n\n1\n2\n3\n4\n5\n\n\nin java:\n\ndb.template("japan.findgirl", 17, 21).find();\n\n\n1\n\n\n\n# 5. template() vs getsqlpara()\n\nto reduce code and improve development experience, jfinal 4.0 introduced the template method, which is essentially the same as getsqlpara.\n\n\n# 6. templatebystring()\n\nif you want to keep sql templates in a string variable instead of an external file, you can use the templatebystring method:\n\nstring sqltemplate = "select * from girl where age > #para(0) and weight < #para(1)";\ndb.templatebystring(sqltemplate, 18, 50).find();\n\n\n1\n2\n\n\n\n# 7. pagination\n\nfor pagination, you can use the paginate method with template or getsqlpara:\n\ndb.template("findgirl", 18, 50).paginate(1, 10);\n\n\n1\n\n\n\n# 8. advanced usage\n\nyou can use all the existing directives in the jfinal template engine to generate complex sql queries.\n\n\n# 9. multiple data sources\n\nin a multi-datasource environment, you can use db.use(...) to specify the datasource:\n\ndb.use(otherdatasource).template(sqlkey, para).find();\n\n\n1\n\n\n\n# 10. sql content compression\n\njfinal 4.9 added a whitespace compression feature to the engine, which can also be applied to sql templates:\n\nengine engine = arp.getengine();\nengine.setcompressoron(\' \');\n\n\n1\n2\n\n\nyou can also use the newline character \'\\n\' as a compression delimiter:\n\nengine.setcompressoron(\'\\n\');\n\n\n1\n',charsets:{}},{title:"5.14 Multiple Data Source Support",frontmatter:{},regularPath:"/en/5%20ActiveRecord/5.14%20Multi-data%20source%20support.html",relativePath:"en/5 ActiveRecord/5.14 Multi-data source support.md",key:"v-2df25b1b",path:"/en/5%20ActiveRecord/5.14%20Multi-data%20source%20support.html",headers:[{level:2,title:"Configuring Multiple Data Sources",slug:"configuring-multiple-data-sources",normalizedTitle:"configuring multiple data sources",charIndex:364},{level:2,title:"Switching Data Sources for Models",slug:"switching-data-sources-for-models",normalizedTitle:"switching data sources for models",charIndex:1518},{level:2,title:"Switching Data Sources for Db + Record",slug:"switching-data-sources-for-db-record",normalizedTitle:"switching data sources for db + record",charIndex:2623}],lastUpdated:"9/21/2023, 8:42:09 AM",lastUpdatedTimestamp:1695285729e3,headersStr:"Configuring Multiple Data Sources Switching Data Sources for Models Switching Data Sources for Db + Record",content:'# 5.14 Multiple Data Source Support\n\nJFinal\'s ActiveRecordPlugin can simultaneously support multiple data sources, dialects, caches, and transaction levels. Each ActiveRecordPlugin can be configured independently, allowing JFinal to work with multiple data sources while also supporting independent configuration for dialects, caches, transaction levels, etc.\n\n\n# Configuring Multiple Data Sources\n\nWhen using multiple data sources, you need to specify a configName for each ActiveRecordPlugin. Here\'s a code example:\n\npublic void configPlugin(Plugins me) {\n  // MySQL data source\n  DruidPlugin dsMysql = new DruidPlugin(...);\n  me.add(dsMysql);\n\n  // MySQL ActiveRecordPlugin instance, specifying configName as "mysql"\n  ActiveRecordPlugin arpMysql = new ActiveRecordPlugin("mysql", dsMysql);\n  me.add(arpMysql);\n  arpMysql.addMapping("user", User.class);\n\n  // Oracle data source\n  DruidPlugin dsOracle = new DruidPlugin(...);\n  me.add(dsOracle);\n\n  // Oracle ActiveRecordPlugin instance, specifying configName as "oracle"\n  ActiveRecordPlugin arpOracle = new ActiveRecordPlugin("oracle", dsOracle);\n  me.add(arpOracle);\n  arpOracle.setDialect(new OracleDialect());\n  arpOracle.addMapping("blog", Blog.class);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\nIn the above code, two ActiveRecordPlugin instances (arpMysql and arpOracle) are created. Note that their configNames are specified as "mysql" and "oracle" respectively. Different Models and dialects are mapped and configured for each instance.\n\n\n# Switching Data Sources for Models\n\nDifferent Models will automatically find their respective ActiveRecordPlugin instances and related configurations for database operations. If you wish to switch a single Model to different data sources, it\'s also straightforward. This is particularly useful when different data sources have tables with the same structure, and you want to use the same Model for these tables. Here\'s an example:\n\npublic void multiDsModel() {\n  // Use the data source associated with arp.addMapping(...) by default\n  Blog blog = new Blog().dao().findById(123);\n\n  // Switch to another data source by calling the use method once\n  blog.use("mysql-bak").save();\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nIn the above code, blog.use("mysql-bak") switches the data source to "mysql-bak," and the subsequent save() method will save the data to that data source.\n\nNote: The use method is only necessary if the same Model needs to correspond to tables from multiple data sources. If a Model uniquely corresponds to a table in a single data source, the switch is automatic, and there\'s no need for the use method.\n\n\n# Switching Data Sources for Db + Record\n\nFor Db + Record usage, switching data sources requires using the Db.use(configName) method to get the database operation object. Then you can proceed with database operations. For example:\n\n// Querying users in the dsMysql data source\nList<Record> users = Db.use("mysql").find("select * from user");\n// Querying blogs in the dsOracle data source\nList<Record> blogs = Db.use("oracle").find("select * from blog");\n\n\n1\n2\n3\n4\n\n\nIn the above two lines of code, database operation objects are obtained for their respective data sources (with configNames "mysql" and "oracle"). After that, you can use the database operation APIs just as you would with a single data source. In other words, for Db + Record, multiple data sources only require an additional call to Db.use(configName), and subsequent API usage remains the same.\n\nNote: The first created ActiveRecordPlugin instance will become the primary data source and can have its configName omitted. The primary instance\'s configurations will be the default settings. You can also set the primary configuration by setting the configName to DbKit.MAIN_CONFIG_NAME.',normalizedContent:'# 5.14 multiple data source support\n\njfinal\'s activerecordplugin can simultaneously support multiple data sources, dialects, caches, and transaction levels. each activerecordplugin can be configured independently, allowing jfinal to work with multiple data sources while also supporting independent configuration for dialects, caches, transaction levels, etc.\n\n\n# configuring multiple data sources\n\nwhen using multiple data sources, you need to specify a configname for each activerecordplugin. here\'s a code example:\n\npublic void configplugin(plugins me) {\n  // mysql data source\n  druidplugin dsmysql = new druidplugin(...);\n  me.add(dsmysql);\n\n  // mysql activerecordplugin instance, specifying configname as "mysql"\n  activerecordplugin arpmysql = new activerecordplugin("mysql", dsmysql);\n  me.add(arpmysql);\n  arpmysql.addmapping("user", user.class);\n\n  // oracle data source\n  druidplugin dsoracle = new druidplugin(...);\n  me.add(dsoracle);\n\n  // oracle activerecordplugin instance, specifying configname as "oracle"\n  activerecordplugin arporacle = new activerecordplugin("oracle", dsoracle);\n  me.add(arporacle);\n  arporacle.setdialect(new oracledialect());\n  arporacle.addmapping("blog", blog.class);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\nin the above code, two activerecordplugin instances (arpmysql and arporacle) are created. note that their confignames are specified as "mysql" and "oracle" respectively. different models and dialects are mapped and configured for each instance.\n\n\n# switching data sources for models\n\ndifferent models will automatically find their respective activerecordplugin instances and related configurations for database operations. if you wish to switch a single model to different data sources, it\'s also straightforward. this is particularly useful when different data sources have tables with the same structure, and you want to use the same model for these tables. here\'s an example:\n\npublic void multidsmodel() {\n  // use the data source associated with arp.addmapping(...) by default\n  blog blog = new blog().dao().findbyid(123);\n\n  // switch to another data source by calling the use method once\n  blog.use("mysql-bak").save();\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nin the above code, blog.use("mysql-bak") switches the data source to "mysql-bak," and the subsequent save() method will save the data to that data source.\n\nnote: the use method is only necessary if the same model needs to correspond to tables from multiple data sources. if a model uniquely corresponds to a table in a single data source, the switch is automatic, and there\'s no need for the use method.\n\n\n# switching data sources for db + record\n\nfor db + record usage, switching data sources requires using the db.use(configname) method to get the database operation object. then you can proceed with database operations. for example:\n\n// querying users in the dsmysql data source\nlist<record> users = db.use("mysql").find("select * from user");\n// querying blogs in the dsoracle data source\nlist<record> blogs = db.use("oracle").find("select * from blog");\n\n\n1\n2\n3\n4\n\n\nin the above two lines of code, database operation objects are obtained for their respective data sources (with confignames "mysql" and "oracle"). after that, you can use the database operation apis just as you would with a single data source. in other words, for db + record, multiple data sources only require an additional call to db.use(configname), and subsequent api usage remains the same.\n\nnote: the first created activerecordplugin instance will become the primary data source and can have its configname omitted. the primary instance\'s configurations will be the default settings. you can also set the primary configuration by setting the configname to dbkit.main_config_name.',charsets:{}},{title:"5.15 Standalone Use of ActiveRecord",frontmatter:{},regularPath:"/en/5%20ActiveRecord/5.15%20Use%20ActiveRecord%20independently.html",relativePath:"en/5 ActiveRecord/5.15 Use ActiveRecord independently.md",key:"v-5af4ed21",path:"/en/5%20ActiveRecord/5.15%20Use%20ActiveRecord%20independently.html",lastUpdated:"9/21/2023, 8:42:09 AM",lastUpdatedTimestamp:1695285729e3,headersStr:null,content:'# 5.15 Standalone Use of ActiveRecord\n\nThe ActiveRecordPlugin can operate independently of the Java web environment, and it can run in any regular Java program. It\'s straightforward to use: the only difference compared to web projects is that you need to manually invoke its start() method to use it immediately. Below is a code example:\n\npublic class ActiveRecordTest {\n  public static void main(String[] args) {\n    DruidPlugin dp = new DruidPlugin("localhost", "userName", "password");\n    ActiveRecordPlugin arp = new ActiveRecordPlugin(dp);\n    arp.addMapping("blog", Blog.class);\n\n    // The only difference from the JFinal web environment is that you need to manually call the start() method for the relevant plugins\n    dp.start();\n    arp.start();\n\n    // After the above simple lines of code, you can start using it immediately\n    new Blog().set("title", "title").set("content", "cxt text").save();\n    Blog.dao.findById(123);\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\nNote: You must also manually start the other plugins that ActiveRecordPlugin depends on, as shown with dp.start() in the example.\n\nThe ActiveRecord module of JFinal has been independently released to the Maven repository. If you want to use only the JFinal ActiveRecord module without including the entire JFinal, you can use the following Maven dependency:\n\n<dependency>\n    <groupId>com.jfinal</groupId>\n    <artifactId>activerecord</artifactId>\n    <version>5.1.2</version>\n</dependency>\n\n\n1\n2\n3\n4\n5\n\n\nThe usage of this standalone module is exactly the same as when used within JFinal.\n\nSpecial Note: The ActiveRecord module includes the Enjoy Template module. If you want to use the Enjoy Template engine, you can use it directly without adding the Maven dependency for the Enjoy Template module, as that would cause conflicts.\n\nIf you want to integrate it with Spring Boot, you can refer to this article: Integrating JFinal ActiveRecord with Spring Boot.',normalizedContent:'# 5.15 standalone use of activerecord\n\nthe activerecordplugin can operate independently of the java web environment, and it can run in any regular java program. it\'s straightforward to use: the only difference compared to web projects is that you need to manually invoke its start() method to use it immediately. below is a code example:\n\npublic class activerecordtest {\n  public static void main(string[] args) {\n    druidplugin dp = new druidplugin("localhost", "username", "password");\n    activerecordplugin arp = new activerecordplugin(dp);\n    arp.addmapping("blog", blog.class);\n\n    // the only difference from the jfinal web environment is that you need to manually call the start() method for the relevant plugins\n    dp.start();\n    arp.start();\n\n    // after the above simple lines of code, you can start using it immediately\n    new blog().set("title", "title").set("content", "cxt text").save();\n    blog.dao.findbyid(123);\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\nnote: you must also manually start the other plugins that activerecordplugin depends on, as shown with dp.start() in the example.\n\nthe activerecord module of jfinal has been independently released to the maven repository. if you want to use only the jfinal activerecord module without including the entire jfinal, you can use the following maven dependency:\n\n<dependency>\n    <groupid>com.jfinal</groupid>\n    <artifactid>activerecord</artifactid>\n    <version>5.1.2</version>\n</dependency>\n\n\n1\n2\n3\n4\n5\n\n\nthe usage of this standalone module is exactly the same as when used within jfinal.\n\nspecial note: the activerecord module includes the enjoy template module. if you want to use the enjoy template engine, you can use it directly without adding the maven dependency for the enjoy template module, as that would cause conflicts.\n\nif you want to integrate it with spring boot, you can refer to this article: integrating jfinal activerecord with spring boot.',charsets:{}},{title:"5.16 Calling Stored Procedures",frontmatter:{},regularPath:"/en/5%20ActiveRecord/5.16%20Call%20stored%20procedure.html",relativePath:"en/5 ActiveRecord/5.16 Call stored procedure.md",key:"v-dba12182",path:"/en/5%20ActiveRecord/5.16%20Call%20stored%20procedure.html",lastUpdated:"9/21/2023, 8:42:09 AM",lastUpdatedTimestamp:1695285729e3,headersStr:null,content:'# 5.16 Calling Stored Procedures\n\nThe Db utility class makes it easy to call stored procedures. Below is a code example:\n\nDb.execute((connection) -> {\n    CallableStatement cs = connection.prepareCall(...);\n    cs.setObject(1, ...);\n    cs.setObject(2, ...);\n    cs.execute();\n    cs.close();\n    return cs.getObject(1);\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nAs shown above, you can easily call a stored procedure using Db.execute(...). The connection is an object of type Connection. After you are done using it, you don\'t need to call close() on it, as JFinal will automatically close it for you at the higher level.\n\nMoreover, under MySQL, you can use an even simpler way to call stored procedures:\n\n// Call stored procedure to query the salary table\nRecord first = Db.findFirst("CALL FindSalary (1,\\"201901\\")");\n\n// Call stored procedure to insert into the salary table\nint update2 = Db.update("CALL InsertSalary (3, 123)");\n\n// Call stored procedure to update the salary table\nint update = Db.update("CALL UpdateSalary (3, 99999)");\n\n// Call stored procedure to delete from the salary table\nint delete = Db.delete("CALL DeleteSalary(3)");\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\nThese examples demonstrate how to execute various database operations—select, insert, update, and delete—by calling stored procedures in MySQL. The code is quite straightforward and takes advantage of JFinal\'s Db utility class for simplifying the operations.',normalizedContent:'# 5.16 calling stored procedures\n\nthe db utility class makes it easy to call stored procedures. below is a code example:\n\ndb.execute((connection) -> {\n    callablestatement cs = connection.preparecall(...);\n    cs.setobject(1, ...);\n    cs.setobject(2, ...);\n    cs.execute();\n    cs.close();\n    return cs.getobject(1);\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nas shown above, you can easily call a stored procedure using db.execute(...). the connection is an object of type connection. after you are done using it, you don\'t need to call close() on it, as jfinal will automatically close it for you at the higher level.\n\nmoreover, under mysql, you can use an even simpler way to call stored procedures:\n\n// call stored procedure to query the salary table\nrecord first = db.findfirst("call findsalary (1,\\"201901\\")");\n\n// call stored procedure to insert into the salary table\nint update2 = db.update("call insertsalary (3, 123)");\n\n// call stored procedure to update the salary table\nint update = db.update("call updatesalary (3, 99999)");\n\n// call stored procedure to delete from the salary table\nint delete = db.delete("call deletesalary(3)");\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\nthese examples demonstrate how to execute various database operations—select, insert, update, and delete—by calling stored procedures in mysql. the code is quite straightforward and takes advantage of jfinal\'s db utility class for simplifying the operations.',charsets:{}},{title:"5.3 Model",frontmatter:{},regularPath:"/en/5%20ActiveRecord/5.3%20Model.html",relativePath:"en/5 ActiveRecord/5.3 Model.md",key:"v-7ed89ec7",path:"/en/5%20ActiveRecord/5.3%20Model.html",headers:[{level:3,title:"1. Basic Usage",slug:"_1-basic-usage",normalizedTitle:"1. basic usage",charIndex:16},{level:3,title:"2. Common Mistakes",slug:"_2-common-mistakes",normalizedTitle:"2. common mistakes",charIndex:2439}],lastUpdated:"9/17/2023, 6:16:57 AM",lastUpdatedTimestamp:1694931417e3,headersStr:"1. Basic Usage 2. Common Mistakes",content:'# 5.3 Model\n\n\n# 1. Basic Usage\n\nModel is one of the most crucial components in ActiveRecord, acting as the Model in the MVC pattern. Here\'s a sample code to define a Model:\n\npublic class User extends Model<User> {\n    public static final User dao = new User().dao();\n}\n\n\n1\n2\n3\n\n\nBy extending the Model in the User class above, you immediately obtain numerous convenient methods to operate on the database. The static dao object declared in User is designed to facilitate query operations. However, this object is not mandatory. With ActiveRecord\'s Model, there\'s no need to define properties, getter/setter methods, XML configurations, or Annotation configurations, substantially reducing the amount of code.\n\nHere are some common usages of Model:\n\n// Create a User object with \'name\' as James and \'age\' as 25, and add it to the database\nnew User().set("name", "James").set("age", 25).save();\n \n// Delete the User with an id value of 25\nUser.dao.deleteById(25);\n \n// Find the User with an id value of 25, change its \'name\' to James and update it in the database\nUser.dao.findById(25).set("name", "James").update();\n \n// Query the User with an id value of 25, and only retrieve the values of the \'name\' and \'age\' columns\nUser user = User.dao.findByIdLoadColumns(25, "name, age");\n \n// Get the \'name\' attribute of the user\nString userName = user.getStr("name");\n \n// Get the \'age\' attribute of the user\nInteger userAge = user.getInt("age");\n \n// Query all users who are older than 18 years\nList<User> users = User.dao.find("select * from user where age>18");\n \n// Paginate and query users older than 18, with the current page number as 1 and 10 users per page\nPage<User> userPage = User.dao.paginate(1, 10, "select *", "from user where age > ?", 18);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\nThe usage above showcases the dao object declared within the model for demonstration purposes. In practical applications, it\'s recommended to place the dao object inside a Service and set it to private. This ensures that SQL and database operations are confined within the service layer. You can refer to the usage of dao in the Service layer by downloading the jfinal_demo_for_maven from the official website.\n\nSpecial Note: The public static final User dao object defined in User is globally shared and can only be used for database queries, not as a data carrier. For data-bearing, you need to use new User().set(...).\n\n\n# 2. Common Mistakes\n\nMany users often encounter NullPointerException exceptions when using methods like model.find(...). Typically, this is because the model hasn\'t been mapped using ActionRecordPlugin.addMapping(...). It\'s advisable to use a generator to automate the generation of mappings, eliminating the need for manual addition of such code. You can access the generator by downloading the jfinal demo from the official website, which provides it.',normalizedContent:'# 5.3 model\n\n\n# 1. basic usage\n\nmodel is one of the most crucial components in activerecord, acting as the model in the mvc pattern. here\'s a sample code to define a model:\n\npublic class user extends model<user> {\n    public static final user dao = new user().dao();\n}\n\n\n1\n2\n3\n\n\nby extending the model in the user class above, you immediately obtain numerous convenient methods to operate on the database. the static dao object declared in user is designed to facilitate query operations. however, this object is not mandatory. with activerecord\'s model, there\'s no need to define properties, getter/setter methods, xml configurations, or annotation configurations, substantially reducing the amount of code.\n\nhere are some common usages of model:\n\n// create a user object with \'name\' as james and \'age\' as 25, and add it to the database\nnew user().set("name", "james").set("age", 25).save();\n \n// delete the user with an id value of 25\nuser.dao.deletebyid(25);\n \n// find the user with an id value of 25, change its \'name\' to james and update it in the database\nuser.dao.findbyid(25).set("name", "james").update();\n \n// query the user with an id value of 25, and only retrieve the values of the \'name\' and \'age\' columns\nuser user = user.dao.findbyidloadcolumns(25, "name, age");\n \n// get the \'name\' attribute of the user\nstring username = user.getstr("name");\n \n// get the \'age\' attribute of the user\ninteger userage = user.getint("age");\n \n// query all users who are older than 18 years\nlist<user> users = user.dao.find("select * from user where age>18");\n \n// paginate and query users older than 18, with the current page number as 1 and 10 users per page\npage<user> userpage = user.dao.paginate(1, 10, "select *", "from user where age > ?", 18);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\nthe usage above showcases the dao object declared within the model for demonstration purposes. in practical applications, it\'s recommended to place the dao object inside a service and set it to private. this ensures that sql and database operations are confined within the service layer. you can refer to the usage of dao in the service layer by downloading the jfinal_demo_for_maven from the official website.\n\nspecial note: the public static final user dao object defined in user is globally shared and can only be used for database queries, not as a data carrier. for data-bearing, you need to use new user().set(...).\n\n\n# 2. common mistakes\n\nmany users often encounter nullpointerexception exceptions when using methods like model.find(...). typically, this is because the model hasn\'t been mapped using actionrecordplugin.addmapping(...). it\'s advisable to use a generator to automate the generation of mappings, eliminating the need for manual addition of such code. you can access the generator by downloading the jfinal demo from the official website, which provides it.',charsets:{}},{title:"5.2 ActiveRecordPlugin",frontmatter:{},regularPath:"/en/5%20ActiveRecord/5.2%20ActiveRecordPlugin.html",relativePath:"en/5 ActiveRecord/5.2 ActiveRecordPlugin.md",key:"v-082e4a43",path:"/en/5%20ActiveRecord/5.2%20ActiveRecordPlugin.html",lastUpdated:"9/17/2023, 6:16:57 AM",lastUpdatedTimestamp:1694931417e3,headersStr:null,content:'# 5.2 ActiveRecordPlugin\n\nActiveRecord exists as a Plugin within JFinal, so when using it, you need to configure the ActiveRecordPlugin in JFinalConfig.\n\nHere\'s a sample code for the Plugin configuration:\n\npublic class DemoConfig extends JFinalConfig {\n  public void configPlugin(Plugins me) {\n  DruidPlugin dp = new DruidPlugin("jdbc:mysql://localhost/db_name", "userName", "password");\n    me.add(dp);\n    ActiveRecordPlugin arp = new ActiveRecordPlugin(dp);\n    me.add(arp);\n    arp.addMapping("user", User.class);\n    arp.addMapping("article", "article_id", Article.class);\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nThe above code configures two plugins: DruidPlugin and ActiveRecordPlugin. The former is the druid data source plugin, and the latter supports ActiveRecord. In ActiveRecord, the method addMapping(String tableName, Class<? extends Model> modelClass) is defined, which establishes a mapping relationship between the database table name and the Model.\n\nFurthermore, in the code above, arp.addMapping("user", User.class) assumes the default primary key name for the table is "id". If the primary key name is "user_id", it needs to be specified manually, as in: arp.addMapping("user", "user_id", User.class).\n\nImportant: The above arp.addMapping(...) configuration can be automated with the jfinal generator, eliminating the need for manual addition of such configurations. For detailed usage, refer to the documentation: https://www.jfinal.com/doc/5-4.',normalizedContent:'# 5.2 activerecordplugin\n\nactiverecord exists as a plugin within jfinal, so when using it, you need to configure the activerecordplugin in jfinalconfig.\n\nhere\'s a sample code for the plugin configuration:\n\npublic class democonfig extends jfinalconfig {\n  public void configplugin(plugins me) {\n  druidplugin dp = new druidplugin("jdbc:mysql://localhost/db_name", "username", "password");\n    me.add(dp);\n    activerecordplugin arp = new activerecordplugin(dp);\n    me.add(arp);\n    arp.addmapping("user", user.class);\n    arp.addmapping("article", "article_id", article.class);\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nthe above code configures two plugins: druidplugin and activerecordplugin. the former is the druid data source plugin, and the latter supports activerecord. in activerecord, the method addmapping(string tablename, class<? extends model> modelclass) is defined, which establishes a mapping relationship between the database table name and the model.\n\nfurthermore, in the code above, arp.addmapping("user", user.class) assumes the default primary key name for the table is "id". if the primary key name is "user_id", it needs to be specified manually, as in: arp.addmapping("user", "user_id", user.class).\n\nimportant: the above arp.addmapping(...) configuration can be automated with the jfinal generator, eliminating the need for manual addition of such configurations. for detailed usage, refer to the documentation: https://www.jfinal.com/doc/5-4.',charsets:{}},{title:"5.4 Generator and JavaBean",frontmatter:{},regularPath:"/en/5%20ActiveRecord/5.4%20Generator%20&%20JavaBean.html",relativePath:"en/5 ActiveRecord/5.4 Generator & JavaBean.md",key:"v-d7c0a0ba",path:"/en/5%20ActiveRecord/5.4%20Generator%20&%20JavaBean.html",headers:[{level:3,title:"1. Using the Generator",slug:"_1-using-the-generator",normalizedTitle:"1. using the generator",charIndex:33},{level:3,title:"2. Related Generated Files",slug:"_2-related-generated-files",normalizedTitle:"2. related generated files",charIndex:2566},{level:3,title:"3. Filtering and Excluding Tables",slug:"_3-filtering-and-excluding-tables",normalizedTitle:"3. filtering and excluding tables",charIndex:3263},{level:3,title:"4. Main Advantages of Using the Generator",slug:"_4-main-advantages-of-using-the-generator",normalizedTitle:"4. main advantages of using the generator",charIndex:3634},{level:3,title:"5. Considerations after Merging Model with Bean",slug:"_5-considerations-after-merging-model-with-bean",normalizedTitle:"5. considerations after merging model with bean",charIndex:4337},{level:3,title:"6. Common Issues",slug:"_6-common-issues",normalizedTitle:"6. common issues",charIndex:4979}],lastUpdated:"9/17/2023, 6:16:57 AM",lastUpdatedTimestamp:1694931417e3,headersStr:"1. Using the Generator 2. Related Generated Files 3. Filtering and Excluding Tables 4. Main Advantages of Using the Generator 5. Considerations after Merging Model with Bean 6. Common Issues",content:'# 5.4 Generator and JavaBean\n\n\n# 1. Using the Generator\n\nThe ActiveRecord module of JFinal provides a Generator utility class within the com.jfinal.plugin.activerecord.generator package. This can automatically generate Model, BaseModel, MappingKit, and DataDictionary files.\n\nAfter generation, the Model will merge with the JavaBean, immediately obtaining getter and setter methods, adhering to traditional JavaBean standards. This provides all the advantages of traditional JavaBeans, removing the need to remember column names during development.\n\nHere\'s an example of how to use the generator:\n\n// The package used by the model (MappingKit uses the default package)\nString modelPackageName = "com.xxx.common.model";\n\t\t\n// The package used by the base model\nString baseModelPackageName = modelPackageName + ".base";\n\t\t\n// Path to save the base model file\nString baseModelOutputDir = System.getProperty("user.dir") + "/src/main/java/" + baseModelPackageName.replace(\'.\', \'/\');\n\t\t\n// Path to save the model file (MappingKit and DataDictionary files use the default save path)\nString modelOutputDir = baseModelOutputDir + "/..";\n\t\t\nSystem.out.println("Output path: "+ baseModelOutputDir);\n \n// Create the generator\nGenerator gen = new Generator(getDataSource(), baseModelPackageName, baseModelOutputDir, modelPackageName, modelOutputDir);\n \n// Set the database dialect\ngen.setDialect(new MysqlDialect());\n \n// Generate field comments in the getter and setter methods\ngen.setGenerateRemarks(true);\n \n// Start generating the code\ngen.generate();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\nThe parameters baseModelPackageName, baseModelOutputDir, modelPackageName, and modelOutputDir represent the package name of the base model, the output path of the base model, the package name of the model, and the output path of the model, respectively. Typically, only the modelPackageName needs to be configured, as the other parameters can be generated based on it.\n\nIt\'s recommended to download the jfinal-demo project from the official JFinal website, which provides a ready-to-use generator: http://www.jfinal.com\n\nThe generator has various setter configuration methods that allow for easy control over the generated results. For instance:\n\n// Specify the template file for generating the base model\ngenerator.setBaseModelTemplate(...);\n \n// Specify the template file for generating the model\ngenerator.setModelTemplate(...);\n \n// Specify the template file for generating the MappingKit\ngenerator.setMappingKitTemplate(...)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 2. Related Generated Files\n\n * BaseModel: A base class meant to be extended by the final Model. All getter and setter methods are generated in this file. BaseModel is automatically generated and doesn\'t require manual maintenance. If the database structure changes, simply regenerate it.\n\n * MappingKit: Generates the mapping between tables and Models. It also generates configurations for primary and composite keys, eliminating the need for any boilerplate mapping code in configPlugin(Plugins me).\n\n * DataDictionary: This generates a data dictionary that provides details about all the fields in a database table, such as field name, type, length, remarks, and whether it\'s a primary key.\n\n\n# 3. Filtering and Excluding Tables\n\nFrom JFinal 5.0.0, the Generator provides addBlacklist(blacklist) and addWhitelist(whitelist) methods to add tables to a whitelist or blacklist. Tables in the blacklist will be excluded from generation, while only those in the whitelist will be generated.\n\nFor versions prior to JFinal 5.0.0, a custom filtering mechanism was used.\n\n\n# 4. Main Advantages of Using the Generator\n\n * Utilize a vast array of third-party tools designed for Beans, like Jackson and Freemarker.\n\n * Rapidly adapt to database table changes, streamline refactoring, improve development efficiency, and enhance code quality.\n\n * No need to remember database column names, thanks to IDE code hints, reducing cognitive overhead and preventing typos.\n\n * BaseModel design ensures the final Model remains clean and is quickly refactored when table structures change.\n\n * Automatic table-to-Model mapping.\n\n * Automatic primary and composite key name identification and mapping.\n\n * The MappingKit contains all mapping code, keeping JFinalConfig clean and concise.\n\n\n# 5. Considerations after Merging Model with Bean\n\n * JSP templates will rely on the Bean\'s getter method for output.\n\n * In the Controller, getModel() requires form field names to correspond to database column names. Meanwhile, getBean() relies on setter methods.\n\n * Many third-party tools like Jackson and Fastjson rely on the Bean\'s getter methods. Hence, only after merging can one use Jackson or Fastjson.\n\n * When converting a Model to JSON data using JFinalJson, the JSON\'s keyName is the original database column name. In contrast, tools like Jackson or Fastjson will convert column names to camelCase based on the getter methods.\n\n\n# 6. Common Issues\n\nWhen using the generator with the SQL Server database, system tables might be fetched. These tables should be filtered out. The specific method can be found at: http://www.jfinal.com/share/211.',normalizedContent:'# 5.4 generator and javabean\n\n\n# 1. using the generator\n\nthe activerecord module of jfinal provides a generator utility class within the com.jfinal.plugin.activerecord.generator package. this can automatically generate model, basemodel, mappingkit, and datadictionary files.\n\nafter generation, the model will merge with the javabean, immediately obtaining getter and setter methods, adhering to traditional javabean standards. this provides all the advantages of traditional javabeans, removing the need to remember column names during development.\n\nhere\'s an example of how to use the generator:\n\n// the package used by the model (mappingkit uses the default package)\nstring modelpackagename = "com.xxx.common.model";\n\t\t\n// the package used by the base model\nstring basemodelpackagename = modelpackagename + ".base";\n\t\t\n// path to save the base model file\nstring basemodeloutputdir = system.getproperty("user.dir") + "/src/main/java/" + basemodelpackagename.replace(\'.\', \'/\');\n\t\t\n// path to save the model file (mappingkit and datadictionary files use the default save path)\nstring modeloutputdir = basemodeloutputdir + "/..";\n\t\t\nsystem.out.println("output path: "+ basemodeloutputdir);\n \n// create the generator\ngenerator gen = new generator(getdatasource(), basemodelpackagename, basemodeloutputdir, modelpackagename, modeloutputdir);\n \n// set the database dialect\ngen.setdialect(new mysqldialect());\n \n// generate field comments in the getter and setter methods\ngen.setgenerateremarks(true);\n \n// start generating the code\ngen.generate();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\nthe parameters basemodelpackagename, basemodeloutputdir, modelpackagename, and modeloutputdir represent the package name of the base model, the output path of the base model, the package name of the model, and the output path of the model, respectively. typically, only the modelpackagename needs to be configured, as the other parameters can be generated based on it.\n\nit\'s recommended to download the jfinal-demo project from the official jfinal website, which provides a ready-to-use generator: http://www.jfinal.com\n\nthe generator has various setter configuration methods that allow for easy control over the generated results. for instance:\n\n// specify the template file for generating the base model\ngenerator.setbasemodeltemplate(...);\n \n// specify the template file for generating the model\ngenerator.setmodeltemplate(...);\n \n// specify the template file for generating the mappingkit\ngenerator.setmappingkittemplate(...)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 2. related generated files\n\n * basemodel: a base class meant to be extended by the final model. all getter and setter methods are generated in this file. basemodel is automatically generated and doesn\'t require manual maintenance. if the database structure changes, simply regenerate it.\n\n * mappingkit: generates the mapping between tables and models. it also generates configurations for primary and composite keys, eliminating the need for any boilerplate mapping code in configplugin(plugins me).\n\n * datadictionary: this generates a data dictionary that provides details about all the fields in a database table, such as field name, type, length, remarks, and whether it\'s a primary key.\n\n\n# 3. filtering and excluding tables\n\nfrom jfinal 5.0.0, the generator provides addblacklist(blacklist) and addwhitelist(whitelist) methods to add tables to a whitelist or blacklist. tables in the blacklist will be excluded from generation, while only those in the whitelist will be generated.\n\nfor versions prior to jfinal 5.0.0, a custom filtering mechanism was used.\n\n\n# 4. main advantages of using the generator\n\n * utilize a vast array of third-party tools designed for beans, like jackson and freemarker.\n\n * rapidly adapt to database table changes, streamline refactoring, improve development efficiency, and enhance code quality.\n\n * no need to remember database column names, thanks to ide code hints, reducing cognitive overhead and preventing typos.\n\n * basemodel design ensures the final model remains clean and is quickly refactored when table structures change.\n\n * automatic table-to-model mapping.\n\n * automatic primary and composite key name identification and mapping.\n\n * the mappingkit contains all mapping code, keeping jfinalconfig clean and concise.\n\n\n# 5. considerations after merging model with bean\n\n * jsp templates will rely on the bean\'s getter method for output.\n\n * in the controller, getmodel() requires form field names to correspond to database column names. meanwhile, getbean() relies on setter methods.\n\n * many third-party tools like jackson and fastjson rely on the bean\'s getter methods. hence, only after merging can one use jackson or fastjson.\n\n * when converting a model to json data using jfinaljson, the json\'s keyname is the original database column name. in contrast, tools like jackson or fastjson will convert column names to camelcase based on the getter methods.\n\n\n# 6. common issues\n\nwhen using the generator with the sql server database, system tables might be fetched. these tables should be filtered out. the specific method can be found at: http://www.jfinal.com/share/211.',charsets:{}},{title:"5.5 The Unique Db Record Mode",frontmatter:{},regularPath:"/en/5%20ActiveRecord/5.5%20Original%20Db%20Record%20mode.html",relativePath:"en/5 ActiveRecord/5.5 Original Db Record mode.md",key:"v-a2e2ad78",path:"/en/5%20ActiveRecord/5.5%20Original%20Db%20Record%20mode.html",headers:[{level:3,title:"1. Common Usage",slug:"_1-common-usage",normalizedTitle:"1. common usage",charIndex:36},{level:3,title:"2. Db.query(...)",slug:"_2-db-query",normalizedTitle:"2. db.query(...)",charIndex:1903},{level:3,title:"3. Db.queryXxx(...)",slug:"_3-db-queryxxx",normalizedTitle:"3. db.queryxxx(...)",charIndex:2331},{level:3,title:"4. The Difference Between Db.find(...) Series and Db.query(...)/Db.queryXxx(...) Series",slug:"_4-the-difference-between-db-find-series-and-db-query-db-queryxxx-series",normalizedTitle:"4. the difference between db.find(...) series and db.query(...)/db.queryxxx(...) series",charIndex:2738},{level:3,title:"5. Extending Db Functionality",slug:"_5-extending-db-functionality",normalizedTitle:"5. extending db functionality",charIndex:2952}],lastUpdated:"9/17/2023, 6:16:57 AM",lastUpdatedTimestamp:1694931417e3,headersStr:"1. Common Usage 2. Db.query(...) 3. Db.queryXxx(...) 4. The Difference Between Db.find(...) Series and Db.query(...)/Db.queryXxx(...) Series 5. Extending Db Functionality",content:'# 5.5 The Unique Db Record Mode\n\n\n# 1. Common Usage\n\nThe Db class, along with its accompanying Record class, offers a richer set of database operation functionalities outside the Model class. When using the Db and Record classes, there\'s no need for mapping to the database table, as Record acts as a generic Model. Here\'s some common usage of the Db + Record mode:\n\n// Create a record object with name attribute as James and age attribute as 25 and add it to the database\nRecord user = new Record().set("name", "James").set("age", 25);\nDb.save("user", user);\n\n// Delete the record with id value 25 from the user table\nDb.deleteById("user", 25);\n\n// Find the record with id value 25, change its name attribute to James, and update it in the database\nuser = Db.findById("user", 25).set("name", "James");\nDb.update("user", user);\n\n// Get the name attribute of the user\nString userName = user.getStr("name");\n// Get the age attribute of the user\nInteger userAge = user.getInt("age");\n\n// Find all users older than 18\nList<Record> users = Db.find("select * from user where age > 18");\n\n// Paginate and find users older than 18, current page number is 1, and each page has 10 users\nPage<Record> userPage = Db.paginate(1, 10, "select *", "from user where age > ?", 18);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\nHere\'s an example of transaction processing:\n\nboolean succeed = Db.tx(new IAtom() {\n    public boolean run() throws SQLException {\n        int count = Db.update("update account set cash = cash - ? where id = ?", 100, 123);\n        int count2 = Db.update("update account set cash = cash + ? where id = ?", 100, 456);\n        return count == 1 && count2 == 1;\n    }\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nBoth database updates above are executed in a single transaction. If any exception occurs during execution or if the run() method returns false, the transaction will automatically roll back.\n\n\n# 2. Db.query(...)\n\nWhen there\'s only one field after the select in the SQL, an appropriate generic can be used to receive data:\n\nList<String> titleList = Db.query("select title from blog");\n\n\n1\n\n\nFor SQL that has more than one field after select, you must use List<Object[]> to receive data:\n\nList<Object[]> list = Db.query("select id, title, content from blog");\nList<Object[]> list = Db.query("select * from blog");\n\n\n1\n2\n\n\n\n# 3. Db.queryXxx(...)\n\nThe Db.queryXxx series of methods, like queryInt, queryLong, and queryStr, are very convenient for SQL with aggregate functions:\n\nint total = Db.queryInt("select count(*) from account");\n\n\n1\n\n\nBesides aggregate functions, you can also use it to query a specific field value of a record:\n\nString nickName = Db.queryStr("select nickName from account where id = ? limit 1", 123);\n\n\n1\n\n\n\n# 4. The Difference Between Db.find(...) Series and Db.query(...)/Db.queryXxx(...) Series\n\nThe former always wraps the return value into a Record object, while the latter returns the data as is without wrapping.\n\n\n# 5. Extending Db Functionality\n\nAll functionalities of the Db utility class rely on the underlying DbPro. DbPro can be customized via inheritance to add desired functionalities:\n\npublic class MyDbPro extends DbPro {\n    public MyDbPro(String configName) {\n        super(configName);\n    }\n\n    public List<Record> find(String sql, Object... paras) {\n        System.out.println("Sql: " + sql);\n        System.out.println("Paras: " + Arrays.toString(paras));\n        return super.find(sql, paras);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\nAfter defining your custom DbPro class, you can configure it to override the behavior of the default DbPro:\n\nActiveRecordPlugin arp = new ActiveRecordPlugin(...);\narp.setDbProFactory(configName -> new MyDbPro(configName));\n\n\n1\n2\n\n\nThrough this method, you can replace, enhance, or change the behavior of all public and protected methods in DbPro. It\'s a very flexible and convenient approach.',normalizedContent:'# 5.5 the unique db record mode\n\n\n# 1. common usage\n\nthe db class, along with its accompanying record class, offers a richer set of database operation functionalities outside the model class. when using the db and record classes, there\'s no need for mapping to the database table, as record acts as a generic model. here\'s some common usage of the db + record mode:\n\n// create a record object with name attribute as james and age attribute as 25 and add it to the database\nrecord user = new record().set("name", "james").set("age", 25);\ndb.save("user", user);\n\n// delete the record with id value 25 from the user table\ndb.deletebyid("user", 25);\n\n// find the record with id value 25, change its name attribute to james, and update it in the database\nuser = db.findbyid("user", 25).set("name", "james");\ndb.update("user", user);\n\n// get the name attribute of the user\nstring username = user.getstr("name");\n// get the age attribute of the user\ninteger userage = user.getint("age");\n\n// find all users older than 18\nlist<record> users = db.find("select * from user where age > 18");\n\n// paginate and find users older than 18, current page number is 1, and each page has 10 users\npage<record> userpage = db.paginate(1, 10, "select *", "from user where age > ?", 18);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\nhere\'s an example of transaction processing:\n\nboolean succeed = db.tx(new iatom() {\n    public boolean run() throws sqlexception {\n        int count = db.update("update account set cash = cash - ? where id = ?", 100, 123);\n        int count2 = db.update("update account set cash = cash + ? where id = ?", 100, 456);\n        return count == 1 && count2 == 1;\n    }\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nboth database updates above are executed in a single transaction. if any exception occurs during execution or if the run() method returns false, the transaction will automatically roll back.\n\n\n# 2. db.query(...)\n\nwhen there\'s only one field after the select in the sql, an appropriate generic can be used to receive data:\n\nlist<string> titlelist = db.query("select title from blog");\n\n\n1\n\n\nfor sql that has more than one field after select, you must use list<object[]> to receive data:\n\nlist<object[]> list = db.query("select id, title, content from blog");\nlist<object[]> list = db.query("select * from blog");\n\n\n1\n2\n\n\n\n# 3. db.queryxxx(...)\n\nthe db.queryxxx series of methods, like queryint, querylong, and querystr, are very convenient for sql with aggregate functions:\n\nint total = db.queryint("select count(*) from account");\n\n\n1\n\n\nbesides aggregate functions, you can also use it to query a specific field value of a record:\n\nstring nickname = db.querystr("select nickname from account where id = ? limit 1", 123);\n\n\n1\n\n\n\n# 4. the difference between db.find(...) series and db.query(...)/db.queryxxx(...) series\n\nthe former always wraps the return value into a record object, while the latter returns the data as is without wrapping.\n\n\n# 5. extending db functionality\n\nall functionalities of the db utility class rely on the underlying dbpro. dbpro can be customized via inheritance to add desired functionalities:\n\npublic class mydbpro extends dbpro {\n    public mydbpro(string configname) {\n        super(configname);\n    }\n\n    public list<record> find(string sql, object... paras) {\n        system.out.println("sql: " + sql);\n        system.out.println("paras: " + arrays.tostring(paras));\n        return super.find(sql, paras);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\nafter defining your custom dbpro class, you can configure it to override the behavior of the default dbpro:\n\nactiverecordplugin arp = new activerecordplugin(...);\narp.setdbprofactory(configname -> new mydbpro(configname));\n\n\n1\n2\n\n\nthrough this method, you can replace, enhance, or change the behavior of all public and protected methods in dbpro. it\'s a very flexible and convenient approach.',charsets:{}},{title:"5.6 Paginate Pagination",frontmatter:{},regularPath:"/en/5%20ActiveRecord/5.6%20paginate%20pagination.html",relativePath:"en/5 ActiveRecord/5.6 paginate pagination.md",key:"v-b94917f8",path:"/en/5%20ActiveRecord/5.6%20paginate%20pagination.html",headers:[{level:3,title:"1. Common paginate Usage",slug:"_1-common-paginate-usage",normalizedTitle:"1. common paginate usage",charIndex:30},{level:3,title:"2. paginate with sql having an outermost group by",slug:"_2-paginate-with-sql-having-an-outermost-group-by",normalizedTitle:"2. paginate with sql having an outermost group by",charIndex:559},{level:3,title:"3. paginateByFullSql",slug:"_3-paginatebyfullsql",normalizedTitle:"3. paginatebyfullsql",charIndex:1405},{level:3,title:"4. paginate with SqlPara Parameter",slug:"_4-paginate-with-sqlpara-parameter",normalizedTitle:"4. paginate with sqlpara parameter",charIndex:2191},{level:3,title:"5. Common Issues and Solutions",slug:"_5-common-issues-and-solutions",normalizedTitle:"5. common issues and solutions",charIndex:2433}],lastUpdated:"9/17/2023, 6:16:57 AM",lastUpdatedTimestamp:1694931417e3,headersStr:"1. Common paginate Usage 2. paginate with sql having an outermost group by 3. paginateByFullSql 4. paginate with SqlPara Parameter 5. Common Issues and Solutions",content:'# 5.6 Paginate Pagination\n\n\n# 1. Common paginate Usage\n\nBoth the Model and Db provide the most commonly used pagination API: paginate(int pageNumber, int pageSize, String select, String sqlExceptSelect, Object... paras).\n\nThe parameters respectively represent: the current page number, number of data items per page, the \'select\' part of the SQL, the part of the SQL excluding \'select\', and the query parameters. In most cases, this API suffices. Here\'s an example:\n\ndao.paginate(1, 10, "select *", "from girl where age > ? and weight < ?", 18, 50);\n\n\n1\n\n\n\n# 2. paginate with sql having an outermost group by\n\nAPI prototype: paginate(int pageNumber, int pageSize, boolean isGroupBySql, String select, String sqlExceptSelect, Object... paras). Compared to the first type, this one just has an extra boolean isGroupBySql parameter. Here\'s an example:\n\ndao.paginate(1, 10, true, "select *", "from girl where age > ? group by age", 18);\n\n\n1\n\n\nIn the above code, the outermost SQL contains a group by age, so the isGroupBySql parameter should be set to true.\n\nFor nested SQL where the group by isn\'t in the outermost layer, the parameter must be false, e.g., select * from (select x from t group by y) as temp.\n\nEmphasizing once more: the isGroupBy parameter should be true only when the outermost SQL has a group by clause. If only the inner SQL in nested queries has a group by, then it should be false.\n\n\n# 3. paginateByFullSql\n\nAPI prototype: paginateByFullSql(int pageNumber, int pageSize, String totalRowSql, String findSql, Object... paras).\n\nThis separates the two SQLs used for getting the total row count and fetching the data. It\'s mainly used for handling situations where there are complex order by clauses or when select contains distinct. You should only use this API when the first paginate method throws exceptions. Here\'s an example:\n\nString from = "from girl where age > ?";\nString totalRowSql = "select count(*) " + from;\nString findSql = "select * " + from + " order by age";\ndao.paginateByFullSql(1, 10, totalRowSql, findSql, 18);\n\n\n1\n2\n3\n4\n\n\nThe key with paginateByFullSql is that both totalRowSql and findSql should be able to use the last parameter, Object... paras.\n\n\n# 4. paginate with SqlPara Parameter\n\nAPI prototype: paginate(int pageNumber, int pageSize, SqlPara sqlPara). This is meant to be used in conjunction with SQL management functionality, which will be discussed in the SQL management section.\n\n\n# 5. Common Issues and Solutions\n\nTo effectively highlight and address issues, we first need to understand the underlying implementation principles of paginate.\n\nThe core principle is that JFinal will use the provided select and sqlExceptSelect strings to generate the SQL needed to compute the total rows that match the query conditions. The order by clause, if present, is removed since many databases don\'t support it in count(*) type queries and because it doesn\'t change the result.\n\nIssues arise when:\n\n 1. The select part of the query contains placeholders. This can be solved by wrapping the original SQL in an outer query.\n 2. The order by clause contains subqueries or function calls. In this case, the solution is to use paginateByFullSql which lets users specify the total row count and data fetching SQLs separately.\n\nIn summary, understanding the inner workings of paginate makes troubleshooting straightforward. If all else fails, paginateByFullSql is the go-to solution, albeit at the cost of writing a bit more code.',normalizedContent:'# 5.6 paginate pagination\n\n\n# 1. common paginate usage\n\nboth the model and db provide the most commonly used pagination api: paginate(int pagenumber, int pagesize, string select, string sqlexceptselect, object... paras).\n\nthe parameters respectively represent: the current page number, number of data items per page, the \'select\' part of the sql, the part of the sql excluding \'select\', and the query parameters. in most cases, this api suffices. here\'s an example:\n\ndao.paginate(1, 10, "select *", "from girl where age > ? and weight < ?", 18, 50);\n\n\n1\n\n\n\n# 2. paginate with sql having an outermost group by\n\napi prototype: paginate(int pagenumber, int pagesize, boolean isgroupbysql, string select, string sqlexceptselect, object... paras). compared to the first type, this one just has an extra boolean isgroupbysql parameter. here\'s an example:\n\ndao.paginate(1, 10, true, "select *", "from girl where age > ? group by age", 18);\n\n\n1\n\n\nin the above code, the outermost sql contains a group by age, so the isgroupbysql parameter should be set to true.\n\nfor nested sql where the group by isn\'t in the outermost layer, the parameter must be false, e.g., select * from (select x from t group by y) as temp.\n\nemphasizing once more: the isgroupby parameter should be true only when the outermost sql has a group by clause. if only the inner sql in nested queries has a group by, then it should be false.\n\n\n# 3. paginatebyfullsql\n\napi prototype: paginatebyfullsql(int pagenumber, int pagesize, string totalrowsql, string findsql, object... paras).\n\nthis separates the two sqls used for getting the total row count and fetching the data. it\'s mainly used for handling situations where there are complex order by clauses or when select contains distinct. you should only use this api when the first paginate method throws exceptions. here\'s an example:\n\nstring from = "from girl where age > ?";\nstring totalrowsql = "select count(*) " + from;\nstring findsql = "select * " + from + " order by age";\ndao.paginatebyfullsql(1, 10, totalrowsql, findsql, 18);\n\n\n1\n2\n3\n4\n\n\nthe key with paginatebyfullsql is that both totalrowsql and findsql should be able to use the last parameter, object... paras.\n\n\n# 4. paginate with sqlpara parameter\n\napi prototype: paginate(int pagenumber, int pagesize, sqlpara sqlpara). this is meant to be used in conjunction with sql management functionality, which will be discussed in the sql management section.\n\n\n# 5. common issues and solutions\n\nto effectively highlight and address issues, we first need to understand the underlying implementation principles of paginate.\n\nthe core principle is that jfinal will use the provided select and sqlexceptselect strings to generate the sql needed to compute the total rows that match the query conditions. the order by clause, if present, is removed since many databases don\'t support it in count(*) type queries and because it doesn\'t change the result.\n\nissues arise when:\n\n 1. the select part of the query contains placeholders. this can be solved by wrapping the original sql in an outer query.\n 2. the order by clause contains subqueries or function calls. in this case, the solution is to use paginatebyfullsql which lets users specify the total row count and data fetching sqls separately.\n\nin summary, understanding the inner workings of paginate makes troubleshooting straightforward. if all else fails, paginatebyfullsql is the go-to solution, albeit at the cost of writing a bit more code.',charsets:{}},{title:"5.7 Database Transaction Handling",frontmatter:{},regularPath:"/en/5%20ActiveRecord/5.7%20Database%20transaction%20handling.html",relativePath:"en/5 ActiveRecord/5.7 Database transaction handling.md",key:"v-6a120dbe",path:"/en/5%20ActiveRecord/5.7%20Database%20transaction%20handling.html",headers:[{level:3,title:"1. Db.tx Transactions",slug:"_1-db-tx-transactions",normalizedTitle:"1. db.tx transactions",charIndex:40},{level:3,title:"2. Declarative Transactions",slug:"_2-declarative-transactions",normalizedTitle:"2. declarative transactions",charIndex:1086},{level:3,title:"3. Tips & Tricks",slug:"_3-tips-tricks",normalizedTitle:"3. tips &amp; tricks",charIndex:null},{level:3,title:"4. Transaction Levels & Performance",slug:"_4-transaction-levels-performance",normalizedTitle:"4. transaction levels &amp; performance",charIndex:null}],lastUpdated:"9/17/2023, 6:16:57 AM",lastUpdatedTimestamp:1694931417e3,headersStr:"1. Db.tx Transactions 2. Declarative Transactions 3. Tips & Tricks 4. Transaction Levels & Performance",content:'# 5.7 Database Transaction Handling\n\n\n# 1. Db.tx Transactions\n\nThe Db utility class provides a series of tx(...) methods to support database transactions. Here\'s an example using Java 8\'s lambda syntax:\n\nDb.tx(() -> {\n  Db.update("update t1 set f1 = ?", 123);\n  Db.update("update t2 set f2 = ?", 456);\n  return true;\n});\n\n\n1\n2\n3\n4\n5\n\n\nIn the code above, both Db.update operations initiate a transaction. Returning true will commit the transaction, while returning false will roll back. The advantage of using Db.tx(...) is that it offers finer control over transactions. It allows rollbacks without the need for exceptions.\n\nThe Db.tx method is for the primary data source by default. For transactions on other data sources, use Db.use(configName).tx(...). Additionally, Db.tx(...) supports specifying transaction levels:\n\nDb.tx(Connection.TRANSACTION_SERIALIZABLE, () -> {\n  Db.update(...);\n  new User().setNickName("james").save();\n  return true;\n});\n\n\n1\n2\n3\n4\n5\n\n\nNote: MySQL tables must be set to the InnoDB engine for transaction support. MyISAM does not support transactions.\n\n\n# 2. Declarative Transactions\n\nActiveRecord supports declarative transactions, implemented using interceptors provided by the ActiveRecordPlugin. Here\'s an example:\n\n@Before(Tx.class)\npublic void trans_demo() {\n  Integer transAmount = getInt("transAmount");\n  Integer fromAccountId = getInt("fromAccountId");\n  Integer toAccountId = getInt("toAccountId");\n  \n  Db.update("update account set cash = cash - ? where id = ?", transAmount, fromAccountId);\n  Db.update("update account set cash = cash + ? where id = ?", transAmount, toAccountId);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nNote that just by declaring the Tx interceptor, the action method supports transactions.\n\nIf you want to use a try-catch block with the Tx interceptor configured at the Controller layer for response control, use the following approach:\n\n@Before(Tx.class)\npublic void trans() {\n  try {\n    service.justDoIt(...);\n    render("ok.html");\n  } catch (Exception e) {\n    render("error.html");\n    throw e;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nThis approach ensures that any exceptions are caught and the appropriate response template is rendered. However, always rethrow the exception to ensure the Tx interceptor is aware and can roll back the transaction.\n\nFor specific declarative transactions, ActiveRecord provides TxByActionKeys, TxByActionKeyRegex, TxByMethods, and TxByMethodRegex. Example:\n\npublic void configInterceptor(Interceptors me) {\n   me.add(new TxByMethodRegex("(.*save.*|.*update.*)"));\n   me.add(new TxByMethods("save", "update"));\n   me.add(new TxByActionKeyRegex("/trans.*"));\n   me.add(new TxByActionKeys("/tx/save", "/tx/update"));\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\nIf you want to roll back transactions for non-primary data sources, use annotations:\n\n@TxConfig("otherConfigName")\n@Before(Tx.class)\npublic void doIt() {\n   ...\n}\n\n\n1\n2\n3\n4\n5\n\n\n\n# 3. Tips & Tricks\n\nIt\'s recommended to use Db.tx(...) for database transactions for several reasons:\n\n 1. It allows for the finest granularity, ensuring optimal performance.\n 2. It lets you use return values to control whether or not to roll back a transaction. The Tx interceptor, on the other hand, relies on catching exceptions.\n 3. The Java 8 lambda syntax makes the code concise.\n\nWhen using the Tx interceptor, it\'s recommended to have an additional ExceptionInterceptor to handle exceptions thrown by Tx.\n\nIn summary, always prioritize using Db.tx(...) for transaction handling.\n\n\n# 4. Transaction Levels & Performance\n\nJDBC\'s default transaction level is Connection.TRANSACTION_READ_COMMITTED. However, to cater to specific application scenarios, JFinal\'s ActiveRecordPlugin uses Connection.TRANSACTION_REPEATABLE_READ by default. Adjusting the transaction level can be crucial for performance, especially in cases of high concurrent lock contention. Configuring the transaction level can help:\n\npublic void configPlugin(Plugins me) {\n    ActiveRecordPlugin arp = new ActiveRecordPlugin(...);\n    arp.setTransactionLevel(Connection.TRANSACTION_REPEATABLE_READ);\n    me.add(arp);\n}\n\n\n1\n2\n3\n4\n5\n\n\nRemember, the appropriate transaction level can significantly impact your application\'s performance. Always choose wisely based on your specific needs.',normalizedContent:'# 5.7 database transaction handling\n\n\n# 1. db.tx transactions\n\nthe db utility class provides a series of tx(...) methods to support database transactions. here\'s an example using java 8\'s lambda syntax:\n\ndb.tx(() -> {\n  db.update("update t1 set f1 = ?", 123);\n  db.update("update t2 set f2 = ?", 456);\n  return true;\n});\n\n\n1\n2\n3\n4\n5\n\n\nin the code above, both db.update operations initiate a transaction. returning true will commit the transaction, while returning false will roll back. the advantage of using db.tx(...) is that it offers finer control over transactions. it allows rollbacks without the need for exceptions.\n\nthe db.tx method is for the primary data source by default. for transactions on other data sources, use db.use(configname).tx(...). additionally, db.tx(...) supports specifying transaction levels:\n\ndb.tx(connection.transaction_serializable, () -> {\n  db.update(...);\n  new user().setnickname("james").save();\n  return true;\n});\n\n\n1\n2\n3\n4\n5\n\n\nnote: mysql tables must be set to the innodb engine for transaction support. myisam does not support transactions.\n\n\n# 2. declarative transactions\n\nactiverecord supports declarative transactions, implemented using interceptors provided by the activerecordplugin. here\'s an example:\n\n@before(tx.class)\npublic void trans_demo() {\n  integer transamount = getint("transamount");\n  integer fromaccountid = getint("fromaccountid");\n  integer toaccountid = getint("toaccountid");\n  \n  db.update("update account set cash = cash - ? where id = ?", transamount, fromaccountid);\n  db.update("update account set cash = cash + ? where id = ?", transamount, toaccountid);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nnote that just by declaring the tx interceptor, the action method supports transactions.\n\nif you want to use a try-catch block with the tx interceptor configured at the controller layer for response control, use the following approach:\n\n@before(tx.class)\npublic void trans() {\n  try {\n    service.justdoit(...);\n    render("ok.html");\n  } catch (exception e) {\n    render("error.html");\n    throw e;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nthis approach ensures that any exceptions are caught and the appropriate response template is rendered. however, always rethrow the exception to ensure the tx interceptor is aware and can roll back the transaction.\n\nfor specific declarative transactions, activerecord provides txbyactionkeys, txbyactionkeyregex, txbymethods, and txbymethodregex. example:\n\npublic void configinterceptor(interceptors me) {\n   me.add(new txbymethodregex("(.*save.*|.*update.*)"));\n   me.add(new txbymethods("save", "update"));\n   me.add(new txbyactionkeyregex("/trans.*"));\n   me.add(new txbyactionkeys("/tx/save", "/tx/update"));\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\nif you want to roll back transactions for non-primary data sources, use annotations:\n\n@txconfig("otherconfigname")\n@before(tx.class)\npublic void doit() {\n   ...\n}\n\n\n1\n2\n3\n4\n5\n\n\n\n# 3. tips & tricks\n\nit\'s recommended to use db.tx(...) for database transactions for several reasons:\n\n 1. it allows for the finest granularity, ensuring optimal performance.\n 2. it lets you use return values to control whether or not to roll back a transaction. the tx interceptor, on the other hand, relies on catching exceptions.\n 3. the java 8 lambda syntax makes the code concise.\n\nwhen using the tx interceptor, it\'s recommended to have an additional exceptioninterceptor to handle exceptions thrown by tx.\n\nin summary, always prioritize using db.tx(...) for transaction handling.\n\n\n# 4. transaction levels & performance\n\njdbc\'s default transaction level is connection.transaction_read_committed. however, to cater to specific application scenarios, jfinal\'s activerecordplugin uses connection.transaction_repeatable_read by default. adjusting the transaction level can be crucial for performance, especially in cases of high concurrent lock contention. configuring the transaction level can help:\n\npublic void configplugin(plugins me) {\n    activerecordplugin arp = new activerecordplugin(...);\n    arp.settransactionlevel(connection.transaction_repeatable_read);\n    me.add(arp);\n}\n\n\n1\n2\n3\n4\n5\n\n\nremember, the appropriate transaction level can significantly impact your application\'s performance. always choose wisely based on your specific needs.',charsets:{cjk:!0}},{title:"5.8 Cache caching",frontmatter:{},regularPath:"/en/5%20ActiveRecord/5.8%20Cache%20caching.html",relativePath:"en/5 ActiveRecord/5.8 Cache caching.md",key:"v-ba25292c",path:"/en/5%20ActiveRecord/5.8%20Cache%20caching.html",headers:[{level:3,title:"1. Using Ehcache",slug:"_1-using-ehcache",normalizedTitle:"1. using ehcache",charIndex:24},{level:3,title:"2. Using Any Caching Implementation",slug:"_2-using-any-caching-implementation",normalizedTitle:"2. using any caching implementation",charIndex:813}],lastUpdated:"9/21/2023, 8:42:09 AM",lastUpdatedTimestamp:1695285729e3,headersStr:"1. Using Ehcache 2. Using Any Caching Implementation",content:'# 5.8 Cache caching\n\n\n# 1. Using Ehcache\n\nActiveRecord can use caching to greatly improve performance. The default caching implementation is Ehcache. To use it, you need to import the Ehcache JAR package and its configuration file. The following code is an example of using Cache:\n\npublic void list() {\n    List<Blog> blogList = Blog.dao.findByCache("cacheName", "key", "select * from blog");\n    setAttr("blogList", blogList).render("list.html");\n}\n\n\n1\n2\n3\n4\n\n\nIn the above example, the cacheName in the findByCache method needs to be configured in ehcache.xml like: <cache name="cacheName" …>. Additionally, Model.paginateByCache(…), Db.findByCache(…), and Db.paginateByCache(…) methods also support caching. To use it, just pass in cacheName, key, and configure the corresponding cacheName in ehcache.xml.\n\n\n# 2. Using Any Caching Implementation\n\nApart from using the default Ehcache implementation, you can also switch to any other caching implementation by implementing the ICache interface. Below is a simple indicative code implementation:\n\npublic class MyCache implements ICache {\n  public <T>T get(String cacheName, Object key) {\n  }\n \n  public void put(String cacheName, Object key, Object value) {\n  }\n \n  public void remove(String cacheName, Object key) {\n  }\n \n  public void removeAll(String cacheName) {\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\nAs shown in the above code, MyCache needs to implement the four abstract methods in ICache. Then you can switch to your own cache implementation with the following configuration:\n\nActiveRecordPlugin arp = new ActiveRecordPlugin(...);\narp.setCache(new MyCache());\n\n\n1\n2\n\n\nIn the above code, you can switch the cache implementation by calling ActiveRecordPlugin.setCache(...).\n\n----------------------------------------',normalizedContent:'# 5.8 cache caching\n\n\n# 1. using ehcache\n\nactiverecord can use caching to greatly improve performance. the default caching implementation is ehcache. to use it, you need to import the ehcache jar package and its configuration file. the following code is an example of using cache:\n\npublic void list() {\n    list<blog> bloglist = blog.dao.findbycache("cachename", "key", "select * from blog");\n    setattr("bloglist", bloglist).render("list.html");\n}\n\n\n1\n2\n3\n4\n\n\nin the above example, the cachename in the findbycache method needs to be configured in ehcache.xml like: <cache name="cachename" …>. additionally, model.paginatebycache(…), db.findbycache(…), and db.paginatebycache(…) methods also support caching. to use it, just pass in cachename, key, and configure the corresponding cachename in ehcache.xml.\n\n\n# 2. using any caching implementation\n\napart from using the default ehcache implementation, you can also switch to any other caching implementation by implementing the icache interface. below is a simple indicative code implementation:\n\npublic class mycache implements icache {\n  public <t>t get(string cachename, object key) {\n  }\n \n  public void put(string cachename, object key, object value) {\n  }\n \n  public void remove(string cachename, object key) {\n  }\n \n  public void removeall(string cachename) {\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\nas shown in the above code, mycache needs to implement the four abstract methods in icache. then you can switch to your own cache implementation with the following configuration:\n\nactiverecordplugin arp = new activerecordplugin(...);\narp.setcache(new mycache());\n\n\n1\n2\n\n\nin the above code, you can switch the cache implementation by calling activerecordplugin.setcache(...).\n\n----------------------------------------',charsets:{}},{title:"5.9 Dialect for Multi-Database Support",frontmatter:{},regularPath:"/en/5%20ActiveRecord/5.9%20Dialect%20multiple%20database%20support.html",relativePath:"en/5 ActiveRecord/5.9 Dialect multiple database support.md",key:"v-7f7c3fec",path:"/en/5%20ActiveRecord/5.9%20Dialect%20multiple%20database%20support.html",lastUpdated:"9/21/2023, 8:42:09 AM",lastUpdatedTimestamp:1695285729e3,headersStr:null,content:"# 5.9 Dialect for Multi-Database Support\n\nCurrently, the ActiveRecordPlugin provides implementations for MysqlDialect, OracleDialect, PostgresqlDialect, SqlServerDialect, Sqlite3Dialect, and AnsiSqlDialect. MysqlDialect and OracleDialect offer support for MySQL and Oracle databases, respectively, while AnsiSqlDialect supports databases that comply with ANSI SQL standards. Below is the configuration code for setting the database dialect:\n\npublic class DemoConfig extends JFinalConfig {\n  public void configPlugin(Plugins me) {\n    ActiveRecordPlugin arp = new ActiveRecordPlugin(…);\n    me.add(arp);\n    // Configuring the Postgresql dialect\n    arp.setDialect(new PostgresqlDialect());\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n",normalizedContent:"# 5.9 dialect for multi-database support\n\ncurrently, the activerecordplugin provides implementations for mysqldialect, oracledialect, postgresqldialect, sqlserverdialect, sqlite3dialect, and ansisqldialect. mysqldialect and oracledialect offer support for mysql and oracle databases, respectively, while ansisqldialect supports databases that comply with ansi sql standards. below is the configuration code for setting the database dialect:\n\npublic class democonfig extends jfinalconfig {\n  public void configplugin(plugins me) {\n    activerecordplugin arp = new activerecordplugin(…);\n    me.add(arp);\n    // configuring the postgresql dialect\n    arp.setdialect(new postgresqldialect());\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n",charsets:{}},{title:"6.1 Overview",frontmatter:{},regularPath:"/en/6%20Enjoy%20template%20engine/6.1%20Overview.html",relativePath:"en/6 Enjoy template engine/6.1 Overview.md",key:"v-6ffa6841",path:"/en/6%20Enjoy%20template%20engine/6.1%20Overview.html",lastUpdated:"9/22/2023, 4:50:57 AM",lastUpdatedTimestamp:1695358257e3,headersStr:null,content:"# 6.1 Overview\n\nThe Enjoy Template Engine employs a unique DKFF (Dynamic Key Feature Forward) lexical analysis algorithm and a unique DLRD (Double Layer Recursive Descent) syntax analysis algorithm. These innovative approaches significantly reduce code volume, lower the learning curve, and enhance the user experience.\n\nUnlike any previous Java template engine, it stands out for its minimalist design, original algorithms, and exceptional development experience. Here are some highlights from its release: JFinal 3.0 Released, Redefining Template Engines\n\nFrom JFinal 3.0 to JFinal 3.3, the Enjoy engine has undergone meticulous refinement. Here are the highlights from the releases related to the fine-tuning of the Enjoy engine:\n\n * JFinal 3.0 Released, Redefining Template Engines\n * JFinal 3.1 Released, No Frills, No Complexity, Just Indescribable Beauty\n * JFinal 3.2 Released, A Spark Now Ignites the Prairie\n * JFinal 3.3 Released, In Martial Arts, Speed is Unbeatable\n\nThe Enjoy Template Engine is specifically designed for Java developers. Therefore, it adheres to two core design philosophies: First, it allows seamless interaction with Java code within the templates. Second, it aims to follow Java syntax rules as much as possible, minimizing the learning curve.\n\nThus, to grasp 90% of its usage, you only need to remember one sentence: The Enjoy Template Engine's expressions are directly connected with Java.\n\nOnce you remember the above sentence, you can happily use the template engine as shown below:\n\n// Arithmetic operations\n1 + 2 / 3 * 4\n// Comparison operations\n1 > 2\n// Logical operations\n!a && b != c || d == e\n// Ternary expression\na > 0 ? a : b\n// Method calls\n\"abcdef\".substring(0, 3)\ntarget.method(p1, p2, pn)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\nThe core concepts of the Enjoy Template Engine are only directives and expressions. Since the expressions are directly connected with Java, there is no learning cost. All that remains to be understood are the #if, #for, #define, #set, #include, #switch, and #(...) seven directives, which are extremely easy to learn.\n\nSince its release, the Enjoy Template Engine has received much love from its users. Feedback has proven that the experience is outstanding. If you haven't tried it yet, we strongly recommend giving it a go.",normalizedContent:"# 6.1 overview\n\nthe enjoy template engine employs a unique dkff (dynamic key feature forward) lexical analysis algorithm and a unique dlrd (double layer recursive descent) syntax analysis algorithm. these innovative approaches significantly reduce code volume, lower the learning curve, and enhance the user experience.\n\nunlike any previous java template engine, it stands out for its minimalist design, original algorithms, and exceptional development experience. here are some highlights from its release: jfinal 3.0 released, redefining template engines\n\nfrom jfinal 3.0 to jfinal 3.3, the enjoy engine has undergone meticulous refinement. here are the highlights from the releases related to the fine-tuning of the enjoy engine:\n\n * jfinal 3.0 released, redefining template engines\n * jfinal 3.1 released, no frills, no complexity, just indescribable beauty\n * jfinal 3.2 released, a spark now ignites the prairie\n * jfinal 3.3 released, in martial arts, speed is unbeatable\n\nthe enjoy template engine is specifically designed for java developers. therefore, it adheres to two core design philosophies: first, it allows seamless interaction with java code within the templates. second, it aims to follow java syntax rules as much as possible, minimizing the learning curve.\n\nthus, to grasp 90% of its usage, you only need to remember one sentence: the enjoy template engine's expressions are directly connected with java.\n\nonce you remember the above sentence, you can happily use the template engine as shown below:\n\n// arithmetic operations\n1 + 2 / 3 * 4\n// comparison operations\n1 > 2\n// logical operations\n!a && b != c || d == e\n// ternary expression\na > 0 ? a : b\n// method calls\n\"abcdef\".substring(0, 3)\ntarget.method(p1, p2, pn)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\nthe core concepts of the enjoy template engine are only directives and expressions. since the expressions are directly connected with java, there is no learning cost. all that remains to be understood are the #if, #for, #define, #set, #include, #switch, and #(...) seven directives, which are extremely easy to learn.\n\nsince its release, the enjoy template engine has received much love from its users. feedback has proven that the experience is outstanding. if you haven't tried it yet, we strongly recommend giving it a go.",charsets:{cjk:!0}},{title:"6.10 Integration with Spring Boot",frontmatter:{},regularPath:"/en/6%20Enjoy%20template%20engine/6.10%20Spring%20boot%20integration.html",relativePath:"en/6 Enjoy template engine/6.10 Spring boot integration.md",key:"v-541c0407",path:"/en/6%20Enjoy%20template%20engine/6.10%20Spring%20boot%20integration.html",headers:[{level:3,title:"6.10 Integration with Spring Boot",slug:"_6-10-integration-with-spring-boot",normalizedTitle:"6.10 integration with spring boot",charIndex:2}],lastUpdated:"9/22/2023, 4:50:57 AM",lastUpdatedTimestamp:1695358257e3,headersStr:"6.10 Integration with Spring Boot",content:'# 6.10 Integration with Spring Boot\n\n# 1. Maven Coordinates\n\nFor integration with Spring, you can configure the Maven coordinates for JFinal or the standalone version of the Enjoy Template Engine in your pom.xml file. The Maven coordinates for Enjoy are as follows:\n\n<dependency>\n  <groupId>com.jfinal</groupId>\n  <artifactId>enjoy</artifactId>\n  <version>5.1.2</version>\n</dependency>\n\n\n1\n2\n3\n4\n5\n\n\nThe standalone version of the JFinal Template Engine, Enjoy, has a size of only 207KB and has no third-party dependencies.\n\n# 2. Spring Boot Integration\n\nThe configuration for integrating with Spring Boot is as follows:\n\n@Configuration\npublic class SpringBootConfig {\n\n  @Bean(name = "jfinalViewResolver")\n  public JFinalViewResolver getJFinalViewResolver() {\n\n    // Create a ViewResolver extension object for Spring Boot integration\n    JFinalViewResolver jfr = new JFinalViewResolver();\n    \n    // Configure Spring Boot\n    jfr.setSuffix(".html");\n    jfr.setContentType("text/html;charset=UTF-8");\n    jfr.setOrder(0);\n    \n    // Enable session data access in the template via #(session.value)\n    jfr.setSessionInView(true);\n    \n    // Get the engine object to configure the Enjoy template engine\n    Engine engine  = JFinalViewResolver.engine;\n    \n    // Enable dev mode for hot reloading, must be set before other configurations\n    engine.setDevMode(true);\n\n    // Use ClassPathSourceFactory to load templates from the classpath and jar files\n    engine.setToClassPathSourceFactory();\n    \n    // Use setBaseTemplatePath when using ClassPathSourceFactory\n    engine.setBaseTemplatePath("/view/");\n    \n    // Add shared functions\n    engine.addSharedFunction("/common/_layout.html");\n    engine.addSharedFunction("/common/_paginate.html");\n    \n    // More configurations can be done in the same way as previously mentioned\n    // engine.addDirective(...)\n    // engine.addSharedMethod(...);\n    \n    return jfr;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n\n\nAs shown above, jfr.setToClassPathSourceFactory() configures the ClassPathSourceFactory to load template files from the classpath and jar files. jfr.addSharedFunction(...) configures shared template functions. Essentially, the configuration for Enjoy is consistent with the configuration of the Engine object.\n\nIf you want to load template files from the project\'s webapp directory, there is no need to set it to ClassPathSourceFactory.\n\n# 3. Spring MVC Integration\n\nIntegrating Enjoy with Spring MVC is quite simple and only requires the configuration of a single bean. The detailed configuration method is as follows:\n\n<bean id="viewResolver" class="com.jfinal.template.ext.spring.JFinalViewResolver">\n  \x3c!-- Enable hot reloading of template files --\x3e\n  <property name="devMode" value="true"/>\n  \x3c!-- Configure shared functions, multiple files separated by commas --\x3e\n  <property name="sharedFunction" value="/view/_layout.html, /view/_paginate.html"/>\n  \n  \x3c!-- Enable session data access in the template via #(session.value) --\x3e\n  <property name="sessionInView" value="true"/>\n  <property name="prefix" value="/view/"/>\n  <property name="suffix" value=".html"/>\n  <property name="order" value="1"/>\n  <property name="contentType" value="text/html; charset=utf-8"/>\n</bean>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\nFor more detailed configurations and their explanations, you can refer to the comments in the header of JFinalViewResolver. In most cases, the above configurations should be sufficient.',normalizedContent:'# 6.10 integration with spring boot\n\n# 1. maven coordinates\n\nfor integration with spring, you can configure the maven coordinates for jfinal or the standalone version of the enjoy template engine in your pom.xml file. the maven coordinates for enjoy are as follows:\n\n<dependency>\n  <groupid>com.jfinal</groupid>\n  <artifactid>enjoy</artifactid>\n  <version>5.1.2</version>\n</dependency>\n\n\n1\n2\n3\n4\n5\n\n\nthe standalone version of the jfinal template engine, enjoy, has a size of only 207kb and has no third-party dependencies.\n\n# 2. spring boot integration\n\nthe configuration for integrating with spring boot is as follows:\n\n@configuration\npublic class springbootconfig {\n\n  @bean(name = "jfinalviewresolver")\n  public jfinalviewresolver getjfinalviewresolver() {\n\n    // create a viewresolver extension object for spring boot integration\n    jfinalviewresolver jfr = new jfinalviewresolver();\n    \n    // configure spring boot\n    jfr.setsuffix(".html");\n    jfr.setcontenttype("text/html;charset=utf-8");\n    jfr.setorder(0);\n    \n    // enable session data access in the template via #(session.value)\n    jfr.setsessioninview(true);\n    \n    // get the engine object to configure the enjoy template engine\n    engine engine  = jfinalviewresolver.engine;\n    \n    // enable dev mode for hot reloading, must be set before other configurations\n    engine.setdevmode(true);\n\n    // use classpathsourcefactory to load templates from the classpath and jar files\n    engine.settoclasspathsourcefactory();\n    \n    // use setbasetemplatepath when using classpathsourcefactory\n    engine.setbasetemplatepath("/view/");\n    \n    // add shared functions\n    engine.addsharedfunction("/common/_layout.html");\n    engine.addsharedfunction("/common/_paginate.html");\n    \n    // more configurations can be done in the same way as previously mentioned\n    // engine.adddirective(...)\n    // engine.addsharedmethod(...);\n    \n    return jfr;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n\n\nas shown above, jfr.settoclasspathsourcefactory() configures the classpathsourcefactory to load template files from the classpath and jar files. jfr.addsharedfunction(...) configures shared template functions. essentially, the configuration for enjoy is consistent with the configuration of the engine object.\n\nif you want to load template files from the project\'s webapp directory, there is no need to set it to classpathsourcefactory.\n\n# 3. spring mvc integration\n\nintegrating enjoy with spring mvc is quite simple and only requires the configuration of a single bean. the detailed configuration method is as follows:\n\n<bean id="viewresolver" class="com.jfinal.template.ext.spring.jfinalviewresolver">\n  \x3c!-- enable hot reloading of template files --\x3e\n  <property name="devmode" value="true"/>\n  \x3c!-- configure shared functions, multiple files separated by commas --\x3e\n  <property name="sharedfunction" value="/view/_layout.html, /view/_paginate.html"/>\n  \n  \x3c!-- enable session data access in the template via #(session.value) --\x3e\n  <property name="sessioninview" value="true"/>\n  <property name="prefix" value="/view/"/>\n  <property name="suffix" value=".html"/>\n  <property name="order" value="1"/>\n  <property name="contenttype" value="text/html; charset=utf-8"/>\n</bean>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\nfor more detailed configurations and their explanations, you can refer to the comments in the header of jfinalviewresolver. in most cases, the above configurations should be sufficient.',charsets:{}},{title:"6.11 Standalone Use of Enjoy",frontmatter:{},regularPath:"/en/6%20Enjoy%20template%20engine/6.11%20Use%20Enjoy%20independently.html",relativePath:"en/6 Enjoy template engine/6.11 Use Enjoy independently.md",key:"v-f2c9e9e6",path:"/en/6%20Enjoy%20template%20engine/6.11%20Use%20Enjoy%20independently.html",headers:[{level:3,title:"6.11 Standalone Use of Enjoy",slug:"_6-11-standalone-use-of-enjoy",normalizedTitle:"6.11 standalone use of enjoy",charIndex:2}],lastUpdated:"9/22/2023, 4:50:57 AM",lastUpdatedTimestamp:1695358257e3,headersStr:"6.11 Standalone Use of Enjoy",content:'# 6.11 Standalone Use of Enjoy\n\nEnjoy Template Engine is not limited to web applications and can be used in any Java development environment. It is often used for code generation, email generation, template message generation, and other scenarios that require template-based data. It is extremely easy to use.\n\nDue to the demand for using Enjoy in non-JFinal environments, an independent version of the Enjoy Template Engine has been released. The Maven coordinates are as follows:\n\n<dependency>\n  <groupId>com.jfinal</groupId>\n  <artifactId>enjoy</artifactId>\n  <version>5.1.2</version>\n</dependency>\n\n\n1\n2\n3\n4\n5\n\n\nYou can include Enjoy in any Java project as a standalone dependency.\n\n# 1. Engine and Template\n\nThe Engine serves as the configuration and usage entry point for Enjoy. One of its main functions is to configure various parameters for Enjoy. Another is to obtain a Template object through the getTemplate and getTemplateByString methods, such as:\n\nEngine engine = Engine.use();\n \nengine.setDevMode(true);\nengine.setToClassPathSourceFactory();\n \nengine.getTemplate("index.html");\n\n\n1\n2\n3\n4\n5\n6\n\n\nThe Template object abstracts the template and allows you to render it using the render series of methods. For example:\n\nKv kv = Kv.by("key", 123);\nTemplate template = engine.getTemplate("index.html");\n \n// Render to OutputStream in byte stream mode\nByteArrayOutputStream baos = new ByteArrayOutputStream();\ntemplate.render(kv, baos);\n \n// Render to StringWriter in character stream mode\nStringWriter sw = new StringWriter();\ntemplate.render(kv, sw);\n \n// Render directly to a String variable\nString str = template.renderToString(kv);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n# 2. Basic Usage\n\nHere\'s an example to illustrate:\n\nEngine.use().getTemplate("demo.html").renderToString(Kv.by("k", "v"));\n\n\n1\n\n\nIn just one line of code, you can use the template engine in any environment.\n\n# 3. Advanced Usage\n\nHere\'s an example:\n\nEngine engine = Engine.create("myEngine");\nengine.setDevMode(true);\nengine.setToClassPathSourceFactory();\nTemplate template = engine.getTemplate("wxAppMsg.txt");\nString wxAppMsg = template.renderToString(Kv.by("toUser", "james"));\n \nengine = Engine.use("myEngine");\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nThis example shows how to create an Engine object named "myEngine", set it for hot template file reloading, and configure the engine to load template files from the class path and jar files.\n\n# 4. Engine Object Management\n\nThere are two ways to create an Engine object: one is through the Engine.create(name) method, and the other is using the new Engine() statement. Objects created by the former are managed by the Engine module and can be retrieved using Engine.use(name). In contrast, objects created by the latter are not managed by the Engine module and cannot be retrieved in this way. Developers need to manage these objects themselves.\n\nThe design of Engine object management allows multiple Engine instances to be used for different purposes within the same application. JFinal\'s own render and activerecord modules are typical examples of this usage.\n\nIt\'s strongly recommended to join the JFinal Club to gain access to a comprehensive set of best practices and example projects. This will help you master the simplest ways to use the JFinal Template Engine, saving you the time you would spend reading the documentation. JFinal Club Website',normalizedContent:'# 6.11 standalone use of enjoy\n\nenjoy template engine is not limited to web applications and can be used in any java development environment. it is often used for code generation, email generation, template message generation, and other scenarios that require template-based data. it is extremely easy to use.\n\ndue to the demand for using enjoy in non-jfinal environments, an independent version of the enjoy template engine has been released. the maven coordinates are as follows:\n\n<dependency>\n  <groupid>com.jfinal</groupid>\n  <artifactid>enjoy</artifactid>\n  <version>5.1.2</version>\n</dependency>\n\n\n1\n2\n3\n4\n5\n\n\nyou can include enjoy in any java project as a standalone dependency.\n\n# 1. engine and template\n\nthe engine serves as the configuration and usage entry point for enjoy. one of its main functions is to configure various parameters for enjoy. another is to obtain a template object through the gettemplate and gettemplatebystring methods, such as:\n\nengine engine = engine.use();\n \nengine.setdevmode(true);\nengine.settoclasspathsourcefactory();\n \nengine.gettemplate("index.html");\n\n\n1\n2\n3\n4\n5\n6\n\n\nthe template object abstracts the template and allows you to render it using the render series of methods. for example:\n\nkv kv = kv.by("key", 123);\ntemplate template = engine.gettemplate("index.html");\n \n// render to outputstream in byte stream mode\nbytearrayoutputstream baos = new bytearrayoutputstream();\ntemplate.render(kv, baos);\n \n// render to stringwriter in character stream mode\nstringwriter sw = new stringwriter();\ntemplate.render(kv, sw);\n \n// render directly to a string variable\nstring str = template.rendertostring(kv);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n# 2. basic usage\n\nhere\'s an example to illustrate:\n\nengine.use().gettemplate("demo.html").rendertostring(kv.by("k", "v"));\n\n\n1\n\n\nin just one line of code, you can use the template engine in any environment.\n\n# 3. advanced usage\n\nhere\'s an example:\n\nengine engine = engine.create("myengine");\nengine.setdevmode(true);\nengine.settoclasspathsourcefactory();\ntemplate template = engine.gettemplate("wxappmsg.txt");\nstring wxappmsg = template.rendertostring(kv.by("touser", "james"));\n \nengine = engine.use("myengine");\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nthis example shows how to create an engine object named "myengine", set it for hot template file reloading, and configure the engine to load template files from the class path and jar files.\n\n# 4. engine object management\n\nthere are two ways to create an engine object: one is through the engine.create(name) method, and the other is using the new engine() statement. objects created by the former are managed by the engine module and can be retrieved using engine.use(name). in contrast, objects created by the latter are not managed by the engine module and cannot be retrieved in this way. developers need to manage these objects themselves.\n\nthe design of engine object management allows multiple engine instances to be used for different purposes within the same application. jfinal\'s own render and activerecord modules are typical examples of this usage.\n\nit\'s strongly recommended to join the jfinal club to gain access to a comprehensive set of best practices and example projects. this will help you master the simplest ways to use the jfinal template engine, saving you the time you would spend reading the documentation. jfinal club website',charsets:{}},{title:"6.2 Engine Configuration",frontmatter:{},regularPath:"/en/6%20Enjoy%20template%20engine/6.2%20Engine%20configuration.html",relativePath:"en/6 Enjoy template engine/6.2 Engine configuration.md",key:"v-a8de22f8",path:"/en/6%20Enjoy%20template%20engine/6.2%20Engine%20configuration.html",headers:[{level:3,title:"1. Configuration Entry Point",slug:"_1-configuration-entry-point",normalizedTitle:"1. configuration entry point",charIndex:31},{level:3,title:"2. Configuring Multiple Engine Instances",slug:"_2-configuring-multiple-engine-instances",normalizedTitle:"2. configuring multiple engine instances",charIndex:2905},{level:3,title:"3. Managing Multiple Engine Instances",slug:"_3-managing-multiple-engine-instances",normalizedTitle:"3. managing multiple engine instances",charIndex:4486},{level:3,title:"4. Hot Reloading Configuration",slug:"_4-hot-reloading-configuration",normalizedTitle:"4. hot reloading configuration",charIndex:5703},{level:3,title:"5. Shared Template Function Configuration",slug:"_5-shared-template-function-configuration",normalizedTitle:"5. shared template function configuration",charIndex:6419},{level:3,title:"6. Loading Templates from Class Path and JARs",slug:"_6-loading-templates-from-class-path-and-jars",normalizedTitle:"6. loading templates from class path and jars",charIndex:6994},{level:3,title:"7. Development in Eclipse",slug:"_7-development-in-eclipse",normalizedTitle:"7. development in eclipse",charIndex:8219}],lastUpdated:"9/22/2023, 9:39:45 AM",lastUpdatedTimestamp:1695375585e3,headersStr:"1. Configuration Entry Point 2. Configuring Multiple Engine Instances 3. Managing Multiple Engine Instances 4. Hot Reloading Configuration 5. Shared Template Function Configuration 6. Loading Templates from Class Path and JARs 7. Development in Eclipse",content:'# 6.2 Engine Configuration\n\n\n# 1. Configuration Entry Point\n\nThe entry point for configuring the Enjoy engine is unified within the Engine class. The Engine class provides a series of setter methods to guide the configuration, reducing the cognitive load. For example:\n\n// Enable hot reloading of templates, recommended to be set as true in most production environments, unless in extreme high-performance scenarios.\nengine.setDevMode(true);\n\n// Add shared template functions\nengine.addSharedFunction("_layout.html");\n\n// Enable fast mode, improves performance by 13%\nEngine.setFastMode(true);\n\n// New in jfinal 4.9.02: Support for Chinese expressions, variable names, method names, and template function names.\nEngine.setChineseExpression(true);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\nNote: engine.setToClassPathSourceFactory(), engine.setBaseTemplatePath(...), and engine.setDevMode(...) should be placed at the beginning as subsequent configurations like engine.addSharedFunction(...) depend on these.\n\njfinal 4.9 introduced HTML compression, which can be configured as follows:\n\n// Enable HTML compression, the separator character can be configured as \'\\n\' or \' \'\nengine.setCompressorOn(\' \');\n\n\n1\n2\n\n\nThis feature benefits high-concurrency web applications by saving bandwidth and improving efficiency. After configuration, the generated HTML content will look like the following:\n\n\nNote: This feature only supports HTML compression. If HTML contains inline JavaScript, and the script includes single-line comments or missing semicolons, errors may occur. For example, the following JavaScript code:\n\n// This is a JS comment\nvar s1 = "hello"\nvar s2 = "james"\ns3 = s1 + s2\n\n\n1\n2\n3\n4\n\n\nHere, the JS code contains single-line comments and missing semicolons at the end of some statements. For such HTML templates, use a newline character as the compression separator:\n\n// Use newline character as separator\nengine.setCompressorOn(\'\\n\');\n\n\n1\n2\n\n\nThis configuration yields the same compression rate as using a space character, but the compressed HTML is more readable. If your HTML contains JavaScript, it\'s strongly advised to use this setting.\n\njfinal 4.9 introduced addEnum(...) to support enum types:\n\n// Assume the following enum definition\npublic enum UserType {\n    ADMIN,\n    USER;\n    \n    public String hello() {\n        return "hello";\n    }\n}\n        \n// Add configuration for the enum\nengine.addEnum(UserType.class);\n \n// Usage in template\n### The object \'u\' is passed via Controller\'s setAttr("u", UserType.ADMIN)\n#if(u == UserType.ADMIN)\n    #(UserType.ADMIN)\n \n    ### The following two lines demonstrate direct method calls\n    #(UserType.ADMIN.hello())   \n#end\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\njfinal 4.9.02 introduced new configurations to support Chinese expressions, variable names, method names, and template function names:\n\nEngine.setChineseExpression(true);\n\n\n1\n\n\n\n# 2. Configuring Multiple Engine Instances\n\nThe Enjoy engine is designed for multiple purposes; different modules within the same project can use different Engine instances for different purposes. Thus, they need to be configured separately, and their configurations are independent and do not interfere with each other.\n\nFor example, jfinal\'s Controller.render(String) and SQL management features like Model.template(...), Db.template(...), Db.getSqlPara(...) each use different Engine instances, so they need to be configured separately and at entirely different locations.\n\nConfiguration for the Engine instance used in Controller.render(String) is done in configEngine(Engine me):\n\npublic void configEngine(Engine me) {\n  // Set devMode to true to enable template hot reloading\n  me.setDevMode(true);\n}\n\n\n1\n2\n3\n4\n\n\nConfiguration for the Engine instance used in SQL management is done in configPlugin(Plugins me):\n\npublic void configPlugin(Plugins me) {\n  ActiveRecordPlugin arp = new ActiveRecordPlugin(...);\n  Engine engine = arp.getEngine();\n  \n  // Code above gets the Engine instance used for SQL management; you can start configuring it now.\n  engine.setToClassPathSourceFactory();\n  engine.addSharedMethod(new StrKit());\n  \n  me.add(arp);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nCommon mistake: Some people configure the SQL management Engine instance within configEngine(Engine me), causing configuration mismatches.\n\nSimilarly, any Engine instances you create yourself also need separate configurations:\n\nEngine engine = Engine.create("myEngine");\nengine.setDevMode(true);\n\n\n1\n2\n\n\n\n# 3. Managing Multiple Engine Instances\n\nEngine instances created using Engine.create(engineName) can be conveniently retrieved at any location using Engine.use(engineName), making it very convenient to manage multiple Engine instances. For example:\n\n// Create an Engine instance and configure it\nEngine forEmail = Engine.create("forEmail");\nforEmail.addSharedMethod(EmailKit.class);\nforEmail.addSharedFunction("email-function.txt");\n \n// Create another Engine instance and configure it\nEngine forWeixin = Engine.create("forWeixin");\nforWeixin.addSharedMethod(WeixinKit.class);\nforWeixin.addSharedFunction("weixin-function.txt");\n\n// Use the Engine instance named "forEmail"\nString ret = Engine.use("forEmail").getTemplate("email-template.txt").renderToString(...);\nSystem.out.print(ret);\n \n// Use the Engine instance named "forWeixin"\nString ret = Engine.use("forWeixin").getTemplate("weixin-template.txt").renderToString(...);\nSystem.out.print(ret);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\nAs shown in the code above, Engine.use(...) allows you to retrieve Engine instances created by Engine.create(...). This feature not only facilitates independent configuration but also independent retrieval and usage.\n\n\n# 4. Hot Reloading Configuration\n\nTo achieve maximum performance, the Enjoy engine caches template parsing results by default. Thus, changes to templates will not take effect after they\'ve been loaded unless the following configuration is applied:\n\nengine.setDevMode(true);\n\n\n1\n\n\nSetting it to devMode is essential for improving development efficiency in a development environment.\n\nAs the template parsing speed of Enjoy is about seven times faster than that of template engines like Freemarker and Velocity, and it also checks for template modifications, it\'s highly recommended to enable hot reloading by setting setDevMode(true) in most cases, unless your project is in an extremely high-performance scenario.\n\n\n# 5. Shared Template Function Configuration\n\nIf you define template functions using the #define directive in a template and wish to use these template functions in other templates, you can configure as follows:\n\n// Add shared functions, which can be used anywhere afterwards\nme.addSharedFunction("/view/common/layout.html");\n\n\n1\n2\n\n\nThe code above adds a shared function template file layout.html, which uses the #define directive to define template functions. With this configuration, you can use the template functions defined in layout.html directly in any other place.\n\n\n# 6. Loading Templates from Class Path and JARs\n\nIf your template files are located within the project\'s class path or inside a JAR file (Note: Maven project\'s src/main/resources is also part of the class path), you can configure using me.setToClassPathSourceFactory() and me.setBaseTemplatePath(null). Here\'s a code example:\n\npublic void configEngine(Engine me) {\n   me.setDevMode(true);\n \n   me.setBaseTemplatePath(null);\n   me.setToClassPathSourceFactory();\n \n   me.addSharedFunction("/view/common/layout.html");\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nEnjoy engine comes with FileSourceFactory and ClassPathSourceFactory to configure where templates are loaded from—either from the file system or from the class path and JAR files. The former is the default configuration, while the latter can be set using engine.setToClassPathSourceFactory().\n\nYou can also implement the ISourceFactory interface to extend your own strategy for loading templates from any source. Then switch to your extended strategy using engine.setSourceFactory(...).\n\nFurthermore, you can implement the ISource interface and load template content through engine.get(new MySource(...)). Some users have already implemented DbSource to load templates from databases.\n\n\n# 7. Development in Eclipse\n\nWhen developing in Eclipse, you can disable automatic validation in the Validation settings by deselecting \'Html Syntax Validator\'. This is because Eclipse cannot recognize the directives used by Enjoy, leading to yellow underlines beneath the directives, which is aesthetically unpleasing. For the specific configuration method, see the image below:\n\n\nAfter completing the configuration, make sure to restart Eclipse for the changes to take effect. This operation does not affect functionality and is solely for improving code aesthetics, catering to perfectionists under the Virgo zodiac.',normalizedContent:'# 6.2 engine configuration\n\n\n# 1. configuration entry point\n\nthe entry point for configuring the enjoy engine is unified within the engine class. the engine class provides a series of setter methods to guide the configuration, reducing the cognitive load. for example:\n\n// enable hot reloading of templates, recommended to be set as true in most production environments, unless in extreme high-performance scenarios.\nengine.setdevmode(true);\n\n// add shared template functions\nengine.addsharedfunction("_layout.html");\n\n// enable fast mode, improves performance by 13%\nengine.setfastmode(true);\n\n// new in jfinal 4.9.02: support for chinese expressions, variable names, method names, and template function names.\nengine.setchineseexpression(true);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\nnote: engine.settoclasspathsourcefactory(), engine.setbasetemplatepath(...), and engine.setdevmode(...) should be placed at the beginning as subsequent configurations like engine.addsharedfunction(...) depend on these.\n\njfinal 4.9 introduced html compression, which can be configured as follows:\n\n// enable html compression, the separator character can be configured as \'\\n\' or \' \'\nengine.setcompressoron(\' \');\n\n\n1\n2\n\n\nthis feature benefits high-concurrency web applications by saving bandwidth and improving efficiency. after configuration, the generated html content will look like the following:\n\n\nnote: this feature only supports html compression. if html contains inline javascript, and the script includes single-line comments or missing semicolons, errors may occur. for example, the following javascript code:\n\n// this is a js comment\nvar s1 = "hello"\nvar s2 = "james"\ns3 = s1 + s2\n\n\n1\n2\n3\n4\n\n\nhere, the js code contains single-line comments and missing semicolons at the end of some statements. for such html templates, use a newline character as the compression separator:\n\n// use newline character as separator\nengine.setcompressoron(\'\\n\');\n\n\n1\n2\n\n\nthis configuration yields the same compression rate as using a space character, but the compressed html is more readable. if your html contains javascript, it\'s strongly advised to use this setting.\n\njfinal 4.9 introduced addenum(...) to support enum types:\n\n// assume the following enum definition\npublic enum usertype {\n    admin,\n    user;\n    \n    public string hello() {\n        return "hello";\n    }\n}\n        \n// add configuration for the enum\nengine.addenum(usertype.class);\n \n// usage in template\n### the object \'u\' is passed via controller\'s setattr("u", usertype.admin)\n#if(u == usertype.admin)\n    #(usertype.admin)\n \n    ### the following two lines demonstrate direct method calls\n    #(usertype.admin.hello())   \n#end\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\njfinal 4.9.02 introduced new configurations to support chinese expressions, variable names, method names, and template function names:\n\nengine.setchineseexpression(true);\n\n\n1\n\n\n\n# 2. configuring multiple engine instances\n\nthe enjoy engine is designed for multiple purposes; different modules within the same project can use different engine instances for different purposes. thus, they need to be configured separately, and their configurations are independent and do not interfere with each other.\n\nfor example, jfinal\'s controller.render(string) and sql management features like model.template(...), db.template(...), db.getsqlpara(...) each use different engine instances, so they need to be configured separately and at entirely different locations.\n\nconfiguration for the engine instance used in controller.render(string) is done in configengine(engine me):\n\npublic void configengine(engine me) {\n  // set devmode to true to enable template hot reloading\n  me.setdevmode(true);\n}\n\n\n1\n2\n3\n4\n\n\nconfiguration for the engine instance used in sql management is done in configplugin(plugins me):\n\npublic void configplugin(plugins me) {\n  activerecordplugin arp = new activerecordplugin(...);\n  engine engine = arp.getengine();\n  \n  // code above gets the engine instance used for sql management; you can start configuring it now.\n  engine.settoclasspathsourcefactory();\n  engine.addsharedmethod(new strkit());\n  \n  me.add(arp);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\ncommon mistake: some people configure the sql management engine instance within configengine(engine me), causing configuration mismatches.\n\nsimilarly, any engine instances you create yourself also need separate configurations:\n\nengine engine = engine.create("myengine");\nengine.setdevmode(true);\n\n\n1\n2\n\n\n\n# 3. managing multiple engine instances\n\nengine instances created using engine.create(enginename) can be conveniently retrieved at any location using engine.use(enginename), making it very convenient to manage multiple engine instances. for example:\n\n// create an engine instance and configure it\nengine foremail = engine.create("foremail");\nforemail.addsharedmethod(emailkit.class);\nforemail.addsharedfunction("email-function.txt");\n \n// create another engine instance and configure it\nengine forweixin = engine.create("forweixin");\nforweixin.addsharedmethod(weixinkit.class);\nforweixin.addsharedfunction("weixin-function.txt");\n\n// use the engine instance named "foremail"\nstring ret = engine.use("foremail").gettemplate("email-template.txt").rendertostring(...);\nsystem.out.print(ret);\n \n// use the engine instance named "forweixin"\nstring ret = engine.use("forweixin").gettemplate("weixin-template.txt").rendertostring(...);\nsystem.out.print(ret);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\nas shown in the code above, engine.use(...) allows you to retrieve engine instances created by engine.create(...). this feature not only facilitates independent configuration but also independent retrieval and usage.\n\n\n# 4. hot reloading configuration\n\nto achieve maximum performance, the enjoy engine caches template parsing results by default. thus, changes to templates will not take effect after they\'ve been loaded unless the following configuration is applied:\n\nengine.setdevmode(true);\n\n\n1\n\n\nsetting it to devmode is essential for improving development efficiency in a development environment.\n\nas the template parsing speed of enjoy is about seven times faster than that of template engines like freemarker and velocity, and it also checks for template modifications, it\'s highly recommended to enable hot reloading by setting setdevmode(true) in most cases, unless your project is in an extremely high-performance scenario.\n\n\n# 5. shared template function configuration\n\nif you define template functions using the #define directive in a template and wish to use these template functions in other templates, you can configure as follows:\n\n// add shared functions, which can be used anywhere afterwards\nme.addsharedfunction("/view/common/layout.html");\n\n\n1\n2\n\n\nthe code above adds a shared function template file layout.html, which uses the #define directive to define template functions. with this configuration, you can use the template functions defined in layout.html directly in any other place.\n\n\n# 6. loading templates from class path and jars\n\nif your template files are located within the project\'s class path or inside a jar file (note: maven project\'s src/main/resources is also part of the class path), you can configure using me.settoclasspathsourcefactory() and me.setbasetemplatepath(null). here\'s a code example:\n\npublic void configengine(engine me) {\n   me.setdevmode(true);\n \n   me.setbasetemplatepath(null);\n   me.settoclasspathsourcefactory();\n \n   me.addsharedfunction("/view/common/layout.html");\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nenjoy engine comes with filesourcefactory and classpathsourcefactory to configure where templates are loaded from—either from the file system or from the class path and jar files. the former is the default configuration, while the latter can be set using engine.settoclasspathsourcefactory().\n\nyou can also implement the isourcefactory interface to extend your own strategy for loading templates from any source. then switch to your extended strategy using engine.setsourcefactory(...).\n\nfurthermore, you can implement the isource interface and load template content through engine.get(new mysource(...)). some users have already implemented dbsource to load templates from databases.\n\n\n# 7. development in eclipse\n\nwhen developing in eclipse, you can disable automatic validation in the validation settings by deselecting \'html syntax validator\'. this is because eclipse cannot recognize the directives used by enjoy, leading to yellow underlines beneath the directives, which is aesthetically unpleasing. for the specific configuration method, see the image below:\n\n\nafter completing the configuration, make sure to restart eclipse for the changes to take effect. this operation does not affect functionality and is solely for improving code aesthetics, catering to perfectionists under the virgo zodiac.',charsets:{}},{title:"6.3 Expressions",frontmatter:{},regularPath:"/en/6%20Enjoy%20template%20engine/6.3%20Expression.html",relativePath:"en/6 Enjoy template engine/6.3 Expression.md",key:"v-14710da1",path:"/en/6%20Enjoy%20template%20engine/6.3%20Expression.html",headers:[{level:3,title:"1. Expressions With Basic Java Rules",slug:"_1-expressions-with-basic-java-rules",normalizedTitle:"1. expressions with basic java rules",charIndex:787},{level:3,title:"2. Property Access",slug:"_2-property-access",normalizedTitle:"2. property access",charIndex:1771},{level:3,title:"3. Method Calls",slug:"_3-method-calls",normalizedTitle:"3. method calls",charIndex:2605},{level:3,title:"4. Static Property Access",slug:"_4-static-property-access",normalizedTitle:"4. static property access",charIndex:3496},{level:3,title:"5. Static Method Calls",slug:"_5-static-method-calls",normalizedTitle:"5. static method calls",charIndex:4783},{level:3,title:"6. Optional Chaining Operator ?. (New in 5.0.0)",slug:"_6-optional-chaining-operator-new-in-5-0-0",normalizedTitle:"6. optional chaining operator ?. (new in 5.0.0)",charIndex:6029},{level:3,title:"7. Null-Coalescing Safe Access Operator",slug:"_7-null-coalescing-safe-access-operator",normalizedTitle:"7. null-coalescing safe access operator",charIndex:6848},{level:3,title:"8. Single-Quoted Strings",slug:"_8-single-quoted-strings",normalizedTitle:"8. single-quoted strings",charIndex:8197},{level:3,title:"9. Enhanced Equality and Inequality Expressions",slug:"_9-enhanced-equality-and-inequality-expressions",normalizedTitle:"9. enhanced equality and inequality expressions",charIndex:8753},{level:3,title:"10. Enhanced Boolean Expressions",slug:"_10-enhanced-boolean-expressions",normalizedTitle:"10. enhanced boolean expressions",charIndex:9279},{level:3,title:"11. Map Definition Expressions",slug:"_11-map-definition-expressions",normalizedTitle:"11. map definition expressions",charIndex:9926},{level:3,title:"12. Array Definition Expressions",slug:"_12-array-definition-expressions",normalizedTitle:"12. array definition expressions",charIndex:11597},{level:3,title:"13. Range Array Definition Expressions",slug:"_13-range-array-definition-expressions",normalizedTitle:"13. range array definition expressions",charIndex:12403},{level:3,title:"14. Comma Expressions",slug:"_14-comma-expressions",normalizedTitle:"14. comma expressions",charIndex:12906},{level:3,title:"15. Removed Operators from Java",slug:"_15-removed-operators-from-java",normalizedTitle:"15. removed operators from java",charIndex:13182},{level:3,title:"16. Summary of Expressions",slug:"_16-summary-of-expressions",normalizedTitle:"16. summary of expressions",charIndex:13417}],lastUpdated:"9/22/2023, 4:50:57 AM",lastUpdatedTimestamp:1695358257e3,headersStr:"1. Expressions With Basic Java Rules 2. Property Access 3. Method Calls 4. Static Property Access 5. Static Method Calls 6. Optional Chaining Operator ?. (New in 5.0.0) 7. Null-Coalescing Safe Access Operator 8. Single-Quoted Strings 9. Enhanced Equality and Inequality Expressions 10. Enhanced Boolean Expressions 11. Map Definition Expressions 12. Array Definition Expressions 13. Range Array Definition Expressions 14. Comma Expressions 15. Removed Operators from Java 16. Summary of Expressions",content:'# 6.3 Expressions\n\nThe Enjoy Template Engine\'s expression rules are generally in line with Java\'s expression rules, with only a few intuitive extensions aimed at improving the developer experience.\n\nOne key point to reiterate about expressions is that they are directly integrated with Java. Grasping this point will allow you to understand 90% of the template engine\'s usage. Here are some code examples:\n\n123 + "abc"\n"abcd".substring(0, 1)\nuserList.get(0).getName()\n\n\n1\n2\n3\n\n\nIn the above code, the first and second lines are used exactly the same way as in Java expressions. In the third line, assuming userList contains User objects and that User has a getName() method, you can call an object\'s methods just like you would in Java, as long as you know the type of the variable.\n\n\n# 1. Expressions With Basic Java Rules\n\n * Arithmetic operations: + - * / % ++ --\n * Comparison operations: > >= < <= == != (basic usage is the same, enhancements will be discussed later)\n * Logical operations: ! && ||\n * Ternary expression: ? :\n * Null constant: null\n * String constant: "jfinal club"\n * Boolean constant: true false\n * Numeric constant: 123 456F 789L 0.1D 0.2E10\n * Array access: array[i] (Maps are enhanced to support map[key])\n * Property access: object.field (Maps are enhanced to support map.key)\n * Method call: object.method(p1, p2…, pn) (Supports variable parameters)\n\nComma expression: 123, 1>2, null, "abc", 3+6 (The value of the comma expression is the value of the last expression)\n\nPro Tip: If a key in a map from the Java side is in Chinese, you can access it using map["中文"] instead of map.中文, as the engine will treat it as object.field, which by default doesn\'t support Chinese characters. You can enable it via Engine.setChineseExpression(true).\n\n\n# 2. Property Access\n\nDue to the frequent use of property access expressions in the template engine, intuitive extensions have been made. For example, with user.name:\n\n * If user.getName() exists, it takes precedence.\n * If user has a public name attribute, it will be used.\n * If user is a subclass of Model, user.get("name") will be called.\n * If user is a Record, user.get("name") will be called.\n * If user is a Map, user.get("name") will be called.\n\nIn addition, array length can be accessed via array.length, just like in Java.\n\nLastly, you can extend property access using the FieldGetter abstract class. For instance, the following configuration supports calling a boolean isGirl() method via the user.girl expression:\n\nEngine.addFieldGetterToFirst(new com.jfinal.template.expr.ast.FieldGetters.IsMethodFieldGetter());\n\n\n1\n\n\n\n# 3. Method Calls\n\nThe template engine is designed to be directly integrated with Java, allowing you to call any public method on an object in the template. The rules are consistent with how you call methods in Java. For example:\n\n#("ABCDE".substring(0, 3))\n#(girl.getAge())\n#(list.size())\n#(map.get(key))\n\n\n1\n2\n3\n4\n\n\nIn the first line, the substring(0, 3) method on the String object is called, and the output is "ABC". The second line can be called when the girl object has a getAge() method. The third line can be called assuming map is a Map type.\n\nIn short, you can directly call any public method that an object owns in the template expression. The method call supports variable parameters, e.g., obj.find(String sql, Object … args).\n\nSince the object method call is directly integrated with Java, the learning curve is zero, and you immediately gain a powerful extension mechanism.\n\n\n# 4. Static Property Access\n\nStarting from JFinal 5.0.2, this expression is "disabled" by default and needs to be enabled with the following configuration:\n\nengine.setStaticFieldExpression(true);\n\n\n1\n\n\nStatic properties defined in Java code can be accessed in the template. For example:\n\n#if(x.status == com.demo.common.model.Account::STATUS_LOCK_ID)\n   <span>(Account Locked)</span>\n#end\n\n\n1\n2\n3\n\n\nHere, the static property is accessed using the class name followed by a double colon and the static property name. This way, you can avoid using specific constant values in the template, making it easier to refactor code later.\n\nNote that the property must be declared as public static to be accessible. Also, it doesn\'t have to be final.\n\nIf a static property is frequently used, you can add it as a shared object via addSharedObject(...) and then refer to it using the field expression, which saves some code. For example, you can first configure the shared object like this:\n\npublic void configEngine(Engine me) {\n    me.addSharedObject("Account", new Account());\n}\n\n\n1\n2\n3\n\n\nAnd then, you can use the field expression to replace the original static property access expression in the template:\n\n#if(x.status == Account.STATUS_LOCK_ID)\n   <span>(Account Locked)</span>\n#end\n\n\n1\n2\n3\n\n\n\n# 5. Static Method Calls\n\nStarting from JFinal 5.0.2, this expression is "disabled" by default and needs to be enabled with the following configuration:\n\nengine.setStaticMethodExpression(true);\n\n\n1\n\n\nThe Enjoy Template Engine can call static methods in a very simple manner. Here\'s an example:\n\n#if(com.jfinal.kit.StrKit::isBlank(title))\n   ....\n#end\n\n\n1\n2\n3\n\n\nThe usage is consistent with static property access; you just replace the static property name with the static method name and add a pair of parentheses and parameters: Class Name + :: + Method Name(Parameters). Static method calls support variable parameters. And like static properties, the methods being called must be public static.\n\nIf you find it cumbersome to write out the package name, you can add the method as a shared method using me.addSharedMethod(...), and then you can call it directly using the method name without even needing the class name.\n\nAdditionally, you can also call methods on static properties. For example:\n\n(com.jfinal.MyKit::me).method(paras)\n\n\n1\n\n\nIn the above code, you first use a pair of parentheses to enclose the static property access expression and then call its method. The parentheses here are only to change the priority of the expression.\n\n\n# 6. Optional Chaining Operator ?. (New in 5.0.0)\n\nJFinal 5.0.0 introduced the optional chain operator, which can be used as follows:\n\n# When article is null, title is not accessed and null is returned\narticle?.title\n\n# Can be used for method calls\narticle?.getTitle()\n\n# Can be used for chained operations\npage?.list?.size()\n\n# Can be used after a method call to avoid exceptions if getList() returns null\npage?.getList()?.size()\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\nThe optional chaining operator can be used when you\'re accessing a field or calling a method on an object that might be null, thereby preventing exceptions. Note that this operator will always return null if the object is null. If you need to return other default values, you can use the "null-coalescing safe access operator" discussed in the next section.\n\n\n# 7. Null-Coalescing Safe Access Operator\n\nThe Enjoy Template Engine has introduced the null-coalescing operator from Swift and C#, with some very natural extensions. The expression symbol for this is two closely placed question marks: ??. Here\'s a code example:\n\nseoTitle ?? "JFinal Community"\nobject.field ??\nobject.method() ??\n\n\n1\n2\n3\n\n\nThe first line is equivalent in functionality to Swift, where if seoTitle is null, the whole expression takes the value of the following expression. The second line provides null-safe property access for object.field, meaning the expression won\'t throw an exception if object is null, and its value will be null.\n\nThe third line is similar to the second but uses a method call instead of property access. Here as well, if object is null, the expression will not throw an exception, and its value will be null.\n\nOf course, null-coalescing and null-safety can be naturally mixed, as shown below:\n\nobject.field ?? "Default Value"\nobject.method() ?? value\n\n\n1\n2\n\n\nIn these lines, if the null-safe property or method call returns null, the entire expression will take the value from the variable after the ??.\n\nSpecial Note: The ?? operator has higher precedence than arithmetic operators (+, -, *, /, %) but lower precedence than unary operators (!, ++, --). To forcibly change the precedence, use parentheses.\n\n\n# 8. Single-Quoted Strings\n\nGiven that the Template Engine is often used for HTML applications, support for single-quoted strings has been added. For example:\n\n<a href="/" class="#(menu == \'index\' ? \'current\' : \'normal\')"\n   Home\n</a>\n\n\n1\n2\n3\n\n\nIn the above code, single-quoted strings are used three times within a ternary expression. This is convenient because it can work in conjunction with outer double quotes, or vice versa.\n\nThis design is very beneficial when writing string expressions within existing single or double quotes in template files.\n\n\n# 9. Enhanced Equality and Inequality Expressions\n\nThe equality (==) and inequality (!=) expressions perform a left.equals(right) comparison, so you can directly compare strings. For example:\n\n#if(nickName == "james")\n  ...\n#end\n\n\n1\n2\n3\n\n\nNote: The Controller.keepPara(...) method will convert any data to String before passing it to the view layer. Hence, two Integer types that could be compared using the equality expression become uncomparable after keepPara(...), as it becomes a comparison between String and Integer.\n\n\n# 10. Enhanced Boolean Expressions\n\nBoolean expressions have been enhanced to reduce code input. The rules, in order of priority, are as follows:\n\n * null returns false\n * boolean types return their original value\n * Strings and any objects inheriting from CharSequence return length > 0\n * Everything else returns true\n\nThese rules can reduce the amount of code in templates. For example:\n\n#if(user && user.id == x.userId)\n  ...\n#end\n\n\n1\n2\n3\n\n\nIn this code, the user expression effectively replaces the Java expression user != null, thus reducing code. Of course, if you use the ?? operator, it can be even simpler: if (user.id ?? == x.userId)\n\n\n# 11. Map Definition Expressions\n\nThe most useful scenario for defining a Map expression is to provide a very flexible way of passing parameters when calling methods or functions, especially when the names and numbers of parameters are not determined. Here is the basic usage:\n\n#set(map = {k1:123, "k2":"abc", "k3":object})\n#(map.k1)\n#(map.k2)\n#(map["k1"])\n#(map["k2"])\n#(map.get("k1"))\n\n\n1\n2\n3\n4\n5\n6\n\n\nIn this example, a Map is defined using a pair of curly braces, with each element defined in the form of key: value. Multiple elements are separated by commas.\n\nKeys can only be valid Java variable identifiers or String constant values. Note that using an identifier like k1 rather than a String constant like "k1" is just for convenience in writing; it\'s equivalent to a string and doesn\'t evaluate the identifier k1.\n\nThe code uses the #set directive to assign the defined variable to the map variable. The second and third lines use object.field for value access, while the fourth and fifth lines use map[key] for value access. The sixth line is consistent with Java expression usage.\n\nSpecial Note: In the above code, if you try to access the value using map[k1], k1 will first be evaluated, resulting in null. Therefore, the code uses map["k1"] to access the value.\n\nAdditionally, Map retrieval also supports value retrieval during definition:\n\n#({1:\'Buy for yourself\', 2:\'Follow purchase\'}.get(1))\n#({1:\'Buy for yourself\', 2:\'Follow purchase\'}[2])\n\n### Use with double question marks to support default values\n#({1:\'Buy for yourself\', 2:\'Follow purchase\'}.get(999) ?? \'Others\')\n\n\n1\n2\n3\n4\n5\n\n\nThe keys here are int constants, supported from JFinal version 3.4.\n\n\n# 12. Array Definition Expressions\n\nLet\'s go straight to an example:\n\n// Define the array \'array\' and assign default values to its elements\n#set(array = [123, "abc", true])\n\n// Get the value at index 1, output: "abc"\n#(array[1])\n\n// Assign \'false\' to the element at index 1 and output it\n#(array[1] = false, array[1])\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nThis code demonstrates array definition, initialization, data retrieval, and assignment. The last line does not use the #set directive, meaning array definition expressions can be used in any directive internally (Map definition expressions can do the same).\n\nArray definition expressions can use any expression for element initialization, including variables, method call return values, etc.:\n\n#set(array = [123, "abc", true, a && b || c, 1 + 2, obj.doIt(x)])\n\n\n1\n\n\n\n# 13. Range Array Definition Expressions\n\nLet\'s go straight to an example:\n\n#for(x : [1..10])\n   #(x)\n#end\n\n\n1\n2\n3\n\n\nIn this example, the expression [1..10] defines a range array containing integers from 1 to 10. This is typically useful for frontend development, where you might want to iterate over a set of static data without having to retrieve it from the backend.\n\nAdditionally, descending range arrays are also supported, like [10..1], which will define an array of integers from 10 down to 1.\n\n\n# 14. Comma Expressions\n\nAn expression that combines multiple expressions separated by commas is known as a comma expression. The value of a comma expression is the value of the last expression in the sequence. For example, the value of the comma expression 1+2, 3*4 is 12.\n\n\n# 15. Removed Operators from Java\n\nConsidering the use-cases for template engines, bitwise operators have been removed to avoid complexity and to keep the template engine straightforward, thus also potentially improving performance.\n\n\n# 16. Summary of Expressions\n\nThe various expression capabilities described above are primarily extensions built on top of Java expression rules for enhanced development experience. You can also ignore these specific capabilities and use them as you would Java expressions, thus eliminating the learning curve.\n\nThe aforementioned extensions built on top of Java expression rules serve two main purposes:\n\n 1. They are added based on actual use-cases of template engines, such as single-quoted strings.\n 2. They are improvements over verbose Java syntax. For example, string comparisons like str == "james" replace str.equals("james").\n\nTherefore, these extensions are both valuable and necessary.',normalizedContent:'# 6.3 expressions\n\nthe enjoy template engine\'s expression rules are generally in line with java\'s expression rules, with only a few intuitive extensions aimed at improving the developer experience.\n\none key point to reiterate about expressions is that they are directly integrated with java. grasping this point will allow you to understand 90% of the template engine\'s usage. here are some code examples:\n\n123 + "abc"\n"abcd".substring(0, 1)\nuserlist.get(0).getname()\n\n\n1\n2\n3\n\n\nin the above code, the first and second lines are used exactly the same way as in java expressions. in the third line, assuming userlist contains user objects and that user has a getname() method, you can call an object\'s methods just like you would in java, as long as you know the type of the variable.\n\n\n# 1. expressions with basic java rules\n\n * arithmetic operations: + - * / % ++ --\n * comparison operations: > >= < <= == != (basic usage is the same, enhancements will be discussed later)\n * logical operations: ! && ||\n * ternary expression: ? :\n * null constant: null\n * string constant: "jfinal club"\n * boolean constant: true false\n * numeric constant: 123 456f 789l 0.1d 0.2e10\n * array access: array[i] (maps are enhanced to support map[key])\n * property access: object.field (maps are enhanced to support map.key)\n * method call: object.method(p1, p2…, pn) (supports variable parameters)\n\ncomma expression: 123, 1>2, null, "abc", 3+6 (the value of the comma expression is the value of the last expression)\n\npro tip: if a key in a map from the java side is in chinese, you can access it using map["中文"] instead of map.中文, as the engine will treat it as object.field, which by default doesn\'t support chinese characters. you can enable it via engine.setchineseexpression(true).\n\n\n# 2. property access\n\ndue to the frequent use of property access expressions in the template engine, intuitive extensions have been made. for example, with user.name:\n\n * if user.getname() exists, it takes precedence.\n * if user has a public name attribute, it will be used.\n * if user is a subclass of model, user.get("name") will be called.\n * if user is a record, user.get("name") will be called.\n * if user is a map, user.get("name") will be called.\n\nin addition, array length can be accessed via array.length, just like in java.\n\nlastly, you can extend property access using the fieldgetter abstract class. for instance, the following configuration supports calling a boolean isgirl() method via the user.girl expression:\n\nengine.addfieldgettertofirst(new com.jfinal.template.expr.ast.fieldgetters.ismethodfieldgetter());\n\n\n1\n\n\n\n# 3. method calls\n\nthe template engine is designed to be directly integrated with java, allowing you to call any public method on an object in the template. the rules are consistent with how you call methods in java. for example:\n\n#("abcde".substring(0, 3))\n#(girl.getage())\n#(list.size())\n#(map.get(key))\n\n\n1\n2\n3\n4\n\n\nin the first line, the substring(0, 3) method on the string object is called, and the output is "abc". the second line can be called when the girl object has a getage() method. the third line can be called assuming map is a map type.\n\nin short, you can directly call any public method that an object owns in the template expression. the method call supports variable parameters, e.g., obj.find(string sql, object … args).\n\nsince the object method call is directly integrated with java, the learning curve is zero, and you immediately gain a powerful extension mechanism.\n\n\n# 4. static property access\n\nstarting from jfinal 5.0.2, this expression is "disabled" by default and needs to be enabled with the following configuration:\n\nengine.setstaticfieldexpression(true);\n\n\n1\n\n\nstatic properties defined in java code can be accessed in the template. for example:\n\n#if(x.status == com.demo.common.model.account::status_lock_id)\n   <span>(account locked)</span>\n#end\n\n\n1\n2\n3\n\n\nhere, the static property is accessed using the class name followed by a double colon and the static property name. this way, you can avoid using specific constant values in the template, making it easier to refactor code later.\n\nnote that the property must be declared as public static to be accessible. also, it doesn\'t have to be final.\n\nif a static property is frequently used, you can add it as a shared object via addsharedobject(...) and then refer to it using the field expression, which saves some code. for example, you can first configure the shared object like this:\n\npublic void configengine(engine me) {\n    me.addsharedobject("account", new account());\n}\n\n\n1\n2\n3\n\n\nand then, you can use the field expression to replace the original static property access expression in the template:\n\n#if(x.status == account.status_lock_id)\n   <span>(account locked)</span>\n#end\n\n\n1\n2\n3\n\n\n\n# 5. static method calls\n\nstarting from jfinal 5.0.2, this expression is "disabled" by default and needs to be enabled with the following configuration:\n\nengine.setstaticmethodexpression(true);\n\n\n1\n\n\nthe enjoy template engine can call static methods in a very simple manner. here\'s an example:\n\n#if(com.jfinal.kit.strkit::isblank(title))\n   ....\n#end\n\n\n1\n2\n3\n\n\nthe usage is consistent with static property access; you just replace the static property name with the static method name and add a pair of parentheses and parameters: class name + :: + method name(parameters). static method calls support variable parameters. and like static properties, the methods being called must be public static.\n\nif you find it cumbersome to write out the package name, you can add the method as a shared method using me.addsharedmethod(...), and then you can call it directly using the method name without even needing the class name.\n\nadditionally, you can also call methods on static properties. for example:\n\n(com.jfinal.mykit::me).method(paras)\n\n\n1\n\n\nin the above code, you first use a pair of parentheses to enclose the static property access expression and then call its method. the parentheses here are only to change the priority of the expression.\n\n\n# 6. optional chaining operator ?. (new in 5.0.0)\n\njfinal 5.0.0 introduced the optional chain operator, which can be used as follows:\n\n# when article is null, title is not accessed and null is returned\narticle?.title\n\n# can be used for method calls\narticle?.gettitle()\n\n# can be used for chained operations\npage?.list?.size()\n\n# can be used after a method call to avoid exceptions if getlist() returns null\npage?.getlist()?.size()\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\nthe optional chaining operator can be used when you\'re accessing a field or calling a method on an object that might be null, thereby preventing exceptions. note that this operator will always return null if the object is null. if you need to return other default values, you can use the "null-coalescing safe access operator" discussed in the next section.\n\n\n# 7. null-coalescing safe access operator\n\nthe enjoy template engine has introduced the null-coalescing operator from swift and c#, with some very natural extensions. the expression symbol for this is two closely placed question marks: ??. here\'s a code example:\n\nseotitle ?? "jfinal community"\nobject.field ??\nobject.method() ??\n\n\n1\n2\n3\n\n\nthe first line is equivalent in functionality to swift, where if seotitle is null, the whole expression takes the value of the following expression. the second line provides null-safe property access for object.field, meaning the expression won\'t throw an exception if object is null, and its value will be null.\n\nthe third line is similar to the second but uses a method call instead of property access. here as well, if object is null, the expression will not throw an exception, and its value will be null.\n\nof course, null-coalescing and null-safety can be naturally mixed, as shown below:\n\nobject.field ?? "default value"\nobject.method() ?? value\n\n\n1\n2\n\n\nin these lines, if the null-safe property or method call returns null, the entire expression will take the value from the variable after the ??.\n\nspecial note: the ?? operator has higher precedence than arithmetic operators (+, -, *, /, %) but lower precedence than unary operators (!, ++, --). to forcibly change the precedence, use parentheses.\n\n\n# 8. single-quoted strings\n\ngiven that the template engine is often used for html applications, support for single-quoted strings has been added. for example:\n\n<a href="/" class="#(menu == \'index\' ? \'current\' : \'normal\')"\n   home\n</a>\n\n\n1\n2\n3\n\n\nin the above code, single-quoted strings are used three times within a ternary expression. this is convenient because it can work in conjunction with outer double quotes, or vice versa.\n\nthis design is very beneficial when writing string expressions within existing single or double quotes in template files.\n\n\n# 9. enhanced equality and inequality expressions\n\nthe equality (==) and inequality (!=) expressions perform a left.equals(right) comparison, so you can directly compare strings. for example:\n\n#if(nickname == "james")\n  ...\n#end\n\n\n1\n2\n3\n\n\nnote: the controller.keeppara(...) method will convert any data to string before passing it to the view layer. hence, two integer types that could be compared using the equality expression become uncomparable after keeppara(...), as it becomes a comparison between string and integer.\n\n\n# 10. enhanced boolean expressions\n\nboolean expressions have been enhanced to reduce code input. the rules, in order of priority, are as follows:\n\n * null returns false\n * boolean types return their original value\n * strings and any objects inheriting from charsequence return length > 0\n * everything else returns true\n\nthese rules can reduce the amount of code in templates. for example:\n\n#if(user && user.id == x.userid)\n  ...\n#end\n\n\n1\n2\n3\n\n\nin this code, the user expression effectively replaces the java expression user != null, thus reducing code. of course, if you use the ?? operator, it can be even simpler: if (user.id ?? == x.userid)\n\n\n# 11. map definition expressions\n\nthe most useful scenario for defining a map expression is to provide a very flexible way of passing parameters when calling methods or functions, especially when the names and numbers of parameters are not determined. here is the basic usage:\n\n#set(map = {k1:123, "k2":"abc", "k3":object})\n#(map.k1)\n#(map.k2)\n#(map["k1"])\n#(map["k2"])\n#(map.get("k1"))\n\n\n1\n2\n3\n4\n5\n6\n\n\nin this example, a map is defined using a pair of curly braces, with each element defined in the form of key: value. multiple elements are separated by commas.\n\nkeys can only be valid java variable identifiers or string constant values. note that using an identifier like k1 rather than a string constant like "k1" is just for convenience in writing; it\'s equivalent to a string and doesn\'t evaluate the identifier k1.\n\nthe code uses the #set directive to assign the defined variable to the map variable. the second and third lines use object.field for value access, while the fourth and fifth lines use map[key] for value access. the sixth line is consistent with java expression usage.\n\nspecial note: in the above code, if you try to access the value using map[k1], k1 will first be evaluated, resulting in null. therefore, the code uses map["k1"] to access the value.\n\nadditionally, map retrieval also supports value retrieval during definition:\n\n#({1:\'buy for yourself\', 2:\'follow purchase\'}.get(1))\n#({1:\'buy for yourself\', 2:\'follow purchase\'}[2])\n\n### use with double question marks to support default values\n#({1:\'buy for yourself\', 2:\'follow purchase\'}.get(999) ?? \'others\')\n\n\n1\n2\n3\n4\n5\n\n\nthe keys here are int constants, supported from jfinal version 3.4.\n\n\n# 12. array definition expressions\n\nlet\'s go straight to an example:\n\n// define the array \'array\' and assign default values to its elements\n#set(array = [123, "abc", true])\n\n// get the value at index 1, output: "abc"\n#(array[1])\n\n// assign \'false\' to the element at index 1 and output it\n#(array[1] = false, array[1])\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nthis code demonstrates array definition, initialization, data retrieval, and assignment. the last line does not use the #set directive, meaning array definition expressions can be used in any directive internally (map definition expressions can do the same).\n\narray definition expressions can use any expression for element initialization, including variables, method call return values, etc.:\n\n#set(array = [123, "abc", true, a && b || c, 1 + 2, obj.doit(x)])\n\n\n1\n\n\n\n# 13. range array definition expressions\n\nlet\'s go straight to an example:\n\n#for(x : [1..10])\n   #(x)\n#end\n\n\n1\n2\n3\n\n\nin this example, the expression [1..10] defines a range array containing integers from 1 to 10. this is typically useful for frontend development, where you might want to iterate over a set of static data without having to retrieve it from the backend.\n\nadditionally, descending range arrays are also supported, like [10..1], which will define an array of integers from 10 down to 1.\n\n\n# 14. comma expressions\n\nan expression that combines multiple expressions separated by commas is known as a comma expression. the value of a comma expression is the value of the last expression in the sequence. for example, the value of the comma expression 1+2, 3*4 is 12.\n\n\n# 15. removed operators from java\n\nconsidering the use-cases for template engines, bitwise operators have been removed to avoid complexity and to keep the template engine straightforward, thus also potentially improving performance.\n\n\n# 16. summary of expressions\n\nthe various expression capabilities described above are primarily extensions built on top of java expression rules for enhanced development experience. you can also ignore these specific capabilities and use them as you would java expressions, thus eliminating the learning curve.\n\nthe aforementioned extensions built on top of java expression rules serve two main purposes:\n\n 1. they are added based on actual use-cases of template engines, such as single-quoted strings.\n 2. they are improvements over verbose java syntax. for example, string comparisons like str == "james" replace str.equals("james").\n\ntherefore, these extensions are both valuable and necessary.',charsets:{cjk:!0}},{title:"6.4 Directives",frontmatter:{},regularPath:"/en/6%20Enjoy%20template%20engine/6.4%20Directive.html",relativePath:"en/6 Enjoy template engine/6.4 Directive.md",key:"v-8bf1188a",path:"/en/6%20Enjoy%20template%20engine/6.4%20Directive.html",headers:[{level:3,title:"1. Output Directive #(...)",slug:"_1-output-directive",normalizedTitle:"1. output directive #(...)",charIndex:1253},{level:3,title:"2. #if Directive",slug:"_2-if-directive",normalizedTitle:"2. #if directive",charIndex:2787},{level:3,title:"3. #for Directive",slug:"_3-for-directive",normalizedTitle:"3. #for directive",charIndex:3423},{level:3,title:"4. #switch Directive (Added in version 3.6)",slug:"_4-switch-directive-added-in-version-3-6",normalizedTitle:"4. #switch directive (added in version 3.6)",charIndex:7683},{level:3,title:"5. #set Directive",slug:"_5-set-directive",normalizedTitle:"5. #set directive",charIndex:8913},{level:3,title:"6. #include Directive",slug:"_6-include-directive",normalizedTitle:"6. #include directive",charIndex:10814},{level:3,title:"7. #render Directive",slug:"_7-render-directive",normalizedTitle:"7. #render directive",charIndex:12172},{level:3,title:"8. #define Directive",slug:"_8-define-directive",normalizedTitle:"8. #define directive",charIndex:12815},{level:3,title:"9. Template Function Calls and #call Directive",slug:"_9-template-function-calls-and-call-directive",normalizedTitle:"9. template function calls and #call directive",charIndex:15065},{level:3,title:"10. #date Directive",slug:"_10-date-directive",normalizedTitle:"10. #date directive",charIndex:16343},{level:3,title:"11. #number Directive",slug:"_11-number-directive",normalizedTitle:"11. #number directive",charIndex:17882},{level:3,title:"12. #escape Directive",slug:"_12-escape-directive",normalizedTitle:"12. #escape directive",charIndex:18806},{level:3,title:"13. Directive Extension",slug:"_13-directive-extension",normalizedTitle:"13. directive extension",charIndex:19120},{level:3,title:"14. Common Mistakes",slug:"_14-common-mistakes",normalizedTitle:"14. common mistakes",charIndex:22597}],lastUpdated:"9/22/2023, 4:50:57 AM",lastUpdatedTimestamp:1695358257e3,headersStr:"1. Output Directive #(...) 2. #if Directive 3. #for Directive 4. #switch Directive (Added in version 3.6) 5. #set Directive 6. #include Directive 7. #render Directive 8. #define Directive 9. Template Function Calls and #call Directive 10. #date Directive 11. #number Directive 12. #escape Directive 13. Directive Extension 14. Common Mistakes",content:'# 6.4 Directives\n\nThe Enjoy Template Engine consistently adheres to a minimalist design. With just seven core directives—#if, #for, #switch, #set, #include, #define, #(...)—it achieves nearly all the functionalities of traditional template engines. The learning curve is almost non-existent for users with a foundation in any programming language.\n\nIf the built-in directives do not meet your needs, you can easily extend them at the template language level. Under the com.jfinal.template.ext.directive package, there are five extended directives. The Active Record SQL module also extends three directives specifically for SQL management. By studying the code for these extended directives, you can easily understand how to create your own, making the process extremely simple.\n\nNote that the extension of Enjoy template engine directives occurs at the lexical and syntactic analysis levels. This is entirely different from the tag-based extensions of traditional template engines. The former allows for comprehensive and flexible use of the engine\'s basic infrastructure, enabling versatile functionalities through very simple and straightforward code. To understand its power and convenience, refer to the SQL management module of Active Record.\n\n\n# 1. Output Directive #(...)\n\nUnlike almost all Java template engines, Enjoy Template Engine eliminates the independent concept of interpolation directives, treating them as one among other directives. This directive uses parentheses as delimiters, just like any other directive, avoiding the need for extra delimiters like curly braces.\n\nUsing the output directive #(...) is very simple; just pass any expression described in Section 6.4. The directive will output the evaluation result of these expressions. Specifically, if the expression evaluates to null, there will be no output and no exceptions will be thrown. For example:\n\n#(value)\n#(object.field)\n#(object.field ??)\n#(a > b ? x : y)\n#(seoTitle ?? "JFinal Club")\n#(object.method(), null)\n\n\n1\n2\n3\n4\n5\n6\n\n\nAs shown above, just pass an expression to the output directive. Note that in the first line, the value parameter can be null. If object is null in the second line, an exception will be thrown. To avoid this, use the null-safe access operator object.field ??.\n\nAdditionally, note the last line in the example. The directive argument is a comma expression, and the directive will only output the last expression in the comma sequence. If the last expression evaluates to null, no output will be generated.\n\nThe output directive can be customized by extending the OutputDirectiveFactory class and overriding its getOutputDirective method. Then you can switch to your custom output directive using me.setOutputDirectiveFactory(...) in the configEngine(Engine me) method.\n\n\n# 2. #if Directive\n\nExample:\n\n#if(cond)\n  ...\n#end\n\n\n1\n2\n3\n\n\nAs shown, the #if directive requires a cond expression and ends with #end. The cond can be any expression introduced in Section 6.3. When cond evaluates to true, the code inside the if block is executed.\n\nThe #if directive naturally supports #else if and #else blocks. Example:\n\n#if(c1)\n  ...\n#else if(c2)\n  ...\n#else if(c3)\n  ...\n#else\n  ...\n#end\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nThe usage of #else if and #else is identical to Java syntax. (Note: In versions prior to JFinal 3.3, you must write #elseif without any space between else and if, otherwise an exception will be thrown.)\n\n\n# 3. #for Directive\n\nThe Enjoy Template Engine offers an extremely user-friendly extension to the #for directive, allowing iteration over any type of data, including null values. Code example:\n\n// Iterating over List, array, Set structures\n#for(x : list)\n  #(x.field)\n#end\n\n// Iterating over a Map\n#for(x : map)\n  #(x.key)\n  #(x.value)\n#end\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nThe first #for directive iterates over a list, and the usage is identical to Java syntax.\n\nThe second #for directive iterates over a map, using item.key and item.value to access the elements. This is an enhancement by Enjoy to reduce code verbosity. You can also use the traditional Java map iteration method: #for(x : map.entrySet()) #(x.key) #(x.value) #end\n\nNote: When the target of iteration is null, you don\'t need to check for null values; the #for directive will automatically skip the iteration, avoiding the need for if checks and thereby improving efficiency.\n\nThe #for directive also allows you to access its state. Code example:\n\n#for(x : listAaa)\n  #(for.index)\n  #(x.field)\n  \n  #for(x : listBbb)\n     #(for.outer.index)\n     #(for.index)\n     #(x.field)\n  #end\n#end\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nIn the code above, #(for.index) and #(for.outer.index) are used to access the current state of the #for directive. The former gets the current iteration index (starting from 0), and the latter allows an inner #for directive to access the state of an outer #for directive.\n\nNote: When #for directives are nested, each has its own variable scope, consistent with Java language rules. For example, the two instances of #(x.field) in the example above are in different #for directive scopes and will correctly access the variable values in their respective scopes.\n\nThe #for directive supports the following states:\n\n#for(x : listAaa)\n   #(for.size)    Size of the iterated object\n   #(for.index)   Index starting from 0\n   #(for.count)   Count starting from 1\n   #(for.first)   Is it the first iteration?\n   #(for.last)    Is it the last iteration?\n   #(for.odd)     Is it an odd iteration?\n   #(for.even)    Is it an even iteration?\n   \n   #(for.outer)        References the state of the outer #for directive\n   #(for.outer.size)   Size of the iterated object in the outer #for directive\n#end\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nThe specific usage is explained in Chinese in the code above.\n\nApart from Map and List, the #for directive also supports Collection, Iterator, array, Iterable, Enumeration, and null value iteration. The usage is identical in form to the earlier List iteration, all being #for(id : target). For null values, the #for directive will directly skip the iteration.\n\nAdditionally, the #for directive supports iteration over any type of object, simply iterating over it once. Example:\n\n#for(x : article)\n   #(x.title)\n#end\n\n\n1\n2\n3\n\n\nIn the example above, article is just a regular Java object, not a collection. The #for loop will iterate over this object just once. The x in the #for expression is the article object itself, so you can use #(x.title) for output\n\nThe #for directive also supports the #else branch. When the number of iterations is zero, the #else block is executed. Example:\n\n#for(blog : blogList)\n   #(blog.title)\n#else\n\nYou haven\'t written any blogs yet. Click here <a href="/blog/add">to start blogging</a>.\n\n#end\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nIn the code above, when blogList.size() is 0 or blogList is null, meaning the number of iterations is zero, the #else branch will execute. This scenario is very common in web projects.\n\nLastly, in addition to the #for directive iteration methods mentioned above, it also supports a more conventional for loop syntax. Code example:\n\n#for(i = 0; i < 100; i++)\n   #(i)\n#end\n\n\n1\n2\n3\n\n\nThe syntax is almost identical to Java, with the only difference being that variable declarations don\'t need types; direct assignment statements suffice. Variables in the Enjoy Template Engine are dynamically typed.\n\nNote: This form of for loop lacks for.size and for.last states, and only supports the following states: for.index, for.count, for.first, for.odd, for.even, for.outer.\n\nThe #for directive also supports #continue and #break commands, and their usage is entirely consistent with Java. Further details are not provided here.\n\n\n# 4. #switch Directive (Added in version 3.6)\n\nThe #switch directive is aligned with Java\'s switch statement, offering similar basic usage but with some improvements for a better user experience. Usage is as follows:\n\n#switch (month)\n  #case (1, 3, 5, 7, 8, 10, 12)\n    #(month) months have 31 days\n  #case (2)\n    #(month) has 28 days in a common year and 29 days in a leap year\n  #default\n    Invalid month: #(month ?? "null")\n#end\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nAs shown in the code above, the #case directive supports multiple arguments separated by commas, effectively eliminating the need for a #break directive. Therefore, the Enjoy Template Engine does not require the use of #break.\n\nParameters for the #case directive can be any expression, such as:\n\n#case (a, b, x + y, "abc", "123")\n\n\n1\n\n\nIn the code above, the comma-separated expressions are first evaluated, and then each is compared to the value in #switch(value). If any of these values match, that #case branch is executed.\n\nThe support for multiple parameters in #case, without the need for #break, not only reduces code but also eliminates potential errors from forgetting to include #break. Also, unlike Java syntax, neither #case nor #default uses a colon character.\n\n\n# 5. #set Directive\n\nThe #set directive is used for variable declaration and assignment. It accepts only assignment expressions or a list of comma-separated assignment expressions. Code example:\n\n#set(x = 123)\n#set(a = 1, b = 2, c = a + b)\n#set(array[0] = 123)\n#set(map["key"] = 456)\n\n#(x)  #(c)  #(array[0])  #(map.key)  #(map["key"])\n\n\n1\n2\n3\n4\n5\n6\n\n\nIn the above code, the first line simply assigns 123 to x. The second line is a list of assignment expressions executed from left to right. If the right-hand side of the equation has an expression, it will be evaluated before assignment. The last line outputs the values of the variables, and other directives can also access these variables like the output directive.\n\nNote that the #for, #include, and #define directives create new variable scopes. The #set directive first looks for the variable in the current scope; if found, it operates on it, otherwise, it continues to the upper scope. If still not found, it defines the variable in the top-level scope. This design is very beneficial for variable value transmission within templates.\n\nTo explicitly specify assignment in the current scope, you can use the #setLocal directive, which has the same parameters and usage as #set but operates only in the current scope. #setLocal is often used within #define and #include to avoid naming conflicts.\n\nImportant: Since assignment expressions are essentially expressions, and other directives inherently support any expression, the #set directive is not mandatory for assignments. For example, assignments can be done in the #() output directive:\n\n#(x = 123, y = "abc", array = [1, "a", true], map = {k1:v1}, null)\n\n\n1\n\n\nThe code above uses multiple assignment expressions in the output directive to achieve the functionality of #set, ending with a null value to avoid any output. Similarly, other directives can also use assignment expressions.\n\n\n# 6. #include Directive\n\nThe #include directive is used to include external template content, which is parsed as part of the current template. Code example:\n\n#include("sidebar.html")\n\n\n1\n\n\nThe first parameter of the #include directive must be a String constant. If it starts with /, it will look for the file relative to baseTemplatePath; otherwise, it will look for the file relative to the current template\'s path.\n\nbaseTemplatePath can be configured in configEngine(Engine me) through me.setBaseTemplatePath(...).\n\nAdditionally, the #include directive supports an unlimited number of assignment expressions, which is very beneficial for modularization. For example, the template file named _hot_list.html is used to display hot projects, hot news, etc.:\n\n<div class="hot-list">\n  <h3>#(title)</h3>\n  <ul>\n    #for(x : list)\n    <li>\n      <a href="#(url)/#(x.id)">#(x.title)</a>\n    </li>\n    #end\n  </ul>\n</div>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nThe variables title, list, and url in the HTML fragment are needed for rendering "Hot Projects" and "Hot News":\n\n#include("_hot_list.html", title="Hot Projects", list=projectList, url="/project")\n#include("_hot_list.html", title="Hot News", list=newsList, url="/news")\n\n\n1\n2\n\n\nIn the two lines above, different values for title, list, and url are passed to _hot_list.html, enabling modular reuse of _hot_list.html.\n\n\n# 7. #render Directive\n\nThe #render directive is nearly identical to #include in usage, supporting an unlimited number of assignment expressions. There are two main differences:\n\n 1. #render supports dynamic template parameters, e.g., #render(temp), where temp can be any expression. In contrast, #include can only use string constants like #include("abc.html").\n\n 2. Functions defined in #render using #define are only effective in its sub-template and are not valid in the parent template. This design is very beneficial for modularization.\n\nThe core purpose of introducing the #render directive is to support dynamic template parameters.\n\n\n# 8. #define Directive\n\nThe #define directive is one of the main ways to extend the template engine. It allows you to define template functions (Template Functions). With #define, you can define reusable template segments as individual template functions, which can be customized by passing in parameters when called.\n\nHere\'s how to use #define to implement a layout feature. First, create a layout.html file with the following code:\n\n#define layout()\n<html>\n  <head>\n    <title>JFinal Club</title>\n  </head>\n  <body>\n    #@content()\n  </body>\n</html>\n#end\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nIn the code above, a template function named layout is defined using #define layout(). It ends with #end. Inside it, #@content() refers to another template function named content.\n\nNote: When calling a template function, an additional @ symbol is used to differentiate it from directive calls.\n\nNext, create another template file as follows:\n\n#include("layout.html")\n#@layout()\n\n#define content()\n<div>\n  This is the template content, similar to the \'nested\' part of traditional template engines.\n</div>\n#end\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nThe first line includes the previously created layout.html. The second line calls the layout template function defined in layout.html, which in turn calls the content function defined in the current file. Simply understand this as function definition and function invocation.\n\nTo make a layout template reusable across many templates, you can set all the template functions in that file as shared by using me.addSharedFunction("layout.html") in configEngine(Engine me). This eliminates the need for #include, reducing code redundancy and improving reusability.\n\nThe Enjoy Template Engine eliminates boring concepts like layout, nested, and macro, thus reducing the learning curve and greatly enhancing extensibility.\n\nTemplate functions support formal parameters, similar to Java but without specifying the parameter type. Here\'s a code example:\n\n#define test(a, b, c)\n  #(a)\n  #(b)\n  #(c)\n#end\n\n\n1\n2\n3\n4\n5\n\n\nTo call this function, you would use:\n\n#@test(123, "abc", user.name)\n\n\n1\n\n\nThe number of formal and actual parameters should match. If you need to pass additional, optional parameters, you can use the #set directive beforehand.\n\n\n# 9. Template Function Calls and #call Directive\n\nTo call a template function defined by #define, use #@name(p1, p2…, pn). Note the additional @ symbol to differentiate it from directive calls.\n\nTemplate functions also support safe invocation, denoted by #@name?(p1, p2…, pn). Safe calls do nothing if the template function is not defined, making them suitable for optional template content. For example:\n\n#define layout()\n<html>\n  <head>\n    <link rel="stylesheet" type="text/css" href="/assets/css/jfinal.css">\n    #@css?()\n  </head>\n  <body>\n    <div class="content">\n      #@main()\n    </div>\n    <script type="text/javascript" src="/assets/js/jfinal.js"><\/script>\n    #@js?()\n  </body>\n</html>\n#end\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\nYou can then define additional CSS or JS content through #define css() and #define js() in templates that require them.\n\nThe #call directive is new in jfinal 3.6 and allows for dynamic specification of both the template function name and parameters. The usage is as follows:\n\n#call(funcName, p1, p2, ..., pn)\n\n\n1\n\n\nTo ignore the call if the function doesn\'t exist, add a constant value true as the first parameter:\n\n#call(true, funcName, p1, p2, ..., pn)\n\n\n1\n\n\nThis makes the template function calling mechanism much more flexible.\n\n\n# 10. #date Directive\n\nThe #date directive is used for formatting the output of date-type data, including all objects that inherit from the Java Date class, such as Date and Timestamp. The usage is incredibly straightforward:\n\n#date(account.createAt)\n#date(account.createAt, "yyyy-MM-dd HH:mm:ss")\n\n\n1\n2\n\n\nIn the first line of code, only one parameter is used, so the date is formatted using the default date pattern, which is "yyyy-MM-dd HH:mm". In the second line, the date is formatted according to the pattern specified in the second parameter.\n\nIf you want to change the default output format, you can configure it using engine.setDatePattern().\n\n# keepPara Issue\n\nWhen a date-type field is submitted to the backend, and the backend uses the Controller\'s keepPara() method, it converts this date-type data into a String type. In such cases, using #date(...) to output this String will throw an exception. To handle this, you can \'keep\' the type as shown below:\n\n// keepPara() keeps all form submission data, converting them to String types.\nkeepPara();\n\n// Use parameterized keepPara again to specify that the \'createAt\' field should be kept as a Date type.\nkeepPara(Date.class, "createAt");\n\n\n1\n2\n3\n4\n5\n\n\nAs shown above, the second line of code uses the Date.class parameter to specifically keep the \'createAt\' field as a Date type. This way, the #date(createAt) directive on the page will not throw an exception. Methods like keepModel(...) and keepBean(...) will maintain the original types, so no additional handling is needed.\n\n\n# 11. #number Directive\n\nThe #number directive is used to format the output of numerical data, including all objects that inherit from the Java Number class, such as Double, Float, Integer, Long, and BigDecimal. The usage is exceedingly simple:\n\n#number(3.1415926, "#.##")\n#number(0.9518, "#.##%")\n#number(123456789, ",###")\n#number(300000, "The speed of light is ### km per second.")\n\n\n1\n2\n3\n4\n\n\nIn the above examples, the first parameter for the #number directive is of a numerical type, and the second parameter is a String pattern. The pattern parameter works the same way as the pattern used in Java\'s DecimalFormat class. If you\'re not sure how to use the pattern, you can search for "DecimalFormat" in a search engine to find plenty of resources.\n\nThe two parameters for the #number directive can be variables or complex expressions. The use of constants in the above examples is merely for demonstration purposes.\n\n\n# 12. #escape Directive\n\nThe #escape directive is used for HTML-safe output, helping to mitigate XSS attacks. It escapes characters like \'<\' and \'>\' in HTML-formatted data. For example, it would convert \'<\' to &lt; and a space to &nbsp;.\n\nUsed in a similar way to the output command:\n\n#escape(blog.content)\n\n\n1\n\n\n\n# 13. Directive Extension\n\nThanks to the original DKFF and DLRD algorithms, the Enjoy Template Engine allows for extremely convenient extensions of directives at the language level. The amount of code required is minimal, and the learning curve is virtually non-existent. Here\'s a code example:\n\npublic class NowDirective extends Directive {\n  public void exec(Env env, Scope scope, Writer writer) {\n    write(writer, new Date().toString());\n  }\n}\n\n\n1\n2\n3\n4\n5\n\n\nIn the above code, by extending the Directive class and implementing the exec method, a new #now directive is created with just three lines of code. This directive outputs the current date into the template. To use it, you only need to add it to the template engine using me.addDirective("now", NowDirective.class). Here\'s how to use this directive in a template:\n\nThe current date is: #now()\n\n\n1\n\n\nIn addition to supporting directives without an #end block (i.e., directives without a body), the Enjoy Template Engine also directly supports directives that include an #end and a body. Here\'s an example:\n\npublic class Demo extends Directive {\n\n  // ExprList represents the list of parameter expressions for the directive\n  public void setExprList(ExprList exprList) {\n    // Custom control of exprList can be done here\n    super.setExprList(exprList);\n  }\n  \n  public void exec(Env env, Scope scope, Writer writer) {\n    write(writer, "Before executing body");\n    stat.exec(env, scope, writer);  // Execute body\n    write(writer, "After executing body");\n  }\n  \n  public boolean hasEnd() {\n    return true;  // Returning true means this directive has an #end ending tag\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\nIn the example above, the Demo class extends Directive and overrides the hasEnd method, returning true. This indicates that the extended directive has an #end ending tag. The exec method contains three lines of code. The stat.exec(...) line executes the code within the directive\'s body. The lines before and after stat.exec(...) output a string, and the final output is a combination of all these. Additionally the parameters of the directive can be controlled by overriding the setExprList(...) method of the parent class, which is not required.\n\nAfter adding to the engine via me.addDirective("demo", Demo.class), it can be used as in the following code example: `` #demo() Here is the content of the demo body #end\n\nThe final output looks like this:\n\n\n1\n\n\nbody Before execution Here is the content of the demo body After body\n\nThe #demo directive body in the above example contains a string of characters that will be executed by stat.exec(...) in the Demo.exec(...) method, and write(...) before and after stat.exec(...). The results produced by the two method calls and the results produced by body generate the final result.\n**Important**: Properties declared in directives are globally shared, so they must be thread-safe. For instance, consider a snippet from `com.jfinal.template.ext.directive.DateDirective`:\n\n```java\npublic class DateDirective extends Directive {\n\t\n   private Expr valueExpr;\n   private Expr datePatternExpr;\n   private int paraNum;\n \n   ...\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nHere, there are three properties of types Expr, Expr, and int. Expr is thread-safe. Although int paraNum may not seem thread-safe, it is only written to during initialization in the constructor, and read everywhere else. Thus, this int property is also thread-safe in this context.\n\n\n# 14. Common Mistakes\n\nThe most common mistake when using the Enjoy Template Engine is confusing "expressions" and "non-expressions." Expressions refer to everything within the parentheses when calling a directive or template function:\n\n#directiveName(everything here is an expression)\n#@functionName(everything here is an expression)\n\n\n1\n2\n\n\nFor example, the correct usage is:\n\n#directiveName(user.name)\n\n\n1\n\n\nA common mistake would be:\n\n#directiveName( #(user.name) )\n\n\n1\n\n\nSimply put, this mistake involves using a directive where an expression should be used. Never use the \'#\' character within an expression; just use Java expressions directly.',normalizedContent:'# 6.4 directives\n\nthe enjoy template engine consistently adheres to a minimalist design. with just seven core directives—#if, #for, #switch, #set, #include, #define, #(...)—it achieves nearly all the functionalities of traditional template engines. the learning curve is almost non-existent for users with a foundation in any programming language.\n\nif the built-in directives do not meet your needs, you can easily extend them at the template language level. under the com.jfinal.template.ext.directive package, there are five extended directives. the active record sql module also extends three directives specifically for sql management. by studying the code for these extended directives, you can easily understand how to create your own, making the process extremely simple.\n\nnote that the extension of enjoy template engine directives occurs at the lexical and syntactic analysis levels. this is entirely different from the tag-based extensions of traditional template engines. the former allows for comprehensive and flexible use of the engine\'s basic infrastructure, enabling versatile functionalities through very simple and straightforward code. to understand its power and convenience, refer to the sql management module of active record.\n\n\n# 1. output directive #(...)\n\nunlike almost all java template engines, enjoy template engine eliminates the independent concept of interpolation directives, treating them as one among other directives. this directive uses parentheses as delimiters, just like any other directive, avoiding the need for extra delimiters like curly braces.\n\nusing the output directive #(...) is very simple; just pass any expression described in section 6.4. the directive will output the evaluation result of these expressions. specifically, if the expression evaluates to null, there will be no output and no exceptions will be thrown. for example:\n\n#(value)\n#(object.field)\n#(object.field ??)\n#(a > b ? x : y)\n#(seotitle ?? "jfinal club")\n#(object.method(), null)\n\n\n1\n2\n3\n4\n5\n6\n\n\nas shown above, just pass an expression to the output directive. note that in the first line, the value parameter can be null. if object is null in the second line, an exception will be thrown. to avoid this, use the null-safe access operator object.field ??.\n\nadditionally, note the last line in the example. the directive argument is a comma expression, and the directive will only output the last expression in the comma sequence. if the last expression evaluates to null, no output will be generated.\n\nthe output directive can be customized by extending the outputdirectivefactory class and overriding its getoutputdirective method. then you can switch to your custom output directive using me.setoutputdirectivefactory(...) in the configengine(engine me) method.\n\n\n# 2. #if directive\n\nexample:\n\n#if(cond)\n  ...\n#end\n\n\n1\n2\n3\n\n\nas shown, the #if directive requires a cond expression and ends with #end. the cond can be any expression introduced in section 6.3. when cond evaluates to true, the code inside the if block is executed.\n\nthe #if directive naturally supports #else if and #else blocks. example:\n\n#if(c1)\n  ...\n#else if(c2)\n  ...\n#else if(c3)\n  ...\n#else\n  ...\n#end\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nthe usage of #else if and #else is identical to java syntax. (note: in versions prior to jfinal 3.3, you must write #elseif without any space between else and if, otherwise an exception will be thrown.)\n\n\n# 3. #for directive\n\nthe enjoy template engine offers an extremely user-friendly extension to the #for directive, allowing iteration over any type of data, including null values. code example:\n\n// iterating over list, array, set structures\n#for(x : list)\n  #(x.field)\n#end\n\n// iterating over a map\n#for(x : map)\n  #(x.key)\n  #(x.value)\n#end\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nthe first #for directive iterates over a list, and the usage is identical to java syntax.\n\nthe second #for directive iterates over a map, using item.key and item.value to access the elements. this is an enhancement by enjoy to reduce code verbosity. you can also use the traditional java map iteration method: #for(x : map.entryset()) #(x.key) #(x.value) #end\n\nnote: when the target of iteration is null, you don\'t need to check for null values; the #for directive will automatically skip the iteration, avoiding the need for if checks and thereby improving efficiency.\n\nthe #for directive also allows you to access its state. code example:\n\n#for(x : listaaa)\n  #(for.index)\n  #(x.field)\n  \n  #for(x : listbbb)\n     #(for.outer.index)\n     #(for.index)\n     #(x.field)\n  #end\n#end\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nin the code above, #(for.index) and #(for.outer.index) are used to access the current state of the #for directive. the former gets the current iteration index (starting from 0), and the latter allows an inner #for directive to access the state of an outer #for directive.\n\nnote: when #for directives are nested, each has its own variable scope, consistent with java language rules. for example, the two instances of #(x.field) in the example above are in different #for directive scopes and will correctly access the variable values in their respective scopes.\n\nthe #for directive supports the following states:\n\n#for(x : listaaa)\n   #(for.size)    size of the iterated object\n   #(for.index)   index starting from 0\n   #(for.count)   count starting from 1\n   #(for.first)   is it the first iteration?\n   #(for.last)    is it the last iteration?\n   #(for.odd)     is it an odd iteration?\n   #(for.even)    is it an even iteration?\n   \n   #(for.outer)        references the state of the outer #for directive\n   #(for.outer.size)   size of the iterated object in the outer #for directive\n#end\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nthe specific usage is explained in chinese in the code above.\n\napart from map and list, the #for directive also supports collection, iterator, array, iterable, enumeration, and null value iteration. the usage is identical in form to the earlier list iteration, all being #for(id : target). for null values, the #for directive will directly skip the iteration.\n\nadditionally, the #for directive supports iteration over any type of object, simply iterating over it once. example:\n\n#for(x : article)\n   #(x.title)\n#end\n\n\n1\n2\n3\n\n\nin the example above, article is just a regular java object, not a collection. the #for loop will iterate over this object just once. the x in the #for expression is the article object itself, so you can use #(x.title) for output\n\nthe #for directive also supports the #else branch. when the number of iterations is zero, the #else block is executed. example:\n\n#for(blog : bloglist)\n   #(blog.title)\n#else\n\nyou haven\'t written any blogs yet. click here <a href="/blog/add">to start blogging</a>.\n\n#end\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nin the code above, when bloglist.size() is 0 or bloglist is null, meaning the number of iterations is zero, the #else branch will execute. this scenario is very common in web projects.\n\nlastly, in addition to the #for directive iteration methods mentioned above, it also supports a more conventional for loop syntax. code example:\n\n#for(i = 0; i < 100; i++)\n   #(i)\n#end\n\n\n1\n2\n3\n\n\nthe syntax is almost identical to java, with the only difference being that variable declarations don\'t need types; direct assignment statements suffice. variables in the enjoy template engine are dynamically typed.\n\nnote: this form of for loop lacks for.size and for.last states, and only supports the following states: for.index, for.count, for.first, for.odd, for.even, for.outer.\n\nthe #for directive also supports #continue and #break commands, and their usage is entirely consistent with java. further details are not provided here.\n\n\n# 4. #switch directive (added in version 3.6)\n\nthe #switch directive is aligned with java\'s switch statement, offering similar basic usage but with some improvements for a better user experience. usage is as follows:\n\n#switch (month)\n  #case (1, 3, 5, 7, 8, 10, 12)\n    #(month) months have 31 days\n  #case (2)\n    #(month) has 28 days in a common year and 29 days in a leap year\n  #default\n    invalid month: #(month ?? "null")\n#end\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nas shown in the code above, the #case directive supports multiple arguments separated by commas, effectively eliminating the need for a #break directive. therefore, the enjoy template engine does not require the use of #break.\n\nparameters for the #case directive can be any expression, such as:\n\n#case (a, b, x + y, "abc", "123")\n\n\n1\n\n\nin the code above, the comma-separated expressions are first evaluated, and then each is compared to the value in #switch(value). if any of these values match, that #case branch is executed.\n\nthe support for multiple parameters in #case, without the need for #break, not only reduces code but also eliminates potential errors from forgetting to include #break. also, unlike java syntax, neither #case nor #default uses a colon character.\n\n\n# 5. #set directive\n\nthe #set directive is used for variable declaration and assignment. it accepts only assignment expressions or a list of comma-separated assignment expressions. code example:\n\n#set(x = 123)\n#set(a = 1, b = 2, c = a + b)\n#set(array[0] = 123)\n#set(map["key"] = 456)\n\n#(x)  #(c)  #(array[0])  #(map.key)  #(map["key"])\n\n\n1\n2\n3\n4\n5\n6\n\n\nin the above code, the first line simply assigns 123 to x. the second line is a list of assignment expressions executed from left to right. if the right-hand side of the equation has an expression, it will be evaluated before assignment. the last line outputs the values of the variables, and other directives can also access these variables like the output directive.\n\nnote that the #for, #include, and #define directives create new variable scopes. the #set directive first looks for the variable in the current scope; if found, it operates on it, otherwise, it continues to the upper scope. if still not found, it defines the variable in the top-level scope. this design is very beneficial for variable value transmission within templates.\n\nto explicitly specify assignment in the current scope, you can use the #setlocal directive, which has the same parameters and usage as #set but operates only in the current scope. #setlocal is often used within #define and #include to avoid naming conflicts.\n\nimportant: since assignment expressions are essentially expressions, and other directives inherently support any expression, the #set directive is not mandatory for assignments. for example, assignments can be done in the #() output directive:\n\n#(x = 123, y = "abc", array = [1, "a", true], map = {k1:v1}, null)\n\n\n1\n\n\nthe code above uses multiple assignment expressions in the output directive to achieve the functionality of #set, ending with a null value to avoid any output. similarly, other directives can also use assignment expressions.\n\n\n# 6. #include directive\n\nthe #include directive is used to include external template content, which is parsed as part of the current template. code example:\n\n#include("sidebar.html")\n\n\n1\n\n\nthe first parameter of the #include directive must be a string constant. if it starts with /, it will look for the file relative to basetemplatepath; otherwise, it will look for the file relative to the current template\'s path.\n\nbasetemplatepath can be configured in configengine(engine me) through me.setbasetemplatepath(...).\n\nadditionally, the #include directive supports an unlimited number of assignment expressions, which is very beneficial for modularization. for example, the template file named _hot_list.html is used to display hot projects, hot news, etc.:\n\n<div class="hot-list">\n  <h3>#(title)</h3>\n  <ul>\n    #for(x : list)\n    <li>\n      <a href="#(url)/#(x.id)">#(x.title)</a>\n    </li>\n    #end\n  </ul>\n</div>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nthe variables title, list, and url in the html fragment are needed for rendering "hot projects" and "hot news":\n\n#include("_hot_list.html", title="hot projects", list=projectlist, url="/project")\n#include("_hot_list.html", title="hot news", list=newslist, url="/news")\n\n\n1\n2\n\n\nin the two lines above, different values for title, list, and url are passed to _hot_list.html, enabling modular reuse of _hot_list.html.\n\n\n# 7. #render directive\n\nthe #render directive is nearly identical to #include in usage, supporting an unlimited number of assignment expressions. there are two main differences:\n\n 1. #render supports dynamic template parameters, e.g., #render(temp), where temp can be any expression. in contrast, #include can only use string constants like #include("abc.html").\n\n 2. functions defined in #render using #define are only effective in its sub-template and are not valid in the parent template. this design is very beneficial for modularization.\n\nthe core purpose of introducing the #render directive is to support dynamic template parameters.\n\n\n# 8. #define directive\n\nthe #define directive is one of the main ways to extend the template engine. it allows you to define template functions (template functions). with #define, you can define reusable template segments as individual template functions, which can be customized by passing in parameters when called.\n\nhere\'s how to use #define to implement a layout feature. first, create a layout.html file with the following code:\n\n#define layout()\n<html>\n  <head>\n    <title>jfinal club</title>\n  </head>\n  <body>\n    #@content()\n  </body>\n</html>\n#end\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nin the code above, a template function named layout is defined using #define layout(). it ends with #end. inside it, #@content() refers to another template function named content.\n\nnote: when calling a template function, an additional @ symbol is used to differentiate it from directive calls.\n\nnext, create another template file as follows:\n\n#include("layout.html")\n#@layout()\n\n#define content()\n<div>\n  this is the template content, similar to the \'nested\' part of traditional template engines.\n</div>\n#end\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nthe first line includes the previously created layout.html. the second line calls the layout template function defined in layout.html, which in turn calls the content function defined in the current file. simply understand this as function definition and function invocation.\n\nto make a layout template reusable across many templates, you can set all the template functions in that file as shared by using me.addsharedfunction("layout.html") in configengine(engine me). this eliminates the need for #include, reducing code redundancy and improving reusability.\n\nthe enjoy template engine eliminates boring concepts like layout, nested, and macro, thus reducing the learning curve and greatly enhancing extensibility.\n\ntemplate functions support formal parameters, similar to java but without specifying the parameter type. here\'s a code example:\n\n#define test(a, b, c)\n  #(a)\n  #(b)\n  #(c)\n#end\n\n\n1\n2\n3\n4\n5\n\n\nto call this function, you would use:\n\n#@test(123, "abc", user.name)\n\n\n1\n\n\nthe number of formal and actual parameters should match. if you need to pass additional, optional parameters, you can use the #set directive beforehand.\n\n\n# 9. template function calls and #call directive\n\nto call a template function defined by #define, use #@name(p1, p2…, pn). note the additional @ symbol to differentiate it from directive calls.\n\ntemplate functions also support safe invocation, denoted by #@name?(p1, p2…, pn). safe calls do nothing if the template function is not defined, making them suitable for optional template content. for example:\n\n#define layout()\n<html>\n  <head>\n    <link rel="stylesheet" type="text/css" href="/assets/css/jfinal.css">\n    #@css?()\n  </head>\n  <body>\n    <div class="content">\n      #@main()\n    </div>\n    <script type="text/javascript" src="/assets/js/jfinal.js"><\/script>\n    #@js?()\n  </body>\n</html>\n#end\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\nyou can then define additional css or js content through #define css() and #define js() in templates that require them.\n\nthe #call directive is new in jfinal 3.6 and allows for dynamic specification of both the template function name and parameters. the usage is as follows:\n\n#call(funcname, p1, p2, ..., pn)\n\n\n1\n\n\nto ignore the call if the function doesn\'t exist, add a constant value true as the first parameter:\n\n#call(true, funcname, p1, p2, ..., pn)\n\n\n1\n\n\nthis makes the template function calling mechanism much more flexible.\n\n\n# 10. #date directive\n\nthe #date directive is used for formatting the output of date-type data, including all objects that inherit from the java date class, such as date and timestamp. the usage is incredibly straightforward:\n\n#date(account.createat)\n#date(account.createat, "yyyy-mm-dd hh:mm:ss")\n\n\n1\n2\n\n\nin the first line of code, only one parameter is used, so the date is formatted using the default date pattern, which is "yyyy-mm-dd hh:mm". in the second line, the date is formatted according to the pattern specified in the second parameter.\n\nif you want to change the default output format, you can configure it using engine.setdatepattern().\n\n# keeppara issue\n\nwhen a date-type field is submitted to the backend, and the backend uses the controller\'s keeppara() method, it converts this date-type data into a string type. in such cases, using #date(...) to output this string will throw an exception. to handle this, you can \'keep\' the type as shown below:\n\n// keeppara() keeps all form submission data, converting them to string types.\nkeeppara();\n\n// use parameterized keeppara again to specify that the \'createat\' field should be kept as a date type.\nkeeppara(date.class, "createat");\n\n\n1\n2\n3\n4\n5\n\n\nas shown above, the second line of code uses the date.class parameter to specifically keep the \'createat\' field as a date type. this way, the #date(createat) directive on the page will not throw an exception. methods like keepmodel(...) and keepbean(...) will maintain the original types, so no additional handling is needed.\n\n\n# 11. #number directive\n\nthe #number directive is used to format the output of numerical data, including all objects that inherit from the java number class, such as double, float, integer, long, and bigdecimal. the usage is exceedingly simple:\n\n#number(3.1415926, "#.##")\n#number(0.9518, "#.##%")\n#number(123456789, ",###")\n#number(300000, "the speed of light is ### km per second.")\n\n\n1\n2\n3\n4\n\n\nin the above examples, the first parameter for the #number directive is of a numerical type, and the second parameter is a string pattern. the pattern parameter works the same way as the pattern used in java\'s decimalformat class. if you\'re not sure how to use the pattern, you can search for "decimalformat" in a search engine to find plenty of resources.\n\nthe two parameters for the #number directive can be variables or complex expressions. the use of constants in the above examples is merely for demonstration purposes.\n\n\n# 12. #escape directive\n\nthe #escape directive is used for html-safe output, helping to mitigate xss attacks. it escapes characters like \'<\' and \'>\' in html-formatted data. for example, it would convert \'<\' to &lt; and a space to &nbsp;.\n\nused in a similar way to the output command:\n\n#escape(blog.content)\n\n\n1\n\n\n\n# 13. directive extension\n\nthanks to the original dkff and dlrd algorithms, the enjoy template engine allows for extremely convenient extensions of directives at the language level. the amount of code required is minimal, and the learning curve is virtually non-existent. here\'s a code example:\n\npublic class nowdirective extends directive {\n  public void exec(env env, scope scope, writer writer) {\n    write(writer, new date().tostring());\n  }\n}\n\n\n1\n2\n3\n4\n5\n\n\nin the above code, by extending the directive class and implementing the exec method, a new #now directive is created with just three lines of code. this directive outputs the current date into the template. to use it, you only need to add it to the template engine using me.adddirective("now", nowdirective.class). here\'s how to use this directive in a template:\n\nthe current date is: #now()\n\n\n1\n\n\nin addition to supporting directives without an #end block (i.e., directives without a body), the enjoy template engine also directly supports directives that include an #end and a body. here\'s an example:\n\npublic class demo extends directive {\n\n  // exprlist represents the list of parameter expressions for the directive\n  public void setexprlist(exprlist exprlist) {\n    // custom control of exprlist can be done here\n    super.setexprlist(exprlist);\n  }\n  \n  public void exec(env env, scope scope, writer writer) {\n    write(writer, "before executing body");\n    stat.exec(env, scope, writer);  // execute body\n    write(writer, "after executing body");\n  }\n  \n  public boolean hasend() {\n    return true;  // returning true means this directive has an #end ending tag\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\nin the example above, the demo class extends directive and overrides the hasend method, returning true. this indicates that the extended directive has an #end ending tag. the exec method contains three lines of code. the stat.exec(...) line executes the code within the directive\'s body. the lines before and after stat.exec(...) output a string, and the final output is a combination of all these. additionally the parameters of the directive can be controlled by overriding the setexprlist(...) method of the parent class, which is not required.\n\nafter adding to the engine via me.adddirective("demo", demo.class), it can be used as in the following code example: `` #demo() here is the content of the demo body #end\n\nthe final output looks like this:\n\n\n1\n\n\nbody before execution here is the content of the demo body after body\n\nthe #demo directive body in the above example contains a string of characters that will be executed by stat.exec(...) in the demo.exec(...) method, and write(...) before and after stat.exec(...). the results produced by the two method calls and the results produced by body generate the final result.\n**important**: properties declared in directives are globally shared, so they must be thread-safe. for instance, consider a snippet from `com.jfinal.template.ext.directive.datedirective`:\n\n```java\npublic class datedirective extends directive {\n\t\n   private expr valueexpr;\n   private expr datepatternexpr;\n   private int paranum;\n \n   ...\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nhere, there are three properties of types expr, expr, and int. expr is thread-safe. although int paranum may not seem thread-safe, it is only written to during initialization in the constructor, and read everywhere else. thus, this int property is also thread-safe in this context.\n\n\n# 14. common mistakes\n\nthe most common mistake when using the enjoy template engine is confusing "expressions" and "non-expressions." expressions refer to everything within the parentheses when calling a directive or template function:\n\n#directivename(everything here is an expression)\n#@functionname(everything here is an expression)\n\n\n1\n2\n\n\nfor example, the correct usage is:\n\n#directivename(user.name)\n\n\n1\n\n\na common mistake would be:\n\n#directivename( #(user.name) )\n\n\n1\n\n\nsimply put, this mistake involves using a directive where an expression should be used. never use the \'#\' character within an expression; just use java expressions directly.',charsets:{}},{title:"6.5 Comments",frontmatter:{},regularPath:"/en/6%20Enjoy%20template%20engine/6.5%20Comment.html",relativePath:"en/6 Enjoy template engine/6.5 Comment.md",key:"v-68ee4e99",path:"/en/6%20Enjoy%20template%20engine/6.5%20Comment.html",headers:[{level:3,title:"6.5 Comments",slug:"_6-5-comments",normalizedTitle:"6.5 comments",charIndex:2}],lastUpdated:"9/22/2023, 4:50:57 AM",lastUpdatedTimestamp:1695358257e3,headersStr:"6.5 Comments",content:'# 6.5 Comments\n\nThe JFinal Template Engine supports both single-line and multi-line comments. Here\'s a code example:\n\n### This is a single-line comment\n\n#--\n   This is the first line of a multi-line comment\n   This is the second line of a multi-line comment\n--#\n\n\n1\n2\n3\n4\n5\n6\n\n\nAs shown above, single-line comments use three # characters, while multi-line comments start with #-- and end with --#.\n\nUnlike traditional template engines, single-line comments here use three characters primarily to reduce the likelihood of conflicts with the text content. Templates can contain highly diverse content, and using three characters significantly lowers the chances of conflicts.\n\nNote for versions before JFinal 4.4: When a comment is placed on the same line as a directive, the output will remove the newline character following the comment. For example:\n\n#("AAA") ### This is a comment\nBBB\n\n\n1\n2\n\n\nThe output for the above template would be: "AAABBB". If you want the output to strictly adhere to the newlines in the template, place the comment on a separate line, like this:\n\n### This is a comment, placed on its own line\n#("AAA")\nBBB\n\n\n1\n2\n3\n\n\nThe output for this template will strictly follow the newlines, producing:\n\nAAA\nBBB\n\n\n1\n2\n\n\nThe same applies to multi-line comments; simply place them separately.\n\nIn all other cases, the output strictly follows the template\'s newlines. This issue has been resolved in JFinal version 4.4, so it\'s recommended to upgrade to version 4.4 or higher.',normalizedContent:'# 6.5 comments\n\nthe jfinal template engine supports both single-line and multi-line comments. here\'s a code example:\n\n### this is a single-line comment\n\n#--\n   this is the first line of a multi-line comment\n   this is the second line of a multi-line comment\n--#\n\n\n1\n2\n3\n4\n5\n6\n\n\nas shown above, single-line comments use three # characters, while multi-line comments start with #-- and end with --#.\n\nunlike traditional template engines, single-line comments here use three characters primarily to reduce the likelihood of conflicts with the text content. templates can contain highly diverse content, and using three characters significantly lowers the chances of conflicts.\n\nnote for versions before jfinal 4.4: when a comment is placed on the same line as a directive, the output will remove the newline character following the comment. for example:\n\n#("aaa") ### this is a comment\nbbb\n\n\n1\n2\n\n\nthe output for the above template would be: "aaabbb". if you want the output to strictly adhere to the newlines in the template, place the comment on a separate line, like this:\n\n### this is a comment, placed on its own line\n#("aaa")\nbbb\n\n\n1\n2\n3\n\n\nthe output for this template will strictly follow the newlines, producing:\n\naaa\nbbb\n\n\n1\n2\n\n\nthe same applies to multi-line comments; simply place them separately.\n\nin all other cases, the output strictly follows the template\'s newlines. this issue has been resolved in jfinal version 4.4, so it\'s recommended to upgrade to version 4.4 or higher.',charsets:{}},{title:"6.6 Raw Output",frontmatter:{},regularPath:"/en/6%20Enjoy%20template%20engine/6.6%20Raw%20output.html",relativePath:"en/6 Enjoy template engine/6.6 Raw output.md",key:"v-b4a26204",path:"/en/6%20Enjoy%20template%20engine/6.6%20Raw%20output.html",headers:[{level:3,title:"6.6 Raw Output",slug:"_6-6-raw-output",normalizedTitle:"6.6 raw output",charIndex:2}],lastUpdated:"9/22/2023, 4:50:57 AM",lastUpdatedTimestamp:1695358257e3,headersStr:"6.6 Raw Output",content:"# 6.6 Raw Output\n\nRaw output refers to a content block that is not parsed but is treated solely as plain text. Here's how it works:\n\n#[[\n   #(value)\n   #for(x : list)\n      #(x.name)\n   #end\n]]#\n\n\n1\n2\n3\n4\n5\n6\n\n\nAs shown above, raw output begins with three characters #[[ and ends with ]]#. The content wrapped between these characters, although directives, will still be treated as plain text. This is particularly useful for resolving conflicts with frontend JavaScript template engine directives.\n\nWhether it's single-line comments, multi-line comments, or raw output, they all start with three characters. The purpose is to reduce the likelihood of conflicts with plain text content.\n\nNote: There should be no spaces between the three control characters used for comments or raw output.",normalizedContent:"# 6.6 raw output\n\nraw output refers to a content block that is not parsed but is treated solely as plain text. here's how it works:\n\n#[[\n   #(value)\n   #for(x : list)\n      #(x.name)\n   #end\n]]#\n\n\n1\n2\n3\n4\n5\n6\n\n\nas shown above, raw output begins with three characters #[[ and ends with ]]#. the content wrapped between these characters, although directives, will still be treated as plain text. this is particularly useful for resolving conflicts with frontend javascript template engine directives.\n\nwhether it's single-line comments, multi-line comments, or raw output, they all start with three characters. the purpose is to reduce the likelihood of conflicts with plain text content.\n\nnote: there should be no spaces between the three control characters used for comments or raw output.",charsets:{}},{title:"6.7 Shared Method Extension",frontmatter:{},regularPath:"/en/6%20Enjoy%20template%20engine/6.7%20Shared%20Method%20extension.html",relativePath:"en/6 Enjoy template engine/6.7 Shared Method extension.md",key:"v-fab81c06",path:"/en/6%20Enjoy%20template%20engine/6.7%20Shared%20Method%20extension.html",headers:[{level:3,title:"6.7 Shared Method Extension",slug:"_6-7-shared-method-extension",normalizedTitle:"6.7 shared method extension",charIndex:2}],lastUpdated:"9/22/2023, 4:50:57 AM",lastUpdatedTimestamp:1695358257e3,headersStr:"6.7 Shared Method Extension",content:"# 6.7 Shared Method Extension\n\n# 1. Basic Usage\n\nThe Enjoy Template Engine allows you to effortlessly use any public method from any Java class directly. The Java class being used doesn't need to implement any interfaces or inherit from any abstract classes, making it completely decoupled. The following code uses the com.jfinal.kit.StrKit class from JFinal as an example:\n\npublic void configEngine(Engine me) {\n   me.addSharedMethod(new com.jfinal.kit.StrKit());\n}\n\n\n1\n2\n3\n\n\nThe code above adds all the public methods from the StrKit class as shared methods. Once added, they can be used directly in the template. Here is a code example:\n\n#if(isBlank(nickName))\n   ...\n#end\n \n#if(notBlank(title))\n   ...\n#end\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nIn the example above, the methods isBlank and notBlank are from the StrKit class. This extension method is simple, convenient, and decoupled.\n\n# 2. Default Shared Method Configuration Extension\n\nThe Enjoy Template Engine has a default configuration that adds com.jfinal.template.ext.sharedmethod.SharedMethodLib as a Shared Method. Therefore, the methods inside it can be used directly without any additional configuration. The library includes isEmpty(...) and notEmpty(...) methods.\n\nThe isEmpty(...) method is used to determine whether the number of elements in Collection, Map, Array, Iterator, and Iterable type objects is zero. The rules are as follows:\n\n * Returns true for null\n * For List, Set, and any class that inherits from Collection, returns isEmpty()\n * For Map, returns isEmpty()\n * For arrays, returns length == 0\n * For Iterator, returns !hasNext()\n * For Iterable, returns !iterator().hasNext()\n\nHere is a code example:\n\n#if ( isEmpty(list) )\n    The number of elements in the list is 0\n#end\n \n#if ( notEmpty(map) )\n    The number of elements in the map is greater than 0\n#end\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nAs shown above, isEmpty(list) checks if the number of elements in the list is greater than zero. The functionality of notEmpty(...) is exactly the opposite of isEmpty(...), equivalent to !isEmpty(...).",normalizedContent:"# 6.7 shared method extension\n\n# 1. basic usage\n\nthe enjoy template engine allows you to effortlessly use any public method from any java class directly. the java class being used doesn't need to implement any interfaces or inherit from any abstract classes, making it completely decoupled. the following code uses the com.jfinal.kit.strkit class from jfinal as an example:\n\npublic void configengine(engine me) {\n   me.addsharedmethod(new com.jfinal.kit.strkit());\n}\n\n\n1\n2\n3\n\n\nthe code above adds all the public methods from the strkit class as shared methods. once added, they can be used directly in the template. here is a code example:\n\n#if(isblank(nickname))\n   ...\n#end\n \n#if(notblank(title))\n   ...\n#end\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nin the example above, the methods isblank and notblank are from the strkit class. this extension method is simple, convenient, and decoupled.\n\n# 2. default shared method configuration extension\n\nthe enjoy template engine has a default configuration that adds com.jfinal.template.ext.sharedmethod.sharedmethodlib as a shared method. therefore, the methods inside it can be used directly without any additional configuration. the library includes isempty(...) and notempty(...) methods.\n\nthe isempty(...) method is used to determine whether the number of elements in collection, map, array, iterator, and iterable type objects is zero. the rules are as follows:\n\n * returns true for null\n * for list, set, and any class that inherits from collection, returns isempty()\n * for map, returns isempty()\n * for arrays, returns length == 0\n * for iterator, returns !hasnext()\n * for iterable, returns !iterator().hasnext()\n\nhere is a code example:\n\n#if ( isempty(list) )\n    the number of elements in the list is 0\n#end\n \n#if ( notempty(map) )\n    the number of elements in the map is greater than 0\n#end\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nas shown above, isempty(list) checks if the number of elements in the list is greater than zero. the functionality of notempty(...) is exactly the opposite of isempty(...), equivalent to !isempty(...).",charsets:{}},{title:"6.8 Shared Object Extension",frontmatter:{},regularPath:"/en/6%20Enjoy%20template%20engine/6.8%20Shared%20Object%20extension.html",relativePath:"en/6 Enjoy template engine/6.8 Shared Object extension.md",key:"v-21317702",path:"/en/6%20Enjoy%20template%20engine/6.8%20Shared%20Object%20extension.html",headers:[{level:3,title:"6.8 Shared Object Extension",slug:"_6-8-shared-object-extension",normalizedTitle:"6.8 shared object extension",charIndex:2}],lastUpdated:"9/22/2023, 4:50:57 AM",lastUpdatedTimestamp:1695358257e3,headersStr:"6.8 Shared Object Extension",content:'# 6.8 Shared Object Extension\n\nThe addSharedObject method allows you to add a specific object as a shared object that can be used globally. Below is a code example:\n\npublic void configEngine(Engine me) {\n   me.addSharedObject("RESOURCE_HOST", "http://res.jfinal.com");\n   me.addSharedObject("StrKit", new com.jfinal.kit.StrKit());\n}\n\n\n1\n2\n3\n4\n\n\nIn the code above, the second line adds a shared object named RESOURCE_HOST, while the third line adds another shared object named StrKit. Here\'s how to use them in a template:\n\n<img src="#(RESOURCE_HOST)/img/girl.jpg" />\n#if(StrKit.isBlank(title))\n   ...\n#end\n\n\n1\n2\n3\n4\n\n\nIn the first line of the example above, the output directive outputs the RESOURCE_HOST shared variable. For large web application systems, this approach conveniently organizes the servers where resource files are located. The second line calls the isBlank method of the shared object named StrKit. The usage is intuitive for developers.\n\nNote: Since objects are shared globally, care must be taken to ensure thread safety. It is best to only share constants and stateless objects.',normalizedContent:'# 6.8 shared object extension\n\nthe addsharedobject method allows you to add a specific object as a shared object that can be used globally. below is a code example:\n\npublic void configengine(engine me) {\n   me.addsharedobject("resource_host", "http://res.jfinal.com");\n   me.addsharedobject("strkit", new com.jfinal.kit.strkit());\n}\n\n\n1\n2\n3\n4\n\n\nin the code above, the second line adds a shared object named resource_host, while the third line adds another shared object named strkit. here\'s how to use them in a template:\n\n<img src="#(resource_host)/img/girl.jpg" />\n#if(strkit.isblank(title))\n   ...\n#end\n\n\n1\n2\n3\n4\n\n\nin the first line of the example above, the output directive outputs the resource_host shared variable. for large web application systems, this approach conveniently organizes the servers where resource files are located. the second line calls the isblank method of the shared object named strkit. the usage is intuitive for developers.\n\nnote: since objects are shared globally, care must be taken to ensure thread safety. it is best to only share constants and stateless objects.',charsets:{}},{title:"7.1 Overview",frontmatter:{},regularPath:"/en/7%20EhCachePlugin/7.1%20Overview.html",relativePath:"en/7 EhCachePlugin/7.1 Overview.md",key:"v-2b3b2a01",path:"/en/7%20EhCachePlugin/7.1%20Overview.html",headers:[{level:3,title:"7.1 Overview",slug:"_7-1-overview",normalizedTitle:"7.1 overview",charIndex:2}],lastUpdated:"9/22/2023, 5:04:24 AM",lastUpdatedTimestamp:1695359064e3,headersStr:"7.1 Overview",content:"# 7.1 Overview\n\nEhCachePlugin is a cache plugin integrated into JFinal. By using EhCachePlugin, you can improve the system's concurrent access speed. This plugin leverages the capabilities of the EhCache library to provide an efficient, configurable caching mechanism that can greatly enhance the performance of your JFinal application. Whether you're caching database query results, API responses, or any other expensive computation, EhCachePlugin offers a straightforward way to speed up repetitive tasks and improve user experience.",normalizedContent:"# 7.1 overview\n\nehcacheplugin is a cache plugin integrated into jfinal. by using ehcacheplugin, you can improve the system's concurrent access speed. this plugin leverages the capabilities of the ehcache library to provide an efficient, configurable caching mechanism that can greatly enhance the performance of your jfinal application. whether you're caching database query results, api responses, or any other expensive computation, ehcacheplugin offers a straightforward way to speed up repetitive tasks and improve user experience.",charsets:{}},{title:"7.2 EhCachePlugin Configuration",frontmatter:{},regularPath:"/en/7%20EhCachePlugin/7.2%20EhCachePlugin.html",relativePath:"en/7 EhCachePlugin/7.2 EhCachePlugin.md",key:"v-03be4557",path:"/en/7%20EhCachePlugin/7.2%20EhCachePlugin.html",headers:[{level:3,title:"7.2 EhCachePlugin Configuration",slug:"_7-2-ehcacheplugin-configuration",normalizedTitle:"7.2 ehcacheplugin configuration",charIndex:2}],lastUpdated:"9/22/2023, 5:04:24 AM",lastUpdatedTimestamp:1695359064e3,headersStr:"7.2 EhCachePlugin Configuration",content:"# 7.2 EhCachePlugin Configuration\n\nThe EhCachePlugin exists as a plugin within the JFinal framework. Therefore, to use it, you need to configure it in your JFinalConfig class. Below is an example code snippet for configuring the EhCachePlugin:\n\npublic class DemoConfig extends JFinalConfig {\n  public void configPlugin(Plugins me) {\n    me.add(new EhCachePlugin());\n  }\n}\n\n\n1\n2\n3\n4\n5\n\n\nIn the DemoConfig class, which extends JFinalConfig, the EhCachePlugin is added to the list of plugins during the configuration phase. Specifically, within the configPlugin method, me.add(new EhCachePlugin()); adds a new instance of EhCachePlugin to JFinal's plugin system.\n\nThis simple configuration sets up EhCache as your caching solution, enabling you to leverage EhCache features in your JFinal application effortlessly.",normalizedContent:"# 7.2 ehcacheplugin configuration\n\nthe ehcacheplugin exists as a plugin within the jfinal framework. therefore, to use it, you need to configure it in your jfinalconfig class. below is an example code snippet for configuring the ehcacheplugin:\n\npublic class democonfig extends jfinalconfig {\n  public void configplugin(plugins me) {\n    me.add(new ehcacheplugin());\n  }\n}\n\n\n1\n2\n3\n4\n5\n\n\nin the democonfig class, which extends jfinalconfig, the ehcacheplugin is added to the list of plugins during the configuration phase. specifically, within the configplugin method, me.add(new ehcacheplugin()); adds a new instance of ehcacheplugin to jfinal's plugin system.\n\nthis simple configuration sets up ehcache as your caching solution, enabling you to leverage ehcache features in your jfinal application effortlessly.",charsets:{}},{title:"6.9 Extension Method Extension",frontmatter:{},regularPath:"/en/6%20Enjoy%20template%20engine/6.9%20Extension%20Method%20extension.html",relativePath:"en/6 Enjoy template engine/6.9 Extension Method extension.md",key:"v-7eb5ffe1",path:"/en/6%20Enjoy%20template%20engine/6.9%20Extension%20Method%20extension.html",headers:[{level:3,title:"6.9 Extension Method Extension",slug:"_6-9-extension-method-extension",normalizedTitle:"6.9 extension method extension",charIndex:2}],lastUpdated:"9/22/2023, 4:50:57 AM",lastUpdatedTimestamp:1695358257e3,headersStr:"6.9 Extension Method Extension",content:'# 6.9 Extension Method Extension\n\nThe Extension Method is used to add extension methods to existing classes externally. This feature is similar to the "mixin" feature in the Ruby language.\n\nBy default, Enjoy has added 9 extension methods (toBigDecimal(), toBigInteger(), toInt(), toLong(), toFloat(), toDouble(), toBoolean(), toShort(), toByte()) for 9 commonly used Java types: BigDecimal, BigInteger, String, Integer, Long, Float, Double, Short, and Byte. Below is an example of how to use them:\n\n#set(age = "18")\n#if(age.toInt() >= 18)\n   join to the party\n#end\n\n\n1\n2\n3\n4\n\n\nIn the first line of the example above, age is of type String. Since String has been extended with the toInt() method, it can be called to compare it with the Integer value 18.\n\nNote: BigDecimal and BigInteger were added in version 5.1.2. You will need to upgrade to this version or extend it yourself.\n\nExtension Method has two main application scenarios. The first is to extend the functionality of existing classes in the Java library. Below is an example of adding extension methods to the Integer class:\n\npublic class MyIntegerExt {\n  public Integer square(Integer self) {\n    return self * self;\n  }\n  \n  public Double power(Integer self, Double exponent) {\n    return Math.pow(self, exponent);\n  }\n  \n  public Boolean isOdd(Integer self) {\n    return self % 2 != 0;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\nAs shown in the code above, the first parameter of the three extension methods must be of type Integer, so that this parameter can hold the caller itself when the method is called. The remaining parameters can be of any type, as demonstrated by the exponent parameter in the power method. Extension methods must have at least one parameter. The following code configures these extension methods:\n\nEngine.addExtensionMethod(Integer.class, MyIntegerExt.class);\n\n\n1\n\n\nAfter this simple two-step process, you can use the extension methods in the template:\n\n#set(num = 123)\n#(num.square())\n#(num.power(10D))\n#(num.isOdd())\n\n\n1\n2\n3\n4\n\n\nThe second, third, and fourth lines in the example above call the three extension methods in MyIntegerExt, implementing the square, the 10th power, and odd number check for 123.\n\nAs shown in the examples above, extension methods allow you to extend the functionality of classes outside of themselves, making their usage in templates very convenient.\n\nThe second important application scenario for Extension Method is to make uncertain types certain. For example, the Controller.keepPara() method treats all parameters as String types. So, an Integer type from a form will turn into a String after keepPara(), triggering a type mismatch exception in the template. Here\'s how to resolve this:\n\n<select name="type">\n  #for(x : list)\n    <option value="#(x.type)" #if(x.type == type.toInt()) selected #end />\n  #end\n</select>\n\n\n1\n2\n3\n4\n5\n\n\nAssuming type is of Integer type, the select field will turn type into a String after submitting the form and using keepPara() on the backend. To re-render the template without causing a type mismatch, use type.toInt(). Of course, you can also resolve this by using keepPara(Integer.class, “type”).',normalizedContent:'# 6.9 extension method extension\n\nthe extension method is used to add extension methods to existing classes externally. this feature is similar to the "mixin" feature in the ruby language.\n\nby default, enjoy has added 9 extension methods (tobigdecimal(), tobiginteger(), toint(), tolong(), tofloat(), todouble(), toboolean(), toshort(), tobyte()) for 9 commonly used java types: bigdecimal, biginteger, string, integer, long, float, double, short, and byte. below is an example of how to use them:\n\n#set(age = "18")\n#if(age.toint() >= 18)\n   join to the party\n#end\n\n\n1\n2\n3\n4\n\n\nin the first line of the example above, age is of type string. since string has been extended with the toint() method, it can be called to compare it with the integer value 18.\n\nnote: bigdecimal and biginteger were added in version 5.1.2. you will need to upgrade to this version or extend it yourself.\n\nextension method has two main application scenarios. the first is to extend the functionality of existing classes in the java library. below is an example of adding extension methods to the integer class:\n\npublic class myintegerext {\n  public integer square(integer self) {\n    return self * self;\n  }\n  \n  public double power(integer self, double exponent) {\n    return math.pow(self, exponent);\n  }\n  \n  public boolean isodd(integer self) {\n    return self % 2 != 0;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\nas shown in the code above, the first parameter of the three extension methods must be of type integer, so that this parameter can hold the caller itself when the method is called. the remaining parameters can be of any type, as demonstrated by the exponent parameter in the power method. extension methods must have at least one parameter. the following code configures these extension methods:\n\nengine.addextensionmethod(integer.class, myintegerext.class);\n\n\n1\n\n\nafter this simple two-step process, you can use the extension methods in the template:\n\n#set(num = 123)\n#(num.square())\n#(num.power(10d))\n#(num.isodd())\n\n\n1\n2\n3\n4\n\n\nthe second, third, and fourth lines in the example above call the three extension methods in myintegerext, implementing the square, the 10th power, and odd number check for 123.\n\nas shown in the examples above, extension methods allow you to extend the functionality of classes outside of themselves, making their usage in templates very convenient.\n\nthe second important application scenario for extension method is to make uncertain types certain. for example, the controller.keeppara() method treats all parameters as string types. so, an integer type from a form will turn into a string after keeppara(), triggering a type mismatch exception in the template. here\'s how to resolve this:\n\n<select name="type">\n  #for(x : list)\n    <option value="#(x.type)" #if(x.type == type.toint()) selected #end />\n  #end\n</select>\n\n\n1\n2\n3\n4\n5\n\n\nassuming type is of integer type, the select field will turn type into a string after submitting the form and using keeppara() on the backend. to re-render the template without causing a type mismatch, use type.toint(). of course, you can also resolve this by using keeppara(integer.class, “type”).',charsets:{}},{title:"7.3 CacheInterceptor",frontmatter:{},regularPath:"/en/7%20EhCachePlugin/7.3%20CacheInterceptor.html",relativePath:"en/7 EhCachePlugin/7.3 CacheInterceptor.md",key:"v-9dd148fe",path:"/en/7%20EhCachePlugin/7.3%20CacheInterceptor.html",headers:[{level:3,title:"7.3 CacheInterceptor",slug:"_7-3-cacheinterceptor",normalizedTitle:"7.3 cacheinterceptor",charIndex:2}],lastUpdated:"9/22/2023, 5:04:24 AM",lastUpdatedTimestamp:1695359064e3,headersStr:"7.3 CacheInterceptor",content:'# 7.3 CacheInterceptor\n\nThe CacheInterceptor can cache all the data needed by an action. When a subsequent request comes in, if the cache exists, the system will directly use the data and render the page without calling the action. This approach ensures that the action is not polluted by any cache-related code and allows for plug-and-play functionality. Below is an example code snippet:\n\n@Before(CacheInterceptor.class)\npublic void list() {\n    List<Blog> blogList = Blog.dao.find("select * from blog");\n    User user = User.dao.findById(getParaToInt());\n    setAttr("blogList", blogList);\n    setAttr("user", user);\n    render("blog.html");\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nIn the above example, the actionKey is used as the cacheName. Before using it, you need to configure a cache named after the actionKey in ehcache.xml, like <cache name="/blog/list" …>. Note that when configuring the actionKey as the cacheName, the forward slash "/" should not be omitted.\n\nAdditionally, CacheInterceptor can also be used in conjunction with the CacheName annotation to replace the default actionKey as the cacheName. Here is an example code snippet:\n\n@Before(CacheInterceptor.class)\n@CacheName("blogList")\npublic void list() {\n    List<Blog> blogList = Blog.dao.find("select * from blog");\n    setAttr("blogList", blogList);\n    render("blog.html");\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nWith the above code, you need to configure a cache named blogList in ehcache.xml like this:\n\n<cache name="blogList" …>\n\n\n1\n\n\nBy using the CacheInterceptor and CacheName annotation, you can make your caching strategy more flexible and keep your action methods clean from cache-specific logic.',normalizedContent:'# 7.3 cacheinterceptor\n\nthe cacheinterceptor can cache all the data needed by an action. when a subsequent request comes in, if the cache exists, the system will directly use the data and render the page without calling the action. this approach ensures that the action is not polluted by any cache-related code and allows for plug-and-play functionality. below is an example code snippet:\n\n@before(cacheinterceptor.class)\npublic void list() {\n    list<blog> bloglist = blog.dao.find("select * from blog");\n    user user = user.dao.findbyid(getparatoint());\n    setattr("bloglist", bloglist);\n    setattr("user", user);\n    render("blog.html");\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nin the above example, the actionkey is used as the cachename. before using it, you need to configure a cache named after the actionkey in ehcache.xml, like <cache name="/blog/list" …>. note that when configuring the actionkey as the cachename, the forward slash "/" should not be omitted.\n\nadditionally, cacheinterceptor can also be used in conjunction with the cachename annotation to replace the default actionkey as the cachename. here is an example code snippet:\n\n@before(cacheinterceptor.class)\n@cachename("bloglist")\npublic void list() {\n    list<blog> bloglist = blog.dao.find("select * from blog");\n    setattr("bloglist", bloglist);\n    render("blog.html");\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nwith the above code, you need to configure a cache named bloglist in ehcache.xml like this:\n\n<cache name="bloglist" …>\n\n\n1\n\n\nby using the cacheinterceptor and cachename annotation, you can make your caching strategy more flexible and keep your action methods clean from cache-specific logic.',charsets:{}},{title:"7.4 EvictInterceptor",frontmatter:{},regularPath:"/en/7%20EhCachePlugin/7.4%20EvictInterceptor.html",relativePath:"en/7 EhCachePlugin/7.4 EvictInterceptor.md",key:"v-46f8c37e",path:"/en/7%20EhCachePlugin/7.4%20EvictInterceptor.html",headers:[{level:3,title:"7.4 EvictInterceptor",slug:"_7-4-evictinterceptor",normalizedTitle:"7.4 evictinterceptor",charIndex:2}],lastUpdated:"9/22/2023, 5:04:24 AM",lastUpdatedTimestamp:1695359064e3,headersStr:"7.4 EvictInterceptor",content:'# 7.4 EvictInterceptor\n\nThe EvictInterceptor can automatically clear the cache based on the CacheName annotation. Here\'s an example code snippet:\n\n@Before(EvictInterceptor.class)\n@CacheName("blogList")\npublic void update() {\n    getModel(Blog.class).update();\n    redirect("blog.html");\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\nIn the above example, the use of EvictInterceptor will clear the cache data with the cacheName set to blogList. The corresponding CacheInterceptor will then automatically update the cache data named blogList.\n\nStarting from version 3.6 of JFinal, the @CacheName annotation supports multiple cacheNames separated by commas. This is convenient for clearing multiple cache names at once. For example:\n\n@Before(EvictInterceptor.class)\n@CacheName("blogList, hotBlogList")  // Multiple cacheNames separated by commas\npublic void update() {\n    ...\n}\n\n\n1\n2\n3\n4\n5\n\n\nWith this feature, you can easily evict multiple caches with a single annotation, making your cache management strategy more flexible and efficient.',normalizedContent:'# 7.4 evictinterceptor\n\nthe evictinterceptor can automatically clear the cache based on the cachename annotation. here\'s an example code snippet:\n\n@before(evictinterceptor.class)\n@cachename("bloglist")\npublic void update() {\n    getmodel(blog.class).update();\n    redirect("blog.html");\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\nin the above example, the use of evictinterceptor will clear the cache data with the cachename set to bloglist. the corresponding cacheinterceptor will then automatically update the cache data named bloglist.\n\nstarting from version 3.6 of jfinal, the @cachename annotation supports multiple cachenames separated by commas. this is convenient for clearing multiple cache names at once. for example:\n\n@before(evictinterceptor.class)\n@cachename("bloglist, hotbloglist")  // multiple cachenames separated by commas\npublic void update() {\n    ...\n}\n\n\n1\n2\n3\n4\n5\n\n\nwith this feature, you can easily evict multiple caches with a single annotation, making your cache management strategy more flexible and efficient.',charsets:{}},{title:"7.5 CacheKit",frontmatter:{},regularPath:"/en/7%20EhCachePlugin/7.5%20CacheKit.html",relativePath:"en/7 EhCachePlugin/7.5 CacheKit.md",key:"v-077064e1",path:"/en/7%20EhCachePlugin/7.5%20CacheKit.html",headers:[{level:3,title:"7.5 CacheKit",slug:"_7-5-cachekit",normalizedTitle:"7.5 cachekit",charIndex:2}],lastUpdated:"9/22/2023, 5:04:24 AM",lastUpdatedTimestamp:1695359064e3,headersStr:"7.5 CacheKit",content:'# 7.5 CacheKit\n\nCacheKit is a utility class for cache operations. Here\'s a sample code snippet:\n\npublic void list() {\n    List<Blog> blogList = CacheKit.get("blog", "blogList");\n    if (blogList == null) {\n       blogList = Blog.dao.find("select * from blog");\n       CacheKit.put("blog", "blogList", blogList);\n    }\n    setAttr("blogList", blogList);\n    render("blog.html");\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nThe two most important methods in CacheKit are get(String cacheName, Object key) and put(String cacheName, Object key, Object value). The get method retrieves data from the cache, while the put method stores data in the cache. The cacheName parameter corresponds to the name attribute value in <cache name="blog" …> in ehcache.xml; the key parameter specifies the key used for retrieval; the value parameter specifies the data to be cached.\n\nBelow is an example of using the overloaded CacheKit.get(String, String, IDataLoader) method:\n\npublic void list() {\n    List<Blog> blogList = CacheKit.get("blog", "blogList", new IDataLoader(){\n       public Object load() {\n           return Blog.dao.find("select * from blog");\n    }});\n    setAttr("blogList", blogList);\n    render("blog.html");\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nThe CacheKit.get method provides an IDataLoader interface, whose load() method will only be called when the cache value does not exist. The specific operation flow of this method is as follows: First, it tries to retrieve data from the cache using cacheName=blog and key=blogList as parameters. If the data exists in the cache, it is returned directly. If it doesn\'t exist, the IDataLoader.load() method is called to fetch the data.',normalizedContent:'# 7.5 cachekit\n\ncachekit is a utility class for cache operations. here\'s a sample code snippet:\n\npublic void list() {\n    list<blog> bloglist = cachekit.get("blog", "bloglist");\n    if (bloglist == null) {\n       bloglist = blog.dao.find("select * from blog");\n       cachekit.put("blog", "bloglist", bloglist);\n    }\n    setattr("bloglist", bloglist);\n    render("blog.html");\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nthe two most important methods in cachekit are get(string cachename, object key) and put(string cachename, object key, object value). the get method retrieves data from the cache, while the put method stores data in the cache. the cachename parameter corresponds to the name attribute value in <cache name="blog" …> in ehcache.xml; the key parameter specifies the key used for retrieval; the value parameter specifies the data to be cached.\n\nbelow is an example of using the overloaded cachekit.get(string, string, idataloader) method:\n\npublic void list() {\n    list<blog> bloglist = cachekit.get("blog", "bloglist", new idataloader(){\n       public object load() {\n           return blog.dao.find("select * from blog");\n    }});\n    setattr("bloglist", bloglist);\n    render("blog.html");\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nthe cachekit.get method provides an idataloader interface, whose load() method will only be called when the cache value does not exist. the specific operation flow of this method is as follows: first, it tries to retrieve data from the cache using cachename=blog and key=bloglist as parameters. if the data exists in the cache, it is returned directly. if it doesn\'t exist, the idataloader.load() method is called to fetch the data.',charsets:{}},{title:"7.6 Introduction to ehcache.xml",frontmatter:{},regularPath:"/en/7%20EhCachePlugin/7.6%20Introduction%20to%20ehcache.xml.html",relativePath:"en/7 EhCachePlugin/7.6 Introduction to ehcache.xml.md",key:"v-8ca374fe",path:"/en/7%20EhCachePlugin/7.6%20Introduction%20to%20ehcache.xml.html",headers:[{level:3,title:"7.6 Introduction to ehcache.xml",slug:"_7-6-introduction-to-ehcache-xml-2",normalizedTitle:"7.6 introduction to ehcache.xml",charIndex:2}],lastUpdated:"9/22/2023, 5:04:24 AM",lastUpdatedTimestamp:1695359064e3,headersStr:"7.6 Introduction to ehcache.xml",content:'# 7.6 Introduction to ehcache.xml\n\n\n# 7.6 Introduction to ehcache.xml\n\nThe use of EhCache requires support from the ehcache.xml configuration file. This configuration file contains many cache nodes. Each cache node will have a name attribute, such as <cache name="blog" …>. This name attribute is required when retrieving values using CacheKit.\n\nOther configuration options such as eternal, overflowToDisk, timeToIdleSeconds, and timeToLiveSeconds can be found in the EhCache official documentation.\n\nHere is a brief explanation of these attributes:\n\n * eternal: If set to true, the elements in the cache will never expire. If set to false, the elements would expire based on the time specified in timeToIdleSeconds and timeToLiveSeconds.\n\n * overflowToDisk: When set to true, it specifies that the cache can overflow to disk storage when it reaches the in-memory limit.\n\n * timeToIdleSeconds: This is the time to idle for an element before it expires, i.e., the maximum amount of time an element can exist in the cache without being accessed. The element expires after this time.\n\n * timeToLiveSeconds: This is the time to live for an element before it expires, i.e., the maximum time an element can exist in the cache, whether or not it has been accessed. The element expires after this time.\n\nFor a complete list of attributes and their detailed explanation, consult the official EhCache documentation.\n\n<?xml version="1.0" encoding="UTF-8"?>\n<ehcache xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n         xsi:noNamespaceSchemaLocation="ehcache.xsd"\n         updateCheck="false" monitoring="autodetect"\n         dynamicConfig="true">\n\n    <diskStore path="java.io.tmpdir"/>\n\n\t\x3c!--\n\tDefault Cache configuration. These settings will be applied to caches\n\tcreated programmatically using CacheManager.add(String cacheName).\n\tThis element is optional, and using CacheManager.add(String cacheName) when\n\tits not present will throw CacheException\n\n\tThe defaultCache has an implicit name "default" which is a reserved cache name.\n\t--\x3e\n\t<defaultCache\n\t\t\tmaxEntriesLocalHeap="10000"\n\t\t\teternal="false"\n\t\t\ttimeToIdleSeconds="120"\n\t\t\ttimeToLiveSeconds="120"\n\n\t\t\tdiskSpoolBufferSizeMB="30"\n\t\t\tmaxEntriesLocalDisk="10000000"\n\t\t\tdiskExpiryThreadIntervalSeconds="120"\n\t\t\tmemoryStoreEvictionPolicy="LRU"\n\t\t\tstatistics="false">\n\t\t<persistence strategy="localTempSwap"/>\n\t</defaultCache>\n    \n    \x3c!--Predefined caches.  Add your cache configuration settings here.\n        If you do not have a configuration for your cache a WARNING will be issued when the\n        CacheManager starts\n\n        The following attributes are required for defaultCache:\n\n        name              - Sets the name of the cache. This is used to identify the cache. It must be unique.\n        maxInMemory       - Sets the maximum number of objects that will be created in memory\n        eternal           - Sets whether elements are eternal. If eternal,  timeouts are ignored and the element\n                            is never expired.\n        timeToIdleSeconds - Sets the time to idle for an element before it expires. Is only used\n                            if the element is not eternal. Idle time is now - last accessed time\n        timeToLiveSeconds - Sets the time to live for an element before it expires. Is only used\n                            if the element is not eternal. TTL is now - creation time\n        overflowToDisk    - Sets whether elements can overflow to disk when the in-memory cache\n                            has reached the maxInMemory limit.\n\n        --\x3e\n    \n    \x3c!-- Cache for login user information. Will be cleared after 30 minutes of inactivity, otherwise, it keeps the login state.\n         The expiration time refers to the expireAt in the session table. This cache is only used for login_log statistics\n         and performance improvement (no need to always read the database session table). --\x3e\n    <cache name="loginAccount"\n           maxEntriesLocalHeap="90000"\n           eternal="false"\n           timeToIdleSeconds="1800"\n           timeToLiveSeconds="0"\n           overflowToDisk="false"\n            />\n\n\t\x3c!-- allAccounts cache for all accounts, used for joining other models to nickName, avatar --\x3e\n\t<cache name="allAccounts"\n\t       maxEntriesLocalHeap="90000"\n\t       eternal="true"\n\t       overflowToDisk="false"\n\t\t\t/>\n\n\t\x3c!-- weixinPayResendNotify is used to prevent duplicate data processing caused by repeated asynchronous notifications in WeixinPayService --\x3e\n\t<cache name="weixinPayResendNotify"\n\t       maxEntriesLocalHeap="3000"\n\t       eternal="false"\n\t       timeToIdleSeconds="3600"\n\t       timeToLiveSeconds="0"\n\t       overflowToDisk="false"\n\t\t\t/>\n\n\t\x3c!-- newsFeedPage cache --\x3e\n\t<cache name="newsFeedPage"\n\t       maxEntriesLocalHeap="90000"\n\t       eternal="true"\n\t       overflowToDisk="false"\n\t\t\t/>\n\n\t\x3c!-- referMePage cache, allows idle time for one hour (3600 seconds) --\x3e\n\t<cache name="referMePage"\n\t       maxEntriesLocalHeap="3000"\n\t       eternal="false"\n\t       timeToIdleSeconds="3600"\n\t       timeToLiveSeconds="0"\n\t       overflowToDisk="false"\n\t\t\t/>\n\n\t\x3c!-- remind cache, allows idle time for one hour (3600 seconds) --\x3e\n\t<cache name="remind"\n\t       maxEntriesLocalHeap="3000"\n\t       eternal="false"\n\t       timeToIdleSeconds="3600"\n\t       timeToLiveSeconds="0"\n\t       overflowToDisk="false"\n\t\t\t/>\n\n\t    \x3c!-- The key generation rule for pageViewIp is actionKey + ip, for example:\n\t             1: "/project" + ip\n\t             2: "/share" + ip\n\t             3: "/feedback" + ip\n\t         It is used to get the specific article id corresponding to the current ip. To avoid malicious brushing of rankings,\n\t         only update the visitCount when the id does not exist.\n\t         The visitCount field in xxx_page_view is used for article sorting. --\x3e\n\t<cache name="pageViewIp"\n\t       maxEntriesLocalHeap="90000"\n\t       eternal="false"\n\t       timeToIdleSeconds="60"\n\t       timeToLiveSeconds="60"\n\t       overflowToDisk="false"\n\t       diskPersistent="false"\n\t\t\t/>\n\t<cache name="projectPageView"\n\t       maxEntriesLocalHeap="90000"\n\t       eternal="true"\n\t       overflowToDisk="true"\n\t       diskPersistent="true"\n\t\t\t/>\n\t<cache name="sharePageView"\n\t       maxEntriesLocalHeap="90000"\n\t       eternal="true"\n\t       overflowToDisk="true"\n\t       diskPersistent="true"\n\t\t\t/>\n\t<cache name="feedbackPageView"\n\t       maxEntriesLocalHeap="90000"\n\t       eternal="true"\n\t       overflowToDisk="true"\n\t       diskPersistent="true"\n\t\t\t/>\n\n    \x3c!-- index cache --\x3e\n    <cache name="index"\n           maxEntriesLocalHeap="300"\n           eternal="false"\n           timeToIdleSeconds="3600"\n           timeToLiveSeconds="3600"\n           overflowToDisk="false"\n            />\n\n\n\x3c!--  Here are three sample caches for configuration purposes only  ============================================  --\x3e\n\t\x3c!--\n\tSample caches. Following are some example caches. Remove these before use.\n\t--\x3e\n\n\t\x3c!--\n\tSample cache named sampleCache1\n\tThis cache contains a maximum in memory of 10000 elements, and will expire\n\tan element if it is idle for more than 5 minutes and lives for more than\n\t10 minutes.\n\n\tIf there are more than 10000 elements it will overflow to the\n\tdisk cache, which in this configuration will go to wherever java.io.tmp is\n\tdefined on your system. On a standard Linux system this will be /tmp"\n\t--\x3e\n\t<cache name="sampleCache1"\n\t       maxEntriesLocalHeap="10000"\n\t       maxEntriesLocalDisk="1000"\n\t       eternal="false"\n\t       diskSpoolBufferSizeMB="20"\n\t       timeToIdleSeconds="300"\n\t       timeToLiveSeconds="600"\n\t       memoryStoreEvictionPolicy="LFU"\n\t       transactionalMode="off">\n\t\t<persistence strategy="localTempSwap"/>\n\t</cache>\n\n\t\x3c!--\n\tSample cache named sampleCache2\n\tThis cache has a maximum of 1000 elements in memory. There is no overflow to disk, so 1000\n\tis also the maximum cache size. Note that when a cache is eternal, timeToLive and\n\ttimeToIdle are not used and do not need to be specified.\n\t--\x3e\n\t<cache name="sampleCache2"\n\t       maxEntriesLocalHeap="1000"\n\t       eternal="true"\n\t       memoryStoreEvictionPolicy="FIFO"\n\t\t\t/>\n\n\t\x3c!--\n\tSample cache named sampleCache3. This cache overflows to disk. The disk store is\n\tpersistent between cache and VM restarts. The disk expiry thread interval is set to 10\n\tminutes, overriding the default of 2 minutes.\n\t--\x3e\n\t<cache name="sampleCache3"\n\t       maxEntriesLocalHeap="500"\n\t       eternal="false"\n\t       overflowToDisk="true"\n\t       diskPersistent="true"\n\t       timeToIdleSeconds="300"\n\t       timeToLiveSeconds="600"\n\t       diskExpiryThreadIntervalSeconds="1"\n\t       memoryStoreEvictionPolicy="LFU">\n\t</cache>\n</ehcache>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n\n\nehcache.xml file provides a comprehensive configuration for EhCache in a JFinal project. This file outlines various cache policies and strategies to handle different kinds of data.\n\nHere\'s a brief summary of some of the noteworthy aspects:\n\n * Default Cache Configuration: The defaultCache block specifies the default settings for all caches unless overridden. These include maximum entries in the local heap and disk, eviction policies, time-to-live (TTL), and time-to-idle (TTI) settings.\n\n * Custom Cache Configurations: You\'ve defined several custom cache blocks like loginAccount, allAccounts, weixinPayResendNotify, etc. Each of these blocks has a specific configuration tailored to the data it will hold.\n\n * TTL and TTI: You\'ve set timeToLiveSeconds and timeToIdleSeconds for several caches. These settings control how long the data stays in the cache before it\'s considered stale and needs to be evicted.\n\n * Overflow to Disk: Some caches are configured to overflow to disk when they reach a certain size in memory, while others are not. This helps in efficiently utilizing system resources.\n\n * Eternal: For some caches like allAccounts, you\'ve set eternal="true", which means the data in these caches will not expire.\n\n * Eviction Policy: The eviction policy like LRU (Least Recently Used), FIFO (First In First Out), or LFU (Least Frequently Used) specifies which entries to remove from the cache when it gets full.\n\n * Sample Caches: At the end, you\'ve also included some sample cache configurations for reference.\n\nOverall, this is a well-structured and thought-out configuration file that caters to various caching requirements. Just make sure to remove or comment out the sample cache configurations before deploying it to production to avoid any unintended side effects.',normalizedContent:'# 7.6 introduction to ehcache.xml\n\n\n# 7.6 introduction to ehcache.xml\n\nthe use of ehcache requires support from the ehcache.xml configuration file. this configuration file contains many cache nodes. each cache node will have a name attribute, such as <cache name="blog" …>. this name attribute is required when retrieving values using cachekit.\n\nother configuration options such as eternal, overflowtodisk, timetoidleseconds, and timetoliveseconds can be found in the ehcache official documentation.\n\nhere is a brief explanation of these attributes:\n\n * eternal: if set to true, the elements in the cache will never expire. if set to false, the elements would expire based on the time specified in timetoidleseconds and timetoliveseconds.\n\n * overflowtodisk: when set to true, it specifies that the cache can overflow to disk storage when it reaches the in-memory limit.\n\n * timetoidleseconds: this is the time to idle for an element before it expires, i.e., the maximum amount of time an element can exist in the cache without being accessed. the element expires after this time.\n\n * timetoliveseconds: this is the time to live for an element before it expires, i.e., the maximum time an element can exist in the cache, whether or not it has been accessed. the element expires after this time.\n\nfor a complete list of attributes and their detailed explanation, consult the official ehcache documentation.\n\n<?xml version="1.0" encoding="utf-8"?>\n<ehcache xmlns:xsi="http://www.w3.org/2001/xmlschema-instance"\n         xsi:nonamespaceschemalocation="ehcache.xsd"\n         updatecheck="false" monitoring="autodetect"\n         dynamicconfig="true">\n\n    <diskstore path="java.io.tmpdir"/>\n\n\t\x3c!--\n\tdefault cache configuration. these settings will be applied to caches\n\tcreated programmatically using cachemanager.add(string cachename).\n\tthis element is optional, and using cachemanager.add(string cachename) when\n\tits not present will throw cacheexception\n\n\tthe defaultcache has an implicit name "default" which is a reserved cache name.\n\t--\x3e\n\t<defaultcache\n\t\t\tmaxentrieslocalheap="10000"\n\t\t\teternal="false"\n\t\t\ttimetoidleseconds="120"\n\t\t\ttimetoliveseconds="120"\n\n\t\t\tdiskspoolbuffersizemb="30"\n\t\t\tmaxentrieslocaldisk="10000000"\n\t\t\tdiskexpirythreadintervalseconds="120"\n\t\t\tmemorystoreevictionpolicy="lru"\n\t\t\tstatistics="false">\n\t\t<persistence strategy="localtempswap"/>\n\t</defaultcache>\n    \n    \x3c!--predefined caches.  add your cache configuration settings here.\n        if you do not have a configuration for your cache a warning will be issued when the\n        cachemanager starts\n\n        the following attributes are required for defaultcache:\n\n        name              - sets the name of the cache. this is used to identify the cache. it must be unique.\n        maxinmemory       - sets the maximum number of objects that will be created in memory\n        eternal           - sets whether elements are eternal. if eternal,  timeouts are ignored and the element\n                            is never expired.\n        timetoidleseconds - sets the time to idle for an element before it expires. is only used\n                            if the element is not eternal. idle time is now - last accessed time\n        timetoliveseconds - sets the time to live for an element before it expires. is only used\n                            if the element is not eternal. ttl is now - creation time\n        overflowtodisk    - sets whether elements can overflow to disk when the in-memory cache\n                            has reached the maxinmemory limit.\n\n        --\x3e\n    \n    \x3c!-- cache for login user information. will be cleared after 30 minutes of inactivity, otherwise, it keeps the login state.\n         the expiration time refers to the expireat in the session table. this cache is only used for login_log statistics\n         and performance improvement (no need to always read the database session table). --\x3e\n    <cache name="loginaccount"\n           maxentrieslocalheap="90000"\n           eternal="false"\n           timetoidleseconds="1800"\n           timetoliveseconds="0"\n           overflowtodisk="false"\n            />\n\n\t\x3c!-- allaccounts cache for all accounts, used for joining other models to nickname, avatar --\x3e\n\t<cache name="allaccounts"\n\t       maxentrieslocalheap="90000"\n\t       eternal="true"\n\t       overflowtodisk="false"\n\t\t\t/>\n\n\t\x3c!-- weixinpayresendnotify is used to prevent duplicate data processing caused by repeated asynchronous notifications in weixinpayservice --\x3e\n\t<cache name="weixinpayresendnotify"\n\t       maxentrieslocalheap="3000"\n\t       eternal="false"\n\t       timetoidleseconds="3600"\n\t       timetoliveseconds="0"\n\t       overflowtodisk="false"\n\t\t\t/>\n\n\t\x3c!-- newsfeedpage cache --\x3e\n\t<cache name="newsfeedpage"\n\t       maxentrieslocalheap="90000"\n\t       eternal="true"\n\t       overflowtodisk="false"\n\t\t\t/>\n\n\t\x3c!-- refermepage cache, allows idle time for one hour (3600 seconds) --\x3e\n\t<cache name="refermepage"\n\t       maxentrieslocalheap="3000"\n\t       eternal="false"\n\t       timetoidleseconds="3600"\n\t       timetoliveseconds="0"\n\t       overflowtodisk="false"\n\t\t\t/>\n\n\t\x3c!-- remind cache, allows idle time for one hour (3600 seconds) --\x3e\n\t<cache name="remind"\n\t       maxentrieslocalheap="3000"\n\t       eternal="false"\n\t       timetoidleseconds="3600"\n\t       timetoliveseconds="0"\n\t       overflowtodisk="false"\n\t\t\t/>\n\n\t    \x3c!-- the key generation rule for pageviewip is actionkey + ip, for example:\n\t             1: "/project" + ip\n\t             2: "/share" + ip\n\t             3: "/feedback" + ip\n\t         it is used to get the specific article id corresponding to the current ip. to avoid malicious brushing of rankings,\n\t         only update the visitcount when the id does not exist.\n\t         the visitcount field in xxx_page_view is used for article sorting. --\x3e\n\t<cache name="pageviewip"\n\t       maxentrieslocalheap="90000"\n\t       eternal="false"\n\t       timetoidleseconds="60"\n\t       timetoliveseconds="60"\n\t       overflowtodisk="false"\n\t       diskpersistent="false"\n\t\t\t/>\n\t<cache name="projectpageview"\n\t       maxentrieslocalheap="90000"\n\t       eternal="true"\n\t       overflowtodisk="true"\n\t       diskpersistent="true"\n\t\t\t/>\n\t<cache name="sharepageview"\n\t       maxentrieslocalheap="90000"\n\t       eternal="true"\n\t       overflowtodisk="true"\n\t       diskpersistent="true"\n\t\t\t/>\n\t<cache name="feedbackpageview"\n\t       maxentrieslocalheap="90000"\n\t       eternal="true"\n\t       overflowtodisk="true"\n\t       diskpersistent="true"\n\t\t\t/>\n\n    \x3c!-- index cache --\x3e\n    <cache name="index"\n           maxentrieslocalheap="300"\n           eternal="false"\n           timetoidleseconds="3600"\n           timetoliveseconds="3600"\n           overflowtodisk="false"\n            />\n\n\n\x3c!--  here are three sample caches for configuration purposes only  ============================================  --\x3e\n\t\x3c!--\n\tsample caches. following are some example caches. remove these before use.\n\t--\x3e\n\n\t\x3c!--\n\tsample cache named samplecache1\n\tthis cache contains a maximum in memory of 10000 elements, and will expire\n\tan element if it is idle for more than 5 minutes and lives for more than\n\t10 minutes.\n\n\tif there are more than 10000 elements it will overflow to the\n\tdisk cache, which in this configuration will go to wherever java.io.tmp is\n\tdefined on your system. on a standard linux system this will be /tmp"\n\t--\x3e\n\t<cache name="samplecache1"\n\t       maxentrieslocalheap="10000"\n\t       maxentrieslocaldisk="1000"\n\t       eternal="false"\n\t       diskspoolbuffersizemb="20"\n\t       timetoidleseconds="300"\n\t       timetoliveseconds="600"\n\t       memorystoreevictionpolicy="lfu"\n\t       transactionalmode="off">\n\t\t<persistence strategy="localtempswap"/>\n\t</cache>\n\n\t\x3c!--\n\tsample cache named samplecache2\n\tthis cache has a maximum of 1000 elements in memory. there is no overflow to disk, so 1000\n\tis also the maximum cache size. note that when a cache is eternal, timetolive and\n\ttimetoidle are not used and do not need to be specified.\n\t--\x3e\n\t<cache name="samplecache2"\n\t       maxentrieslocalheap="1000"\n\t       eternal="true"\n\t       memorystoreevictionpolicy="fifo"\n\t\t\t/>\n\n\t\x3c!--\n\tsample cache named samplecache3. this cache overflows to disk. the disk store is\n\tpersistent between cache and vm restarts. the disk expiry thread interval is set to 10\n\tminutes, overriding the default of 2 minutes.\n\t--\x3e\n\t<cache name="samplecache3"\n\t       maxentrieslocalheap="500"\n\t       eternal="false"\n\t       overflowtodisk="true"\n\t       diskpersistent="true"\n\t       timetoidleseconds="300"\n\t       timetoliveseconds="600"\n\t       diskexpirythreadintervalseconds="1"\n\t       memorystoreevictionpolicy="lfu">\n\t</cache>\n</ehcache>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n\n\nehcache.xml file provides a comprehensive configuration for ehcache in a jfinal project. this file outlines various cache policies and strategies to handle different kinds of data.\n\nhere\'s a brief summary of some of the noteworthy aspects:\n\n * default cache configuration: the defaultcache block specifies the default settings for all caches unless overridden. these include maximum entries in the local heap and disk, eviction policies, time-to-live (ttl), and time-to-idle (tti) settings.\n\n * custom cache configurations: you\'ve defined several custom cache blocks like loginaccount, allaccounts, weixinpayresendnotify, etc. each of these blocks has a specific configuration tailored to the data it will hold.\n\n * ttl and tti: you\'ve set timetoliveseconds and timetoidleseconds for several caches. these settings control how long the data stays in the cache before it\'s considered stale and needs to be evicted.\n\n * overflow to disk: some caches are configured to overflow to disk when they reach a certain size in memory, while others are not. this helps in efficiently utilizing system resources.\n\n * eternal: for some caches like allaccounts, you\'ve set eternal="true", which means the data in these caches will not expire.\n\n * eviction policy: the eviction policy like lru (least recently used), fifo (first in first out), or lfu (least frequently used) specifies which entries to remove from the cache when it gets full.\n\n * sample caches: at the end, you\'ve also included some sample cache configurations for reference.\n\noverall, this is a well-structured and thought-out configuration file that caters to various caching requirements. just make sure to remove or comment out the sample cache configurations before deploying it to production to avoid any unintended side effects.',charsets:{}},{title:"8.1 Overview",frontmatter:{},regularPath:"/en/8%20RedisPlugin/8.1%20Overview.html",relativePath:"en/8 RedisPlugin/8.1 Overview.md",key:"v-1d9930fe",path:"/en/8%20RedisPlugin/8.1%20Overview.html",lastUpdated:"9/22/2023, 7:03:51 AM",lastUpdatedTimestamp:1695366231e3,headersStr:null,content:"# 8.1 Overview\n\nRedisPlugin is a high-speed plugin that supports Redis. Using RedisPlugin makes it extremely convenient to use Redis. This plugin not only offers a rich set of APIs but also supports multiple Redis servers simultaneously. Redis boasts ultra-high performance, a wide variety of data structures, and native support for data persistence. It is currently a widely used NoSQL database. Effective utilization of Redis can significantly improve system performance and reduce hardware costs.",normalizedContent:"# 8.1 overview\n\nredisplugin is a high-speed plugin that supports redis. using redisplugin makes it extremely convenient to use redis. this plugin not only offers a rich set of apis but also supports multiple redis servers simultaneously. redis boasts ultra-high performance, a wide variety of data structures, and native support for data persistence. it is currently a widely used nosql database. effective utilization of redis can significantly improve system performance and reduce hardware costs.",charsets:{}},{title:"8.3 Redis and Cache",frontmatter:{},regularPath:"/en/8%20RedisPlugin/8.3%20Redis%20and%20Cache.html",relativePath:"en/8 RedisPlugin/8.3 Redis and Cache.md",key:"v-0b63cdca",path:"/en/8%20RedisPlugin/8.3%20Redis%20and%20Cache.html",headers:[{level:3,title:"1. Basic Usage",slug:"_1-basic-usage",normalizedTitle:"1. basic usage",charIndex:26},{level:3,title:"2. New Usage (Recommended)",slug:"_2-new-usage-recommended",normalizedTitle:"2. new usage (recommended)",charIndex:1419}],lastUpdated:"9/22/2023, 7:03:51 AM",lastUpdatedTimestamp:1695366231e3,headersStr:"1. Basic Usage 2. New Usage (Recommended)",content:'# 8.3 Redis and Cache\n\n\n# 1. Basic Usage\n\nRedis and Cache can be easily used together to access Redis services. The Redis object can obtain a Cache object through the use() method. This Cache object offers a rich API for using Redis services. Below is a sample usage:\n\npublic void redisDemo() {\n  // Get the Redis Cache object named "bbs"\n  Cache bbsCache = Redis.use("bbs");\n  bbsCache.set("key", "value");\n  bbsCache.get("key");\n \n  // Get the Redis Cache object named "news"\n  Cache newsCache = Redis.use("news");\n  newsCache.set("k", "v");\n  newsCache.get("k");\n \n  // The first created Cache becomes the primary cache, so the cacheName parameter can be omitted\n  bbsCache = Redis.use();  // The primary cache can omit the cacheName parameter\n  bbsCache.set("jfinal", "awesome");\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\nIn the code above, the use() method takes "bbs" and "news" as parameters to obtain two Cache objects. These objects can operate on their corresponding Redis servers.\n\nGenerally, only one RedisPlugin connecting to a single Redis server will be created. You can use Redis.use().set(key, value) directly.\n\nNote: When using methods like incr, incrBy, decr, decrBy to manipulate counters, you should use getCounter(key) to read the value instead of get(key), otherwise a deserialization exception will be thrown. Similarly, you can\'t use set(key, value) for operations like incrBy(key, value).\n\n\n# 2. New Usage (Recommended)\n\nHigher versions of JFinal have introduced the call method for both the Redis and Cache classes. This method exposes the Jedis object directly, bypassing serialization and deserialization processes.\n\n// Use lambda to expose Jedis API\nLong ret = Redis.call(j -> j.incrBy("key", 1));\n\nLong ret = Redis.call(jedis -> {\n    return jedis.incrBy("key", 1);\n});\n\n\n1\n2\n3\n4\n5\n6\n\n\nIf multiple caches are configured, you can get the corresponding cache object by using Redis.use(...) first and then proceed with the operation.\n\n// Specify the cacheName parameter before performing operations\nLong ret = Redis.use("mycache").call(j -> j.incrBy("key", 1));\n\n// Redis.use() without arguments means getting the default cache\nLong ret = Redis.use().call(j -> j.incrBy("key", 1));\n\n\n1\n2\n3\n4\n5\n\n\nFor storing data types other than Strings, you can convert them to JSON first and then perform the operation.\n\nUser user = dao.findById(userId);\nString userJson = JsonKit.toJson(user);\n\nRedis.call(jedis -> {\n    return jedis.set("user", userJson);\n});\n\n// Or simplify it as below\nRedis.call(j -> j.set("user", JsonKit.toJson(user)));\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nThe above call usage does not involve object serialization or deserialization and directly operates on the Jedis object. Given the widespread use of JSON, this is the method recommended by the JFinal official team.',normalizedContent:'# 8.3 redis and cache\n\n\n# 1. basic usage\n\nredis and cache can be easily used together to access redis services. the redis object can obtain a cache object through the use() method. this cache object offers a rich api for using redis services. below is a sample usage:\n\npublic void redisdemo() {\n  // get the redis cache object named "bbs"\n  cache bbscache = redis.use("bbs");\n  bbscache.set("key", "value");\n  bbscache.get("key");\n \n  // get the redis cache object named "news"\n  cache newscache = redis.use("news");\n  newscache.set("k", "v");\n  newscache.get("k");\n \n  // the first created cache becomes the primary cache, so the cachename parameter can be omitted\n  bbscache = redis.use();  // the primary cache can omit the cachename parameter\n  bbscache.set("jfinal", "awesome");\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\nin the code above, the use() method takes "bbs" and "news" as parameters to obtain two cache objects. these objects can operate on their corresponding redis servers.\n\ngenerally, only one redisplugin connecting to a single redis server will be created. you can use redis.use().set(key, value) directly.\n\nnote: when using methods like incr, incrby, decr, decrby to manipulate counters, you should use getcounter(key) to read the value instead of get(key), otherwise a deserialization exception will be thrown. similarly, you can\'t use set(key, value) for operations like incrby(key, value).\n\n\n# 2. new usage (recommended)\n\nhigher versions of jfinal have introduced the call method for both the redis and cache classes. this method exposes the jedis object directly, bypassing serialization and deserialization processes.\n\n// use lambda to expose jedis api\nlong ret = redis.call(j -> j.incrby("key", 1));\n\nlong ret = redis.call(jedis -> {\n    return jedis.incrby("key", 1);\n});\n\n\n1\n2\n3\n4\n5\n6\n\n\nif multiple caches are configured, you can get the corresponding cache object by using redis.use(...) first and then proceed with the operation.\n\n// specify the cachename parameter before performing operations\nlong ret = redis.use("mycache").call(j -> j.incrby("key", 1));\n\n// redis.use() without arguments means getting the default cache\nlong ret = redis.use().call(j -> j.incrby("key", 1));\n\n\n1\n2\n3\n4\n5\n\n\nfor storing data types other than strings, you can convert them to json first and then perform the operation.\n\nuser user = dao.findbyid(userid);\nstring userjson = jsonkit.tojson(user);\n\nredis.call(jedis -> {\n    return jedis.set("user", userjson);\n});\n\n// or simplify it as below\nredis.call(j -> j.set("user", jsonkit.tojson(user)));\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nthe above call usage does not involve object serialization or deserialization and directly operates on the jedis object. given the widespread use of json, this is the method recommended by the jfinal official team.',charsets:{}},{title:"8.2 RedisPlugin",frontmatter:{},regularPath:"/en/8%20RedisPlugin/8.2%20RedisPlugin.html",relativePath:"en/8 RedisPlugin/8.2 RedisPlugin.md",key:"v-8e3ba93a",path:"/en/8%20RedisPlugin/8.2%20RedisPlugin.html",headers:[{level:3,title:"1. Basic Configuration",slug:"_1-basic-configuration",normalizedTitle:"1. basic configuration",charIndex:22},{level:3,title:"2. Maven Dependencies",slug:"_2-maven-dependencies",normalizedTitle:"2. maven dependencies",charIndex:899},{level:3,title:"3. Remote Connection",slug:"_3-remote-connection",normalizedTitle:"3. remote connection",charIndex:1323}],lastUpdated:"9/22/2023, 7:03:51 AM",lastUpdatedTimestamp:1695366231e3,headersStr:"1. Basic Configuration 2. Maven Dependencies 3. Remote Connection",content:'# 8.2 RedisPlugin\n\n\n# 1. Basic Configuration\n\nRedisPlugin exists as a plugin for JFinal. Therefore, it needs to be configured in JFinalConfig when used. Below is the sample code for configuring RedisPlugin:\n\npublic class DemoConfig extends JFinalConfig {\n  public void configPlugin(Plugins me) {\n    // Redis service used for caching the bbs module\n    RedisPlugin bbsRedis = new RedisPlugin("bbs", "localhost");\n    me.add(bbsRedis);\n \n    // Redis service used for caching the news module\n    RedisPlugin newsRedis = new RedisPlugin("news", "192.168.3.9");\n    me.add(newsRedis);\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\nThe above code creates two RedisPlugin objects, namely bbsRedis and newsRedis. The first created RedisPlugin object will become the primary cache object, which can be directly accessed through Redis.use(). Otherwise, a cacheName parameter is required, such as Redis.use("news").\n\n\n# 2. Maven Dependencies\n\nTo use RedisPlugin, add the following Maven dependencies:\n\n<dependency>\n    <groupId>redis.clients</groupId>\n    <artifactId>jedis</artifactId>\n    <version>3.6.3</version>\n</dependency>\n \n<dependency>\n    <groupId>de.ruedigermoeller</groupId>\n    <artifactId>fst</artifactId>\n    <version>2.57</version>\x3c!-- Note: Higher versions do not support JDK 8 --\x3e\n</dependency>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 3. Remote Connection\n\nIf the Redis server is on a remote machine, you\'ll need to modify some settings in the /etc/redis.conf configuration file:\n\n# Change the existing bind value from 127.0.0.1 to 0.0.0.0\nbind 0.0.0.0\n \n# Add requirepass configuration to set a password\nrequirepass your-connection-password-here\n\n\n1\n2\n3\n4\n5\n\n\nAfter making these changes, don\'t forget to restart Redis:\n\n# For CentOS, the restart command is as follows\nservice redis restart\n\n\n1\n2\n\n\nIf you are using a cloud server, make sure to open the corresponding port; the default port for Redis is 6379.\n\nFinally, when creating a RedisPlugin for remote connection, you must provide the appropriate password:\n\nRedisPlugin rp = new RedisPlugin("main", "xxx.com", 6379, 10000, "your-password-here");\nme.add(rp);\n\n\n1\n2\n\n\nThe last parameter in the above RedisPlugin is the password configured in redis.conf. More parameters are supported, such as the database:\n\nRedisPlugin rp = new RedisPlugin("main", "xxx.com", 6379, 10000, "your-password-here", database);\nme.add(rp);\n\n\n1\n2\n\n\nChoose parameters as needed.',normalizedContent:'# 8.2 redisplugin\n\n\n# 1. basic configuration\n\nredisplugin exists as a plugin for jfinal. therefore, it needs to be configured in jfinalconfig when used. below is the sample code for configuring redisplugin:\n\npublic class democonfig extends jfinalconfig {\n  public void configplugin(plugins me) {\n    // redis service used for caching the bbs module\n    redisplugin bbsredis = new redisplugin("bbs", "localhost");\n    me.add(bbsredis);\n \n    // redis service used for caching the news module\n    redisplugin newsredis = new redisplugin("news", "192.168.3.9");\n    me.add(newsredis);\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\nthe above code creates two redisplugin objects, namely bbsredis and newsredis. the first created redisplugin object will become the primary cache object, which can be directly accessed through redis.use(). otherwise, a cachename parameter is required, such as redis.use("news").\n\n\n# 2. maven dependencies\n\nto use redisplugin, add the following maven dependencies:\n\n<dependency>\n    <groupid>redis.clients</groupid>\n    <artifactid>jedis</artifactid>\n    <version>3.6.3</version>\n</dependency>\n \n<dependency>\n    <groupid>de.ruedigermoeller</groupid>\n    <artifactid>fst</artifactid>\n    <version>2.57</version>\x3c!-- note: higher versions do not support jdk 8 --\x3e\n</dependency>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 3. remote connection\n\nif the redis server is on a remote machine, you\'ll need to modify some settings in the /etc/redis.conf configuration file:\n\n# change the existing bind value from 127.0.0.1 to 0.0.0.0\nbind 0.0.0.0\n \n# add requirepass configuration to set a password\nrequirepass your-connection-password-here\n\n\n1\n2\n3\n4\n5\n\n\nafter making these changes, don\'t forget to restart redis:\n\n# for centos, the restart command is as follows\nservice redis restart\n\n\n1\n2\n\n\nif you are using a cloud server, make sure to open the corresponding port; the default port for redis is 6379.\n\nfinally, when creating a redisplugin for remote connection, you must provide the appropriate password:\n\nredisplugin rp = new redisplugin("main", "xxx.com", 6379, 10000, "your-password-here");\nme.add(rp);\n\n\n1\n2\n\n\nthe last parameter in the above redisplugin is the password configured in redis.conf. more parameters are supported, such as the database:\n\nredisplugin rp = new redisplugin("main", "xxx.com", 6379, 10000, "your-password-here", database);\nme.add(rp);\n\n\n1\n2\n\n\nchoose parameters as needed.',charsets:{}},{title:"8.4 Using RedisPlugin in a Non-Web Environment",frontmatter:{},regularPath:"/en/8%20RedisPlugin/8.4%20Use%20RedisPlugin%20in%20non-web%20environments.html",relativePath:"en/8 RedisPlugin/8.4 Use RedisPlugin in non-web environments.md",key:"v-5d029d03",path:"/en/8%20RedisPlugin/8.4%20Use%20RedisPlugin%20in%20non-web%20environments.html",lastUpdated:"9/22/2023, 7:03:51 AM",lastUpdatedTimestamp:1695366231e3,headersStr:null,content:'# 8.4 Using RedisPlugin in a Non-Web Environment\n\nRedisPlugin can also be used in non-web environments. You just need to include jfinal.jar and call the redisPlugin.start() method once. Below is a code example:\n\npublic class RedisTest {\n  public static void main(String[] args) {\n    RedisPlugin rp = new RedisPlugin("myRedis", "localhost");\n    // The only difference from web usage is that you need to call the start() method here\n    rp.start();\n \n    Redis.use().set("key", "value");\n    Redis.use().get("key");\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nIn this example, the RedisPlugin is initialized with the name "myRedis" and is configured to connect to a Redis server running on localhost. The start() method is explicitly called to initiate the plugin, which is the only step not typically necessary in a web environment. After that, you can use Redis.use() to interact with the Redis server as you would in a web application.',normalizedContent:'# 8.4 using redisplugin in a non-web environment\n\nredisplugin can also be used in non-web environments. you just need to include jfinal.jar and call the redisplugin.start() method once. below is a code example:\n\npublic class redistest {\n  public static void main(string[] args) {\n    redisplugin rp = new redisplugin("myredis", "localhost");\n    // the only difference from web usage is that you need to call the start() method here\n    rp.start();\n \n    redis.use().set("key", "value");\n    redis.use().get("key");\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nin this example, the redisplugin is initialized with the name "myredis" and is configured to connect to a redis server running on localhost. the start() method is explicitly called to initiate the plugin, which is the only step not typically necessary in a web environment. after that, you can use redis.use() to interact with the redis server as you would in a web application.',charsets:{}},{title:"9.1 Overview",frontmatter:{},regularPath:"/en/9%20Cron4jPlugin/9.1%20Overview.html",relativePath:"en/9 Cron4jPlugin/9.1 Overview.md",key:"v-7c4ba2a3",path:"/en/9%20Cron4jPlugin/9.1%20Overview.html",lastUpdated:"9/22/2023, 7:21:10 AM",lastUpdatedTimestamp:169536727e4,headersStr:null,content:"# 9.1 Overview\n\nCron4jPlugin is a task scheduling plugin integrated into JFinal. By using Cron4jPlugin, you can conveniently implement task scheduling functions using standard cron expressions.",normalizedContent:"# 9.1 overview\n\ncron4jplugin is a task scheduling plugin integrated into jfinal. by using cron4jplugin, you can conveniently implement task scheduling functions using standard cron expressions.",charsets:{}},{title:"9.2 Cron4jPlugin",frontmatter:{},regularPath:"/en/9%20Cron4jPlugin/9.2%20Cron4jPlugin.html",relativePath:"en/9 Cron4jPlugin/9.2 Cron4jPlugin.md",key:"v-0d393669",path:"/en/9%20Cron4jPlugin/9.2%20Cron4jPlugin.html",headers:[{level:3,title:"1. Basic Configuration",slug:"_1-basic-configuration",normalizedTitle:"1. basic configuration",charIndex:23},{level:3,title:"2. Cron Expressions",slug:"_2-cron-expressions",normalizedTitle:"2. cron expressions",charIndex:854},{level:3,title:"Common Mistakes:",slug:"common-mistakes",normalizedTitle:"common mistakes:",charIndex:2028},{level:3,title:"Frequently Asked Questions:",slug:"frequently-asked-questions",normalizedTitle:"frequently asked questions:",charIndex:2289},{level:3,title:"Special Reminder:",slug:"special-reminder",normalizedTitle:"special reminder:",charIndex:2725}],lastUpdated:"9/22/2023, 7:21:10 AM",lastUpdatedTimestamp:169536727e4,headersStr:"1. Basic Configuration 2. Cron Expressions Common Mistakes: Frequently Asked Questions: Special Reminder:",content:'# 9.2 Cron4jPlugin\n\n\n# 1. Basic Configuration\n\nCron4jPlugin exists as a plugin for JFinal, so it needs to be configured in JFinalConfig. Below is an example code snippet:\n\nCron4jPlugin cp = new Cron4jPlugin();\ncp.addTask("* * * * *", new MyTask());\nme.add(cp);\n\n\n1\n2\n3\n\n\nAs shown above, creating the plugin, passing parameters to addTask, and adding it to JFinal completes the basic configuration. The first parameter of cp.addTask is the cron expression for task scheduling, and the second parameter is an implementation of the Runnable interface. Cron4jPlugin will invoke the run method in MyTask according to the cron expression.\n\nIn the above example, besides using a Runnable implementation for MyTask, you can also use an implementation of the ITask interface. This interface has a stop() method that will be called back when scheduling stops.\n\n\n# 2. Cron Expressions\n\nCron expressions are used to customize scheduling rules. Unlike Quartz\'s cron expression, Cron4jPlugin\'s cron expression allows up to five parts, each separated by a space. These five parts represent minute, hour, day, month, and week, respectively, and have the following rules:\n\n * Minute: from 0 to 59\n * Hour: from 0 to 23\n * Day: from 1 to 31, the letter \'L\' can represent the last day of the month\n * Month: from 1 to 12, can use aliases like "jan", "feb", "mar", etc.\n * Week: from 0 to 6, where 0 represents Sunday and 6 represents Saturday, can use aliases like "sun", "mon", "tue", etc.\n\nThese five parts support various characters, including:\n\n * Number ( n ): Represents a specific time point, e.g., 5 * * * * means to execute at the 5th minute.\n * Comma ( , ): Specifies multiple values, e.g., 3,5 * * * * means to execute at the 3rd and 5th minutes.\n * Hyphen ( - ): Indicates a range, e.g., 1-3 * * * * means to execute at the 1st, 2nd, and 3rd minutes.\n * Asterisk ( * ): Means every time point, e.g., * * * * * means to execute every minute.\n * Slash ( / ): Specifies an increment value, e.g., */5 means to execute every 5 minutes.\n\n\n# Common Mistakes:\n\nThe use of the slash character in cron4j differs slightly from Linux. For example, the expression 10/3 * * * * in Linux means to schedule every three minutes starting from the 10th minute, while in cron4j, you need to use 10-59/3 * * * *.\n\n\n# Frequently Asked Questions:\n\n 1. If a task throws an exception, will it be scheduled again at its next scheduled time? The answer is yes.\n 2. If a task takes a long time to execute and hasn\'t finished by the time it\'s scheduled again, will it still be scheduled? The answer is also yes.\n\nIn summary, each scheduling is independent; whether the last scheduling threw an exception or finished has no impact on the current scheduling.\n\n\n# Special Reminder:\n\nCron4jPlugin\'s cron expression, like Linux\'s, only has five parts, unlike Quartz\'s seven parts. Any 7-part cron expressions found online should not be used with Cron4jPlugin.',normalizedContent:'# 9.2 cron4jplugin\n\n\n# 1. basic configuration\n\ncron4jplugin exists as a plugin for jfinal, so it needs to be configured in jfinalconfig. below is an example code snippet:\n\ncron4jplugin cp = new cron4jplugin();\ncp.addtask("* * * * *", new mytask());\nme.add(cp);\n\n\n1\n2\n3\n\n\nas shown above, creating the plugin, passing parameters to addtask, and adding it to jfinal completes the basic configuration. the first parameter of cp.addtask is the cron expression for task scheduling, and the second parameter is an implementation of the runnable interface. cron4jplugin will invoke the run method in mytask according to the cron expression.\n\nin the above example, besides using a runnable implementation for mytask, you can also use an implementation of the itask interface. this interface has a stop() method that will be called back when scheduling stops.\n\n\n# 2. cron expressions\n\ncron expressions are used to customize scheduling rules. unlike quartz\'s cron expression, cron4jplugin\'s cron expression allows up to five parts, each separated by a space. these five parts represent minute, hour, day, month, and week, respectively, and have the following rules:\n\n * minute: from 0 to 59\n * hour: from 0 to 23\n * day: from 1 to 31, the letter \'l\' can represent the last day of the month\n * month: from 1 to 12, can use aliases like "jan", "feb", "mar", etc.\n * week: from 0 to 6, where 0 represents sunday and 6 represents saturday, can use aliases like "sun", "mon", "tue", etc.\n\nthese five parts support various characters, including:\n\n * number ( n ): represents a specific time point, e.g., 5 * * * * means to execute at the 5th minute.\n * comma ( , ): specifies multiple values, e.g., 3,5 * * * * means to execute at the 3rd and 5th minutes.\n * hyphen ( - ): indicates a range, e.g., 1-3 * * * * means to execute at the 1st, 2nd, and 3rd minutes.\n * asterisk ( * ): means every time point, e.g., * * * * * means to execute every minute.\n * slash ( / ): specifies an increment value, e.g., */5 means to execute every 5 minutes.\n\n\n# common mistakes:\n\nthe use of the slash character in cron4j differs slightly from linux. for example, the expression 10/3 * * * * in linux means to schedule every three minutes starting from the 10th minute, while in cron4j, you need to use 10-59/3 * * * *.\n\n\n# frequently asked questions:\n\n 1. if a task throws an exception, will it be scheduled again at its next scheduled time? the answer is yes.\n 2. if a task takes a long time to execute and hasn\'t finished by the time it\'s scheduled again, will it still be scheduled? the answer is also yes.\n\nin summary, each scheduling is independent; whether the last scheduling threw an exception or finished has no impact on the current scheduling.\n\n\n# special reminder:\n\ncron4jplugin\'s cron expression, like linux\'s, only has five parts, unlike quartz\'s seven parts. any 7-part cron expressions found online should not be used with cron4jplugin.',charsets:{}},{title:"9.3 Using External Configuration Files",frontmatter:{},regularPath:"/en/9%20Cron4jPlugin/9.3%20Use%20external%20configuration%20file.html",relativePath:"en/9 Cron4jPlugin/9.3 Use external configuration file.md",key:"v-7aa09a24",path:"/en/9%20Cron4jPlugin/9.3%20Use%20external%20configuration%20file.html",lastUpdated:"9/22/2023, 7:21:10 AM",lastUpdatedTimestamp:169536727e4,headersStr:null,content:'# 9.3 Using External Configuration Files\n\nThe previous example only showed the Java hard-coded configuration. In more application scenarios, external configuration files are used for flexible scheduling strategies, making it easier to change the scheduling strategy at any time. Below is an example code for external configuration:\n\ncron4j=task1, task2\ntask1.cron=* * * * *\ntask1.class=com.xxx.TaskAaa\ntask1.daemon=true\ntask1.enable=true\n \ntask2.cron=* * * * *\ntask2.class=com.xxx.TaskBbb\ntask2.daemon=true\ntask2.enable=false\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nIn the above example, cron4j is what\'s called the configuration name or configName. You can name it as you like. This name will be used when creating the Cron4jPlugin object. If a name is not provided when creating the Cron4jPlugin object, the default value is "cron4j".\n\nThe configName is immediately followed by task1 and task2, which represent the names of two tasks in the current configuration. These names specify that subsequent configurations will start with them, for example, task1.cron, task2.cron all start with these task names.\n\ntask1.cron specifies the cron expression for the task, task1.class specifies the target Java class for the task that needs to implement the Runnable interface, task1.daemon specifies whether the scheduled task thread is a daemon thread, and task1.enable specifies whether the task is enabled or disabled. This last configuration is optional and can be omitted; if omitted, it defaults to enabled. The configuration for task2 has the same meaning as for task1; only the task names differ.\n\nIn summary, configName specifies taskName, multiple taskNames can be separated by commas, and each taskName specifies a specific task. Each specific task has four configurations: cron, class, daemon, and enable, each configuration starts with taskName.\n\nAssuming the configuration file name is config.txt, the creation of Cron4jPlugin after the configuration can be as follows:\n\ncp = new Cron4jPlugin("config.txt");\ncp = new Cron4jPlugin("config.txt", "cron4j");\n \ncp = new Cron4jPlugin(PropKit.use("config.txt"));\ncp = new Cron4jPlugin(PropKit.use("config.txt"), "cron4j");\n \nme.add(cp);\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nIn the code above, the first four lines are four ways to create a Cron4jPlugin object using a configuration file. The first line only passes in the configuration file name, omitting the configName, so the default value is "cron4j". The second line is essentially the same as the first, except that it specifies its configName. The third and fourth lines are similar to the first two, except that they use PropKit for loading.\n\nPlease note: The configName mentioned here is the "cron4j" in the example configuration item cron4j=task1, task2. This configName is essentially the entry point that Cron4jPlugin looks for in the configuration.',normalizedContent:'# 9.3 using external configuration files\n\nthe previous example only showed the java hard-coded configuration. in more application scenarios, external configuration files are used for flexible scheduling strategies, making it easier to change the scheduling strategy at any time. below is an example code for external configuration:\n\ncron4j=task1, task2\ntask1.cron=* * * * *\ntask1.class=com.xxx.taskaaa\ntask1.daemon=true\ntask1.enable=true\n \ntask2.cron=* * * * *\ntask2.class=com.xxx.taskbbb\ntask2.daemon=true\ntask2.enable=false\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nin the above example, cron4j is what\'s called the configuration name or configname. you can name it as you like. this name will be used when creating the cron4jplugin object. if a name is not provided when creating the cron4jplugin object, the default value is "cron4j".\n\nthe configname is immediately followed by task1 and task2, which represent the names of two tasks in the current configuration. these names specify that subsequent configurations will start with them, for example, task1.cron, task2.cron all start with these task names.\n\ntask1.cron specifies the cron expression for the task, task1.class specifies the target java class for the task that needs to implement the runnable interface, task1.daemon specifies whether the scheduled task thread is a daemon thread, and task1.enable specifies whether the task is enabled or disabled. this last configuration is optional and can be omitted; if omitted, it defaults to enabled. the configuration for task2 has the same meaning as for task1; only the task names differ.\n\nin summary, configname specifies taskname, multiple tasknames can be separated by commas, and each taskname specifies a specific task. each specific task has four configurations: cron, class, daemon, and enable, each configuration starts with taskname.\n\nassuming the configuration file name is config.txt, the creation of cron4jplugin after the configuration can be as follows:\n\ncp = new cron4jplugin("config.txt");\ncp = new cron4jplugin("config.txt", "cron4j");\n \ncp = new cron4jplugin(propkit.use("config.txt"));\ncp = new cron4jplugin(propkit.use("config.txt"), "cron4j");\n \nme.add(cp);\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nin the code above, the first four lines are four ways to create a cron4jplugin object using a configuration file. the first line only passes in the configuration file name, omitting the configname, so the default value is "cron4j". the second line is essentially the same as the first, except that it specifies its configname. the third and fourth lines are similar to the first two, except that they use propkit for loading.\n\nplease note: the configname mentioned here is the "cron4j" in the example configuration item cron4j=task1, task2. this configname is essentially the entry point that cron4jplugin looks for in the configuration.',charsets:{}},{title:"9.4 Advanced Usage",frontmatter:{},regularPath:"/en/9%20Cron4jPlugin/9.4%20Advanced%20usage.html",relativePath:"en/9 Cron4jPlugin/9.4 Advanced usage.md",key:"v-674f4898",path:"/en/9%20Cron4jPlugin/9.4%20Advanced%20usage.html",lastUpdated:"9/22/2023, 7:21:10 AM",lastUpdatedTimestamp:169536727e4,headersStr:null,content:'# 9.4 Advanced Usage\n\nIn addition to scheduling Java classes that implement the Runnable interface, you can also directly schedule external applications, such as a specific executable program under Windows or Linux. Below is a code example:\n\nString[] command = { "C:\\\\tomcat\\\\bin\\\\catalina.bat", "start" };\nString[] envs = { "CATALINA_HOME=C:\\\\tomcat", "JAVA_HOME=C:\\\\jdks\\\\jdk5" };\nFile directory = new File("C:\\\\MyDirectory");\nProcessTask task = new ProcessTask(command, envs, directory);\n \ncron4jPlugin.addTask(task);\nme.add(cron4jPlugin);\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nAs shown above, you only need to create a ProcessTask object and point it to a specific application. Then, by adding it via addTask, you can schedule it. This approach makes implementing functionalities like backing up the server database and zipping it into a ZIP file every midnight extremely simple and convenient. For more detailed usage, you can refer to the comments in the Cron4jPlugin.java source code.',normalizedContent:'# 9.4 advanced usage\n\nin addition to scheduling java classes that implement the runnable interface, you can also directly schedule external applications, such as a specific executable program under windows or linux. below is a code example:\n\nstring[] command = { "c:\\\\tomcat\\\\bin\\\\catalina.bat", "start" };\nstring[] envs = { "catalina_home=c:\\\\tomcat", "java_home=c:\\\\jdks\\\\jdk5" };\nfile directory = new file("c:\\\\mydirectory");\nprocesstask task = new processtask(command, envs, directory);\n \ncron4jplugin.addtask(task);\nme.add(cron4jplugin);\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nas shown above, you only need to create a processtask object and point it to a specific application. then, by adding it via addtask, you can schedule it. this approach makes implementing functionalities like backing up the server database and zipping it into a zip file every midnight extremely simple and convenient. for more detailed usage, you can refer to the comments in the cron4jplugin.java source code.',charsets:{}},{title:"1.1 Maven 基础",frontmatter:{},regularPath:"/zh/1%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/1.1%20Maven%20%E5%9F%BA%E7%A1%80.html",relativePath:"zh/1 快速上手/1.1 Maven 基础.md",key:"v-07eea85b",path:"/zh/1%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/1.1%20Maven%20%E5%9F%BA%E7%A1%80.html",headers:[{level:3,title:"1、下载",slug:"_1、下载",normalizedTitle:"1、下载",charIndex:157},{level:3,title:"2、安装",slug:"_2、安装",normalizedTitle:"2、安装",charIndex:279},{level:3,title:"3、配置 eclipse 指向 maven",slug:"_3、配置-eclipse-指向-maven",normalizedTitle:"3、配置 eclipse 指向 maven",charIndex:705}],lastUpdated:"9/23/2023, 2:06:20 AM",lastUpdatedTimestamp:169543478e4,headersStr:"1、下载 2、安装 3、配置 eclipse 指向 maven",content:'# 1.1 Maven 基础\n\n开发 jfinal 项目建议使用 maven，而不是使用传统手工的方式去管理 jar 包和构建项目。由于 maven 应用十分广泛，网上已经有很多 maven 方面的资源，所以本小节只介绍 maven 使用的最基础的几个小点，了解这几个点上手使用 jfinal 已经够用。\n\n\n# 1、下载\n\n进入 maven 官网下载页面: http://maven.apache.org/download.cgi 点击 apache-maven-3.6.3-bin.zip 下载。建议最低下载 3.6.3 版本，高版本更加稳定。\n\n\n# 2、安装\n\n将 maven 解压到某个目录中，配置一下环境变量即完成安装，环境变量的配置与 JDK 的配置方式类似，配置两个环境变量即可。以下是 linux 系统下的配置示例：\n\nexport MAVEN_HOME=/Users/james/app/maven\nexport PATH=$PATH:$JAVA_HOME/bin:$MAVEN_HOME/bin\n\n\n1\n2\n\n\n如上所示，将上述两行代码放在 /etc/profile 或者 ~/.bash_profile 文件之中即完成了 maven 的安装。注意配置完上述环境变量后使用 source /etc/profile 或 source ~/.bash_profile 命令让其生效。\n\nwindows 系统的环境变量配置参考这里：传送门 A 以及 传送门B\n\n最后，打开命令行输入如下命令检查 maven 是否安装成功，安装成功会显示 maven 版本号：\n\nmvn -v\n\n\n1\n\n\n\n# 3、配置 eclipse 指向 maven\n\neclipse 本身自带一个嵌入的 maven，但嵌入的 maven 使用并不可靠，也不方便，例如在控制台无法使用 maven 的命令行进行操作。所以一定不要使用 eclipse 嵌入的 maven。以下以简要介绍一下配置方式\n\n打开配置主窗口，点击左侧的 Maven 下的 Installatioins 子菜单\n\n点击上图中的 add 按钮会弹出下面的窗口：\n\n点击上图中的 Directory 选择 maven 解压到的那个目录，勾选刚刚添加的 maven，并去掉其它两个 maven 的勾选项，只保留刚刚安装的那个勾选\n\n\n\n最后再点击左侧的 User Settings 菜单，然后分别点击右边两个的 Browe 按钮，为其配置好两个 settings.xml 文件即可，这两个文件在 maven 安装目录的 conf 子目录之下\n\n点击 ok 按钮完成配置\n\n4､导入 maven 项目到 eclipse 很多同学在下载首页的 jfinal demo 后导入到 eclipse/IDEA 后无法使用，本质原因是导入的方法不对。\n\n导入 maven 项目的重点是：一定要将其当成 maven 项目，通过 "maven 导入向导" 来导入项目。\n\n以下给出导入过程的截图，第一步是检查被导入的项目的根目录是否干净：\n\n\n\n以上截图中出现了 .settings 目录以及 .classpath、.project 文件（注意它们是隐藏文件），证明该项目已经被导入过 eclipse，所以无需导入，只需在导入窗口中选择 Existing Projects into Worksapce 重新打开项目即可。\n\n如果项目无法使用，可以将上述目录及文件先删掉，然后按下面文档中的方法导入一次即可。\n\n如果项目根目录下面不存在上述目录以及文件，则需要进行 maven 项目的导入：\n\n关键一步在于：必须要选择 Existing Maven Project：\n\n如果不当成是 maven 项目导入，则 eclipse 无法生成正确的 .settings、.classpath、.project 等配置，从而造成项目无法使用（同理，IDEA 开发环境下也类似）。\n\n最后一步，选择项目所在的目录，注意要选择 pom.xml 所在的目录：\n\n点击 Finish 按钮，即可完成 maven 项目的导入。\n\n一个标准的 maven 项目只有 src 目录与 pom.xml 文件是必须的。',normalizedContent:'# 1.1 maven 基础\n\n开发 jfinal 项目建议使用 maven，而不是使用传统手工的方式去管理 jar 包和构建项目。由于 maven 应用十分广泛，网上已经有很多 maven 方面的资源，所以本小节只介绍 maven 使用的最基础的几个小点，了解这几个点上手使用 jfinal 已经够用。\n\n\n# 1、下载\n\n进入 maven 官网下载页面: http://maven.apache.org/download.cgi 点击 apache-maven-3.6.3-bin.zip 下载。建议最低下载 3.6.3 版本，高版本更加稳定。\n\n\n# 2、安装\n\n将 maven 解压到某个目录中，配置一下环境变量即完成安装，环境变量的配置与 jdk 的配置方式类似，配置两个环境变量即可。以下是 linux 系统下的配置示例：\n\nexport maven_home=/users/james/app/maven\nexport path=$path:$java_home/bin:$maven_home/bin\n\n\n1\n2\n\n\n如上所示，将上述两行代码放在 /etc/profile 或者 ~/.bash_profile 文件之中即完成了 maven 的安装。注意配置完上述环境变量后使用 source /etc/profile 或 source ~/.bash_profile 命令让其生效。\n\nwindows 系统的环境变量配置参考这里：传送门 a 以及 传送门b\n\n最后，打开命令行输入如下命令检查 maven 是否安装成功，安装成功会显示 maven 版本号：\n\nmvn -v\n\n\n1\n\n\n\n# 3、配置 eclipse 指向 maven\n\neclipse 本身自带一个嵌入的 maven，但嵌入的 maven 使用并不可靠，也不方便，例如在控制台无法使用 maven 的命令行进行操作。所以一定不要使用 eclipse 嵌入的 maven。以下以简要介绍一下配置方式\n\n打开配置主窗口，点击左侧的 maven 下的 installatioins 子菜单\n\n点击上图中的 add 按钮会弹出下面的窗口：\n\n点击上图中的 directory 选择 maven 解压到的那个目录，勾选刚刚添加的 maven，并去掉其它两个 maven 的勾选项，只保留刚刚安装的那个勾选\n\n\n\n最后再点击左侧的 user settings 菜单，然后分别点击右边两个的 browe 按钮，为其配置好两个 settings.xml 文件即可，这两个文件在 maven 安装目录的 conf 子目录之下\n\n点击 ok 按钮完成配置\n\n4､导入 maven 项目到 eclipse 很多同学在下载首页的 jfinal demo 后导入到 eclipse/idea 后无法使用，本质原因是导入的方法不对。\n\n导入 maven 项目的重点是：一定要将其当成 maven 项目，通过 "maven 导入向导" 来导入项目。\n\n以下给出导入过程的截图，第一步是检查被导入的项目的根目录是否干净：\n\n\n\n以上截图中出现了 .settings 目录以及 .classpath、.project 文件（注意它们是隐藏文件），证明该项目已经被导入过 eclipse，所以无需导入，只需在导入窗口中选择 existing projects into worksapce 重新打开项目即可。\n\n如果项目无法使用，可以将上述目录及文件先删掉，然后按下面文档中的方法导入一次即可。\n\n如果项目根目录下面不存在上述目录以及文件，则需要进行 maven 项目的导入：\n\n关键一步在于：必须要选择 existing maven project：\n\n如果不当成是 maven 项目导入，则 eclipse 无法生成正确的 .settings、.classpath、.project 等配置，从而造成项目无法使用（同理，idea 开发环境下也类似）。\n\n最后一步，选择项目所在的目录，注意要选择 pom.xml 所在的目录：\n\n点击 finish 按钮，即可完成 maven 项目的导入。\n\n一个标准的 maven 项目只有 src 目录与 pom.xml 文件是必须的。',charsets:{cjk:!0}},{title:"1.10 JBolt 插件下开发",frontmatter:{},regularPath:"/zh/1%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/1.10%20JBolt%20%E6%8F%92%E4%BB%B6%E4%B8%8B%E5%BC%80%E5%8F%91.html",relativePath:"zh/1 快速上手/1.10 JBolt 插件下开发.md",key:"v-2f735cb6",path:"/zh/1%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/1.10%20JBolt%20%E6%8F%92%E4%BB%B6%E4%B8%8B%E5%BC%80%E5%8F%91.html",lastUpdated:"9/22/2023, 9:39:45 AM",lastUpdatedTimestamp:1695375585e3,headersStr:null,content:"# 1.10 JBolt 插件下开发\n\nJBolt是专门为JFinal社区开发者定制的Eclipse开发环境下极速开发IDE插件，JFinal开发者必备利器。\n\nJBolt官网：http://www.jbolt.cn\n\n作者：山东小木\n\n运行Eclipse平台版本：Eclipse Java EE 版本 4.6.3+（推荐下载离线包版Eclipse）\n\n目前JBolt在Window、Linux桌面版、Mac上测试均可正常开发使用\n\n安装使用教程（视频版）：点击进入观看视频教程\n\n安装使用教程（图文版）：http://www.jfinal.com/share/1052\n\nJBolt的能力：\n\n总体来讲，JBolt为开发提供了可视化向导配置后一键生成开发环境基础项目代码、依赖类库自动导入、配置文件自动生成、生成后的项目可以一键启动访问的能力。\n\n1、根据创建项目的向导配置信息，可以一键生成基于JFinal的项目开发环境，支持普通动态Web工程和Maven工程的生成，同时根据配置自动导入依赖的jar包、生成web.xml、数据库配置文件、jfinalConfig主配置类、IndexController.java、路由集合配置类、服务器配置信息等。\n\n2、支持Mysql、Oracle、sql server、h2、sqlite、postgresql等主流数据库配置文件和Model、BaseModel代码的生成\n\n3、JBolt提供了一个JFinal Enjoy 模板编辑器，可以同时编辑HTML JS CSS 和JFinal模板代码，模板指令提示和自动完成\n\n4、JBolt提供了一个快速新增JFinal Controller、Inteceptor、validator、handler、Model向导\n\n5、JBolt安装后开启提供了一个JFinal定制Eclipse视图，专门优化了常用操作和菜单的顺序位置，使用起来更清爽、更方便。\n\n6、提供了JFinal-undertow、Jetty等服务器环境的自动创建、导入、生成配置文件等功能\n\n7、普通工程和Maven工程里基于JFinal Undertow的项目都可以打包成JFinal定制的打包部署结构，Maven工程里使用的是assembly插件，普通成功里是专门为JFinal定制的JFinal Packaging Tool，一键秒级打包项目。\n\n7、内置一键生成基于JFinal的Demo教学案例项目(待开发)\n\n8、向导一键生成微信公众号、企业号、小程序的后端开发环境和配置信息(待开发)\n\n9、内置BaseController、BaseService封装常用 内置controller生成模板 service生成模板 一键实现增删改查分页(开发中)\n\n10、JBolt提供的一套可以轻松二次开发后台管理系统（包含字典、全局配置、微信公众号管理、权限管理、用户管理、角色管理、登录注册等基础模块）（已开发了80%）\n\nJBolt截图：\n\n创建Maven项目的向导：\n\nJFinalConfig的常见配置、路由配置等：\n\nJFinal-Undertow Server的配置\n\n数据库的配置：\n\n第三方常用类库的自动导入配置：\n\n还有更多功能正在开发，如果您有特殊需求，也可以联系我们，如果通用就更新到JBolt里 如果特殊，为您定制。",normalizedContent:"# 1.10 jbolt 插件下开发\n\njbolt是专门为jfinal社区开发者定制的eclipse开发环境下极速开发ide插件，jfinal开发者必备利器。\n\njbolt官网：http://www.jbolt.cn\n\n作者：山东小木\n\n运行eclipse平台版本：eclipse java ee 版本 4.6.3+（推荐下载离线包版eclipse）\n\n目前jbolt在window、linux桌面版、mac上测试均可正常开发使用\n\n安装使用教程（视频版）：点击进入观看视频教程\n\n安装使用教程（图文版）：http://www.jfinal.com/share/1052\n\njbolt的能力：\n\n总体来讲，jbolt为开发提供了可视化向导配置后一键生成开发环境基础项目代码、依赖类库自动导入、配置文件自动生成、生成后的项目可以一键启动访问的能力。\n\n1、根据创建项目的向导配置信息，可以一键生成基于jfinal的项目开发环境，支持普通动态web工程和maven工程的生成，同时根据配置自动导入依赖的jar包、生成web.xml、数据库配置文件、jfinalconfig主配置类、indexcontroller.java、路由集合配置类、服务器配置信息等。\n\n2、支持mysql、oracle、sql server、h2、sqlite、postgresql等主流数据库配置文件和model、basemodel代码的生成\n\n3、jbolt提供了一个jfinal enjoy 模板编辑器，可以同时编辑html js css 和jfinal模板代码，模板指令提示和自动完成\n\n4、jbolt提供了一个快速新增jfinal controller、inteceptor、validator、handler、model向导\n\n5、jbolt安装后开启提供了一个jfinal定制eclipse视图，专门优化了常用操作和菜单的顺序位置，使用起来更清爽、更方便。\n\n6、提供了jfinal-undertow、jetty等服务器环境的自动创建、导入、生成配置文件等功能\n\n7、普通工程和maven工程里基于jfinal undertow的项目都可以打包成jfinal定制的打包部署结构，maven工程里使用的是assembly插件，普通成功里是专门为jfinal定制的jfinal packaging tool，一键秒级打包项目。\n\n7、内置一键生成基于jfinal的demo教学案例项目(待开发)\n\n8、向导一键生成微信公众号、企业号、小程序的后端开发环境和配置信息(待开发)\n\n9、内置basecontroller、baseservice封装常用 内置controller生成模板 service生成模板 一键实现增删改查分页(开发中)\n\n10、jbolt提供的一套可以轻松二次开发后台管理系统（包含字典、全局配置、微信公众号管理、权限管理、用户管理、角色管理、登录注册等基础模块）（已开发了80%）\n\njbolt截图：\n\n创建maven项目的向导：\n\njfinalconfig的常见配置、路由配置等：\n\njfinal-undertow server的配置\n\n数据库的配置：\n\n第三方常用类库的自动导入配置：\n\n还有更多功能正在开发，如果您有特殊需求，也可以联系我们，如果通用就更新到jbolt里 如果特殊，为您定制。",charsets:{cjk:!0}},{title:"1.11 特别声明",frontmatter:{},regularPath:"/zh/1%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/1.11%20%E7%89%B9%E5%88%AB%E5%A3%B0%E6%98%8E.html",relativePath:"zh/1 快速上手/1.11 特别声明.md",key:"v-38525cd6",path:"/zh/1%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/1.11%20%E7%89%B9%E5%88%AB%E5%A3%B0%E6%98%8E.html",lastUpdated:"9/8/2023, 9:00:03 AM",lastUpdatedTimestamp:1694163603e3,headersStr:null,content:"# 1.11 特别声明\n\nJFinal 项目是符合 Java Web 规范的普通项目，所以开发者原有的项目 启动 和 部署 知识全部有效，不需要特殊对待 JFinal 项目。\n\n因此，本章介绍的所有启动及部署方式 仅仅针对于 JFinal 内部提供的 jfinal-undertow 以及 jetty-server 整合方式。当碰到启动问题时如果并非在使用 jfinal 整合的 undertow、jetty，那么决然与 jfinal 无关，也不需要查看本章的文档，从网上查找 Java Web 启动与部署的知识即可解决。\n\n如果不使用 JFinal 内部提供的 undertow、jetty 整合方式启动，那么可以去掉对相关的 jar 包依赖，maven 项目则可删掉相关 dependency 配置。\n\n最后，如果部署没有使用 jfinal undertow，那么需要将 pom.xml 中的打包类型改为 war，否则会打出 jar 包：\n\n<packaging>war</packaging>\n\n\n1\n\n\n同样，这个问题也与 jfinal 无关，是 maven 基础知识",normalizedContent:"# 1.11 特别声明\n\njfinal 项目是符合 java web 规范的普通项目，所以开发者原有的项目 启动 和 部署 知识全部有效，不需要特殊对待 jfinal 项目。\n\n因此，本章介绍的所有启动及部署方式 仅仅针对于 jfinal 内部提供的 jfinal-undertow 以及 jetty-server 整合方式。当碰到启动问题时如果并非在使用 jfinal 整合的 undertow、jetty，那么决然与 jfinal 无关，也不需要查看本章的文档，从网上查找 java web 启动与部署的知识即可解决。\n\n如果不使用 jfinal 内部提供的 undertow、jetty 整合方式启动，那么可以去掉对相关的 jar 包依赖，maven 项目则可删掉相关 dependency 配置。\n\n最后，如果部署没有使用 jfinal undertow，那么需要将 pom.xml 中的打包类型改为 war，否则会打出 jar 包：\n\n<packaging>war</packaging>\n\n\n1\n\n\n同样，这个问题也与 jfinal 无关，是 maven 基础知识",charsets:{cjk:!0}},{title:"1.2 jfinal-undertow 下开发",frontmatter:{},regularPath:"/zh/1%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/1.2%20jfinal-undertow%20%E4%B8%8B%E5%BC%80%E5%8F%91.html",relativePath:"zh/1 快速上手/1.2 jfinal-undertow 下开发.md",key:"v-a64181e8",path:"/zh/1%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/1.2%20jfinal-undertow%20%E4%B8%8B%E5%BC%80%E5%8F%91.html",headers:[{level:3,title:"1、创建标准的 maven 项目",slug:"_1、创建标准的-maven-项目",normalizedTitle:"1、创建标准的 maven 项目",charIndex:30},{level:3,title:"2、添加 jfinal-undertow 与 jfinal 依赖",slug:"_2、添加-jfinal-undertow-与-jfinal-依赖",normalizedTitle:"2、添加 jfinal-undertow 与 jfinal 依赖",charIndex:446},{level:3,title:"3、添加 java 文件",slug:"_3、添加-java-文件",normalizedTitle:"3、添加 java 文件",charIndex:1008},{level:3,title:"4、启动项目",slug:"_4、启动项目",normalizedTitle:"4、启动项目",charIndex:2489},{level:3,title:"5、开启浏览器看效果",slug:"_5、开启浏览器看效果",normalizedTitle:"5、开启浏览器看效果",charIndex:2563}],lastUpdated:"9/22/2023, 9:39:45 AM",lastUpdatedTimestamp:1695375585e3,headersStr:"1、创建标准的 maven 项目 2、添加 jfinal-undertow 与 jfinal 依赖 3、添加 java 文件 4、启动项目 5、开启浏览器看效果",content:'# 1.2 jfinal-undertow 下开发\n\n\n# 1、创建标准的 maven 项目\n\neclipse 主菜单选择 new，再选择 project\n\n\n\n在弹出的窗口中选择 Maven Project，点击 next 按钮进入下一步\n\n\n\n在接下来的窗口中勾选 Use default Wrokspace location 点击 next 进入下一步\n\n\n\n在接下来的窗口中的 Filter 栏输入 "webapp"，选择 org.apache.maven.archetypes maven-archetype-webapp 1.0，点击 next 进入下一步\n\n\n\n在接下来的窗口中输入 Group Id 以及 Artifact Id，点击 finish 完成项目的创建\n\n\n\n创建创建完成后，最终的目录结构如下\n\n\n\n注意：在某些低版本的 eclipse 中，项目创建完成后，在 main 目录下面会缺少 "java" 这个目录，只需要在资源管理器里面手动创建该目录即可\n\n\n# 2、添加 jfinal-undertow 与 jfinal 依赖\n\n打开 pom.xml 文件，在其中添加如下依赖\n\n<dependency>\n    <groupId>com.jfinal</groupId>\n    <artifactId>jfinal-undertow</artifactId>\n    <version>3.5</version>\n</dependency>\n \n<dependency>\n    <groupId>com.jfinal</groupId>\n    <artifactId>jfinal</artifactId>\n    <version>5.1.2</version>\n</dependency>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n如果需要 WebSocket 支持，再添加一个依赖，不开发 WebSocket 无需理会\n\n<dependency>\n    <groupId>io.undertow</groupId>\n    <artifactId>undertow-websockets-jsr</artifactId>\n    <version>2.2.24.Final</version>\n</dependency>\n\n\n1\n2\n3\n4\n5\n\n\n\n# 3、添加 java 文件\n\n在项目 src/main/java 目录下创建demo包，并在 demo 包下创建 DemoConfig 文件\n\npackage demo;\n \nimport com.jfinal.config.*;\nimport com.jfinal.template.Engine;\nimport com.jfinal.server.undertow.UndertowServer;\n \npublic class DemoConfig extends JFinalConfig {\n \n    /**\n     * 注意：用于启动的 main 方法可以在任意 java 类中创建，在此仅为方便演示\n     *      才将 main 方法放在了 DemoConfig 中\n     *\n     *      开发项目时，建议新建一个 App.java 或者 Start.java 这样的专用\n     *      启动入口类放置用于启动的 main 方法\n     */\n    public static void main(String[] args) {\n        UndertowServer.start(DemoConfig.class, 80, true);\n    }\n \n    public void configConstant(Constants me) {\n       me.setDevMode(true);\n    }\n    \n    public void configRoute(Routes me) {\n       // jfinal 4.9.03 版新增了路由扫描功能，不必手动添加路由\n       // me.add("/hello", HelloController.class);\n       \n       // 使用路由扫描，参数 "demo." 表示只扫描 demo 包及其子包下的路由\n       me.scan("demo.");\n    }\n    \n    public void configEngine(Engine me) {}\n    public void configPlugin(Plugins me) {}\n    public void configInterceptor(Interceptors me) {}\n    public void configHandler(Handlers me) {}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n\n\n在 demo 包下创建 HelloController 类文件， 内容如下：\n\npackage demo;\nimport com.jfinal.core.Controller;\n \n@Path("/hello")\npublic class HelloController extends Controller {\n    public void index() {\n       renderText("Hello JFinal World.");\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\njfinal 4.9.03 新增了路由扫描功能，详情请见：https://jfinal.com/doc/2-3\n\n\n# 4、启动项目\n\n在 DemoConfig 类文件上点击鼠标右键，选择 Debug As，再选择 Java Applidation 即可运行\n\n\n# 5、开启浏览器看效果\n\n打开浏览器在地址栏中输入: http://localhost/hello，输出内容为Hello JFinal World证明项目框架搭建完成\n\n完整 demo示例 可在JFinal官方网站首页右侧下载：http://www.jfinal.com\n\n注意：jfinal-undertow 默认不支持 JSP，强烈建议使用 jfinal 默认的模板引擎 enjoy，谁用谁爽翻。\n\n如果一定要使用 JSP，可以参考文档 1.5 章节最后面的《JSP支持问题》：https://jfinal.com/doc/1-5，或者使用 jetty-server 作为开发环境：https://jfinal.com/doc/1-6',normalizedContent:'# 1.2 jfinal-undertow 下开发\n\n\n# 1、创建标准的 maven 项目\n\neclipse 主菜单选择 new，再选择 project\n\n\n\n在弹出的窗口中选择 maven project，点击 next 按钮进入下一步\n\n\n\n在接下来的窗口中勾选 use default wrokspace location 点击 next 进入下一步\n\n\n\n在接下来的窗口中的 filter 栏输入 "webapp"，选择 org.apache.maven.archetypes maven-archetype-webapp 1.0，点击 next 进入下一步\n\n\n\n在接下来的窗口中输入 group id 以及 artifact id，点击 finish 完成项目的创建\n\n\n\n创建创建完成后，最终的目录结构如下\n\n\n\n注意：在某些低版本的 eclipse 中，项目创建完成后，在 main 目录下面会缺少 "java" 这个目录，只需要在资源管理器里面手动创建该目录即可\n\n\n# 2、添加 jfinal-undertow 与 jfinal 依赖\n\n打开 pom.xml 文件，在其中添加如下依赖\n\n<dependency>\n    <groupid>com.jfinal</groupid>\n    <artifactid>jfinal-undertow</artifactid>\n    <version>3.5</version>\n</dependency>\n \n<dependency>\n    <groupid>com.jfinal</groupid>\n    <artifactid>jfinal</artifactid>\n    <version>5.1.2</version>\n</dependency>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n如果需要 websocket 支持，再添加一个依赖，不开发 websocket 无需理会\n\n<dependency>\n    <groupid>io.undertow</groupid>\n    <artifactid>undertow-websockets-jsr</artifactid>\n    <version>2.2.24.final</version>\n</dependency>\n\n\n1\n2\n3\n4\n5\n\n\n\n# 3、添加 java 文件\n\n在项目 src/main/java 目录下创建demo包，并在 demo 包下创建 democonfig 文件\n\npackage demo;\n \nimport com.jfinal.config.*;\nimport com.jfinal.template.engine;\nimport com.jfinal.server.undertow.undertowserver;\n \npublic class democonfig extends jfinalconfig {\n \n    /**\n     * 注意：用于启动的 main 方法可以在任意 java 类中创建，在此仅为方便演示\n     *      才将 main 方法放在了 democonfig 中\n     *\n     *      开发项目时，建议新建一个 app.java 或者 start.java 这样的专用\n     *      启动入口类放置用于启动的 main 方法\n     */\n    public static void main(string[] args) {\n        undertowserver.start(democonfig.class, 80, true);\n    }\n \n    public void configconstant(constants me) {\n       me.setdevmode(true);\n    }\n    \n    public void configroute(routes me) {\n       // jfinal 4.9.03 版新增了路由扫描功能，不必手动添加路由\n       // me.add("/hello", hellocontroller.class);\n       \n       // 使用路由扫描，参数 "demo." 表示只扫描 demo 包及其子包下的路由\n       me.scan("demo.");\n    }\n    \n    public void configengine(engine me) {}\n    public void configplugin(plugins me) {}\n    public void configinterceptor(interceptors me) {}\n    public void confighandler(handlers me) {}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n\n\n在 demo 包下创建 hellocontroller 类文件， 内容如下：\n\npackage demo;\nimport com.jfinal.core.controller;\n \n@path("/hello")\npublic class hellocontroller extends controller {\n    public void index() {\n       rendertext("hello jfinal world.");\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\njfinal 4.9.03 新增了路由扫描功能，详情请见：https://jfinal.com/doc/2-3\n\n\n# 4、启动项目\n\n在 democonfig 类文件上点击鼠标右键，选择 debug as，再选择 java applidation 即可运行\n\n\n# 5、开启浏览器看效果\n\n打开浏览器在地址栏中输入: http://localhost/hello，输出内容为hello jfinal world证明项目框架搭建完成\n\n完整 demo示例 可在jfinal官方网站首页右侧下载：http://www.jfinal.com\n\n注意：jfinal-undertow 默认不支持 jsp，强烈建议使用 jfinal 默认的模板引擎 enjoy，谁用谁爽翻。\n\n如果一定要使用 jsp，可以参考文档 1.5 章节最后面的《jsp支持问题》：https://jfinal.com/doc/1-5，或者使用 jetty-server 作为开发环境：https://jfinal.com/doc/1-6',charsets:{cjk:!0}},{title:"1.3 jfinal-undertow 下部署",frontmatter:{},regularPath:"/zh/1%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/1.3%20jfinal-undertow%20%E4%B8%8B%E9%83%A8%E7%BD%B2.html",relativePath:"zh/1 快速上手/1.3 jfinal-undertow 下部署.md",key:"v-1a789f28",path:"/zh/1%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/1.3%20jfinal-undertow%20%E4%B8%8B%E9%83%A8%E7%BD%B2.html",headers:[{level:3,title:"1、指定打包为类型为 jar",slug:"_1、指定打包为类型为-jar",normalizedTitle:"1、指定打包为类型为 jar",charIndex:30},{level:3,title:"2、添加 maven-jar-plugin 插件",slug:"_2、添加-maven-jar-plugin-插件",normalizedTitle:"2、添加 maven-jar-plugin 插件",charIndex:232},{level:3,title:"3、添加 maven-assembly-plugin 插件",slug:"_3、添加-maven-assembly-plugin-插件",normalizedTitle:"3、添加 maven-assembly-plugin 插件",charIndex:942},{level:3,title:"4、添加 package.xml 文件",slug:"_4、添加-package-xml-文件",normalizedTitle:"4、添加 package.xml 文件",charIndex:2281},{level:3,title:"5、在项目根目录下面添加启动脚本",slug:"_5、在项目根目录下面添加启动脚本",normalizedTitle:"5、在项目根目录下面添加启动脚本",charIndex:4658},{level:3,title:"6、打包",slug:"_6、打包",normalizedTitle:"6、打包",charIndex:7393},{level:3,title:"7、部署",slug:"_7、部署",normalizedTitle:"7、部署",charIndex:8096},{level:3,title:"8、fatjar 打包部署",slug:"_8、fatjar-打包部署",normalizedTitle:"8、fatjar 打包部署",charIndex:8200},{level:3,title:"9、jfinal-undertow 的主要优势",slug:"_9、jfinal-undertow-的主要优势",normalizedTitle:"9、jfinal-undertow 的主要优势",charIndex:8431}],lastUpdated:"9/8/2023, 9:00:03 AM",lastUpdatedTimestamp:1694163603e3,headersStr:"1、指定打包为类型为 jar 2、添加 maven-jar-plugin 插件 3、添加 maven-assembly-plugin 插件 4、添加 package.xml 文件 5、在项目根目录下面添加启动脚本 6、打包 7、部署 8、fatjar 打包部署 9、jfinal-undertow 的主要优势",content:'# 1.3 jfinal-undertow 下部署\n\n\n# 1、指定打包为类型为 jar\n\n修改 pom.xml 文件，其中的 packaging 标签值要改成 jar\n\n<packaging>jar</packaging>\n\n\n1\n\n\n强烈建议：强烈建议下载首页的 jfinal_demo_for_maven.zip，从中可以获取到本章所涉及的 pom.xml、package.xml、jfinal.sh 等配置文件与脚本文件。可以节省大量的学习成本。\n\n\n# 2、添加 maven-jar-plugin 插件\n\n\x3c!--\n\tjar 包中的配置文件优先级高于 config 目录下的 "同名文件"\n\t因此，打包时需要排除掉 jar 包中来自 src/main/resources 目录的\n\t配置文件，否则部署时 config 目录中的同名配置文件不会生效\n --\x3e\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-jar-plugin</artifactId>\n    <version>2.6</version>\n    <configuration>\n        <excludes>\n            <exclude>*.txt</exclude>\n            <exclude>*.xml</exclude>\n            <exclude>*.properties</exclude>\n            <exclude>exclude_file_name_here</exclude>\n            <exclude>exclude_path_here/</exclude>\n        </excludes>\n    </configuration>\n</plugin>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\nmaven-jar-plugin 仅为了避免将配置文件打入 jar 包，如果是打成 fatjar 包则不需要添加此插件\n\n\n# 3、添加 maven-assembly-plugin 插件\n\n修改 pom.xml ，在其中的 plugins 标签下面添加如下 maven-assembly-plugin 插件\n\n\x3c!-- \n    使用 mvn clean package 打包 \n    更多配置可参考官司方文档：http://maven.apache.org/plugins/maven-assembly-plugin/single-mojo.html\n--\x3e\n<plugin>\n  <groupId>org.apache.maven.plugins</groupId>\n  <artifactId>maven-assembly-plugin</artifactId>\n  <version>3.1.0</version>\n  <executions>\n    <execution>\n    <id>make-assembly</id>\n    <phase>package</phase>\n    <goals>\n      <goal>single</goal>\n    </goals>\n \n    <configuration>\n      \x3c!-- 打包生成的文件名 --\x3e\n      <finalName>${project.artifactId}</finalName>\n      \x3c!-- jar 等压缩文件在被打包进入 zip、tar.gz 时是否压缩，设置为 false 可加快打包速度 --\x3e\n      <recompressZippedFiles>false</recompressZippedFiles>\n      \x3c!-- 打包生成的文件是否要追加 release.xml 中定义的 id 值 --\x3e\n      <appendAssemblyId>true</appendAssemblyId>\n      \x3c!-- 指向打包描述文件 package.xml --\x3e\n      <descriptors>\n        <descriptor>package.xml</descriptor>\n      </descriptors>\n      \x3c!-- 打包结果输出的基础目录 --\x3e\n      <outputDirectory>${project.build.directory}/</outputDirectory>\n      </configuration>\n      </execution>\n    </executions>\n</plugin>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n\nmaven-assembly-plugin 是 maven 官方提供的打包插件，功能十分完善，可以配置很多参数进行定制化构建，更详细的文件参考其官方文档：http://maven.apache.org/plugins/maven-assembly-plugin/single-mojo.html\n\n\n# 4、添加 package.xml 文件\n\n在项目根目录下面添加 package.xml，该文件是在上述 maven-assembly-plugin 在 descriptor 标签中指定的打包描述文件，内容如下：\n\n<?xml version="1.0" encoding="UTF-8"?>\n<assembly xmlns="http://maven.apache.org/ASSEMBLY/2.0.0"\n    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n    xsi:schemaLocation="http://maven.apache.org/ASSEMBLY/2.0.0 http://maven.apache.org/xsd/assembly-2.0.0.xsd">\n\t\n  \x3c!-- \n    assembly 打包配置更多配置可参考官司方文档：\n    http://maven.apache.org/plugins/maven-assembly-plugin/assembly.html\n  --\x3e\n\t\n  <id>release</id>\n\t\n  \x3c!--\n      设置打包格式，可同时设置多种格式，常用格式有：dir、zip、tar、tar.gz\n      dir 格式便于在本地测试打包结果\n      zip 格式便于 windows 系统下解压运行\n      tar、tar.gz 格式便于 linux 系统下解压运行\n  --\x3e\n  <formats>\n    <format>dir</format>\n    <format>zip</format>\n    \x3c!-- <format>tar.gz</format> --\x3e\n  </formats>\n \n  \x3c!-- 打 zip 设置为 true 时，会在 zip 包中生成一个根目录，打 dir 时设置为 false 少层目录 --\x3e\n  <includeBaseDirectory>true</includeBaseDirectory>\n\t\n  <fileSets>\n    \x3c!-- src/main/resources 全部 copy 到 config 目录下 --\x3e\n    <fileSet>\n      <directory>${basedir}/src/main/resources</directory>\n      <outputDirectory>config</outputDirectory>\n    </fileSet>\n\t\t\n    \x3c!-- src/main/webapp 全部 copy 到 webapp 目录下 --\x3e\n    <fileSet>\n      <directory>${basedir}/src/main/webapp</directory>\n      <outputDirectory>webapp</outputDirectory>\n    </fileSet>\n \n    \x3c!-- 项目根下面的脚本文件 copy 到根目录下 --\x3e\n    <fileSet>\n      <directory>${basedir}</directory>\n      <outputDirectory>./</outputDirectory>\n      <fileMode>755</fileMode>\n      <lineEnding>unix</lineEnding>\n      <includes>\n        <include>*.sh</include>\n      </includes>\n    </fileSet>\n    \n    <fileSet>\n      <directory>${basedir}</directory>\n      <outputDirectory>./</outputDirectory>\n      <fileMode>755</fileMode>\n      <lineEnding>windows</lineEnding>\n      <includes>\n        <include>*.bat</include>\n      </includes>\n    </fileSet>\n    \n  </fileSets>\t\n \n  \x3c!-- 依赖的 jar 包 copy 到 lib 目录下 --\x3e\n  <dependencySets>\n    <dependencySet>\n      <outputDirectory>lib</outputDirectory>\t\t\t\n    </dependencySet>\n  </dependencySets>\n\t\n</assembly>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n\n\n打包描述文件是 maven-assembly-plugin 的一部分，描述文件可以非常方便地控制打包的各种细节动作，更详细的文档参考：http://maven.apache.org/plugins/maven-assembly-plugin/assembly.html\n\n\n# 5、在项目根目录下面添加启动脚本\n\n注意：以下脚本文件在 jfinal 官网首页右侧下载的 jfinal demo for maven 项目中已经提供，复制其中的 jfinal.sh / jfinal.bat 到自己的项目中修改 MAIN_CLASS 变量值，即可投入使用。\n\nLinux 下的启动脚本 jfinal.sh 内容如下：\n\n#!/bin/bash\n# --------------------------------------------------------------\n#\n# 使用说明：\n# 1: 该脚本使用前需要首先修改 MAIN_CLASS 值，使其指向实际的启动类\n#\n# 2：使用命令行 ./jfinal.sh start | stop | restart 可启动/关闭/重启项目  \n#\n# 3: JAVA_OPTS 可通过 -D 传入 undertow.port 与 undertow.host 这类参数覆盖\n#    配置文件中的相同值此外还有 undertow.resourcePath、undertow.ioThreads、\n#    undertow.workerThreads 共五个参数可通过 -D 进行传入，该功能尽可能减少了\n#    修改 undertow 配置文件的必要性\n#\n# 4: JAVA_OPTS 可传入标准的 java 命令行参数，例如 -Xms256m -Xmx1024m 这类常用参数\n#\n# 5: 函数 start() 给出了 4 种启动项目的命令行，根据注释中的提示自行选择合适的方式\n#\n# --------------------------------------------------------------\n \n# 启动入口类，该脚本文件用于别的项目时要改这里\nMAIN_CLASS=com.yourpackage.YourMainClass\n \nif [[ "$MAIN_CLASS" == "com.yourpackage.YourMainClass" ]]; then\n    echo "请先修改 MAIN_CLASS 的值为你自己项目启动Class，然后再执行此脚本。"\n\texit 0\nfi\n \nCOMMAND="$1"\n \nif [[ "$COMMAND" != "start" ]] && [[ "$COMMAND" != "stop" ]] && [[ "$COMMAND" != "restart" ]]; then\n\techo "Usage: $0 start | stop | restart"\n\texit 0\nfi\n \n \n# Java 命令行参数，根据需要开启下面的配置，改成自己需要的，注意等号前后不能有空格\n# JAVA_OPTS="-Xms256m -Xmx1024m -Dundertow.port=80 -Dundertow.host=0.0.0.0"\n# JAVA_OPTS="-Dundertow.port=80 -Dundertow.host=0.0.0.0"\n \n# 生成 class path 值\nAPP_BASE_PATH=$(cd `dirname $0`; pwd)\nCP=${APP_BASE_PATH}/config:${APP_BASE_PATH}/lib/*\n \nfunction start()\n{\n    # 运行为后台进程，并在控制台输出信息\n    java -Xverify:none ${JAVA_OPTS} -cp ${CP} ${MAIN_CLASS} &\n \n    # 运行为后台进程，并且不在控制台输出信息\n    # nohup java -Xverify:none ${JAVA_OPTS} -cp ${CP} ${MAIN_CLASS} >/dev/null 2>&1 &\n \n    # 运行为后台进程，并且将信息输出到 output.log 文件\n    # nohup java -Xverify:none ${JAVA_OPTS} -cp ${CP} ${MAIN_CLASS} > output.log &\n \n    # 运行为非后台进程，多用于开发阶段，快捷键 ctrl + c 可停止服务\n    # java -Xverify:none ${JAVA_OPTS} -cp ${CP} ${MAIN_CLASS}\n}\n \nfunction stop()\n{\n    # 支持集群部署\n    kill `pgrep -f ${APP_BASE_PATH}` 2>/dev/null\n    \n    # kill 命令不使用 -9 参数时，会回调 onStop() 方法，确定不需要此回调建议使用 -9 参数\n    # kill `pgrep -f ${MAIN_CLASS}` 2>/dev/null\n \n    # 以下代码与上述代码等价\n    # kill $(pgrep -f ${MAIN_CLASS}) 2>/dev/null\n}\n \nif [[ "$COMMAND" == "start" ]]; then\n\tstart\nelif [[ "$COMMAND" == "stop" ]]; then\n    stop\nelse\n    stop\n    start\nfi\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n\n\n注意要首先根据项目入口类，修改一下上面内容中的 MAIN_CLASS 变量值，Windows 下的 jfinal.bat 脚本也同样如此\n\n启动项目命令：./jfinal.sh start\n\n关闭项目命令：./jfinal.sh stop\n\n重启项目命令：./jfinal.sh restart\n\n特别注意：使用以上命令行时，先要使用 mvn clean package 将项目打包，然后使用 cd 命令跳转到打好的包的目录下面执行命令。而不是 cd 跳转到项目根目录下面去执行命令，很多人犯这种错误。打包方法见紧接着的下一小节《6、打包》\n\n限于篇幅在此不再贴出 windows 脚本内容，可下载官网首页右侧的 jfinal demo 获取。最新版本的脚本在此可以下载到：https://gitee.com/jfinal/jfinal-undertow\n\nwindows 脚本的使用方法如下：\n\n启动项目命令：jfinal.bat start\n\n关闭项目命令：jfinal.bat stop\n\n重启项目命令：jfinal.bat restart\n\n注意：linux、mac 下的脚本文件换行字符必须是 \'\\n\'，而 windows 下必须是 "\\r\\n"，否则脚本无法执行，并会输出无法理解的错误信息，难以排错。如何查看脚本文件中的换行字符见文档：https://www.jfinal.com/doc/1-5\n\n强烈建议：强烈建议下载首页的 jfinal_demo_for_maven.zip，从中可以获取到以上 5 小节所涉及的 pom.xml、package.xml、jfinal.sh 等配置文件与脚本文件。确保下载到最新版本。\n\n\n# 6、打包\n\n打开命令行终端，cd 命令进入项目根目录，运行以下命令即可打包\n\nmvn clean package\n\n\n1\n\n\n执行上述打包命令以后，在项目根下面的 target 目录下面会出现打好的 xxx.zip，解压该 zip 文件使用命令行 ./jfinal.sh start 即可运行\n\n除了 zip 文件还会在 target 下面生成一个目录，在该目录下面使用命令行 ./jfinal.sh start 可启动项目，该目录下面的内容与 zip 文件中的内容是完全一样的。\n\n\n# 7、部署\n\n将上述打包命令生成的 zip 文件上传到服务器并解压即完成了部署工作，基于 jfinal-undertow 开发项目的最大优势就是不需要下载、安装、配置 tomcat 这类 server\n\n\n# 8、fatjar 打包部署\n\nfatjar 打包是指将项目中所有 class、所有资源以及所有 jar 包依赖全部打包到一个单独的 jar 包之中，打包好的独立 jar 包可以很方便复制、部署、运行，非常适合于做微服务项目开发，也很适合没有 web 资源或者 web 资源很少的项目\n\n具体的用法可以在官网首页下载 jfinal-demo-for-maven，其中的 doc 目录下面有文档详细介绍了此方法，后续会在文档频道添加 fatjar 打包方法\n\n\n# 9、jfinal-undertow 的主要优势\n\n1：极速启动，启动速度比 tomcat 快 5 到 8 倍。jfinal.com 官网启动时间在 1.5 秒内\n\n2：Undertow 是红帽公司的开源产品，是 Wildfly 默认的 Web 服务器，Java Web 服务器市场占有率高于 Jetty，仅次于 Tomcat\n\n3：极简精妙的热部署设计，实现极速轻量级热部署，让开发体验再次提升一个档次\n\n4：性能高于 tomcat、jetty，可替代 tomcat、jetty 用于生产环境\n\n5：undertow 为嵌入式而生，可直接用于生产环境部署，部署时无需下载服务，无需配置服务，十分适合微服务开发、部署\n\n6：告别 web.xml、告别 tomcat、告别 jetty，节省大量打包与部署时间。令开发、打包、部署成为一件开心的事\n\n7：功能丰富，支持 classHotSwap、WebSocket、gzip 压缩、servlet、filter、sessionHotSwap 等功能\n\n8：支持 fatjar 与 非 fatjar 打包模式，便于支持微服务\n\n9：开发、打包、部署一体化，整个过程无需对项目中的任何地方进行调整或修改，真正实现从极速开发到极速部署',normalizedContent:'# 1.3 jfinal-undertow 下部署\n\n\n# 1、指定打包为类型为 jar\n\n修改 pom.xml 文件，其中的 packaging 标签值要改成 jar\n\n<packaging>jar</packaging>\n\n\n1\n\n\n强烈建议：强烈建议下载首页的 jfinal_demo_for_maven.zip，从中可以获取到本章所涉及的 pom.xml、package.xml、jfinal.sh 等配置文件与脚本文件。可以节省大量的学习成本。\n\n\n# 2、添加 maven-jar-plugin 插件\n\n\x3c!--\n\tjar 包中的配置文件优先级高于 config 目录下的 "同名文件"\n\t因此，打包时需要排除掉 jar 包中来自 src/main/resources 目录的\n\t配置文件，否则部署时 config 目录中的同名配置文件不会生效\n --\x3e\n<plugin>\n    <groupid>org.apache.maven.plugins</groupid>\n    <artifactid>maven-jar-plugin</artifactid>\n    <version>2.6</version>\n    <configuration>\n        <excludes>\n            <exclude>*.txt</exclude>\n            <exclude>*.xml</exclude>\n            <exclude>*.properties</exclude>\n            <exclude>exclude_file_name_here</exclude>\n            <exclude>exclude_path_here/</exclude>\n        </excludes>\n    </configuration>\n</plugin>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\nmaven-jar-plugin 仅为了避免将配置文件打入 jar 包，如果是打成 fatjar 包则不需要添加此插件\n\n\n# 3、添加 maven-assembly-plugin 插件\n\n修改 pom.xml ，在其中的 plugins 标签下面添加如下 maven-assembly-plugin 插件\n\n\x3c!-- \n    使用 mvn clean package 打包 \n    更多配置可参考官司方文档：http://maven.apache.org/plugins/maven-assembly-plugin/single-mojo.html\n--\x3e\n<plugin>\n  <groupid>org.apache.maven.plugins</groupid>\n  <artifactid>maven-assembly-plugin</artifactid>\n  <version>3.1.0</version>\n  <executions>\n    <execution>\n    <id>make-assembly</id>\n    <phase>package</phase>\n    <goals>\n      <goal>single</goal>\n    </goals>\n \n    <configuration>\n      \x3c!-- 打包生成的文件名 --\x3e\n      <finalname>${project.artifactid}</finalname>\n      \x3c!-- jar 等压缩文件在被打包进入 zip、tar.gz 时是否压缩，设置为 false 可加快打包速度 --\x3e\n      <recompresszippedfiles>false</recompresszippedfiles>\n      \x3c!-- 打包生成的文件是否要追加 release.xml 中定义的 id 值 --\x3e\n      <appendassemblyid>true</appendassemblyid>\n      \x3c!-- 指向打包描述文件 package.xml --\x3e\n      <descriptors>\n        <descriptor>package.xml</descriptor>\n      </descriptors>\n      \x3c!-- 打包结果输出的基础目录 --\x3e\n      <outputdirectory>${project.build.directory}/</outputdirectory>\n      </configuration>\n      </execution>\n    </executions>\n</plugin>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n\nmaven-assembly-plugin 是 maven 官方提供的打包插件，功能十分完善，可以配置很多参数进行定制化构建，更详细的文件参考其官方文档：http://maven.apache.org/plugins/maven-assembly-plugin/single-mojo.html\n\n\n# 4、添加 package.xml 文件\n\n在项目根目录下面添加 package.xml，该文件是在上述 maven-assembly-plugin 在 descriptor 标签中指定的打包描述文件，内容如下：\n\n<?xml version="1.0" encoding="utf-8"?>\n<assembly xmlns="http://maven.apache.org/assembly/2.0.0"\n    xmlns:xsi="http://www.w3.org/2001/xmlschema-instance"\n    xsi:schemalocation="http://maven.apache.org/assembly/2.0.0 http://maven.apache.org/xsd/assembly-2.0.0.xsd">\n\t\n  \x3c!-- \n    assembly 打包配置更多配置可参考官司方文档：\n    http://maven.apache.org/plugins/maven-assembly-plugin/assembly.html\n  --\x3e\n\t\n  <id>release</id>\n\t\n  \x3c!--\n      设置打包格式，可同时设置多种格式，常用格式有：dir、zip、tar、tar.gz\n      dir 格式便于在本地测试打包结果\n      zip 格式便于 windows 系统下解压运行\n      tar、tar.gz 格式便于 linux 系统下解压运行\n  --\x3e\n  <formats>\n    <format>dir</format>\n    <format>zip</format>\n    \x3c!-- <format>tar.gz</format> --\x3e\n  </formats>\n \n  \x3c!-- 打 zip 设置为 true 时，会在 zip 包中生成一个根目录，打 dir 时设置为 false 少层目录 --\x3e\n  <includebasedirectory>true</includebasedirectory>\n\t\n  <filesets>\n    \x3c!-- src/main/resources 全部 copy 到 config 目录下 --\x3e\n    <fileset>\n      <directory>${basedir}/src/main/resources</directory>\n      <outputdirectory>config</outputdirectory>\n    </fileset>\n\t\t\n    \x3c!-- src/main/webapp 全部 copy 到 webapp 目录下 --\x3e\n    <fileset>\n      <directory>${basedir}/src/main/webapp</directory>\n      <outputdirectory>webapp</outputdirectory>\n    </fileset>\n \n    \x3c!-- 项目根下面的脚本文件 copy 到根目录下 --\x3e\n    <fileset>\n      <directory>${basedir}</directory>\n      <outputdirectory>./</outputdirectory>\n      <filemode>755</filemode>\n      <lineending>unix</lineending>\n      <includes>\n        <include>*.sh</include>\n      </includes>\n    </fileset>\n    \n    <fileset>\n      <directory>${basedir}</directory>\n      <outputdirectory>./</outputdirectory>\n      <filemode>755</filemode>\n      <lineending>windows</lineending>\n      <includes>\n        <include>*.bat</include>\n      </includes>\n    </fileset>\n    \n  </filesets>\t\n \n  \x3c!-- 依赖的 jar 包 copy 到 lib 目录下 --\x3e\n  <dependencysets>\n    <dependencyset>\n      <outputdirectory>lib</outputdirectory>\t\t\t\n    </dependencyset>\n  </dependencysets>\n\t\n</assembly>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n\n\n打包描述文件是 maven-assembly-plugin 的一部分，描述文件可以非常方便地控制打包的各种细节动作，更详细的文档参考：http://maven.apache.org/plugins/maven-assembly-plugin/assembly.html\n\n\n# 5、在项目根目录下面添加启动脚本\n\n注意：以下脚本文件在 jfinal 官网首页右侧下载的 jfinal demo for maven 项目中已经提供，复制其中的 jfinal.sh / jfinal.bat 到自己的项目中修改 main_class 变量值，即可投入使用。\n\nlinux 下的启动脚本 jfinal.sh 内容如下：\n\n#!/bin/bash\n# --------------------------------------------------------------\n#\n# 使用说明：\n# 1: 该脚本使用前需要首先修改 main_class 值，使其指向实际的启动类\n#\n# 2：使用命令行 ./jfinal.sh start | stop | restart 可启动/关闭/重启项目  \n#\n# 3: java_opts 可通过 -d 传入 undertow.port 与 undertow.host 这类参数覆盖\n#    配置文件中的相同值此外还有 undertow.resourcepath、undertow.iothreads、\n#    undertow.workerthreads 共五个参数可通过 -d 进行传入，该功能尽可能减少了\n#    修改 undertow 配置文件的必要性\n#\n# 4: java_opts 可传入标准的 java 命令行参数，例如 -xms256m -xmx1024m 这类常用参数\n#\n# 5: 函数 start() 给出了 4 种启动项目的命令行，根据注释中的提示自行选择合适的方式\n#\n# --------------------------------------------------------------\n \n# 启动入口类，该脚本文件用于别的项目时要改这里\nmain_class=com.yourpackage.yourmainclass\n \nif [[ "$main_class" == "com.yourpackage.yourmainclass" ]]; then\n    echo "请先修改 main_class 的值为你自己项目启动class，然后再执行此脚本。"\n\texit 0\nfi\n \ncommand="$1"\n \nif [[ "$command" != "start" ]] && [[ "$command" != "stop" ]] && [[ "$command" != "restart" ]]; then\n\techo "usage: $0 start | stop | restart"\n\texit 0\nfi\n \n \n# java 命令行参数，根据需要开启下面的配置，改成自己需要的，注意等号前后不能有空格\n# java_opts="-xms256m -xmx1024m -dundertow.port=80 -dundertow.host=0.0.0.0"\n# java_opts="-dundertow.port=80 -dundertow.host=0.0.0.0"\n \n# 生成 class path 值\napp_base_path=$(cd `dirname $0`; pwd)\ncp=${app_base_path}/config:${app_base_path}/lib/*\n \nfunction start()\n{\n    # 运行为后台进程，并在控制台输出信息\n    java -xverify:none ${java_opts} -cp ${cp} ${main_class} &\n \n    # 运行为后台进程，并且不在控制台输出信息\n    # nohup java -xverify:none ${java_opts} -cp ${cp} ${main_class} >/dev/null 2>&1 &\n \n    # 运行为后台进程，并且将信息输出到 output.log 文件\n    # nohup java -xverify:none ${java_opts} -cp ${cp} ${main_class} > output.log &\n \n    # 运行为非后台进程，多用于开发阶段，快捷键 ctrl + c 可停止服务\n    # java -xverify:none ${java_opts} -cp ${cp} ${main_class}\n}\n \nfunction stop()\n{\n    # 支持集群部署\n    kill `pgrep -f ${app_base_path}` 2>/dev/null\n    \n    # kill 命令不使用 -9 参数时，会回调 onstop() 方法，确定不需要此回调建议使用 -9 参数\n    # kill `pgrep -f ${main_class}` 2>/dev/null\n \n    # 以下代码与上述代码等价\n    # kill $(pgrep -f ${main_class}) 2>/dev/null\n}\n \nif [[ "$command" == "start" ]]; then\n\tstart\nelif [[ "$command" == "stop" ]]; then\n    stop\nelse\n    stop\n    start\nfi\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n\n\n注意要首先根据项目入口类，修改一下上面内容中的 main_class 变量值，windows 下的 jfinal.bat 脚本也同样如此\n\n启动项目命令：./jfinal.sh start\n\n关闭项目命令：./jfinal.sh stop\n\n重启项目命令：./jfinal.sh restart\n\n特别注意：使用以上命令行时，先要使用 mvn clean package 将项目打包，然后使用 cd 命令跳转到打好的包的目录下面执行命令。而不是 cd 跳转到项目根目录下面去执行命令，很多人犯这种错误。打包方法见紧接着的下一小节《6、打包》\n\n限于篇幅在此不再贴出 windows 脚本内容，可下载官网首页右侧的 jfinal demo 获取。最新版本的脚本在此可以下载到：https://gitee.com/jfinal/jfinal-undertow\n\nwindows 脚本的使用方法如下：\n\n启动项目命令：jfinal.bat start\n\n关闭项目命令：jfinal.bat stop\n\n重启项目命令：jfinal.bat restart\n\n注意：linux、mac 下的脚本文件换行字符必须是 \'\\n\'，而 windows 下必须是 "\\r\\n"，否则脚本无法执行，并会输出无法理解的错误信息，难以排错。如何查看脚本文件中的换行字符见文档：https://www.jfinal.com/doc/1-5\n\n强烈建议：强烈建议下载首页的 jfinal_demo_for_maven.zip，从中可以获取到以上 5 小节所涉及的 pom.xml、package.xml、jfinal.sh 等配置文件与脚本文件。确保下载到最新版本。\n\n\n# 6、打包\n\n打开命令行终端，cd 命令进入项目根目录，运行以下命令即可打包\n\nmvn clean package\n\n\n1\n\n\n执行上述打包命令以后，在项目根下面的 target 目录下面会出现打好的 xxx.zip，解压该 zip 文件使用命令行 ./jfinal.sh start 即可运行\n\n除了 zip 文件还会在 target 下面生成一个目录，在该目录下面使用命令行 ./jfinal.sh start 可启动项目，该目录下面的内容与 zip 文件中的内容是完全一样的。\n\n\n# 7、部署\n\n将上述打包命令生成的 zip 文件上传到服务器并解压即完成了部署工作，基于 jfinal-undertow 开发项目的最大优势就是不需要下载、安装、配置 tomcat 这类 server\n\n\n# 8、fatjar 打包部署\n\nfatjar 打包是指将项目中所有 class、所有资源以及所有 jar 包依赖全部打包到一个单独的 jar 包之中，打包好的独立 jar 包可以很方便复制、部署、运行，非常适合于做微服务项目开发，也很适合没有 web 资源或者 web 资源很少的项目\n\n具体的用法可以在官网首页下载 jfinal-demo-for-maven，其中的 doc 目录下面有文档详细介绍了此方法，后续会在文档频道添加 fatjar 打包方法\n\n\n# 9、jfinal-undertow 的主要优势\n\n1：极速启动，启动速度比 tomcat 快 5 到 8 倍。jfinal.com 官网启动时间在 1.5 秒内\n\n2：undertow 是红帽公司的开源产品，是 wildfly 默认的 web 服务器，java web 服务器市场占有率高于 jetty，仅次于 tomcat\n\n3：极简精妙的热部署设计，实现极速轻量级热部署，让开发体验再次提升一个档次\n\n4：性能高于 tomcat、jetty，可替代 tomcat、jetty 用于生产环境\n\n5：undertow 为嵌入式而生，可直接用于生产环境部署，部署时无需下载服务，无需配置服务，十分适合微服务开发、部署\n\n6：告别 web.xml、告别 tomcat、告别 jetty，节省大量打包与部署时间。令开发、打包、部署成为一件开心的事\n\n7：功能丰富，支持 classhotswap、websocket、gzip 压缩、servlet、filter、sessionhotswap 等功能\n\n8：支持 fatjar 与 非 fatjar 打包模式，便于支持微服务\n\n9：开发、打包、部署一体化，整个过程无需对项目中的任何地方进行调整或修改，真正实现从极速开发到极速部署',charsets:{cjk:!0}},{title:"1.4 jfinal-undertow 高级用法",frontmatter:{},regularPath:"/zh/1%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/1.4%20jfinal-undertow%20%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95.html",relativePath:"zh/1 快速上手/1.4 jfinal-undertow 高级用法.md",key:"v-1c240292",path:"/zh/1%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/1.4%20jfinal-undertow%20%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95.html",headers:[{level:2,title:"一、基础配置",slug:"一、基础配置",normalizedTitle:"一、基础配置",charIndex:31},{level:3,title:"1、启用配置文件",slug:"_1、启用配置文件",normalizedTitle:"1、启用配置文件",charIndex:42},{level:3,title:"2、常用配置",slug:"_2、常用配置",normalizedTitle:"2、常用配置",charIndex:291},{level:3,title:"3、web 资源加载路径配置",slug:"_3、web-资源加载路径配置",normalizedTitle:"3、web 资源加载路径配置",charIndex:665},{level:3,title:"4、性能配置",slug:"_4、性能配置",normalizedTitle:"4、性能配置",charIndex:1419},{level:3,title:"5、开启 gzip 压缩",slug:"_5、开启-gzip-压缩",normalizedTitle:"5、开启 gzip 压缩",charIndex:1773},{level:3,title:"6、配置 session",slug:"_6、配置-session",normalizedTitle:"6、配置 session",charIndex:1986},{level:3,title:"7、配置 https",slug:"_7、配置-https",normalizedTitle:"7、配置 https",charIndex:2169},{level:3,title:"8、配置 http2",slug:"_8、配置-http2",normalizedTitle:"8、配置 http2",charIndex:2496},{level:3,title:"9、配置 http 重定向到 https",slug:"_9、配置-http-重定向到-https",normalizedTitle:"9、配置 http 重定向到 https",charIndex:2667},{level:3,title:"11､自由配置 Undertow",slug:"_11、自由配置-undertow",normalizedTitle:"11､自由配置 undertow",charIndex:3040},{level:3,title:"12、添加 Filter、WebSocket、Servlet、Listener",slug:"_12、添加-filter、websocket、servlet、listener",normalizedTitle:"12、添加 filter、websocket、servlet、listener",charIndex:3476},{level:2,title:"二、SSL 证书",slug:"二、ssl-证书",normalizedTitle:"二、ssl 证书",charIndex:5525},{level:2,title:"1、申请 SSL 证书",slug:"_1、申请-ssl-证书",normalizedTitle:"1、申请 ssl 证书",charIndex:5538},{level:2,title:"2、下载合适的证书类型",slug:"_2、下载合适的证书类型",normalizedTitle:"2、下载合适的证书类型",charIndex:5672},{level:3,title:"3、启动项目",slug:"_3、启动项目",normalizedTitle:"3、启动项目",charIndex:6285},{level:2,title:"三、Https 双向认证",slug:"三、https-双向认证",normalizedTitle:"三、https 双向认证",charIndex:6331}],lastUpdated:"9/22/2023, 9:39:45 AM",lastUpdatedTimestamp:1695375585e3,headersStr:"一、基础配置 1、启用配置文件 2、常用配置 3、web 资源加载路径配置 4、性能配置 5、开启 gzip 压缩 6、配置 session 7、配置 https 8、配置 http2 9、配置 http 重定向到 https 11､自由配置 Undertow 12、添加 Filter、WebSocket、Servlet、Listener 二、SSL 证书 1、申请 SSL 证书 2、下载合适的证书类型 3、启动项目 三、Https 双向认证",content:'# 1.4 jfinal-undertow 高级用法\n\n\n# 一、基础配置\n\n\n# 1、启用配置文件\n\n在 src/main/resources 目录下面创建 undertow.txt 文件，该文件会被 jfinal undertow 自动加载并对 jfinal undertow 进行配置。\n\n如果不想使用 "undertow.txt" 这个文件名，还可以通过 UndertowServer.create(AppConfig.class, "other.txt") 方法的第二个参数来指定自己喜欢的文件名。\n\n配置文件创建好以后，就可以按照下面的文档来配置相应的功能了。\n\n\n# 2、常用配置\n\n# true 值支持热加载\nundertow.devMode=true\nundertow.port=80\nundertow.host=0.0.0.0\n \n# 绝大部分情况不建议配置 context path\nundertow.contextPath=/abc\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n开发时配置成 true 支持热加载，注意该 devMode 与 jfinal 项目中的 devMode 没有任何关系，注意区分。\n\n重要：老版本的 undertow.host 配置的默认值为 localhost，Linux 操作系统下的安全设置可能无法在外网访问 localhost 下部署的项目，修改配置 undertow.host=0.0.0.0 即可。如果使用了 nginx 做了代理，可保持 localhost 配置。\n\n\n# 3、web 资源加载路径配置\n\njfinal undertow 可以十分方便地从文件系统的目录以及 class path 或 jar 包中加载 web 静态资源，以下是配置示例：\n\nundertow.resourcePath = src/main/webapp, classpath:static\n\n\n1\n\n\n如上所示 "src/main/webapp" 表示从项目根目录下的 "src/main/webapp" 下去加载 web 静态资源。 "classpath:static" 表示从 class path 以及 jar 包中的 static 路径下去加载 web 静态资源。\n\n注意："classpath:static" 这种配置是 jfinal undertow 1.5 才添加的功能。\n\nundertow.resourcePath 配置的另一个重点是，以 "classpath:" 为前缀的配置需要自行注意路径是否存在，尽可能只配置存在的路径。而不以 "classpath:" 打头的配置可以将开发与部署时的路径一起配置进来（逗号分隔开），jfinal undertow 会在运行时检测路径是否存在，存在才真正让其生效，从而很方便一次配置同时适用于开发、生产两种环境。\n\n重要：PathKit.getWebRootPath() 将指向 undertow.resourcePath 配置中的第一个有效目录，而 configEngine(Engine engine) 方法中的 engine 对象已被默认配置了 engine.setBaseTemplatePath(PathKit.getWebRootPath())。所以该配置与 engine 的 baseTemplatePath 有关联。\n\n\n# 4、性能配置\n\n# io 线程数与 worker 线程数\n# undertow.ioThreads=\n# undertow.workerThreads=\n\n\n1\n2\n3\n\n\n默认配置已充分考虑常用场景，如果没有压测数据作为指导，建议使用默认配置，不要添加这两项配置。\n\nioThreads 为 NIO 处理 io 请求的线程数量，在生产环境下建议的配置范围是 cpu 核心数的一倍到两倍。建议根据压测结果进行调整。\n\nworkerThreads 是处理请求的线程数量，在生产环境下可以使用默认配置，或者根据压测结果进行配置。在压测数据几乎最好的情况下尽可能选择更小的 workThreads 值。因为当性能达到某个高度时再增加 workThreads 值并不会带来性能提升，但会增加系统的资源消耗。\n\n\n# 5、开启 gzip 压缩\n\n# gzip 压缩开关\nundertow.gzip.enable=true\n# 配置压缩级别，默认值 -1。 可配置 1 到 9。 1 拥有最快压缩速度，9 拥有最高压缩率\nundertow.gzip.level=-1\n# 触发压缩的最小内容长度\nundertow.gzip.minLength=1024\n\n\n1\n2\n3\n4\n5\n6\n\n\n开启 gzip 压缩可以降低网络流量，提升访问速度\n\n\n# 6、配置 session\n\n# session 过期时间，注意单位是秒\nundertow.session.timeout=1800\n# 支持 session 热加载，避免依赖于 session 的登录型项目反复登录，默认值为 true。仅用于 devMode，生产环境无影响\nundertow.session.hotSwap=true\n\n\n1\n2\n3\n4\n\n\n\n# 7、配置 https\n\n# 是否开启 ssl\nundertow.ssl.enable=false\n# ssl 监听端口号，部署环境设置为 443\nundertow.ssl.port=443\n# 密钥库类型，建议使用 PKCS12\nundertow.ssl.keyStoreType=PKCS12\n# 密钥库文件\nundertow.ssl.keyStore=demo.pfx\n# 密钥库密码\nundertow.ssl.keyStorePassword=123456\n# 别名配置，一般不使用\nundertow.ssl.keyAlias=demo\nSSL 证书的获取见后面的第二小节\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# 8、配置 http2\n\n# ssl 开启时，是否开启 http2。检测该配置是否生效在 chrome 地址栏中输入: chrome://net-internals/#http2\nundertow.http2.enable=true\n\n\n1\n2\n\n\n开启 http2 可以大大加快访问速度，不必担心 https 比 http 慢这个事\n\n\n# 9、配置 http 重定向到 https\n\n# ssl 开启时，http 请求是否重定向到 https\nundertow.http.toHttps=false\n# ssl 开启时，http 请求跳转到 https 使用的状态码，默认值 302\nundertow.http.toHttpsStatusCode=302\n### 10、配置关闭 http\n# ssl 开启时，是否关闭 http\nundertow.http.disable=false\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n在启用 https 后，可以配置关闭 http，这样就只能访问 https 了。该配置项比较适合于小程序服务端。\n\n对于一般的 web 项目不建议配置此项，而是配置 undertow.http.toHttps=true 将 http 重定向到 https\n\n\n# 11､自由配置 Undertow\n\n以上配置方式由 jfinal undertow 做了直接的支持，如果上面的配置仍然不能满足需求，还可以通过下面的方式自由配置 undertow：\n\nUndertowServer.create(YourJFinalConfig.class)\n    .onStart( builder -> {\n        builder.setServerOption(UndertowOptions.参数名, 参数值);\t\n     })\n    .start();\n\n\n1\n2\n3\n4\n5\n\n\n如上所示，通过在 onStart 方法中使用 builder.setServerOption(...) 可以对 underow 进行更加深入的配置，还可以调用 builder 中的其它 API 进行其它类型的配置。上述的 UndertowOptions 中定义了很多 undertow 的配置名，查看其中的注释文档可以知道还有很多有用的配置\n\n\n# 12、添加 Filter、WebSocket、Servlet、Listener\n\n特别注意，Undertow 是为嵌入而生的 Web Server，web.xml 已被抛弃，所以无法通过 web.xml 配置 web 组件。\n\n为此 jfinal undertow 提供了 UndertowServer.configWeb(...) 可以很方便添加 Filter、WebSocket、Servlet、Listener 这些标准的 Java Web 组件：\n\nUndertowServer.create(AppConfig.class)\n     .configWeb( builder -> {\n         // 配置 Filter\n         builder.addFilter("myFilter", "com.abc.MyFilter");\n         builder.addFilterUrlMapping("myFilter", "/*");\n         builder.addFilterInitParam("myFilter", "key", "value");\n         \n         // 配置 Servlet\n         builder.addServlet("myServlet", "com.abc.MyServlet");\n         builder.addServletMapping("myServlet", "*.do");\n         builder.addServletInitParam("myServlet", "key", "value");\n         \n         // 配置 Listener\n         builder.addListener("com.abc.MyListener");\n         \n         // 配置 WebSocket，MyWebSocket 需使用 ServerEndpoint 注解\n         builder.addWebSocketEndpoint("com.abc.MyWebSocket");\n      })\n     .start();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n注意，JFinalFilter 会接管所有请求，所以上面代码中 addServletMapping(...) 映射的 servlet 默认是无法被请求到的，需要在 configHandler(Handlers me) 中配置 UrlSkipHandler 让 jfinal 跳过这些 serlvet 的 url\n\n以上代码中的 MyWebSocket 需要使用 ServerEndpoint 注解标识其为一个 WebSocket 组件，例如：\n\n@ServerEndpoint("/myapp.ws")\npublic class MyWebSocket { \n    @OnMessage\n    public void message(String message, Session session) {\n        for (Session s : session.getOpenSessions()) {\n            s.getAsyncRemote().sendText(message);\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n与上述 MyWebSocket 配合使用的例子 html 在这里可以下载：传送门。社区同学分享的完整 websocket 代码在这里：https://jfinal.com/share/2004\n\n要修改一下该 html 中的 url 为： "ws://localhost:80/myapp.ws"，端口号适当调整。\n\n注意：由于 JFinalFilter 会接管所有不带 "." 字符的 URL 请求所以 @ServerEndpoint 注解中的 URL 参数值建议以 ".ws" 结尾，否则请求会响应 404 找不到资源，例如：\n\n@ServerEndpoint("/myapp.ws")\npublic class MyWebSocketEndpoint  {\n    ......\n}\n\n\n1\n2\n3\n4\n\n\n当然，ServerEndpoint 中的 URL 不使用 ".ws" 结尾也是可以的，只需要参考 jfinal 的 UrlSkipHandler 做一个 Handler 跳过属于 WebSocket 的 URL 即可\n\n最后，websocket 支持需要添加一个依赖，要添加的依赖项请看前面的文档：https://jfinal.com/doc/1-2\n\n\n# 二、SSL 证书\n\n\n# 1、申请 SSL 证书\n\n建议从阿里云或者腾迅云获取 SSL 证书，有免费版和收费版，阿里云 SSL 证书获取：SSL 证书获取传送门\n\n注意：在申请免费版 SSL 证书的过程中，绑定域名一般输入主机名为 www 的域名，例如： www.jfinal.com\n\n\n# 2、下载合适的证书类型\n\nSSL 证书申请下来以后，可以到控制台下载证书，如下图所示：\n\n\n\n点击下载链接以后，在右侧下载 tomcat 类型的 SSL 证书\n\n下载的证书里头，有一个 xxx.pfx 文件，该文件就是证书文件。此外还有一个 pfx-password.txt 文件，此文件里面放的是证书密码，将 xxx.pfx 放入项目的 src/main/resources 目录，在 undertow.txt 配置文件中添加如下几行配置：\n\n# 是否开启 ssl\nundertow.ssl.enable=true\n# ssl 监听端口号，部署环境设置为 443\nundertow.ssl.port=443\n# 密钥库类型，一般是 PKCS12 与 JKS，注意根据实际类型调整\nundertow.ssl.keyStoreType=PKCS12\n# 密钥库文件\nundertow.ssl.keyStore=demo.pfx\n# 密钥库密码\nundertow.ssl.keyStorePassword=123456\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n其中的 "demo.pfx" 即为前面下载的证书文件的文件名，"123456" 即为证书密码，这两个配置根据你下载到的实际内容进行修改。"PKCS12" 这个配置是证书类型，阿里云下载的 tomcat 型证书为 PKCS12，腾迅云可能是 "JKS"\n\n\n# 3、启动项目\n\n启动项目，通过 "https://申请证书时绑定的域名" 即可访问\n\n\n# 三、Https 双向认证\n\n如果你的 jfinal undertow 项目需要对客户端进行 ssl 认证，需要使用如下方式进行配置：\n\nUndertowServer.create(YourJFinalConfig.class)\n  .onStart( builder -> {\n    builder.setSocketOption(Options.SSL_CLIENT_AUTH_MODE, SslClientAuthMode.REQUESTED);\n  })\n  .start();`\n\n\n1\n2\n3\n4\n5\n\n\n该方法来自于社区用户的分享：https://jfinal.com/feedback/7758',normalizedContent:'# 1.4 jfinal-undertow 高级用法\n\n\n# 一、基础配置\n\n\n# 1、启用配置文件\n\n在 src/main/resources 目录下面创建 undertow.txt 文件，该文件会被 jfinal undertow 自动加载并对 jfinal undertow 进行配置。\n\n如果不想使用 "undertow.txt" 这个文件名，还可以通过 undertowserver.create(appconfig.class, "other.txt") 方法的第二个参数来指定自己喜欢的文件名。\n\n配置文件创建好以后，就可以按照下面的文档来配置相应的功能了。\n\n\n# 2、常用配置\n\n# true 值支持热加载\nundertow.devmode=true\nundertow.port=80\nundertow.host=0.0.0.0\n \n# 绝大部分情况不建议配置 context path\nundertow.contextpath=/abc\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n开发时配置成 true 支持热加载，注意该 devmode 与 jfinal 项目中的 devmode 没有任何关系，注意区分。\n\n重要：老版本的 undertow.host 配置的默认值为 localhost，linux 操作系统下的安全设置可能无法在外网访问 localhost 下部署的项目，修改配置 undertow.host=0.0.0.0 即可。如果使用了 nginx 做了代理，可保持 localhost 配置。\n\n\n# 3、web 资源加载路径配置\n\njfinal undertow 可以十分方便地从文件系统的目录以及 class path 或 jar 包中加载 web 静态资源，以下是配置示例：\n\nundertow.resourcepath = src/main/webapp, classpath:static\n\n\n1\n\n\n如上所示 "src/main/webapp" 表示从项目根目录下的 "src/main/webapp" 下去加载 web 静态资源。 "classpath:static" 表示从 class path 以及 jar 包中的 static 路径下去加载 web 静态资源。\n\n注意："classpath:static" 这种配置是 jfinal undertow 1.5 才添加的功能。\n\nundertow.resourcepath 配置的另一个重点是，以 "classpath:" 为前缀的配置需要自行注意路径是否存在，尽可能只配置存在的路径。而不以 "classpath:" 打头的配置可以将开发与部署时的路径一起配置进来（逗号分隔开），jfinal undertow 会在运行时检测路径是否存在，存在才真正让其生效，从而很方便一次配置同时适用于开发、生产两种环境。\n\n重要：pathkit.getwebrootpath() 将指向 undertow.resourcepath 配置中的第一个有效目录，而 configengine(engine engine) 方法中的 engine 对象已被默认配置了 engine.setbasetemplatepath(pathkit.getwebrootpath())。所以该配置与 engine 的 basetemplatepath 有关联。\n\n\n# 4、性能配置\n\n# io 线程数与 worker 线程数\n# undertow.iothreads=\n# undertow.workerthreads=\n\n\n1\n2\n3\n\n\n默认配置已充分考虑常用场景，如果没有压测数据作为指导，建议使用默认配置，不要添加这两项配置。\n\niothreads 为 nio 处理 io 请求的线程数量，在生产环境下建议的配置范围是 cpu 核心数的一倍到两倍。建议根据压测结果进行调整。\n\nworkerthreads 是处理请求的线程数量，在生产环境下可以使用默认配置，或者根据压测结果进行配置。在压测数据几乎最好的情况下尽可能选择更小的 workthreads 值。因为当性能达到某个高度时再增加 workthreads 值并不会带来性能提升，但会增加系统的资源消耗。\n\n\n# 5、开启 gzip 压缩\n\n# gzip 压缩开关\nundertow.gzip.enable=true\n# 配置压缩级别，默认值 -1。 可配置 1 到 9。 1 拥有最快压缩速度，9 拥有最高压缩率\nundertow.gzip.level=-1\n# 触发压缩的最小内容长度\nundertow.gzip.minlength=1024\n\n\n1\n2\n3\n4\n5\n6\n\n\n开启 gzip 压缩可以降低网络流量，提升访问速度\n\n\n# 6、配置 session\n\n# session 过期时间，注意单位是秒\nundertow.session.timeout=1800\n# 支持 session 热加载，避免依赖于 session 的登录型项目反复登录，默认值为 true。仅用于 devmode，生产环境无影响\nundertow.session.hotswap=true\n\n\n1\n2\n3\n4\n\n\n\n# 7、配置 https\n\n# 是否开启 ssl\nundertow.ssl.enable=false\n# ssl 监听端口号，部署环境设置为 443\nundertow.ssl.port=443\n# 密钥库类型，建议使用 pkcs12\nundertow.ssl.keystoretype=pkcs12\n# 密钥库文件\nundertow.ssl.keystore=demo.pfx\n# 密钥库密码\nundertow.ssl.keystorepassword=123456\n# 别名配置，一般不使用\nundertow.ssl.keyalias=demo\nssl 证书的获取见后面的第二小节\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# 8、配置 http2\n\n# ssl 开启时，是否开启 http2。检测该配置是否生效在 chrome 地址栏中输入: chrome://net-internals/#http2\nundertow.http2.enable=true\n\n\n1\n2\n\n\n开启 http2 可以大大加快访问速度，不必担心 https 比 http 慢这个事\n\n\n# 9、配置 http 重定向到 https\n\n# ssl 开启时，http 请求是否重定向到 https\nundertow.http.tohttps=false\n# ssl 开启时，http 请求跳转到 https 使用的状态码，默认值 302\nundertow.http.tohttpsstatuscode=302\n### 10、配置关闭 http\n# ssl 开启时，是否关闭 http\nundertow.http.disable=false\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n在启用 https 后，可以配置关闭 http，这样就只能访问 https 了。该配置项比较适合于小程序服务端。\n\n对于一般的 web 项目不建议配置此项，而是配置 undertow.http.tohttps=true 将 http 重定向到 https\n\n\n# 11､自由配置 undertow\n\n以上配置方式由 jfinal undertow 做了直接的支持，如果上面的配置仍然不能满足需求，还可以通过下面的方式自由配置 undertow：\n\nundertowserver.create(yourjfinalconfig.class)\n    .onstart( builder -> {\n        builder.setserveroption(undertowoptions.参数名, 参数值);\t\n     })\n    .start();\n\n\n1\n2\n3\n4\n5\n\n\n如上所示，通过在 onstart 方法中使用 builder.setserveroption(...) 可以对 underow 进行更加深入的配置，还可以调用 builder 中的其它 api 进行其它类型的配置。上述的 undertowoptions 中定义了很多 undertow 的配置名，查看其中的注释文档可以知道还有很多有用的配置\n\n\n# 12、添加 filter、websocket、servlet、listener\n\n特别注意，undertow 是为嵌入而生的 web server，web.xml 已被抛弃，所以无法通过 web.xml 配置 web 组件。\n\n为此 jfinal undertow 提供了 undertowserver.configweb(...) 可以很方便添加 filter、websocket、servlet、listener 这些标准的 java web 组件：\n\nundertowserver.create(appconfig.class)\n     .configweb( builder -> {\n         // 配置 filter\n         builder.addfilter("myfilter", "com.abc.myfilter");\n         builder.addfilterurlmapping("myfilter", "/*");\n         builder.addfilterinitparam("myfilter", "key", "value");\n         \n         // 配置 servlet\n         builder.addservlet("myservlet", "com.abc.myservlet");\n         builder.addservletmapping("myservlet", "*.do");\n         builder.addservletinitparam("myservlet", "key", "value");\n         \n         // 配置 listener\n         builder.addlistener("com.abc.mylistener");\n         \n         // 配置 websocket，mywebsocket 需使用 serverendpoint 注解\n         builder.addwebsocketendpoint("com.abc.mywebsocket");\n      })\n     .start();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n注意，jfinalfilter 会接管所有请求，所以上面代码中 addservletmapping(...) 映射的 servlet 默认是无法被请求到的，需要在 confighandler(handlers me) 中配置 urlskiphandler 让 jfinal 跳过这些 serlvet 的 url\n\n以上代码中的 mywebsocket 需要使用 serverendpoint 注解标识其为一个 websocket 组件，例如：\n\n@serverendpoint("/myapp.ws")\npublic class mywebsocket { \n    @onmessage\n    public void message(string message, session session) {\n        for (session s : session.getopensessions()) {\n            s.getasyncremote().sendtext(message);\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n与上述 mywebsocket 配合使用的例子 html 在这里可以下载：传送门。社区同学分享的完整 websocket 代码在这里：https://jfinal.com/share/2004\n\n要修改一下该 html 中的 url 为： "ws://localhost:80/myapp.ws"，端口号适当调整。\n\n注意：由于 jfinalfilter 会接管所有不带 "." 字符的 url 请求所以 @serverendpoint 注解中的 url 参数值建议以 ".ws" 结尾，否则请求会响应 404 找不到资源，例如：\n\n@serverendpoint("/myapp.ws")\npublic class mywebsocketendpoint  {\n    ......\n}\n\n\n1\n2\n3\n4\n\n\n当然，serverendpoint 中的 url 不使用 ".ws" 结尾也是可以的，只需要参考 jfinal 的 urlskiphandler 做一个 handler 跳过属于 websocket 的 url 即可\n\n最后，websocket 支持需要添加一个依赖，要添加的依赖项请看前面的文档：https://jfinal.com/doc/1-2\n\n\n# 二、ssl 证书\n\n\n# 1、申请 ssl 证书\n\n建议从阿里云或者腾迅云获取 ssl 证书，有免费版和收费版，阿里云 ssl 证书获取：ssl 证书获取传送门\n\n注意：在申请免费版 ssl 证书的过程中，绑定域名一般输入主机名为 www 的域名，例如： www.jfinal.com\n\n\n# 2、下载合适的证书类型\n\nssl 证书申请下来以后，可以到控制台下载证书，如下图所示：\n\n\n\n点击下载链接以后，在右侧下载 tomcat 类型的 ssl 证书\n\n下载的证书里头，有一个 xxx.pfx 文件，该文件就是证书文件。此外还有一个 pfx-password.txt 文件，此文件里面放的是证书密码，将 xxx.pfx 放入项目的 src/main/resources 目录，在 undertow.txt 配置文件中添加如下几行配置：\n\n# 是否开启 ssl\nundertow.ssl.enable=true\n# ssl 监听端口号，部署环境设置为 443\nundertow.ssl.port=443\n# 密钥库类型，一般是 pkcs12 与 jks，注意根据实际类型调整\nundertow.ssl.keystoretype=pkcs12\n# 密钥库文件\nundertow.ssl.keystore=demo.pfx\n# 密钥库密码\nundertow.ssl.keystorepassword=123456\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n其中的 "demo.pfx" 即为前面下载的证书文件的文件名，"123456" 即为证书密码，这两个配置根据你下载到的实际内容进行修改。"pkcs12" 这个配置是证书类型，阿里云下载的 tomcat 型证书为 pkcs12，腾迅云可能是 "jks"\n\n\n# 3、启动项目\n\n启动项目，通过 "https://申请证书时绑定的域名" 即可访问\n\n\n# 三、https 双向认证\n\n如果你的 jfinal undertow 项目需要对客户端进行 ssl 认证，需要使用如下方式进行配置：\n\nundertowserver.create(yourjfinalconfig.class)\n  .onstart( builder -> {\n    builder.setsocketoption(options.ssl_client_auth_mode, sslclientauthmode.requested);\n  })\n  .start();`\n\n\n1\n2\n3\n4\n5\n\n\n该方法来自于社区用户的分享：https://jfinal.com/feedback/7758',charsets:{cjk:!0}},{title:"1.5 jfinal-undertow 常见问题",frontmatter:{},regularPath:"/zh/1%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/1.5%20jfinal-undertow%20%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98.html",relativePath:"zh/1 快速上手/1.5 jfinal-undertow 常见问题.md",key:"v-a5a8ee58",path:"/zh/1%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/1.5%20jfinal-undertow%20%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98.html",headers:[{level:3,title:"1、IDEA 下支持热加载",slug:"_1、idea-下支持热加载",normalizedTitle:"1、idea 下支持热加载",charIndex:31},{level:3,title:"2、IDEA 下模板文件路径不正确",slug:"_2、idea-下模板文件路径不正确",normalizedTitle:"2、idea 下模板文件路径不正确",charIndex:562},{level:3,title:"3､ maven 多模块项目启动报错",slug:"_3、-maven-多模块项目启动报错",normalizedTitle:"3､ maven 多模块项目启动报错",charIndex:831},{level:3,title:"4、类型转换异常、子类对象无法赋值到基类变量",slug:"_4、类型转换异常、子类对象无法赋值到基类变量",normalizedTitle:"4、类型转换异常、子类对象无法赋值到基类变量",charIndex:1292},{level:3,title:"5､shiro 热加载问题",slug:"_5、shiro-热加载问题",normalizedTitle:"5､shiro 热加载问题",charIndex:2456},{level:3,title:"6､部署在外网服务器上无法访问问题",slug:"_6、部署在外网服务器上无法访问问题",normalizedTitle:"6､部署在外网服务器上无法访问问题",charIndex:2545},{level:3,title:"7､脚本无法使用问题",slug:"_7、脚本无法使用问题",normalizedTitle:"7､脚本无法使用问题",charIndex:2860},{level:3,title:"8､JSP 支持问题",slug:"_8、jsp-支持问题",normalizedTitle:"8､jsp 支持问题",charIndex:3409},{level:3,title:"9､ mp4 无法播放、xls 无法下载等 contentType 不正确的问题",slug:"_9、-mp4-无法播放、xls-无法下载等-contenttype-不正确的问题",normalizedTitle:"9､ mp4 无法播放、xls 无法下载等 contenttype 不正确的问题",charIndex:4206}],lastUpdated:"9/22/2023, 9:39:45 AM",lastUpdatedTimestamp:1695375585e3,headersStr:"1、IDEA 下支持热加载 2、IDEA 下模板文件路径不正确 3､ maven 多模块项目启动报错 4、类型转换异常、子类对象无法赋值到基类变量 5､shiro 热加载问题 6､部署在外网服务器上无法访问问题 7､脚本无法使用问题 8､JSP 支持问题 9､ mp4 无法播放、xls 无法下载等 contentType 不正确的问题",content:'# 1.5 jfinal-undertow 常见问题\n\n\n# 1、IDEA 下支持热加载\n\njfinal undertow 是通过监听 target/classes 下面的 .class 文件被修改事件去触发的热加载。\n\neclipse 拥有自动编译功能，会在 java 源代码文件保存时自动编译并更新 target/classes 下的相关 .class 文件，所以 eclipse 下面默认就支持热加载。注意 eclipse 的自动编译菜单一定要勾选上(默认是勾选的)，如下图：\n\n但 IDEA 默认并不支持自动编译，那么 target/classes 下面的 .class 文件无法及时更新，所以 IDEA 默认不支持热加载。因此需要想办法触发 IDEA 的编译动作，建议去网上找一些开启 IDEA 自动编译的配置方法。 下面的链接给出了一种通过快捷键触发编译的方法供参考：\n\nhttps://my.oschina.net/fdblog/blog/172229\n\n此外，jfinal 官网很久以前的文档也给出过一种方法：\n\nhttps://www.jfinal.com/share/1357\n\n最后：别忘了 undertow.devMode 要配置成 true 才支持热加载，具体配置方法见前面两小节的文档。\n\n\n# 2、IDEA 下模板文件路径不正确\n\n在 IDEA 下发时，如果是通过打开项目的目录，或者通过打开项目的 pom.xml 文件导入的 maven 项目将会找不到模板文件路径。正确的导入方法如下： 如下图所示，一定要选择 import project，而不能选择 Open，下一步是选择项目根目录： 再一步是选择 maven： 然后再一路点击 next 直到完成即可。\n\n要点：如果第一步选择 Open 将是错误的做法。如果项目已经使用上述方式导入过一次，IDEA 生成了各种配置文件，那么选择 Open 打开项目的方式没有问题。\n\n\n# 3､ maven 多模块项目启动报错\n\n如果 maven 的多 module 结构项目在启动时出现找不到模板的异常，该异常的原因是在 IDEA 多模块中启动项目时，其工作路径处在当前启动模块的上一级目录，所以默认的 undertow.resourcePath 配置值 src/main/webapp 是不正确的，需要再加一层当前模块名才能指向正确的资源路径，例如：\n\nundertow.resourcePath = 这里修改为启动模块的名称/src/main/webapp, src/main/webapp 以上配置用逗号分隔了两个路径配置，前者支持 IDEA，后者支持 ecilpse，该配置可以同时兼容两种开发工具。并且，上述配置即便在路径不存在时也没有副作用（jfinal undertow内部会判断路径是否存在），非常优雅。\n\n这里有相关问题的分享：\n\nhttp://www.jfinal.com/share/1285\n\nhttps://my.oschina.net/imlzw/blog/3106769\n\n\n# 4、类型转换异常、子类对象无法赋值到基类变量\n\n如果两个类路径与类名完全一样的两个类出现类型转换异常（java.lang.ClassCastException），或者子类对象无法赋值给基类变量，可以通过配置 hotSwapClassPrefix 来解决。\n\n再补充几个也属于这个问题的异常：java.lang.VerifyError: Bad type on operand stack 以及 java.lang.IncompatibleClassChangeError\n\n假定出现转换异常的类为： "com.abc.UserService"，解决办法如下：\n\nUndertowServer.create(MyApp.class)\n    .addHotSwapClassPrefix("com.abc.")\n    .start();\n\n\n1\n2\n3\n\n\n如上所示，将出现类型转换异常的类的包前缀通过 addHotSwapClassPrefix(...) 添加进去即可。原因是 jfinal undertow 默认只对 target/classes 以及 jfinal 自身进行热加载，所以当你的类文件在 jar 包并且需要被热加载的时候就需要通过上面的办法添加为被热加载。\n\n一般情况下你项目中 target/classes 下的类文件正好才是需要被热加载的类，所以不会有问题。这个配置仅用于开发环境，部署环境没有热加载机制，所以完全没有影响。\n\n此外，还可以通过配置文件来设置：\n\nundertow.hotSwapClassPrefix=com.abc.\n\n\n1\n\n\n如果要添加多个，可以通过逗号分隔。\n\n最新补充：在少数情况下即便是通过配置 hotSwapClassPrefix 将出现类型转换异常的类处理掉了，但仍然不起作用，这是因为一些第三方软件里头缓存了出问题的 class 或者对象，例如：xstream 这个将 xml 转 object 的工具，需要再追加如下配置：\n\naddHotSwapClassPrefix("com.thoughtworks.")\n\n\n1\n\n\n如上所示，将这类有缓存动作的第三方也配置成 hot swap class 就没问题了，重点要找到这些第三方。 用户反馈不断补充要配置的项目还有 j2cache 以及作者 dreamlu 开源的一些项目，需要配置：\n\naddHotSwapClassPrefix("net.oschina.j2cache.")\n \naddHotSwapClassPrefix("net.dreamlu.")\n\n\n1\n2\n3\n\n\n这个设计完全是出于热加载的性能优化，本可以默认将这类 class 加载为 hotSwapClass，但性能不如当前的设计好。\n\n\n# 5､shiro 热加载问题\n\njfinal undertow 暂不支持 shiro 热加载，配置 undertow.devMode=false 可以使用，但不支持热加载\n\n\n# 6､部署在外网服务器上无法访问问题\n\n出于安全性考虑 jfinal undertow 早期版本的 undertow.host 默认配置为了 localhost，外网服务器上无法访问时，使用如下配置：\n\nundertow.host=0.0.0.0\n\n\n1\n\n\n如果添加了上述配置还是无法访问，检查一下阿里云是否开启了相关的端口号（假定你用的阿里云）。\n\n为了便利性，新版本 jfinal undertow 的 undertow.host 默认配置改成了 0.0.0.0，如果不希望在外网直接访问，需要将其配置为 localhost。\n\n注意，这里所谓的外网无法访问，也包括局域网内访问的机器与部署机器并非同一台机器的情况。\n\n\n# 7､脚本无法使用问题\n\njfinal 官方提供的 jfinal.sh、jfinal.bat 脚本文件里面有较为详细的使用说明，只要按照说明去使用一般不会有问题。\n\n这里要提醒一个比较奇葩的问题，假定你自己创建上述脚本文件，虽然是从 jfinal 官方 copy 过去的内容，然后死活就是无法使用，原因是脚本文件的换行符出了问题。 linux、mac 系统之下的脚本换行字符必须是 \'\\n\'，而 windows 下必须是 "\\r\\n"。\n\n查看脚本文件的换行字符的方法是：先用 eclipse 打开一个 java 源代码文件，然后在工具栏点击一下 "Show Whitespace Characters" 这个图标，然后再用 eclipse 打开脚本文件，在每行末尾处会显示出换行字符。显示一个字符的就是 \'\\n\'，否则就是 \'\\r\\n\'。\n\n注意，此问题与 jfinal 完全无关，是操作系统自己的限制。\n\n重要：最近俱乐部同学发现一类新的脚本无法启动的原因，那就是 pom.xml 中的 jetty 依赖没有删除，从而引发异常：java.lang.NoClassDefFoundError: com/jfinal/config/JFinalConfig，删掉 jetty 依赖即可解决。\n\n\n# 8､JSP 支持问题\n\n为提升应用的安全性，jfinal 较新的版本默认不能对 .jsp 文件直接进行访问，也就是在浏览器地址栏中无法输入 .jsp 文件名去访问 jsp 文件，但是可以通过 renderJsp(xxx.jsp) 来访问 jsp 文件。如果确实需要直接访问 jsp 文件，需要添加如下配置：\n\npublic void configConstant(Constants me) {\n    me.setDenyAccessJsp(false);\n}\n\n\n1\n2\n3\n\n\njfinal undertow 支持 jsp 功能需要类似下面的配置：\n\nUndertowServer.create(DemoConfig.class)\n   .configWeb(wb -> {\n      wb.getDeploymentInfo().addServlet(JspServletBuilder.createServlet("Default Jsp Servlet", "*.jsp"));\n \n      HashMaptagLibraryInfo = new HashMap<>();\n      JspServletBuilder.setupDeployment(wb.getDeploymentInfo(), new HashMap(),\n      tagLibraryInfo, new HackInstanceManager());\n   })\n   .start();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n更多信息可以参考如下资源：\n\nhttps://jfinal.com/share/1890\n\nhttps://jfinal.com/share/1899\n\nhttps://github.com/shanmine/undertow-jsp-demo.git\n\n\n# 9､ mp4 无法播放、xls 无法下载等 contentType 不正确的问题\n\n需要添加类似如下配置：\n\nUndertowServer\n  .create()\n  .configWeb(\n      builder->{MimeMapping xlsMimeMapping = new MimeMapping("xls","application/vnd.ms-excel");\n      builder.getDeploymentInfo().addMimeMapping(xlsMimeMapping);\n})\n.start();\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n以上是 xls 的示例，mp4 文件与之也类似，相关参考资源：\n\nhttps://jfinal.com/feedback/7237 https://gitee.com/jfinal/jfinal-undertow/issues/I1FIBH',normalizedContent:'# 1.5 jfinal-undertow 常见问题\n\n\n# 1、idea 下支持热加载\n\njfinal undertow 是通过监听 target/classes 下面的 .class 文件被修改事件去触发的热加载。\n\neclipse 拥有自动编译功能，会在 java 源代码文件保存时自动编译并更新 target/classes 下的相关 .class 文件，所以 eclipse 下面默认就支持热加载。注意 eclipse 的自动编译菜单一定要勾选上(默认是勾选的)，如下图：\n\n但 idea 默认并不支持自动编译，那么 target/classes 下面的 .class 文件无法及时更新，所以 idea 默认不支持热加载。因此需要想办法触发 idea 的编译动作，建议去网上找一些开启 idea 自动编译的配置方法。 下面的链接给出了一种通过快捷键触发编译的方法供参考：\n\nhttps://my.oschina.net/fdblog/blog/172229\n\n此外，jfinal 官网很久以前的文档也给出过一种方法：\n\nhttps://www.jfinal.com/share/1357\n\n最后：别忘了 undertow.devmode 要配置成 true 才支持热加载，具体配置方法见前面两小节的文档。\n\n\n# 2、idea 下模板文件路径不正确\n\n在 idea 下发时，如果是通过打开项目的目录，或者通过打开项目的 pom.xml 文件导入的 maven 项目将会找不到模板文件路径。正确的导入方法如下： 如下图所示，一定要选择 import project，而不能选择 open，下一步是选择项目根目录： 再一步是选择 maven： 然后再一路点击 next 直到完成即可。\n\n要点：如果第一步选择 open 将是错误的做法。如果项目已经使用上述方式导入过一次，idea 生成了各种配置文件，那么选择 open 打开项目的方式没有问题。\n\n\n# 3､ maven 多模块项目启动报错\n\n如果 maven 的多 module 结构项目在启动时出现找不到模板的异常，该异常的原因是在 idea 多模块中启动项目时，其工作路径处在当前启动模块的上一级目录，所以默认的 undertow.resourcepath 配置值 src/main/webapp 是不正确的，需要再加一层当前模块名才能指向正确的资源路径，例如：\n\nundertow.resourcepath = 这里修改为启动模块的名称/src/main/webapp, src/main/webapp 以上配置用逗号分隔了两个路径配置，前者支持 idea，后者支持 ecilpse，该配置可以同时兼容两种开发工具。并且，上述配置即便在路径不存在时也没有副作用（jfinal undertow内部会判断路径是否存在），非常优雅。\n\n这里有相关问题的分享：\n\nhttp://www.jfinal.com/share/1285\n\nhttps://my.oschina.net/imlzw/blog/3106769\n\n\n# 4、类型转换异常、子类对象无法赋值到基类变量\n\n如果两个类路径与类名完全一样的两个类出现类型转换异常（java.lang.classcastexception），或者子类对象无法赋值给基类变量，可以通过配置 hotswapclassprefix 来解决。\n\n再补充几个也属于这个问题的异常：java.lang.verifyerror: bad type on operand stack 以及 java.lang.incompatibleclasschangeerror\n\n假定出现转换异常的类为： "com.abc.userservice"，解决办法如下：\n\nundertowserver.create(myapp.class)\n    .addhotswapclassprefix("com.abc.")\n    .start();\n\n\n1\n2\n3\n\n\n如上所示，将出现类型转换异常的类的包前缀通过 addhotswapclassprefix(...) 添加进去即可。原因是 jfinal undertow 默认只对 target/classes 以及 jfinal 自身进行热加载，所以当你的类文件在 jar 包并且需要被热加载的时候就需要通过上面的办法添加为被热加载。\n\n一般情况下你项目中 target/classes 下的类文件正好才是需要被热加载的类，所以不会有问题。这个配置仅用于开发环境，部署环境没有热加载机制，所以完全没有影响。\n\n此外，还可以通过配置文件来设置：\n\nundertow.hotswapclassprefix=com.abc.\n\n\n1\n\n\n如果要添加多个，可以通过逗号分隔。\n\n最新补充：在少数情况下即便是通过配置 hotswapclassprefix 将出现类型转换异常的类处理掉了，但仍然不起作用，这是因为一些第三方软件里头缓存了出问题的 class 或者对象，例如：xstream 这个将 xml 转 object 的工具，需要再追加如下配置：\n\naddhotswapclassprefix("com.thoughtworks.")\n\n\n1\n\n\n如上所示，将这类有缓存动作的第三方也配置成 hot swap class 就没问题了，重点要找到这些第三方。 用户反馈不断补充要配置的项目还有 j2cache 以及作者 dreamlu 开源的一些项目，需要配置：\n\naddhotswapclassprefix("net.oschina.j2cache.")\n \naddhotswapclassprefix("net.dreamlu.")\n\n\n1\n2\n3\n\n\n这个设计完全是出于热加载的性能优化，本可以默认将这类 class 加载为 hotswapclass，但性能不如当前的设计好。\n\n\n# 5､shiro 热加载问题\n\njfinal undertow 暂不支持 shiro 热加载，配置 undertow.devmode=false 可以使用，但不支持热加载\n\n\n# 6､部署在外网服务器上无法访问问题\n\n出于安全性考虑 jfinal undertow 早期版本的 undertow.host 默认配置为了 localhost，外网服务器上无法访问时，使用如下配置：\n\nundertow.host=0.0.0.0\n\n\n1\n\n\n如果添加了上述配置还是无法访问，检查一下阿里云是否开启了相关的端口号（假定你用的阿里云）。\n\n为了便利性，新版本 jfinal undertow 的 undertow.host 默认配置改成了 0.0.0.0，如果不希望在外网直接访问，需要将其配置为 localhost。\n\n注意，这里所谓的外网无法访问，也包括局域网内访问的机器与部署机器并非同一台机器的情况。\n\n\n# 7､脚本无法使用问题\n\njfinal 官方提供的 jfinal.sh、jfinal.bat 脚本文件里面有较为详细的使用说明，只要按照说明去使用一般不会有问题。\n\n这里要提醒一个比较奇葩的问题，假定你自己创建上述脚本文件，虽然是从 jfinal 官方 copy 过去的内容，然后死活就是无法使用，原因是脚本文件的换行符出了问题。 linux、mac 系统之下的脚本换行字符必须是 \'\\n\'，而 windows 下必须是 "\\r\\n"。\n\n查看脚本文件的换行字符的方法是：先用 eclipse 打开一个 java 源代码文件，然后在工具栏点击一下 "show whitespace characters" 这个图标，然后再用 eclipse 打开脚本文件，在每行末尾处会显示出换行字符。显示一个字符的就是 \'\\n\'，否则就是 \'\\r\\n\'。\n\n注意，此问题与 jfinal 完全无关，是操作系统自己的限制。\n\n重要：最近俱乐部同学发现一类新的脚本无法启动的原因，那就是 pom.xml 中的 jetty 依赖没有删除，从而引发异常：java.lang.noclassdeffounderror: com/jfinal/config/jfinalconfig，删掉 jetty 依赖即可解决。\n\n\n# 8､jsp 支持问题\n\n为提升应用的安全性，jfinal 较新的版本默认不能对 .jsp 文件直接进行访问，也就是在浏览器地址栏中无法输入 .jsp 文件名去访问 jsp 文件，但是可以通过 renderjsp(xxx.jsp) 来访问 jsp 文件。如果确实需要直接访问 jsp 文件，需要添加如下配置：\n\npublic void configconstant(constants me) {\n    me.setdenyaccessjsp(false);\n}\n\n\n1\n2\n3\n\n\njfinal undertow 支持 jsp 功能需要类似下面的配置：\n\nundertowserver.create(democonfig.class)\n   .configweb(wb -> {\n      wb.getdeploymentinfo().addservlet(jspservletbuilder.createservlet("default jsp servlet", "*.jsp"));\n \n      hashmaptaglibraryinfo = new hashmap<>();\n      jspservletbuilder.setupdeployment(wb.getdeploymentinfo(), new hashmap(),\n      taglibraryinfo, new hackinstancemanager());\n   })\n   .start();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n更多信息可以参考如下资源：\n\nhttps://jfinal.com/share/1890\n\nhttps://jfinal.com/share/1899\n\nhttps://github.com/shanmine/undertow-jsp-demo.git\n\n\n# 9､ mp4 无法播放、xls 无法下载等 contenttype 不正确的问题\n\n需要添加类似如下配置：\n\nundertowserver\n  .create()\n  .configweb(\n      builder->{mimemapping xlsmimemapping = new mimemapping("xls","application/vnd.ms-excel");\n      builder.getdeploymentinfo().addmimemapping(xlsmimemapping);\n})\n.start();\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n以上是 xls 的示例，mp4 文件与之也类似，相关参考资源：\n\nhttps://jfinal.com/feedback/7237 https://gitee.com/jfinal/jfinal-undertow/issues/i1fibh',charsets:{cjk:!0}},{title:"1.0 快速上手",frontmatter:{},regularPath:"/zh/1%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/1.0%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B.html",relativePath:"zh/1 快速上手/1.0 快速上手.md",key:"v-b601288a",path:"/zh/1%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/1.0%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B.html",lastUpdated:"9/8/2023, 9:00:03 AM",lastUpdatedTimestamp:1694163603e3,headersStr:null,content:'# 1.0 快速上手\n\n新建maven工程jfinal-5.1.2-hello pom.xml\n\n<properties>\n  <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n  <java.version>1.8</java.version>\n  <maven.compiler.source>${java.version}</maven.compiler.source>\n  <maven.compiler.target>${java.version}</maven.compiler.target>\n</properties>\n<dependencies>\n  <dependency>\n    <groupId>com.jfinal</groupId>\n    <artifactId>jfinal-undertow</artifactId>\n    <version>3.5</version>\n  </dependency>\n\n  <dependency>\n    <groupId>com.jfinal</groupId>\n    <artifactId>jfinal</artifactId>\n    <version>5.1.2</version>\n  </dependency>\n</dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\nHelloController\n\npackage demo;\n\nimport com.jfinal.core.Controller;\nimport com.jfinal.core.Path;\n\n@Path("/hello")\npublic class HelloController extends Controller {\n  public void index() {\n    renderText("Hello JFinal World.");\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\nDemoConfig\n\npackage demo;\n\nimport com.jfinal.config.Constants;\nimport com.jfinal.config.Handlers;\nimport com.jfinal.config.Interceptors;\nimport com.jfinal.config.JFinalConfig;\nimport com.jfinal.config.Plugins;\nimport com.jfinal.config.Routes;\nimport com.jfinal.server.undertow.UndertowServer;\nimport com.jfinal.template.Engine;\n\npublic class DemoConfig extends JFinalConfig {\n\n  public void configConstant(Constants me) {\n    me.setDevMode(true);\n  }\n\n  public void configRoute(Routes me) {\n    me.scan("demo.");\n  }\n\n  public void configEngine(Engine me) {\n  }\n\n  public void configPlugin(Plugins me) {\n  }\n\n  public void configInterceptor(Interceptors me) {\n  }\n\n  public void configHandler(Handlers me) {\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n\nDemoApp\n\npackage demo;\n\nimport com.jfinal.server.undertow.UndertowServer;\n\npublic class DemoApp {\n  public static void main(String[] args) {\n    UndertowServer.start(DemoConfig.class);\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n访问 http://localhost/hello 显示 Hello JFinal World.\n\n代码地址 https://github.com/litongjava/java-ee-jfinal-study/tree/master/jfinal-5.0-study/jfinal-5.1.2-hello',normalizedContent:'# 1.0 快速上手\n\n新建maven工程jfinal-5.1.2-hello pom.xml\n\n<properties>\n  <project.build.sourceencoding>utf-8</project.build.sourceencoding>\n  <java.version>1.8</java.version>\n  <maven.compiler.source>${java.version}</maven.compiler.source>\n  <maven.compiler.target>${java.version}</maven.compiler.target>\n</properties>\n<dependencies>\n  <dependency>\n    <groupid>com.jfinal</groupid>\n    <artifactid>jfinal-undertow</artifactid>\n    <version>3.5</version>\n  </dependency>\n\n  <dependency>\n    <groupid>com.jfinal</groupid>\n    <artifactid>jfinal</artifactid>\n    <version>5.1.2</version>\n  </dependency>\n</dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\nhellocontroller\n\npackage demo;\n\nimport com.jfinal.core.controller;\nimport com.jfinal.core.path;\n\n@path("/hello")\npublic class hellocontroller extends controller {\n  public void index() {\n    rendertext("hello jfinal world.");\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\ndemoconfig\n\npackage demo;\n\nimport com.jfinal.config.constants;\nimport com.jfinal.config.handlers;\nimport com.jfinal.config.interceptors;\nimport com.jfinal.config.jfinalconfig;\nimport com.jfinal.config.plugins;\nimport com.jfinal.config.routes;\nimport com.jfinal.server.undertow.undertowserver;\nimport com.jfinal.template.engine;\n\npublic class democonfig extends jfinalconfig {\n\n  public void configconstant(constants me) {\n    me.setdevmode(true);\n  }\n\n  public void configroute(routes me) {\n    me.scan("demo.");\n  }\n\n  public void configengine(engine me) {\n  }\n\n  public void configplugin(plugins me) {\n  }\n\n  public void configinterceptor(interceptors me) {\n  }\n\n  public void confighandler(handlers me) {\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n\ndemoapp\n\npackage demo;\n\nimport com.jfinal.server.undertow.undertowserver;\n\npublic class demoapp {\n  public static void main(string[] args) {\n    undertowserver.start(democonfig.class);\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n访问 http://localhost/hello 显示 hello jfinal world.\n\n代码地址 https://github.com/litongjava/java-ee-jfinal-study/tree/master/jfinal-5.0-study/jfinal-5.1.2-hello',charsets:{cjk:!0}},{title:"1.7 tomcat 下部署",frontmatter:{},regularPath:"/zh/1%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/1.7%20tomcat%20%E4%B8%8B%E9%83%A8%E7%BD%B2.html",relativePath:"zh/1 快速上手/1.7 tomcat 下部署.md",key:"v-68e0b3c0",path:"/zh/1%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/1.7%20tomcat%20%E4%B8%8B%E9%83%A8%E7%BD%B2.html",headers:[{level:3,title:"0、检查 web.xml 配置",slug:"_0、检查-web-xml-配置",normalizedTitle:"0、检查 web.xml 配置",charIndex:21},{level:3,title:"1、指定打包类型为 war",slug:"_1、指定打包类型为-war",normalizedTitle:"1、指定打包类型为 war",charIndex:1082},{level:3,title:"2、删掉 jfinal-undertow 和 jetty-server 依赖",slug:"_2、删掉-jfinal-undertow-和-jetty-server-依赖",normalizedTitle:"2、删掉 jfinal-undertow 和 jetty-server 依赖",charIndex:1173},{level:3,title:"3､添加 servlet api 依赖",slug:"_3、添加-servlet-api-依赖",normalizedTitle:"3､添加 servlet api 依赖",charIndex:1293},{level:3,title:"4、打包",slug:"_4、打包",normalizedTitle:"4、打包",charIndex:1575},{level:3,title:"5、部署",slug:"_5、部署",normalizedTitle:"5、部署",charIndex:1638}],lastUpdated:"9/8/2023, 9:00:03 AM",lastUpdatedTimestamp:1694163603e3,headersStr:"0、检查 web.xml 配置 1、指定打包类型为 war 2、删掉 jfinal-undertow 和 jetty-server 依赖 3､添加 servlet api 依赖 4、打包 5、部署",content:'# 1.7 tomcat 下部署\n\n\n# 0、检查 web.xml 配置\n\n少数同学开发时用的 jfinal-undertow，部署时用的 tomcat，而 jfinal-undertow 是不需要 web.xml 文件的，造成在 tomcat 部署失败。\n\n因此，在 tomcat 下部署需要检查 web.xml 是否存在，并且要确保配置正确，配置格式如下：\n\n<?xml version="1.0" encoding="UTF-8"?>\n<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" id="WebApp_ID" version="2.5">\n  <display-name>jfinal offical website</display-name>\n  \n  <filter>\n    <filter-name>jfinal</filter-name>\n    <filter-class>com.jfinal.core.JFinalFilter</filter-class>\n    <init-param>\n       <param-name>configClass</param-name>\n       <param-value>demo.DemoConfig</param-value>\n    </init-param>\n  </filter>\n  \n  <filter-mapping>\n    <filter-name>jfinal</filter-name>\n    <url-pattern>/*</url-pattern>\n  </filter-mapping>\n \n</web-app>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n注意：其中的 para-value 配置取决于你项目的具体 XxxConfig 的包名与类名，注意修改，其它配置可原封不动进行复制。\n\n\n# 1、指定打包类型为 war\n\n修改 pom.xml 文件，其中的 packaging 标签值要改成 war\n\n<packaging>war</packaging>\n\n\n1\n\n\n\n# 2、删掉 jfinal-undertow 和 jetty-server 依赖\n\n修改 pom.xml 文件，将 jfinal-undertow 和 jetty-server 有关依赖全部删除，否则部署到 tomcat 中会产生冲突\n\n\n# 3､添加 servlet api 依赖\n\n如果你的项目代码中用到了 servlet api 那么还要添加如下依赖才能打包\n\n<dependency>\n    <groupId>javax.servlet</groupId>\n    <artifactId>javax.servlet-api</artifactId>\n    <version>4.0.1</version>\n    <scope>provided</scope>\n</dependency>\n\n\n1\n2\n3\n4\n5\n6\n\n\n这个依赖可以在打包出现提示时再添加，如果打包通过可以不用理会。\n\n\n# 4、打包\n\n控制台 cd 进入项目根目录执行下面命令打出 war 包\n\nmvn clean package\n\n\n1\n\n\n\n# 5、部署\n\njfinal 开发的项目就是标准的 java web 项目，所以部署方式没有任何特殊的地方，有一些部署方面要注意的小技巧，见这篇博文：https://my.oschina.net/jfinal/blog/353062\n\n注意：本小节仅介绍了在 jfinal-undertow 或 jetty-server 之下开发，在 tomcat 下部署的方式，这两种方式下才需要删掉其依赖。如果采用传统的 java web 开发方式，无需关注此章节。尤其要注意特别声明：https://www.jfinal.com/doc/1-11',normalizedContent:'# 1.7 tomcat 下部署\n\n\n# 0、检查 web.xml 配置\n\n少数同学开发时用的 jfinal-undertow，部署时用的 tomcat，而 jfinal-undertow 是不需要 web.xml 文件的，造成在 tomcat 部署失败。\n\n因此，在 tomcat 下部署需要检查 web.xml 是否存在，并且要确保配置正确，配置格式如下：\n\n<?xml version="1.0" encoding="utf-8"?>\n<web-app xmlns:xsi="http://www.w3.org/2001/xmlschema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" xsi:schemalocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" id="webapp_id" version="2.5">\n  <display-name>jfinal offical website</display-name>\n  \n  <filter>\n    <filter-name>jfinal</filter-name>\n    <filter-class>com.jfinal.core.jfinalfilter</filter-class>\n    <init-param>\n       <param-name>configclass</param-name>\n       <param-value>demo.democonfig</param-value>\n    </init-param>\n  </filter>\n  \n  <filter-mapping>\n    <filter-name>jfinal</filter-name>\n    <url-pattern>/*</url-pattern>\n  </filter-mapping>\n \n</web-app>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n注意：其中的 para-value 配置取决于你项目的具体 xxxconfig 的包名与类名，注意修改，其它配置可原封不动进行复制。\n\n\n# 1、指定打包类型为 war\n\n修改 pom.xml 文件，其中的 packaging 标签值要改成 war\n\n<packaging>war</packaging>\n\n\n1\n\n\n\n# 2、删掉 jfinal-undertow 和 jetty-server 依赖\n\n修改 pom.xml 文件，将 jfinal-undertow 和 jetty-server 有关依赖全部删除，否则部署到 tomcat 中会产生冲突\n\n\n# 3､添加 servlet api 依赖\n\n如果你的项目代码中用到了 servlet api 那么还要添加如下依赖才能打包\n\n<dependency>\n    <groupid>javax.servlet</groupid>\n    <artifactid>javax.servlet-api</artifactid>\n    <version>4.0.1</version>\n    <scope>provided</scope>\n</dependency>\n\n\n1\n2\n3\n4\n5\n6\n\n\n这个依赖可以在打包出现提示时再添加，如果打包通过可以不用理会。\n\n\n# 4、打包\n\n控制台 cd 进入项目根目录执行下面命令打出 war 包\n\nmvn clean package\n\n\n1\n\n\n\n# 5、部署\n\njfinal 开发的项目就是标准的 java web 项目，所以部署方式没有任何特殊的地方，有一些部署方面要注意的小技巧，见这篇博文：https://my.oschina.net/jfinal/blog/353062\n\n注意：本小节仅介绍了在 jfinal-undertow 或 jetty-server 之下开发，在 tomcat 下部署的方式，这两种方式下才需要删掉其依赖。如果采用传统的 java web 开发方式，无需关注此章节。尤其要注意特别声明：https://www.jfinal.com/doc/1-11',charsets:{cjk:!0}},{title:"1.6 jetty-server 下开发",frontmatter:{},regularPath:"/zh/1%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/1.6%20jetty-server%20%E4%B8%8B%E5%BC%80%E5%8F%91.html",relativePath:"zh/1 快速上手/1.6 jetty-server 下开发.md",key:"v-8bfe3d50",path:"/zh/1%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/1.6%20jetty-server%20%E4%B8%8B%E5%BC%80%E5%8F%91.html",headers:[{level:3,title:"1、创建标准的 maven 项目",slug:"_1、创建标准的-maven-项目",normalizedTitle:"1、创建标准的 maven 项目",charIndex:27},{level:3,title:"2、添加 jetty server 与 jfinal 依赖",slug:"_2、添加-jetty-server-与-jfinal-依赖",normalizedTitle:"2、添加 jetty server 与 jfinal 依赖",charIndex:76},{level:3,title:"3、添加 java 文件",slug:"_3、添加-java-文件",normalizedTitle:"3、添加 java 文件",charIndex:817},{level:3,title:"4､ web.xml 中添加 JFinalFilter",slug:"_4、-web-xml-中添加-jfinalfilter",normalizedTitle:"4､ web.xml 中添加 jfinalfilter",charIndex:988},{level:3,title:"5、启动项目",slug:"_5、启动项目",normalizedTitle:"5、启动项目",charIndex:1888},{level:3,title:"6、开启浏览器看效果",slug:"_6、开启浏览器看效果",normalizedTitle:"6、开启浏览器看效果",charIndex:1927},{level:3,title:"7、常见问题解决：",slug:"_7、常见问题解决",normalizedTitle:"7、常见问题解决：",charIndex:1970}],lastUpdated:"9/8/2023, 9:00:03 AM",lastUpdatedTimestamp:1694163603e3,headersStr:"1、创建标准的 maven 项目 2、添加 jetty server 与 jfinal 依赖 3、添加 java 文件 4､ web.xml 中添加 JFinalFilter 5、启动项目 6、开启浏览器看效果 7、常见问题解决：",content:'# 1.6 jetty-server 下开发\n\n\n# 1、创建标准的 maven 项目\n\n与 jfinal undertow 相关小节完全一样\n\n\n# 2、添加 jetty server 与 jfinal 依赖\n\n<dependency>\n    <groupId>com.jfinal</groupId>\n    <artifactId>jfinal</artifactId>\n    <version>5.1.2</version>\n</dependency>\n \n<dependency>\n    <groupId>com.jfinal</groupId>\n    <artifactId>jetty-server</artifactId>\n    <version>2019.3</version>\n    <scope>provided</scope>\n</dependency>\n \n\x3c!-- 下面的依赖仅在使用 JSP 时才需要 --\x3e\n<dependency>\n    <groupId>org.eclipse.jetty</groupId>\n    <artifactId>jetty-jsp</artifactId>\n    <version>9.2.26.v20180806</version>\n    <scope>provided</scope>\n</dependency>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\njetty-server 依赖的 scope 为 provided，仅用于开发阶段，部署时不需要，打包时也会自动跳过。\n\n这里特别注意一下：如果是使用 IDEA 开发，scope 仍然得设置成为 compile，否则提示缺少 jar 包，在打包的时候记得要改回 provided，避免打进一些不需要的 jar 包\n\n\n# 3、添加 java 文件\n\n与 jfinal undertow 相关小节几乎一样，仅仅是 main 方法中的内容有所不同，如下：\n\npublic static void main(String[] args) {\n    JFinal.start("src/main/webapp", 80, "/", 5);\n}\n\n\n1\n2\n3\n\n\n\n# 4､ web.xml 中添加 JFinalFilter\n\n<?xml version="1.0" encoding="UTF-8"?>\n<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" id="WebApp_ID" version="2.5">\n  <display-name>jfinal offical website</display-name>\n  \n  <filter>\n    <filter-name>jfinal</filter-name>\n    <filter-class>com.jfinal.core.JFinalFilter</filter-class>\n    <init-param>\n       <param-name>configClass</param-name>\n       <param-value>demo.DemoConfig</param-value>\n    </init-param>\n  </filter>\n  \n  <filter-mapping>\n    <filter-name>jfinal</filter-name>\n    <url-pattern>/*</url-pattern>\n  </filter-mapping>\n \n</web-app>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\njetty-server、tomcat 下开发需要配置上述 xml 文件。\n\n\n# 5、启动项目\n\n与 jfinal undertow 相关小节完全一样\n\n\n# 6、开启浏览器看效果\n\n与 jfinal undertow 相关小节完全一样\n\n\n# 7、常见问题解决：\n\n1：出现 NoClassDefFoundError 异常\n\n原因之一是 maven 本地库下载的 jar 文件数据有错误。看一下异常中是哪个类文件抛出的 NoClassDefFoundError，在本地 maven 库中删掉其目录，让 maven 从中心库中重新下载一次即可，例如使用的 jfinal-3.6 版本，就删掉 maven repository 中的 /com/jfinal/jfinal 目录下面的 3.6 子目录。\n\n原因之二是对同一个 jar 包，引入了多个不同版本，删掉其中多余的即可 以上问题本质上与 jfinal 无关，纯属 Java 开发时碰到的基础性异常',normalizedContent:'# 1.6 jetty-server 下开发\n\n\n# 1、创建标准的 maven 项目\n\n与 jfinal undertow 相关小节完全一样\n\n\n# 2、添加 jetty server 与 jfinal 依赖\n\n<dependency>\n    <groupid>com.jfinal</groupid>\n    <artifactid>jfinal</artifactid>\n    <version>5.1.2</version>\n</dependency>\n \n<dependency>\n    <groupid>com.jfinal</groupid>\n    <artifactid>jetty-server</artifactid>\n    <version>2019.3</version>\n    <scope>provided</scope>\n</dependency>\n \n\x3c!-- 下面的依赖仅在使用 jsp 时才需要 --\x3e\n<dependency>\n    <groupid>org.eclipse.jetty</groupid>\n    <artifactid>jetty-jsp</artifactid>\n    <version>9.2.26.v20180806</version>\n    <scope>provided</scope>\n</dependency>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\njetty-server 依赖的 scope 为 provided，仅用于开发阶段，部署时不需要，打包时也会自动跳过。\n\n这里特别注意一下：如果是使用 idea 开发，scope 仍然得设置成为 compile，否则提示缺少 jar 包，在打包的时候记得要改回 provided，避免打进一些不需要的 jar 包\n\n\n# 3、添加 java 文件\n\n与 jfinal undertow 相关小节几乎一样，仅仅是 main 方法中的内容有所不同，如下：\n\npublic static void main(string[] args) {\n    jfinal.start("src/main/webapp", 80, "/", 5);\n}\n\n\n1\n2\n3\n\n\n\n# 4､ web.xml 中添加 jfinalfilter\n\n<?xml version="1.0" encoding="utf-8"?>\n<web-app xmlns:xsi="http://www.w3.org/2001/xmlschema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" xsi:schemalocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" id="webapp_id" version="2.5">\n  <display-name>jfinal offical website</display-name>\n  \n  <filter>\n    <filter-name>jfinal</filter-name>\n    <filter-class>com.jfinal.core.jfinalfilter</filter-class>\n    <init-param>\n       <param-name>configclass</param-name>\n       <param-value>demo.democonfig</param-value>\n    </init-param>\n  </filter>\n  \n  <filter-mapping>\n    <filter-name>jfinal</filter-name>\n    <url-pattern>/*</url-pattern>\n  </filter-mapping>\n \n</web-app>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\njetty-server、tomcat 下开发需要配置上述 xml 文件。\n\n\n# 5、启动项目\n\n与 jfinal undertow 相关小节完全一样\n\n\n# 6、开启浏览器看效果\n\n与 jfinal undertow 相关小节完全一样\n\n\n# 7、常见问题解决：\n\n1：出现 noclassdeffounderror 异常\n\n原因之一是 maven 本地库下载的 jar 文件数据有错误。看一下异常中是哪个类文件抛出的 noclassdeffounderror，在本地 maven 库中删掉其目录，让 maven 从中心库中重新下载一次即可，例如使用的 jfinal-3.6 版本，就删掉 maven repository 中的 /com/jfinal/jfinal 目录下面的 3.6 子目录。\n\n原因之二是对同一个 jar 包，引入了多个不同版本，删掉其中多余的即可 以上问题本质上与 jfinal 无关，纯属 java 开发时碰到的基础性异常',charsets:{cjk:!0}},{title:"1.8 非 maven 方式开发",frontmatter:{},regularPath:"/zh/1%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/1.8%20%E9%9D%9E%20maven%20%E6%96%B9%E5%BC%8F%E5%BC%80%E5%8F%91.html",relativePath:"zh/1 快速上手/1.8 非 maven 方式开发.md",key:"v-c24a1ce0",path:"/zh/1%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/1.8%20%E9%9D%9E%20maven%20%E6%96%B9%E5%BC%8F%E5%BC%80%E5%8F%91.html",headers:[{level:3,title:"1、创建Dynamic Web Project",slug:"_1、创建dynamic-web-project",normalizedTitle:"1、创建dynamic web project",charIndex:101},{level:3,title:"2、填入项目基本信息",slug:"_2、填入项目基本信息",normalizedTitle:"2、填入项目基本信息",charIndex:131},{level:3,title:"3、修改Default Output Folder，推荐输入WebRoot\\WEB-INF\\classes",slug:"_3、修改default-output-folder-推荐输入webroot-web-inf-classes",normalizedTitle:"3、修改default output folder，推荐输入webroot\\web-inf\\classes",charIndex:180},{level:3,title:"4、修改Content directory，推荐输入WebRoot",slug:"_4、修改content-directory-推荐输入webroot",normalizedTitle:"4、修改content directory，推荐输入webroot",charIndex:331},{level:3,title:"5、放入JFinal库文件",slug:"_5、放入jfinal库文件",normalizedTitle:"5、放入jfinal库文件",charIndex:466},{level:3,title:"6、修改web.xml",slug:"_6、修改web-xml",normalizedTitle:"6、修改web.xml",charIndex:689},{level:3,title:"7、添加java文件",slug:"_7、添加java文件",normalizedTitle:"7、添加java文件",charIndex:1108},{level:3,title:"8、启动项目",slug:"_8、启动项目",normalizedTitle:"8、启动项目",charIndex:2198},{level:3,title:"9、开启浏览器看效果",slug:"_9、开启浏览器看效果",normalizedTitle:"9、开启浏览器看效果",charIndex:2636}],lastUpdated:"9/22/2023, 9:39:45 AM",lastUpdatedTimestamp:1695375585e3,headersStr:"1、创建Dynamic Web Project 2、填入项目基本信息 3、修改Default Output Folder，推荐输入WebRoot\\WEB-INF\\classes 4、修改Content directory，推荐输入WebRoot 5、放入JFinal库文件 6、修改web.xml 7、添加java文件 8、启动项目 9、开启浏览器看效果",content:'# 1.8 非 maven 方式开发\n\n以下演示以 Eclipse Java EE 版本为例，下载地址为：https://www.eclipse.org/downloads/packages/\n\n\n# 1、创建Dynamic Web Project\n\n\n\n\n# 2、填入项目基本信息\n\n\n\n注意上图中：Target runtime 一定要选择None\n\n\n# 3、修改Default Output Folder，推荐输入WebRoot\\WEB-INF\\classes\n\n特别注意：此处的 Default out folder必须要与 WebRoot\\WEB-INF\\classes 目录完全一致才可以使用 JFinal 集成的 Jetty 来启动项目。\n\n\n# 4、修改Content directory，推荐输入WebRoot\n\n\n\n注意上图：此处也可以使用默认值WebContent， 但上一步中的WebRoot\\WEB-INF\\classes则需要改成WebContent\\WEB-INF\\classes才能对应上。\n\n\n# 5、放入JFinal库文件\n\n将 jfinal-5.0.0.jar 与 jetty-server-2019.3.jar 拷贝至项目WEB-INF\\lib下即可。注意：jetty-server-2019.3.jar 是开发时使用的运行环境，生产环境不需要此文件。\n\n所需要的 jar 包可以在 jfinal.com 首页下载 jfinal-5.0.0-all.zip 文件，该文件中包含了所需的常用 jar 包，以及 jar 包使用说明。\n\n\n# 6、修改web.xml\n\n将如下内容添加至web.xml\n\n<filter>\n    <filter-name>jfinal</filter-name>\n    <filter-class>com.jfinal.core.JFinalFilter</filter-class>\n    <init-param>\n       <param-name>configClass</param-name>\n       <param-value>demo.DemoConfig</param-value>\n    </init-param>\n</filter>\n<filter-mapping>\n    <filter-name>jfinal</filter-name>\n    <url-pattern>/*</url-pattern>\n</filter-mapping>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 7、添加java文件\n\n在项目src目录下创建demo包，并在demo包下创建DemoConfig文件， 内容如下：\n\npackage demo;\nimport com.jfinal.config.*;\npublic class DemoConfig extends JFinalConfig {\n    public void configConstant(Constants me) {\n       me.setDevMode(true);\n    }\n    \n    public void configRoute(Routes me) {\n       // jfinal 4.9.03 版新增了路由扫描功能，不必手动添加路由\n       // me.add("/hello", HelloController.class);\n       \n       // 使用路由扫描，参数 "demo." 表示只扫描 demo 包及其子包下的路由\n       me.scan("demo.");\n    }\n    \n    public void configEngine(Engine me) {}\n    public void configPlugin(Plugins me) {}\n    public void configInterceptor(Interceptors me) {}\n    public void configHandler(Handlers me) {}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n注意：DemoConfig.java文件所在的包以及自身文件名必须与web.xml中的param-value标签内的配置相一致(在本例中该配置为demo.DemoConfig)。\n\n路由扫描功能文档：https://jfinal.com/doc/2-3\n\n在demo包下创建HelloController类文件， 内容如下：\n\npackage demo;\nimport com.jfinal.core.Controller;\n \n@Path("/hello")\npublic class HelloController extends Controller {\n    public void index() {\n       renderText("Hello JFinal World.");\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 8、启动项目\n\n创建启动项如下图所示：\n\n鼠标右键点击Java Application并选择New菜单项，新建Java Application启动项，如下图所示：\n\n在右侧窗口中的Main class输入框中填入: com.jfinal.core.JFinal并点击Debug按钮启动项目，如下图所示：\n\n上面的启动配置也可以使用一个任意的main方法代替。在任意一个类文件中添加一个main启动集成的jetty如下图所示：\n\npublic static void main(String[] args) {\n\tJFinal.start("WebRoot", 80, "/", 5);\n}\n\n\n1\n2\n3\n\n\n上面代码的第一个参数 DemoConfig 是继承自 JFinalConfig 的配置入口类，第二个参数是端口号，第三个参数是 devMode。undertow 的其它配置项可以参考其它章节文档：https://www.jfinal.com/doc/1-4\n\n\n# 9、开启浏览器看效果\n\n打开浏览器在地址栏中输入: http://localhost/hello，输出内容为Hello JFinal World证明项目框架搭建完成。如需完整demo示例可在JFinal官方网站下载：http://www.jfinal.com\n\n注意：在tomcat下开发或运行项目时，需要先删除 jetty-server-xxx.jar这个包，否则会引起冲突。Tomcat启动项目不能使用上面介绍的启动方式，因为上面的启动方式需要用到 jetty-server-xxx.jar。\n\n强烈建议使用 maven 标准项目结构进行开发，本小节文档介绍的手动添加 jar 包的方式是比较古老的方式',normalizedContent:'# 1.8 非 maven 方式开发\n\n以下演示以 eclipse java ee 版本为例，下载地址为：https://www.eclipse.org/downloads/packages/\n\n\n# 1、创建dynamic web project\n\n\n\n\n# 2、填入项目基本信息\n\n\n\n注意上图中：target runtime 一定要选择none\n\n\n# 3、修改default output folder，推荐输入webroot\\web-inf\\classes\n\n特别注意：此处的 default out folder必须要与 webroot\\web-inf\\classes 目录完全一致才可以使用 jfinal 集成的 jetty 来启动项目。\n\n\n# 4、修改content directory，推荐输入webroot\n\n\n\n注意上图：此处也可以使用默认值webcontent， 但上一步中的webroot\\web-inf\\classes则需要改成webcontent\\web-inf\\classes才能对应上。\n\n\n# 5、放入jfinal库文件\n\n将 jfinal-5.0.0.jar 与 jetty-server-2019.3.jar 拷贝至项目web-inf\\lib下即可。注意：jetty-server-2019.3.jar 是开发时使用的运行环境，生产环境不需要此文件。\n\n所需要的 jar 包可以在 jfinal.com 首页下载 jfinal-5.0.0-all.zip 文件，该文件中包含了所需的常用 jar 包，以及 jar 包使用说明。\n\n\n# 6、修改web.xml\n\n将如下内容添加至web.xml\n\n<filter>\n    <filter-name>jfinal</filter-name>\n    <filter-class>com.jfinal.core.jfinalfilter</filter-class>\n    <init-param>\n       <param-name>configclass</param-name>\n       <param-value>demo.democonfig</param-value>\n    </init-param>\n</filter>\n<filter-mapping>\n    <filter-name>jfinal</filter-name>\n    <url-pattern>/*</url-pattern>\n</filter-mapping>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 7、添加java文件\n\n在项目src目录下创建demo包，并在demo包下创建democonfig文件， 内容如下：\n\npackage demo;\nimport com.jfinal.config.*;\npublic class democonfig extends jfinalconfig {\n    public void configconstant(constants me) {\n       me.setdevmode(true);\n    }\n    \n    public void configroute(routes me) {\n       // jfinal 4.9.03 版新增了路由扫描功能，不必手动添加路由\n       // me.add("/hello", hellocontroller.class);\n       \n       // 使用路由扫描，参数 "demo." 表示只扫描 demo 包及其子包下的路由\n       me.scan("demo.");\n    }\n    \n    public void configengine(engine me) {}\n    public void configplugin(plugins me) {}\n    public void configinterceptor(interceptors me) {}\n    public void confighandler(handlers me) {}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n注意：democonfig.java文件所在的包以及自身文件名必须与web.xml中的param-value标签内的配置相一致(在本例中该配置为demo.democonfig)。\n\n路由扫描功能文档：https://jfinal.com/doc/2-3\n\n在demo包下创建hellocontroller类文件， 内容如下：\n\npackage demo;\nimport com.jfinal.core.controller;\n \n@path("/hello")\npublic class hellocontroller extends controller {\n    public void index() {\n       rendertext("hello jfinal world.");\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 8、启动项目\n\n创建启动项如下图所示：\n\n鼠标右键点击java application并选择new菜单项，新建java application启动项，如下图所示：\n\n在右侧窗口中的main class输入框中填入: com.jfinal.core.jfinal并点击debug按钮启动项目，如下图所示：\n\n上面的启动配置也可以使用一个任意的main方法代替。在任意一个类文件中添加一个main启动集成的jetty如下图所示：\n\npublic static void main(string[] args) {\n\tjfinal.start("webroot", 80, "/", 5);\n}\n\n\n1\n2\n3\n\n\n上面代码的第一个参数 democonfig 是继承自 jfinalconfig 的配置入口类，第二个参数是端口号，第三个参数是 devmode。undertow 的其它配置项可以参考其它章节文档：https://www.jfinal.com/doc/1-4\n\n\n# 9、开启浏览器看效果\n\n打开浏览器在地址栏中输入: http://localhost/hello，输出内容为hello jfinal world证明项目框架搭建完成。如需完整demo示例可在jfinal官方网站下载：http://www.jfinal.com\n\n注意：在tomcat下开发或运行项目时，需要先删除 jetty-server-xxx.jar这个包，否则会引起冲突。tomcat启动项目不能使用上面介绍的启动方式，因为上面的启动方式需要用到 jetty-server-xxx.jar。\n\n强烈建议使用 maven 标准项目结构进行开发，本小节文档介绍的手动添加 jar 包的方式是比较古老的方式',charsets:{cjk:!0}},{title:"3.5 getBean & getModel series",frontmatter:{},regularPath:"/en/3%20Controller/3.5%20getBean%20&%20getModel%20series.html",relativePath:"en/3 Controller/3.5 getBean & getModel series.md",key:"v-67299f6a",path:"/en/3%20Controller/3.5%20getBean%20&%20getModel%20series.html",lastUpdated:"9/17/2023, 5:50:29 AM",lastUpdatedTimestamp:1694929829e3,headersStr:null,content:'# 3.5 getBean & getModel series\n\nThe getModel method is used to receive a model object passed from the page form field. The form field name is named in the "modelName.attrName" format. The attrName used by getModel must match the database table field name exactly.\n\nThe getBean method supports traditional Java Beans, including Models with generated getter and setter methods by jfinal. When passing parameters from a page form, it uses the attrName consistent with the setter method, rather than the database table field name.\n\nThe difference between getModel and getBean is that the former uses the database table field names for data injection, while the latter uses property names consistent with the setter method. It is recommended to prioritize using the getBean method.\n\nHere\'s a simple example:\n\n// Define a Model, in this case, Blog\npublic class Blog extends Model<Blog> {\n    \n}\n\n\n1\n2\n3\n4\n\n\nIn the form on the webpage, use the "modelName.attrName" format as the form field\'s name:\n\n<form action="/blog/save" method="post">\n  <input name="blog.title" type="text">\n  <input name="blog.content" type="text">\n  <input value="提交" type="submit">\n</form>\n\n\n1\n2\n3\n4\n5\n\n\npublic class BlogController extends Controller {\n  public void save() {\n    // The modelName from the page matches the class name "Blog" with the first letter in lowercase\n    Blog blog = getModel(Blog.class);\n \n    // If the form field\'s name is "otherName.title", you can add a parameter to retrieve it\n    blog = getModel(Blog.class, "otherName");\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nIn the above code, the form fields use "blog.title" and "blog.content" as their name attributes. "blog" is the lowercase first letter of the class name "Blog", and "title" is the title field of the blog database table. If you want the form field to use any modelName, just add a parameter to specify it when calling getModel, like getModel(Blog.class, "otherName").\n\nIf you want to avoid using the modelName prefix when passing parameters, you can use an empty string as the modelName: getModel(Blog.class, ""). This is very useful for pure API projects (getBean works similarly).\n\nIf you want to skip data conversion or property name error exceptions during reception, you can pass in a true parameter: getBean(…, true).',normalizedContent:'# 3.5 getbean & getmodel series\n\nthe getmodel method is used to receive a model object passed from the page form field. the form field name is named in the "modelname.attrname" format. the attrname used by getmodel must match the database table field name exactly.\n\nthe getbean method supports traditional java beans, including models with generated getter and setter methods by jfinal. when passing parameters from a page form, it uses the attrname consistent with the setter method, rather than the database table field name.\n\nthe difference between getmodel and getbean is that the former uses the database table field names for data injection, while the latter uses property names consistent with the setter method. it is recommended to prioritize using the getbean method.\n\nhere\'s a simple example:\n\n// define a model, in this case, blog\npublic class blog extends model<blog> {\n    \n}\n\n\n1\n2\n3\n4\n\n\nin the form on the webpage, use the "modelname.attrname" format as the form field\'s name:\n\n<form action="/blog/save" method="post">\n  <input name="blog.title" type="text">\n  <input name="blog.content" type="text">\n  <input value="提交" type="submit">\n</form>\n\n\n1\n2\n3\n4\n5\n\n\npublic class blogcontroller extends controller {\n  public void save() {\n    // the modelname from the page matches the class name "blog" with the first letter in lowercase\n    blog blog = getmodel(blog.class);\n \n    // if the form field\'s name is "othername.title", you can add a parameter to retrieve it\n    blog = getmodel(blog.class, "othername");\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nin the above code, the form fields use "blog.title" and "blog.content" as their name attributes. "blog" is the lowercase first letter of the class name "blog", and "title" is the title field of the blog database table. if you want the form field to use any modelname, just add a parameter to specify it when calling getmodel, like getmodel(blog.class, "othername").\n\nif you want to avoid using the modelname prefix when passing parameters, you can use an empty string as the modelname: getmodel(blog.class, ""). this is very useful for pure api projects (getbean works similarly).\n\nif you want to skip data conversion or property name error exceptions during reception, you can pass in a true parameter: getbean(…, true).',charsets:{cjk:!0}},{title:"10.2 Validator",frontmatter:{},regularPath:"/zh/10%20Validator/10.2%20Validator.html",relativePath:"zh/10 Validator/10.2 Validator.md",key:"v-6fc8b362",path:"/zh/10%20Validator/10.2%20Validator.html",headers:[{level:3,title:"1､基本用法",slug:"_1、基本用法",normalizedTitle:"1､基本用法",charIndex:21},{level:3,title:"2、setRet(...) 与 getRet()",slug:"_2、setret-与-getret",normalizedTitle:"2、setret(...) 与 getret()",charIndex:1057},{level:3,title:"3、高级用法",slug:"_3、高级用法",normalizedTitle:"3、高级用法",charIndex:2119}],lastUpdated:"9/16/2023, 5:29:21 AM",lastUpdatedTimestamp:1694842161e3,headersStr:"1､基本用法 2、setRet(...) 与 getRet() 3、高级用法",content:'# 10.2 Validator\n\n\n# 1､基本用法\n\nValidator自身实现了Interceptor接口，所以它也是一个拦截器，配置方式与拦截器完全一样。以下是Validator示例：\n\npublic class LoginValidator extends Validator {\n    protected void validate(Controller c) {\n       validateRequiredString("name", "nameMsg", "请输入用户名");\n       validateRequiredString("pass", "passMsg", "请输入密码");\n    }\n    protected void handleError(Controller c) {\n       c.keepPara("name");\n       c.render("login.html");\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nprotected void validator(Controller c)方法中可以调用validateXxx(…)系列方法进行后端校验，protected void handleError(Controller c)方法中可以调用c.keepPara(…)方法将提交的值再传回页面以便保持原先输入的值，还可以调用c.render(…)方法来返回相应的页面。注意handleError(Controller c)只有在校验失败时才会调用。\n\n以上代码handleError方法中的keepXxx方法用于将页面表单中的数据保持住并传递回页，以便于用户无需再重复输入已经通过验证的表单域。\n\n如果传递过来的是 model 对象，可以使用keepModel(...) 方法来保持住用户输入过的数据。同理，如果传递过来的是传统 java bean 对象，可以使用 keepBean(...) 方法来保持住用户输入过的数据。\n\nkeepPara(…) 方法默认将所有数据keep成String类型传给客户端，如果希望keep成为特定的类型，使用keepPara(Class, …) 即可，例如：keepPara(Integer.class, “age”)。\n\n注意：如果keepPara() 造成模板中出现类型相关异常，解决方法参见Template Engine这章的Extension Method小节。\n\n\n# 2、setRet(...) 与 getRet()\n\njfinal 4.0 版本新增了 setRet(Ret) 方法与 getRet() 方法，典型示例如下：\n\npublic class LoginValidator extends Validator {\n \n   protected void validate(Controller c) {\n      setRet(Ret.fail());\n      \t\n      validateRequired("userName", "msg", "邮箱不能为空");\n      validateEmail("userName", "msg", "邮箱格式不正确");\n      validateRequired("password", "msg", "密码不能为空");\n      validateCaptcha("captcha", "msg", "验证码不正确");\n   }\n   \t\n   protected void handleError(Controller c) {\n      c.renderJson(getRet());\n   }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n如上例所示，setRet(Ret.fail()) 将向 LoginValidator 注入一个 Ret 对象，从而后续的 validateRequired 等等 validate 方法会将所有验证结果存放在该 Ret 对象之中。\n\n然后，在 handleError 中的 c.renderJson( getRet() ) 这行代码就可以通过 getRet() 拿到前面注入的 Ret 对象，然后再进行 renderJson(ret)\n\n这样使用的好处是与 controller 层的 renderJson(Ret) 用法统一起来，因为你的 controller 中可能是这样用的：\n\npublic void login() {\n    Ret ret = loginService.login(...);\n    renderJson(ret);\n}\n\n\n1\n2\n3\n4\n\n\n上面代码中的 loginService.login(...) 返回的 ret 对象与 LoginValidator 中的 ret 对象统一使用 renderJson(ret) 以后，前端的 JavaScript 对其的处理方式就可以完全统一。\n\n\n# 3、高级用法\n\n虽然 Validator 中提供了丰富的 validateXxx(...) 系列方法，但毕竟方法个数是有限的，当 validateXxx(...) 系列的方法不能满足需求时，除了可以用 validateRegex(...) 定制正则表达式来满足需求以外，还可以通过普通 java 代码来实现，例如：\n\nprotected void validate(Controller c) {\n    String nickName = c.getPara("nickName");\n    if (userService.isExists(nickName)) {\n        addError("msg", "昵称已被注册，请使用别的昵称！")；\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n如上代码所示，只需要利用普通的 java 代码配合一个 addError(...) 方法就可以无限制、灵活定制验证功能。\n\n这里特别强调：addError(...) 方法是自由定制验证的关键。\n\n此外，Validator 在碰到验证失败项时，默认会一直往下验证所有剩下的验证项，如果希望程序在碰到验证失败项时略过后续验证项立即返回，可以通过如下代码来实现：\n\nprotected void validate(Controller c) {\n    this.setShortCircuit(true);\n    ....\n}\n\n\n1\n2\n3\n4\n\n\nsetShortCircuit(boolean) 用于设置验证方式是否为 “短路型验证”。',normalizedContent:'# 10.2 validator\n\n\n# 1､基本用法\n\nvalidator自身实现了interceptor接口，所以它也是一个拦截器，配置方式与拦截器完全一样。以下是validator示例：\n\npublic class loginvalidator extends validator {\n    protected void validate(controller c) {\n       validaterequiredstring("name", "namemsg", "请输入用户名");\n       validaterequiredstring("pass", "passmsg", "请输入密码");\n    }\n    protected void handleerror(controller c) {\n       c.keeppara("name");\n       c.render("login.html");\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nprotected void validator(controller c)方法中可以调用validatexxx(…)系列方法进行后端校验，protected void handleerror(controller c)方法中可以调用c.keeppara(…)方法将提交的值再传回页面以便保持原先输入的值，还可以调用c.render(…)方法来返回相应的页面。注意handleerror(controller c)只有在校验失败时才会调用。\n\n以上代码handleerror方法中的keepxxx方法用于将页面表单中的数据保持住并传递回页，以便于用户无需再重复输入已经通过验证的表单域。\n\n如果传递过来的是 model 对象，可以使用keepmodel(...) 方法来保持住用户输入过的数据。同理，如果传递过来的是传统 java bean 对象，可以使用 keepbean(...) 方法来保持住用户输入过的数据。\n\nkeeppara(…) 方法默认将所有数据keep成string类型传给客户端，如果希望keep成为特定的类型，使用keeppara(class, …) 即可，例如：keeppara(integer.class, “age”)。\n\n注意：如果keeppara() 造成模板中出现类型相关异常，解决方法参见template engine这章的extension method小节。\n\n\n# 2、setret(...) 与 getret()\n\njfinal 4.0 版本新增了 setret(ret) 方法与 getret() 方法，典型示例如下：\n\npublic class loginvalidator extends validator {\n \n   protected void validate(controller c) {\n      setret(ret.fail());\n      \t\n      validaterequired("username", "msg", "邮箱不能为空");\n      validateemail("username", "msg", "邮箱格式不正确");\n      validaterequired("password", "msg", "密码不能为空");\n      validatecaptcha("captcha", "msg", "验证码不正确");\n   }\n   \t\n   protected void handleerror(controller c) {\n      c.renderjson(getret());\n   }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n如上例所示，setret(ret.fail()) 将向 loginvalidator 注入一个 ret 对象，从而后续的 validaterequired 等等 validate 方法会将所有验证结果存放在该 ret 对象之中。\n\n然后，在 handleerror 中的 c.renderjson( getret() ) 这行代码就可以通过 getret() 拿到前面注入的 ret 对象，然后再进行 renderjson(ret)\n\n这样使用的好处是与 controller 层的 renderjson(ret) 用法统一起来，因为你的 controller 中可能是这样用的：\n\npublic void login() {\n    ret ret = loginservice.login(...);\n    renderjson(ret);\n}\n\n\n1\n2\n3\n4\n\n\n上面代码中的 loginservice.login(...) 返回的 ret 对象与 loginvalidator 中的 ret 对象统一使用 renderjson(ret) 以后，前端的 javascript 对其的处理方式就可以完全统一。\n\n\n# 3、高级用法\n\n虽然 validator 中提供了丰富的 validatexxx(...) 系列方法，但毕竟方法个数是有限的，当 validatexxx(...) 系列的方法不能满足需求时，除了可以用 validateregex(...) 定制正则表达式来满足需求以外，还可以通过普通 java 代码来实现，例如：\n\nprotected void validate(controller c) {\n    string nickname = c.getpara("nickname");\n    if (userservice.isexists(nickname)) {\n        adderror("msg", "昵称已被注册，请使用别的昵称！")；\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n如上代码所示，只需要利用普通的 java 代码配合一个 adderror(...) 方法就可以无限制、灵活定制验证功能。\n\n这里特别强调：adderror(...) 方法是自由定制验证的关键。\n\n此外，validator 在碰到验证失败项时，默认会一直往下验证所有剩下的验证项，如果希望程序在碰到验证失败项时略过后续验证项立即返回，可以通过如下代码来实现：\n\nprotected void validate(controller c) {\n    this.setshortcircuit(true);\n    ....\n}\n\n\n1\n2\n3\n4\n\n\nsetshortcircuit(boolean) 用于设置验证方式是否为 “短路型验证”。',charsets:{cjk:!0}},{title:"10.1 概述",frontmatter:{},regularPath:"/zh/10%20Validator/10.1%20%E6%A6%82%E8%BF%B0.html",relativePath:"zh/10 Validator/10.1 概述.md",key:"v-e68f5ea4",path:"/zh/10%20Validator/10.1%20%E6%A6%82%E8%BF%B0.html",lastUpdated:"9/16/2023, 5:29:21 AM",lastUpdatedTimestamp:1694842161e3,headersStr:null,content:"# 10.1 概述\n\nValidator是JFinal校验组件，在Validator类中提供了非常方便的校验方法，学习简单，使用方便。",normalizedContent:"# 10.1 概述\n\nvalidator是jfinal校验组件，在validator类中提供了非常方便的校验方法，学习简单，使用方便。",charsets:{cjk:!0}},{title:"10.3 Validator配置",frontmatter:{},regularPath:"/zh/10%20Validator/10.3%20Validator%E9%85%8D%E7%BD%AE.html",relativePath:"zh/10 Validator/10.3 Validator配置.md",key:"v-3491301b",path:"/zh/10%20Validator/10.3%20Validator%E9%85%8D%E7%BD%AE.html",lastUpdated:"9/16/2023, 5:29:21 AM",lastUpdatedTimestamp:1694842161e3,headersStr:null,content:"# 10.3 Validator配置\n\nValidator配置方式与拦截器完全一样，见如下代码：\n\npublic class UserController extends Controller {\n    @Before(LoginValidator.class)   // 配置方式与拦截器完全一样\n    public void login() {\n    }\n}\n\n\n1\n2\n3\n4\n5\n",normalizedContent:"# 10.3 validator配置\n\nvalidator配置方式与拦截器完全一样，见如下代码：\n\npublic class usercontroller extends controller {\n    @before(loginvalidator.class)   // 配置方式与拦截器完全一样\n    public void login() {\n    }\n}\n\n\n1\n2\n3\n4\n5\n",charsets:{cjk:!0}},{title:"11.1 概述",frontmatter:{},regularPath:"/zh/11%20%E5%9B%BD%E9%99%85%E5%8C%96/11.1%20%E6%A6%82%E8%BF%B0.html",relativePath:"zh/11 国际化/11.1 概述.md",key:"v-376ea6dd",path:"/zh/11%20%E5%9B%BD%E9%99%85%E5%8C%96/11.1%20%E6%A6%82%E8%BF%B0.html",lastUpdated:"9/16/2023, 5:36:02 AM",lastUpdatedTimestamp:1694842562e3,headersStr:null,content:"# 11.1 概述\n\nJFinal 为国际化提供了极速化的支持，国际化模块仅三个类文件，使用方式要比spring这类框架容易得多。",normalizedContent:"# 11.1 概述\n\njfinal 为国际化提供了极速化的支持，国际化模块仅三个类文件，使用方式要比spring这类框架容易得多。",charsets:{cjk:!0}},{title:"11.2 I18n与Res",frontmatter:{},regularPath:"/zh/11%20%E5%9B%BD%E9%99%85%E5%8C%96/11.2%20I18n%E4%B8%8ERes.html",relativePath:"zh/11 国际化/11.2 I18n与Res.md",key:"v-d744ed5a",path:"/zh/11%20%E5%9B%BD%E9%99%85%E5%8C%96/11.2%20I18n%E4%B8%8ERes.html",lastUpdated:"9/16/2023, 5:36:02 AM",lastUpdatedTimestamp:1694842562e3,headersStr:null,content:'# 11.2 I18n与Res\n\nI18n对象可通过资源文件的baseName与locale参数获取到与之相对应的Res对象，Res对象提供了API用来获取国际化数据。\n\n以下给出具体使用步骤：\n\n * 创建i18n_en_US.properties、i18n_zh_CN.properties资源文件，i18n即为资源文件的baseName，可以是任意名称，在此示例中使用”i18n”作为baseName\n\n * i18n_en_US.properties文件中添加如下内容\n\nmsg=Hello {0}, today is{1}.\n\n\n1\n\n * i18n_zh_CN.properties文件中添加如下内容\n\nmsg=你好{0}, 今天是{1}.\n\n\n1\n\n * 在YourJFinalConfig中使用me.setI18nDefaultBaseName("i18n")配置资源文件默认baseName\n\n特别注意，java国际化规范要求properties文件的编辑需要使用专用的编辑器，否则会出乱码，常用的有Properties Editor，在此可以下载：http://www.oschina.net/p/properties+editor\n\n以下是基于以上步骤以后的代码示例：\n\n// 通过locale参数en_US得到对应的Res对象\nRes resEn = I18n.use("en_US");\n// 直接获取数据\nString msgEn = resEn.get("msg");\n// 获取数据并使用参数格式化\nString msgEnFormat = resEn.format("msg", "james", new Date());\n \n// 通过locale参数zh_CN得到对应的Res对象\nRes resZh = I18n.use("zh_CN");\n// 直接获取数据\nString msgZh = resZh.get("msg");\n// 获取数据并使用参数格式化\nString msgZhFormat = resZh.format("msg", "詹波", new Date());\n \n// 另外,I18n还可以加载未使用me.setI18nDefaultBaseName()配置过的资源文件，唯一的不同是\n// 需要指定baseName参数，下面例子需要先创建otherRes_en_US.properties文件\nRes otherRes = I18n.use("otherRes", "en_US");\notherRes.get("msg");\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n以下是在 jfinal template engine 中的使用示例：\n\n#(_res.get("msg"))\n\n\n1\n\n\n注意，上面的用法需要添加 I18nInterceptor，将在后面一小节进行介绍。',normalizedContent:'# 11.2 i18n与res\n\ni18n对象可通过资源文件的basename与locale参数获取到与之相对应的res对象，res对象提供了api用来获取国际化数据。\n\n以下给出具体使用步骤：\n\n * 创建i18n_en_us.properties、i18n_zh_cn.properties资源文件，i18n即为资源文件的basename，可以是任意名称，在此示例中使用”i18n”作为basename\n\n * i18n_en_us.properties文件中添加如下内容\n\nmsg=hello {0}, today is{1}.\n\n\n1\n\n * i18n_zh_cn.properties文件中添加如下内容\n\nmsg=你好{0}, 今天是{1}.\n\n\n1\n\n * 在yourjfinalconfig中使用me.seti18ndefaultbasename("i18n")配置资源文件默认basename\n\n特别注意，java国际化规范要求properties文件的编辑需要使用专用的编辑器，否则会出乱码，常用的有properties editor，在此可以下载：http://www.oschina.net/p/properties+editor\n\n以下是基于以上步骤以后的代码示例：\n\n// 通过locale参数en_us得到对应的res对象\nres resen = i18n.use("en_us");\n// 直接获取数据\nstring msgen = resen.get("msg");\n// 获取数据并使用参数格式化\nstring msgenformat = resen.format("msg", "james", new date());\n \n// 通过locale参数zh_cn得到对应的res对象\nres reszh = i18n.use("zh_cn");\n// 直接获取数据\nstring msgzh = reszh.get("msg");\n// 获取数据并使用参数格式化\nstring msgzhformat = reszh.format("msg", "詹波", new date());\n \n// 另外,i18n还可以加载未使用me.seti18ndefaultbasename()配置过的资源文件，唯一的不同是\n// 需要指定basename参数，下面例子需要先创建otherres_en_us.properties文件\nres otherres = i18n.use("otherres", "en_us");\notherres.get("msg");\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n以下是在 jfinal template engine 中的使用示例：\n\n#(_res.get("msg"))\n\n\n1\n\n\n注意，上面的用法需要添加 i18ninterceptor，将在后面一小节进行介绍。',charsets:{cjk:!0}},{title:"11.3 I18nInterceptor",frontmatter:{},regularPath:"/zh/11%20%E5%9B%BD%E9%99%85%E5%8C%96/11.3%20I18nInterceptor.html",relativePath:"zh/11 国际化/11.3 I18nInterceptor.md",key:"v-c5da32e8",path:"/zh/11%20%E5%9B%BD%E9%99%85%E5%8C%96/11.3%20I18nInterceptor.html",lastUpdated:"9/16/2023, 5:36:02 AM",lastUpdatedTimestamp:1694842562e3,headersStr:null,content:'# 11.3 I18nInterceptor\n\nI18nInterceptor拦截器是针对于web应用提供的一个国际化组件，以下是在freemarker模板中使用的例子：\n\n//先将I18nInterceptor配置成全局拦截器\npublic void configInterceptor(Interceptors me) {\n  me.add(new I18nInterceptor());\n}\n\n \n// 然后在 jfinal 模板引擎中即可通过 _res 对象来获取国际化数据\n#(_res.get("msg"))\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n以上代码通过配置了I18nInterceptor拦截action请求，然后即可在freemarker模板文件中通过名为_res对象来获取国际化数据，I18nInterceptor的具体工作流程如下：\n\n试图从请求中通过controller.getPara(“_locale”)获取locale参数，如果获取到则将其保存到cookie之中\n\n如果controller.getPara(“_locale”)没有获取到参数值，则试图通过controller.getCookie(“_locale”)得到locale参数\n\n如果以上两步仍然没有获取到locale参数值，则使用I18n. defaultLocale的值做为locale值来使用\n\n使用前面三步中得到的locale值，通过I18n.use(locale)得到Res对象，并通过controller.setAttr(“_res”, res)将Res对象传递给页面使用\n\n如果I18nInterceptor. isSwitchView为true值的话还会改变render的view值，实现整体模板文件的切换，详情可查看源码。\n\n以上步骤I18nInterceptor中的变量名”_locale”、”_res”都可以在创建I18nInterceptor对象时进行指定，不指定时将使用默认值。还可以通过继承I18nInterceptor并且覆盖getLocalPara、getResName、getBaseName来定制更加个性化的功能。\n\n在有些 web 系统中，页面需要国际化的文本过多，并且 css 以及 html 也因为国际化而大不相同，对于这种应用场景先直接制做多套同名称的国际化视图，并将这些视图以 locale 为子目录分类存放，最后使用I18nInterceptor拦截器根据 locale 动态切换视图，而不必对视图中的文本逐个进行国际化切换，只需将I18nInterceptor.isSwitchView设置为true即可，省时省力。',normalizedContent:'# 11.3 i18ninterceptor\n\ni18ninterceptor拦截器是针对于web应用提供的一个国际化组件，以下是在freemarker模板中使用的例子：\n\n//先将i18ninterceptor配置成全局拦截器\npublic void configinterceptor(interceptors me) {\n  me.add(new i18ninterceptor());\n}\n\n \n// 然后在 jfinal 模板引擎中即可通过 _res 对象来获取国际化数据\n#(_res.get("msg"))\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n以上代码通过配置了i18ninterceptor拦截action请求，然后即可在freemarker模板文件中通过名为_res对象来获取国际化数据，i18ninterceptor的具体工作流程如下：\n\n试图从请求中通过controller.getpara(“_locale”)获取locale参数，如果获取到则将其保存到cookie之中\n\n如果controller.getpara(“_locale”)没有获取到参数值，则试图通过controller.getcookie(“_locale”)得到locale参数\n\n如果以上两步仍然没有获取到locale参数值，则使用i18n. defaultlocale的值做为locale值来使用\n\n使用前面三步中得到的locale值，通过i18n.use(locale)得到res对象，并通过controller.setattr(“_res”, res)将res对象传递给页面使用\n\n如果i18ninterceptor. isswitchview为true值的话还会改变render的view值，实现整体模板文件的切换，详情可查看源码。\n\n以上步骤i18ninterceptor中的变量名”_locale”、”_res”都可以在创建i18ninterceptor对象时进行指定，不指定时将使用默认值。还可以通过继承i18ninterceptor并且覆盖getlocalpara、getresname、getbasename来定制更加个性化的功能。\n\n在有些 web 系统中，页面需要国际化的文本过多，并且 css 以及 html 也因为国际化而大不相同，对于这种应用场景先直接制做多套同名称的国际化视图，并将这些视图以 locale 为子目录分类存放，最后使用i18ninterceptor拦截器根据 locale 动态切换视图，而不必对视图中的文本逐个进行国际化切换，只需将i18ninterceptor.isswitchview设置为true即可，省时省力。',charsets:{cjk:!0}},{title:"12.1 概述",frontmatter:{},regularPath:"/zh/12%20Json%20%E8%BD%AC%E6%8D%A2/12.1%20%E6%A6%82%E8%BF%B0.html",relativePath:"zh/12 Json 转换/12.1 概述.md",key:"v-6b9f26fe",path:"/zh/12%20Json%20%E8%BD%AC%E6%8D%A2/12.1%20%E6%A6%82%E8%BF%B0.html",lastUpdated:"9/16/2023, 5:36:02 AM",lastUpdatedTimestamp:1694842562e3,headersStr:null,content:"# 12.1 概述\n\njfinal 的 json 模块以抽象类 Json 为核心，方便扩展第三方实现，jfinal 官方给出了三个 Json 实现，分别是 JFinalJson、FastJson、Jackson，这三个实现继承自抽象类 Json。\n\n抽象类 Json 的核心抽象如下：\n\npublic abstract class Json {\n    public abstract String toJson(Object object);\n    public abstract <T> T parse(String jsonString, Class <T> type);\n}\n\n\n1\n2\n3\n4\n\n\n如上代码可以看出 Json 抽象就是 Object 与 json string 互转的两个方法，toJson(...)将任意 java 类型转成 json string，而 parse 将 json string 再反向转成范型指定的对象。",normalizedContent:"# 12.1 概述\n\njfinal 的 json 模块以抽象类 json 为核心，方便扩展第三方实现，jfinal 官方给出了三个 json 实现，分别是 jfinaljson、fastjson、jackson，这三个实现继承自抽象类 json。\n\n抽象类 json 的核心抽象如下：\n\npublic abstract class json {\n    public abstract string tojson(object object);\n    public abstract <t> t parse(string jsonstring, class <t> type);\n}\n\n\n1\n2\n3\n4\n\n\n如上代码可以看出 json 抽象就是 object 与 json string 互转的两个方法，tojson(...)将任意 java 类型转成 json string，而 parse 将 json string 再反向转成范型指定的对象。",charsets:{cjk:!0}},{title:"12.2 Json 配置",frontmatter:{},regularPath:"/zh/12%20Json%20%E8%BD%AC%E6%8D%A2/12.2%20Json%20%E9%85%8D%E7%BD%AE.html",relativePath:"zh/12 Json 转换/12.2 Json 配置.md",key:"v-0a557796",path:"/zh/12%20Json%20%E8%BD%AC%E6%8D%A2/12.2%20Json%20%E9%85%8D%E7%BD%AE.html",lastUpdated:"9/16/2023, 5:36:02 AM",lastUpdatedTimestamp:1694842562e3,headersStr:null,content:'# 12.2 Json 配置\n\njfinal 官方提供了 Json 抽象类的三个实现：JFinalJson、FastJson、Jackson，如果不进行配置，那么默认使用 JFinalJson 实现，指定为其它实现需要在 configConstant 进行如下配置：\n\npublic void configConstant(Constants me) {\n    me.setJsonFactory(new FastJsonFactory());\n}\n\n\n1\n2\n3\n\n\n上面配置将系统默认使用的 JFinalJson 切换到了 FastJson。还可以通过扩展 Json 抽象类以及 JsonFactory 来实现定制的 Json 实现。\n\n假定用户扩展出了一个 MyJson 与 MyJsonFactory ，那么可以通过如下的方式切换到自己的实现上去：\n\npublic void configConstant(Constants me) {\n    me.setJsonFactory(new MyJsonFactory());\n}\n\n\n1\n2\n3\n\n\n此外，jfinal 官方还提供了 MixedJson、MixedJsonFactory 实现，这个实现让转 json string 时使用 JFinalJson，反向转成对象则使用 FastJson。 如果希望在非 web 下进行配置，需要使用 JsonManager，例如：\n\nJsonManager.me().setDefaultJsonFactory(new MixedJsonFactory());\n\n\n1\n\n\n还可以配置 Date 类型转 json 后的格式：\n\npublic void configConstant(Constants me) {\n    me.setJsonDatePattern("yyyy-MM-dd");\n}\n\n\n1\n2\n3\n\n\n注意，在使用 MixedJsonFactory、FastJsonFactory、JacksonFactory 时需要添加其依赖，具体依赖参考下一小节内容。',normalizedContent:'# 12.2 json 配置\n\njfinal 官方提供了 json 抽象类的三个实现：jfinaljson、fastjson、jackson，如果不进行配置，那么默认使用 jfinaljson 实现，指定为其它实现需要在 configconstant 进行如下配置：\n\npublic void configconstant(constants me) {\n    me.setjsonfactory(new fastjsonfactory());\n}\n\n\n1\n2\n3\n\n\n上面配置将系统默认使用的 jfinaljson 切换到了 fastjson。还可以通过扩展 json 抽象类以及 jsonfactory 来实现定制的 json 实现。\n\n假定用户扩展出了一个 myjson 与 myjsonfactory ，那么可以通过如下的方式切换到自己的实现上去：\n\npublic void configconstant(constants me) {\n    me.setjsonfactory(new myjsonfactory());\n}\n\n\n1\n2\n3\n\n\n此外，jfinal 官方还提供了 mixedjson、mixedjsonfactory 实现，这个实现让转 json string 时使用 jfinaljson，反向转成对象则使用 fastjson。 如果希望在非 web 下进行配置，需要使用 jsonmanager，例如：\n\njsonmanager.me().setdefaultjsonfactory(new mixedjsonfactory());\n\n\n1\n\n\n还可以配置 date 类型转 json 后的格式：\n\npublic void configconstant(constants me) {\n    me.setjsondatepattern("yyyy-mm-dd");\n}\n\n\n1\n2\n3\n\n\n注意，在使用 mixedjsonfactory、fastjsonfactory、jacksonfactory 时需要添加其依赖，具体依赖参考下一小节内容。',charsets:{cjk:!0}},{title:"12.3 Json 的四个实现",frontmatter:{},regularPath:"/zh/12%20Json%20%E8%BD%AC%E6%8D%A2/12.3%20Json%20%E7%9A%84%E5%9B%9B%E4%B8%AA%E5%AE%9E%E7%8E%B0.html",relativePath:"zh/12 Json 转换/12.3 Json 的四个实现.md",key:"v-9c01c720",path:"/zh/12%20Json%20%E8%BD%AC%E6%8D%A2/12.3%20Json%20%E7%9A%84%E5%9B%9B%E4%B8%AA%E5%AE%9E%E7%8E%B0.html",headers:[{level:3,title:"1、JFinalJson",slug:"_1、jfinaljson",normalizedTitle:"1、jfinaljson",charIndex:97},{level:3,title:"2、FastJson",slug:"_2、fastjson",normalizedTitle:"2、fastjson",charIndex:1336},{level:3,title:"3、Jackson",slug:"_3、jackson",normalizedTitle:"3、jackson",charIndex:1643},{level:3,title:"4、MixedJson",slug:"_4、mixedjson",normalizedTitle:"4、mixedjson",charIndex:1888}],lastUpdated:"9/16/2023, 5:36:02 AM",lastUpdatedTimestamp:1694842562e3,headersStr:"1、JFinalJson 2、FastJson 3、Jackson 4、MixedJson",content:'# 12.3 Json 的四个实现\n\nfinal 官方默认给出了四种 json 实现：JFinalJson、FastJson、Jackson、MixedJson，可以满足绝大多数需求。\n\n\n# 1、JFinalJson\n\nJFinalJson 是 jfinal 官方最早的一个实现，这个实现最重要一点就是在转换 jfinal 的 Model 时是先获取 Model 中的 Map attrs 属性，然后再去转换这个 Map 对象。即便你的 Model 生成了 getter 方法，也不会被转换时调用。\n\n针对 Model.attrs 属性进行转换而不是利用 getter 方法进行转换有如下几个原因：\n\nA：支持多表关联查询结果的转换\n\n无论是 Model 还是传统 Java Bean，其 getter 方法都是固定的，而多表关联查询的 sql 语句中的 select 中的字段是动态的，通常还包含关联表中的字段，而这些字段值没有相关的 getter 方法，这些字段就无法被转换\n\nB：早期的 jfinal 用户没有为 Model 生成 getter 方法\n\n注意：JFinalJson 只支持对象转 json string，不支持反向的 json string 转对象，可以通过使用 MixedJson 来支持反向转换：me.setJsonFactory(new MixedJsonFactory()); JFinal 4.9 版本对 JFinalJson 进行了彻底的重构与优化，新增了一些功能。\n\nA、Model、Record 字段名转换为驼峰格式 JFinalJson.setModelAndRecordFieldNameToCamelCase(); 大量开发者将数据库字段名命名成下划线的格式，如："user_id"，这就造成了与 java 变量名风格的不统一，对代码质量有一定损害。\n\n上述配置只有在碰到下划线时才会对其进行转换，否则原样保留，而 oracle 用户习惯使用大写的字段名，所以需要使用如下配置：\n\nJFinalJson.setModelAndRecordFieldNameConverter(fieldName -> {\n    return StrKit.toCamelCase(fieldName, true);\n});\n\n\n1\n2\n3\n\n\n上述代码中的第二个参数 true 表示将字段名转成小写字母，而无论是否出现下划线。\n\nB、新增 setSkipNullValueField 配置方法 该方法用于去除 null 值字段的转换：\n\nJFinalJson.setSkipNullValueField(true);\n\n\n1\n\n\nC、新增 addToJson 扩展方法 该方法可以细粒度地对任意类型的转换进行扩展：\n\nJFinalJson.addToJson(Timestamp.class, (value, depth, ret) -> {\n    ret.addLong(((Timestamp)value).getTime());\n});\n\n\n1\n2\n3\n\n\n以上扩展代码，将 Timestamp 类型转换成 long 值。\n\n\n# 2、FastJson\n\nFastJson 是对第三方的 fastjson 进行的二次封装，该实现最重要的一点就是转换依赖于 Model、java bean 的 getter 方法。使用 fastjson 可以按照其官方文档去配置 fastjson 的各种转换参数。\n\n使用 FastJson 封装时，需要添加其依赖：\n\n<dependency>\n    <groupId>com.alibaba</groupId>\n    <artifactId>fastjson</artifactId>\n    <version>1.2.68</version>\n</dependency>\n\n\n1\n2\n3\n4\n5\n\n\n\n# 3、Jackson\n\n该实现与 FastJson 类似，是对第三方的 jackson 的二次封装\n\n使用 Jackson 封装时，需要添加其依赖：\n\n<dependency>\n    <groupId>com.fasterxml.jackson.core</groupId>\n    <artifactId>jackson-databind</artifactId>\n    <version>2.11.0</version>\n</dependency>\n\n\n1\n2\n3\n4\n5\n\n\n\n# 4、MixedJson\n\nMixedJson 是对 JFinalJson、FastJson 的再一次封装，Object 转 json string 时使用 JFinalJson 的实现，而反向 json string 转 Object 使用 FastJson。\n\n这个实现结合了 JFinalJson 与 FastJson 两者的优势。 前者不支持 json string 到 Object 的转换，后者不支持关联表 sql 查询动态字段的转换。\n\n使用 MixedJson 封装时需要添加 FastJson 封装的依赖：\n\n<dependency>\n    <groupId>com.alibaba</groupId>\n    <artifactId>fastjson</artifactId>\n    <version>1.2.68</version>\n</dependency>\n\n\n1\n2\n3\n4\n5\n',normalizedContent:'# 12.3 json 的四个实现\n\nfinal 官方默认给出了四种 json 实现：jfinaljson、fastjson、jackson、mixedjson，可以满足绝大多数需求。\n\n\n# 1、jfinaljson\n\njfinaljson 是 jfinal 官方最早的一个实现，这个实现最重要一点就是在转换 jfinal 的 model 时是先获取 model 中的 map attrs 属性，然后再去转换这个 map 对象。即便你的 model 生成了 getter 方法，也不会被转换时调用。\n\n针对 model.attrs 属性进行转换而不是利用 getter 方法进行转换有如下几个原因：\n\na：支持多表关联查询结果的转换\n\n无论是 model 还是传统 java bean，其 getter 方法都是固定的，而多表关联查询的 sql 语句中的 select 中的字段是动态的，通常还包含关联表中的字段，而这些字段值没有相关的 getter 方法，这些字段就无法被转换\n\nb：早期的 jfinal 用户没有为 model 生成 getter 方法\n\n注意：jfinaljson 只支持对象转 json string，不支持反向的 json string 转对象，可以通过使用 mixedjson 来支持反向转换：me.setjsonfactory(new mixedjsonfactory()); jfinal 4.9 版本对 jfinaljson 进行了彻底的重构与优化，新增了一些功能。\n\na、model、record 字段名转换为驼峰格式 jfinaljson.setmodelandrecordfieldnametocamelcase(); 大量开发者将数据库字段名命名成下划线的格式，如："user_id"，这就造成了与 java 变量名风格的不统一，对代码质量有一定损害。\n\n上述配置只有在碰到下划线时才会对其进行转换，否则原样保留，而 oracle 用户习惯使用大写的字段名，所以需要使用如下配置：\n\njfinaljson.setmodelandrecordfieldnameconverter(fieldname -> {\n    return strkit.tocamelcase(fieldname, true);\n});\n\n\n1\n2\n3\n\n\n上述代码中的第二个参数 true 表示将字段名转成小写字母，而无论是否出现下划线。\n\nb、新增 setskipnullvaluefield 配置方法 该方法用于去除 null 值字段的转换：\n\njfinaljson.setskipnullvaluefield(true);\n\n\n1\n\n\nc、新增 addtojson 扩展方法 该方法可以细粒度地对任意类型的转换进行扩展：\n\njfinaljson.addtojson(timestamp.class, (value, depth, ret) -> {\n    ret.addlong(((timestamp)value).gettime());\n});\n\n\n1\n2\n3\n\n\n以上扩展代码，将 timestamp 类型转换成 long 值。\n\n\n# 2、fastjson\n\nfastjson 是对第三方的 fastjson 进行的二次封装，该实现最重要的一点就是转换依赖于 model、java bean 的 getter 方法。使用 fastjson 可以按照其官方文档去配置 fastjson 的各种转换参数。\n\n使用 fastjson 封装时，需要添加其依赖：\n\n<dependency>\n    <groupid>com.alibaba</groupid>\n    <artifactid>fastjson</artifactid>\n    <version>1.2.68</version>\n</dependency>\n\n\n1\n2\n3\n4\n5\n\n\n\n# 3、jackson\n\n该实现与 fastjson 类似，是对第三方的 jackson 的二次封装\n\n使用 jackson 封装时，需要添加其依赖：\n\n<dependency>\n    <groupid>com.fasterxml.jackson.core</groupid>\n    <artifactid>jackson-databind</artifactid>\n    <version>2.11.0</version>\n</dependency>\n\n\n1\n2\n3\n4\n5\n\n\n\n# 4、mixedjson\n\nmixedjson 是对 jfinaljson、fastjson 的再一次封装，object 转 json string 时使用 jfinaljson 的实现，而反向 json string 转 object 使用 fastjson。\n\n这个实现结合了 jfinaljson 与 fastjson 两者的优势。 前者不支持 json string 到 object 的转换，后者不支持关联表 sql 查询动态字段的转换。\n\n使用 mixedjson 封装时需要添加 fastjson 封装的依赖：\n\n<dependency>\n    <groupid>com.alibaba</groupid>\n    <artifactid>fastjson</artifactid>\n    <version>1.2.68</version>\n</dependency>\n\n\n1\n2\n3\n4\n5\n',charsets:{cjk:!0}},{title:"12.4 Json 转换用法",frontmatter:{},regularPath:"/zh/12%20Json%20%E8%BD%AC%E6%8D%A2/12.4%20Json%20%E8%BD%AC%E6%8D%A2%E7%94%A8%E6%B3%95.html",relativePath:"zh/12 Json 转换/12.4 Json 转换用法.md",key:"v-afad3fa0",path:"/zh/12%20Json%20%E8%BD%AC%E6%8D%A2/12.4%20Json%20%E8%BD%AC%E6%8D%A2%E7%94%A8%E6%B3%95.html",headers:[{level:3,title:"1、使用配置的 json 实现转换",slug:"_1、使用配置的-json-实现转换",normalizedTitle:"1、使用配置的 json 实现转换",charIndex:89}],lastUpdated:"9/16/2023, 5:36:02 AM",lastUpdatedTimestamp:1694842562e3,headersStr:"1、使用配置的 json 实现转换",content:"# 12.4 Json 转换用法\n\njson 转换在 jfinal 中的使用分为两类用法，第一类是使用配置的 json 转换，第二类是指定某个实现进行 json 转换。\n\n\n# 1、使用配置的 json 实现转换\n\n如下代码将使用前面章节中介绍的配置的 json 实现进行转的换：\n\n// 在 Controller 中使用 renderJson 进行 json 转换，并渲染给客户端\nrenderJson();\nrenderJson(key, object);\nrenderJson(new String[]{...});\n \n// 使用 JsonKit 工具类进行 json 转换\nJsonKit.toJson(...);\nJsonKit.parse(...);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n2、使用指定的 json 实现转换\n\n如果下代码将使用指定的 json 实现去转换：\n\n// 临时指定使用 FastJson 实现\nFastJson.getJson().toJson(...);\nFastJson.getJson().parse(...);\n \n// 为 Controller.renderJson(..) 方法直接传入转换好的 json string\nrenderJson(FastJson.getJson().toJson(...));\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面这种用法可以临时摆脱配置的 json 实现，从而使用指定的 json 实现。",normalizedContent:"# 12.4 json 转换用法\n\njson 转换在 jfinal 中的使用分为两类用法，第一类是使用配置的 json 转换，第二类是指定某个实现进行 json 转换。\n\n\n# 1、使用配置的 json 实现转换\n\n如下代码将使用前面章节中介绍的配置的 json 实现进行转的换：\n\n// 在 controller 中使用 renderjson 进行 json 转换，并渲染给客户端\nrenderjson();\nrenderjson(key, object);\nrenderjson(new string[]{...});\n \n// 使用 jsonkit 工具类进行 json 转换\njsonkit.tojson(...);\njsonkit.parse(...);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n2、使用指定的 json 实现转换\n\n如果下代码将使用指定的 json 实现去转换：\n\n// 临时指定使用 fastjson 实现\nfastjson.getjson().tojson(...);\nfastjson.getjson().parse(...);\n \n// 为 controller.renderjson(..) 方法直接传入转换好的 json string\nrenderjson(fastjson.getjson().tojson(...));\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面这种用法可以临时摆脱配置的 json 实现，从而使用指定的 json 实现。",charsets:{cjk:!0}},{title:"13.1 概述",frontmatter:{},regularPath:"/zh/13%20JFinal%E6%9E%B6%E6%9E%84%E5%8F%8A%E6%89%A9%E5%B1%95/13.1%20%E6%A6%82%E8%BF%B0.html",relativePath:"zh/13 JFinal架构及扩展/13.1 概述.md",key:"v-c42c494e",path:"/zh/13%20JFinal%E6%9E%B6%E6%9E%84%E5%8F%8A%E6%89%A9%E5%B1%95/13.1%20%E6%A6%82%E8%BF%B0.html",lastUpdated:"9/16/2023, 5:49:11 AM",lastUpdatedTimestamp:1694843351e3,headersStr:null,content:"# 13.1 概述\n\nJFinal 采用微内核全方位扩展架构，全方位是指其扩展方式在空间上的表现形式。JFinal由Handler、Interceptor、Controller、Render、Plugin五大部分组成。本章将简单介绍此架构以及基于此架构所做的一些较为常用的扩展。",normalizedContent:"# 13.1 概述\n\njfinal 采用微内核全方位扩展架构，全方位是指其扩展方式在空间上的表现形式。jfinal由handler、interceptor、controller、render、plugin五大部分组成。本章将简单介绍此架构以及基于此架构所做的一些较为常用的扩展。",charsets:{cjk:!0}},{title:"13.2 架构",frontmatter:{},regularPath:"/zh/13%20JFinal%E6%9E%B6%E6%9E%84%E5%8F%8A%E6%89%A9%E5%B1%95/13.2%20%E6%9E%B6%E6%9E%84.html",relativePath:"zh/13 JFinal架构及扩展/13.2 架构.md",key:"v-477bb3b8",path:"/zh/13%20JFinal%E6%9E%B6%E6%9E%84%E5%8F%8A%E6%89%A9%E5%B1%95/13.2%20%E6%9E%B6%E6%9E%84.html",lastUpdated:"9/16/2023, 5:49:11 AM",lastUpdatedTimestamp:1694843351e3,headersStr:null,content:"# 13.2 架构\n\nJFinal 顶层架构图如下：\n",normalizedContent:"# 13.2 架构\n\njfinal 顶层架构图如下：\n",charsets:{cjk:!0}},{title:"14.1 极速升级",frontmatter:{},regularPath:"/zh/14%20%E5%8D%87%E7%BA%A7JFinal/14.1%20%E6%9E%81%E9%80%9F%E5%8D%87%E7%BA%A7.html",relativePath:"zh/14 升级JFinal/14.1 极速升级.md",key:"v-0c29f8b2",path:"/zh/14%20%E5%8D%87%E7%BA%A7JFinal/14.1%20%E6%9E%81%E9%80%9F%E5%8D%87%E7%BA%A7.html",headers:[{level:3,title:"一、jfinal 3.0 之前版本的升级",slug:"一、jfinal-3-0-之前版本的升级",normalizedTitle:"一、jfinal 3.0 之前版本的升级",charIndex:16},{level:2,title:"二、jfinal 3.0 之后版本的升级",slug:"二、jfinal-3-0-之后版本的升级",normalizedTitle:"二、jfinal 3.0 之后版本的升级",charIndex:124},{level:3,title:"1、升级到 3.1",slug:"_1、升级到-3-1",normalizedTitle:"1、升级到 3.1",charIndex:149},{level:3,title:"2、升级到 3.2",slug:"_2、升级到-3-2",normalizedTitle:"2、升级到 3.2",charIndex:174},{level:3,title:"3、升级到 3.3",slug:"_3、升级到-3-3",normalizedTitle:"3、升级到 3.3",charIndex:234},{level:3,title:"4、升级到 3.4",slug:"_4、升级到-3-4",normalizedTitle:"4、升级到 3.4",charIndex:329},{level:3,title:"5、升级到 3.5",slug:"_5、升级到-3-5",normalizedTitle:"5、升级到 3.5",charIndex:511},{level:3,title:"6、升级到 3.6",slug:"_6、升级到-3-6",normalizedTitle:"6、升级到 3.6",charIndex:569},{level:3,title:"7、升级到 3.8",slug:"_7、升级到-3-8",normalizedTitle:"7、升级到 3.8",charIndex:1052},{level:3,title:"8、升级到 4.0",slug:"_8、升级到-4-0",normalizedTitle:"8、升级到 4.0",charIndex:1153},{level:3,title:"9、升级到 4.1",slug:"_9、升级到-4-1",normalizedTitle:"9、升级到 4.1",charIndex:1178},{level:3,title:"10、升级到 4.2",slug:"_10、升级到-4-2",normalizedTitle:"10、升级到 4.2",charIndex:1203},{level:3,title:"11、升级到 4.3",slug:"_11、升级到-4-3",normalizedTitle:"11、升级到 4.3",charIndex:1229},{level:3,title:"12、升级到 4.4",slug:"_12、升级到-4-4",normalizedTitle:"12、升级到 4.4",charIndex:1255},{level:3,title:"13、升级到 4.5",slug:"_13、升级到-4-5",normalizedTitle:"13、升级到 4.5",charIndex:1281},{level:3,title:"14、升级到 4.6",slug:"_14、升级到-4-6",normalizedTitle:"14、升级到 4.6",charIndex:1366},{level:3,title:"15、升级到 4.7",slug:"_15、升级到-4-7",normalizedTitle:"15、升级到 4.7",charIndex:1392},{level:3,title:"16、升级到 4.8",slug:"_16、升级到-4-8",normalizedTitle:"16、升级到 4.8",charIndex:1418},{level:3,title:"17、升级到 4.9",slug:"_17、升级到-4-9",normalizedTitle:"17、升级到 4.9",charIndex:1872},{level:3,title:"17、升级到 4.9.01",slug:"_17、升级到-4-9-01",normalizedTitle:"17、升级到 4.9.01",charIndex:2074},{level:3,title:"18、升级到 4.9.02",slug:"_18、升级到-4-9-02",normalizedTitle:"18、升级到 4.9.02",charIndex:2103},{level:3,title:"19、升级到 4.9.03",slug:"_19、升级到-4-9-03",normalizedTitle:"19、升级到 4.9.03",charIndex:2179},{level:3,title:"20、升级到 4.9.04",slug:"_20、升级到-4-9-04",normalizedTitle:"20、升级到 4.9.04",charIndex:2208},{level:3,title:"21、升级到 4.9.05",slug:"_21、升级到-4-9-05",normalizedTitle:"21、升级到 4.9.05",charIndex:2302},{level:3,title:"22、升级到 4.9.06",slug:"_22、升级到-4-9-06",normalizedTitle:"22、升级到 4.9.06",charIndex:2370},{level:3,title:"23、升级到 4.9.07",slug:"_23、升级到-4-9-07",normalizedTitle:"23、升级到 4.9.07",charIndex:2496},{level:3,title:"24、升级到 4.9.08",slug:"_24、升级到-4-9-08",normalizedTitle:"24、升级到 4.9.08",charIndex:2525},{level:3,title:"25、升级到 4.9.09",slug:"_25、升级到-4-9-09",normalizedTitle:"25、升级到 4.9.09",charIndex:2554},{level:3,title:"26、升级到 4.9.10",slug:"_26、升级到-4-9-10",normalizedTitle:"26、升级到 4.9.10",charIndex:2583},{level:3,title:"27、升级到 4.9.11",slug:"_27、升级到-4-9-11",normalizedTitle:"27、升级到 4.9.11",charIndex:2612},{level:3,title:"28、升级到 4.9.12",slug:"_28、升级到-4-9-12",normalizedTitle:"28、升级到 4.9.12",charIndex:2641},{level:3,title:"29、升级到 4.9.13",slug:"_29、升级到-4-9-13",normalizedTitle:"29、升级到 4.9.13",charIndex:2691},{level:3,title:"30、升级到 4.9.14",slug:"_30、升级到-4-9-14",normalizedTitle:"30、升级到 4.9.14",charIndex:2915},{level:3,title:"31、升级到 4.9.15",slug:"_31、升级到-4-9-15",normalizedTitle:"31、升级到 4.9.15",charIndex:2944},{level:3,title:"32、升级到 4.9.16",slug:"_32、升级到-4-9-16",normalizedTitle:"32、升级到 4.9.16",charIndex:3001},{level:3,title:"33、升级到 4.9.17",slug:"_33、升级到-4-9-17",normalizedTitle:"33、升级到 4.9.17",charIndex:3253},{level:3,title:"34、升级到 4.9.18",slug:"_34、升级到-4-9-18",normalizedTitle:"34、升级到 4.9.18",charIndex:3283},{level:3,title:"35、升级到 4.9.19",slug:"_35、升级到-4-9-19",normalizedTitle:"35、升级到 4.9.19",charIndex:3473},{level:3,title:"36、升级到 4.9.20",slug:"_36、升级到-4-9-20",normalizedTitle:"36、升级到 4.9.20",charIndex:3527},{level:3,title:"37、升级到 4.9.21",slug:"_37、升级到-4-9-21",normalizedTitle:"37、升级到 4.9.21",charIndex:3745},{level:3,title:"38、升级到 5.0.0",slug:"_38、升级到-5-0-0",normalizedTitle:"38、升级到 5.0.0",charIndex:4031},{level:3,title:"39、升级到 5.0.1",slug:"_39、升级到-5-0-1",normalizedTitle:"39、升级到 5.0.1",charIndex:4060},{level:3,title:"40、升级到 5.0.2",slug:"_40、升级到-5-0-2",normalizedTitle:"40、升级到 5.0.2",charIndex:4089},{level:3,title:"41、升级到 5.0.3",slug:"_41、升级到-5-0-3",normalizedTitle:"41、升级到 5.0.3",charIndex:4382},{level:3,title:"42、升级到 5.0.4",slug:"_42、升级到-5-0-4",normalizedTitle:"42、升级到 5.0.4",charIndex:4411},{level:3,title:"43、升级到 5.0.5",slug:"_43、升级到-5-0-5",normalizedTitle:"43、升级到 5.0.5",charIndex:4440},{level:3,title:"44、升级到 5.0.6",slug:"_44、升级到-5-0-6",normalizedTitle:"44、升级到 5.0.6",charIndex:4469},{level:3,title:"45、升级到 5.0.7",slug:"_45、升级到-5-0-7",normalizedTitle:"45、升级到 5.0.7",charIndex:4612},{level:3,title:"46、升级到 5.0.8",slug:"_46、升级到-5-0-8",normalizedTitle:"46、升级到 5.0.8",charIndex:4641},{level:3,title:"47、升级到 5.0.8",slug:"_47、升级到-5-0-8",normalizedTitle:"47、升级到 5.0.8",charIndex:4670},{level:3,title:"48、升级到 5.0.9",slug:"_48、升级到-5-0-9",normalizedTitle:"48、升级到 5.0.9",charIndex:4699},{level:3,title:"49、升级到 5.1.0",slug:"_49、升级到-5-1-0",normalizedTitle:"49、升级到 5.1.0",charIndex:4728},{level:3,title:"50、升级到 5.1.1",slug:"_50、升级到-5-1-1",normalizedTitle:"50、升级到 5.1.1",charIndex:4757},{level:3,title:"51、升级到 5.1.2",slug:"_51、升级到-5-1-2",normalizedTitle:"51、升级到 5.1.2",charIndex:4786}],lastUpdated:"9/17/2023, 5:25:03 AM",lastUpdatedTimestamp:1694928303e3,headersStr:"一、jfinal 3.0 之前版本的升级 二、jfinal 3.0 之后版本的升级 1、升级到 3.1 2、升级到 3.2 3、升级到 3.3 4、升级到 3.4 5、升级到 3.5 6、升级到 3.6 7、升级到 3.8 8、升级到 4.0 9、升级到 4.1 10、升级到 4.2 11、升级到 4.3 12、升级到 4.4 13、升级到 4.5 14、升级到 4.6 15、升级到 4.7 16、升级到 4.8 17、升级到 4.9 17、升级到 4.9.01 18、升级到 4.9.02 19、升级到 4.9.03 20、升级到 4.9.04 21、升级到 4.9.05 22、升级到 4.9.06 23、升级到 4.9.07 24、升级到 4.9.08 25、升级到 4.9.09 26、升级到 4.9.10 27、升级到 4.9.11 28、升级到 4.9.12 29、升级到 4.9.13 30、升级到 4.9.14 31、升级到 4.9.15 32、升级到 4.9.16 33、升级到 4.9.17 34、升级到 4.9.18 35、升级到 4.9.19 36、升级到 4.9.20 37、升级到 4.9.21 38、升级到 5.0.0 39、升级到 5.0.1 40、升级到 5.0.2 41、升级到 5.0.3 42、升级到 5.0.4 43、升级到 5.0.5 44、升级到 5.0.6 45、升级到 5.0.7 46、升级到 5.0.8 47、升级到 5.0.8 48、升级到 5.0.9 49、升级到 5.1.0 50、升级到 5.1.1 51、升级到 5.1.2",content:'# 14.1 极速升级\n\n\n# 一、jfinal 3.0 之前版本的升级\n\njfinal 3.0 是大版本升级，此前版本升到 jfinal 3.0 请移步 14.2、14.3、14.4、14.5 小节，这几个小节中的内容极少，升级很方便。\n\n\n# 二、jfinal 3.0 之后版本的升级\n\n\n# 1、升级到 3.1\n\n无需修改，平滑升级\n\n\n# 2、升级到 3.2\n\nIStringSource 更名为 ISource\n\n按照 14.2 小节 升级 Ret\n\n\n# 3、升级到 3.3\n\n指令扩展中的 java.io.Writer 改为 com.jfinal.template.io.Writer，eclipse/IDEA 开发工具会主动给出提示\n\n\n# 4、升级到 3.4\n\n由于 Json 中的 defaultDatePattern 初始值由 null 改为 "yyyy-MM-dd HH:mm:ss"，JFinalJson 中删掉 datePattern 属性，所以要在 configConstant(Constants me) 中配置：me.setJsonDatePattern(null) 或者具体值\n\n\n# 5、升级到 3.5\n\nISource.getKey() 更名为 ISource.getCacheKey()\n\n\n# 6、升级到 3.6\n\nDb、Model 针对多主键(联合主键)的 findById、deleteById 方法添加一个 \'s\' 后缀，改成 findByIds、deleteByIds\n\n用到 jfinal weixin 项目的 MsgController 时，需要在 configRoutes 中配置 me.setMappingSuperClass(true)\n\n由于 jfinal 3.6 用于 sql 管理的 Engine 对象，默认配置了 engine.setToClassPathSourceFactory()，engine 将从 class path 和 jar 包中加载 sql 文件，所以如果 sql 文件以往是存放在 src/main/webapp 的需要转移至 src/main/resources 之下。如果以往配置过 arp.setBaseSqlTemplatePath(...)，需要删除该行代码，或改为适应于 ClassPathSourceFactory 的配置，参考：https://www.jfinal.com/doc/6-2\n\n\n# 7、升级到 3.8\n\n用到 Aop 配置方法的改为使用 AopManager，例如：Aop.addMapping(...) 改为 AopManager.me().addMapping(...)\n\n\n# 8、升级到 4.0\n\n无需修改，平滑升级\n\n\n# 9、升级到 4.1\n\n无需修改，平滑升级\n\n\n# 10、升级到 4.2\n\n无需修改，平滑升级\n\n\n# 11、升级到 4.3\n\n无需修改，平滑升级\n\n\n# 12、升级到 4.4\n\n无需修改，平滑升级\n\n\n# 13、升级到 4.5\n\n默认不支持直接访问 .jsp 文件，如果需要直接访问 .jsp 文件，需添加配置：me.setDenyAccessJsp(false);\n\n\n# 14、升级到 4.6\n\n无需修改，平滑升级\n\n\n# 15、升级到 4.7\n\n无需修改，平滑升级\n\n\n# 16、升级到 4.8\n\njfinal 4.8 之前的 Controller.getPara(String) 方法，在有表单域存在的时候就不可能返回 null 值，而是返回了 "" 值。jfinal 4.8 版本将之修改为与其它 getXxx 系方法一样，将 "" 处理为 null 值。\n\n需要快速升级老项目的同学，可以引入 BaseController 并使用老版本的实现\n\npublic class BaseController extends Controller {\n   public String getPara(String name) {\n      return getRequest().getParameter(name);\n   }\n}\n\n\n1\n2\n3\n4\n5\n\n\n这个方法的具体改变细节见 gitee.com ： https://gitee.com/jfinal/jfinal/commit/edfcc0015837ab0b1e6a1f980843ab88815ec1cd\n\n\n# 17、升级到 4.9\n\njfinal 4.9 对 JFinalJson.java 进行了重构，如果以前的项目通过继承 JFinalJson 类做过扩展，需要注意扩展接口有所变动，具体可以参考一下源码中有关扩展的注释，新的扩展接口使用起来比以前要方便得多。\n\n如果项目中使用了 fastjson，最低需要版本为 1.2.68（老版本的 fastjson 有安全隐患）。\n\n如无上述情况可平滑升级。\n\n\n# 17、升级到 4.9.01\n\n无需修改，平滑升级\n\n\n# 18、升级到 4.9.02\n\nEngine 的 setWriterBufferSize(int) 更名为 setBufferSize(int)\n\n\n# 19、升级到 4.9.03\n\n无需修改，平滑升级\n\n\n# 20、升级到 4.9.04\n\n无需修改，平滑升级。该版本只修正了 com.jfinal.plugin.redis.Cache.hgetCounter(...) 中的一个 bug。\n\n\n# 21、升级到 4.9.05\n\n无需修改，平滑升级。该版本在 Model、Db 中新增了一个 each 方法，新增方法不影响升级\n\n\n# 22、升级到 4.9.06\n\n该版本的 MetaBuilder.filter(...) 方法更名为 skip，使用逻辑没有变化。一般很少人用到这个方法，只有用到过这个方法的人才需要修改代码，并且 eclipse、IDEA 开发工具会提示修改。\n\n\n# 23、升级到 4.9.07\n\n无需修改，平滑升级\n\n\n# 24、升级到 4.9.08\n\n无需修改，平滑升级\n\n\n# 25、升级到 4.9.09\n\n无需修改，平滑升级\n\n\n# 26、升级到 4.9.10\n\n无需修改，平滑升级\n\n\n# 27、升级到 4.9.11\n\n无需修改，平滑升级\n\n\n# 28、升级到 4.9.12\n\n不要使用这个版本，模板生成内容会多出一些空行，请使用后续版本\n\n\n# 29、升级到 4.9.13\n\n无需修改，平滑升级。\n\n但要注意：由于 PathKit.getWebRootPath() 方法已经被改进，在标准的 maven 项目中已经可以正确获取到 web 根目录，所以将该方法用于 model、base model 生成器的代码注意要改一下，可以将 PathKit.getWebRootPath() 改成下面方式获取项目根目录：\n\nSystem.getProperty("user.dir")\n\n\n1\n\n\n\n# 30、升级到 4.9.14\n\n无需修改，平滑升级\n\n\n# 31、升级到 4.9.15\n\n无需修改，平滑升级。注意跨多版本升级要看看升级到 4.9.13 这一小节。\n\n\n# 32、升级到 4.9.16\n\n由于该版本升级了 Redis 插件所依赖的 jedis 与 fst，而 jedis 的 SafeEncoder 移动了目录，所以如果用到了 jfinal 的 Redis 插件的项目，需要将其 jedis 依赖升级到 3.6.3。\n\n如果你想升级 fst，需要注意升级前存入 redis 中的数据无法被读取，因为新版本 fst 序列化/反序列算法不兼容老版本，简单的解决办法是清空 redis 数据重新写入，如果不方便清空可以先不升级 fst 而只升级 jedis。\n\n\n# 33、升级到 4.9.17\n\n无需修改，平滑升级。\n\n\n# 34、升级到 4.9.18\n\n如果用到文件上传 cos 依赖必须升级到 2022.2 版本，因为 getFile 方法的 int maxPostSize 改成了 long。不建议使用该版本，建议至少升级到 4.9.21。\n\n注意：从本版本开始，后续版本文件上传依赖 cos 都要升级至少到 2022.2 版本（int maxPostSize 变量改为了 long 类型）\n\n\n# 35、升级到 4.9.19\n\n无需修改，平滑升级。不建议使用该版本，建议至少升级到 4.9.21。\n\n\n# 36、升级到 4.9.20\n\nRet.create(Object,Object) 更名为 Ret.of(Object, Object)，Ret.ok(Object, Object)、Ret.fail(Object, Object) 已被删除，可以使用 Ret.ok().set(Object, Object)、Ret.fail().set(Object, Object) 替代。不建议使用该版本，建议至少升级到 4.9.21。\n\n\n# 37、升级到 4.9.21\n\n为保持兼容性，恢复了上一版本 4.9.20 中删掉的 Ret.ok(Object, Object)、Ret.fail(Object, Object) 两个方法。\n\n相对于 4.9.18 以及更早版本，升级到本版本，需要改变的是 Ret.create(key, value) 改为 Ret.of(key, value)，以及 cos 升级到 2022.2，其它不用动。\n\n注意：不建议使用 4.9.18、4.9.19、4.9.20，而是直接使用 4.9.21，因为该版本针对前面三个版本进行了完善并且兼容老项目，属于本轮迭代的最终版。\n\n\n# 38、升级到 5.0.0\n\n无需修改，平滑升级。\n\n\n# 39、升级到 5.0.1\n\n无需修改，平滑升级。\n\n\n# 40、升级到 5.0.2\n\nEnjoy 模板引擎的静态方法调用与静态属性访问表达式默认值改为了 "不开启"，如果用到这两类表达式，需要通过如下配置开启：\n\n// 以下配置支持静态方法调用表达式：com.jfinal.kit.StrKit::isBlank(\'abc\')\nengine.setStaticMethodExpression(true);\n \n// 以下配置支持静态属性访问表达式：com.jfinal.core.Constant::JFINAL_VERSION\nengine.setStaticFieldExpression(true);\n\n\n1\n2\n3\n4\n5\n\n\n\n# 41、升级到 5.0.3\n\n无需修改，平滑升级。\n\n\n# 42、升级到 5.0.4\n\n无需修改，平滑升级。\n\n\n# 43、升级到 5.0.5\n\n无需修改，平滑升级。\n\n\n# 44、升级到 5.0.6\n\n之前 5.0.3 版本 Redis 插件新增的分布式锁 lock(...)、withLock(...) 中的 timeOut 参数单位由 "毫秒" 改为了 "秒"。如果是 5.0.3 之前版本升级不必关心，因为5.0.3版本之前还未提供过这个方法。\n\n\n# 45、升级到 5.0.7\n\n无需修改，平滑升级。\n\n\n# 46、升级到 5.0.8\n\n无需修改，平滑升级。\n\n\n# 47、升级到 5.0.8\n\n无需修改，平滑升级。\n\n\n# 48、升级到 5.0.9\n\n无需修改，平滑升级。\n\n\n# 49、升级到 5.1.0\n\n无需修改，平滑升级。\n\n\n# 50、升级到 5.1.1\n\n无需修改，平滑升级。\n\n\n# 51、升级到 5.1.2\n\nScheduledKit 带有 Runnable/Callable 参数的方法其 Runnable/Callable 参数挪到了最后一个位置。',normalizedContent:'# 14.1 极速升级\n\n\n# 一、jfinal 3.0 之前版本的升级\n\njfinal 3.0 是大版本升级，此前版本升到 jfinal 3.0 请移步 14.2、14.3、14.4、14.5 小节，这几个小节中的内容极少，升级很方便。\n\n\n# 二、jfinal 3.0 之后版本的升级\n\n\n# 1、升级到 3.1\n\n无需修改，平滑升级\n\n\n# 2、升级到 3.2\n\nistringsource 更名为 isource\n\n按照 14.2 小节 升级 ret\n\n\n# 3、升级到 3.3\n\n指令扩展中的 java.io.writer 改为 com.jfinal.template.io.writer，eclipse/idea 开发工具会主动给出提示\n\n\n# 4、升级到 3.4\n\n由于 json 中的 defaultdatepattern 初始值由 null 改为 "yyyy-mm-dd hh:mm:ss"，jfinaljson 中删掉 datepattern 属性，所以要在 configconstant(constants me) 中配置：me.setjsondatepattern(null) 或者具体值\n\n\n# 5、升级到 3.5\n\nisource.getkey() 更名为 isource.getcachekey()\n\n\n# 6、升级到 3.6\n\ndb、model 针对多主键(联合主键)的 findbyid、deletebyid 方法添加一个 \'s\' 后缀，改成 findbyids、deletebyids\n\n用到 jfinal weixin 项目的 msgcontroller 时，需要在 configroutes 中配置 me.setmappingsuperclass(true)\n\n由于 jfinal 3.6 用于 sql 管理的 engine 对象，默认配置了 engine.settoclasspathsourcefactory()，engine 将从 class path 和 jar 包中加载 sql 文件，所以如果 sql 文件以往是存放在 src/main/webapp 的需要转移至 src/main/resources 之下。如果以往配置过 arp.setbasesqltemplatepath(...)，需要删除该行代码，或改为适应于 classpathsourcefactory 的配置，参考：https://www.jfinal.com/doc/6-2\n\n\n# 7、升级到 3.8\n\n用到 aop 配置方法的改为使用 aopmanager，例如：aop.addmapping(...) 改为 aopmanager.me().addmapping(...)\n\n\n# 8、升级到 4.0\n\n无需修改，平滑升级\n\n\n# 9、升级到 4.1\n\n无需修改，平滑升级\n\n\n# 10、升级到 4.2\n\n无需修改，平滑升级\n\n\n# 11、升级到 4.3\n\n无需修改，平滑升级\n\n\n# 12、升级到 4.4\n\n无需修改，平滑升级\n\n\n# 13、升级到 4.5\n\n默认不支持直接访问 .jsp 文件，如果需要直接访问 .jsp 文件，需添加配置：me.setdenyaccessjsp(false);\n\n\n# 14、升级到 4.6\n\n无需修改，平滑升级\n\n\n# 15、升级到 4.7\n\n无需修改，平滑升级\n\n\n# 16、升级到 4.8\n\njfinal 4.8 之前的 controller.getpara(string) 方法，在有表单域存在的时候就不可能返回 null 值，而是返回了 "" 值。jfinal 4.8 版本将之修改为与其它 getxxx 系方法一样，将 "" 处理为 null 值。\n\n需要快速升级老项目的同学，可以引入 basecontroller 并使用老版本的实现\n\npublic class basecontroller extends controller {\n   public string getpara(string name) {\n      return getrequest().getparameter(name);\n   }\n}\n\n\n1\n2\n3\n4\n5\n\n\n这个方法的具体改变细节见 gitee.com ： https://gitee.com/jfinal/jfinal/commit/edfcc0015837ab0b1e6a1f980843ab88815ec1cd\n\n\n# 17、升级到 4.9\n\njfinal 4.9 对 jfinaljson.java 进行了重构，如果以前的项目通过继承 jfinaljson 类做过扩展，需要注意扩展接口有所变动，具体可以参考一下源码中有关扩展的注释，新的扩展接口使用起来比以前要方便得多。\n\n如果项目中使用了 fastjson，最低需要版本为 1.2.68（老版本的 fastjson 有安全隐患）。\n\n如无上述情况可平滑升级。\n\n\n# 17、升级到 4.9.01\n\n无需修改，平滑升级\n\n\n# 18、升级到 4.9.02\n\nengine 的 setwriterbuffersize(int) 更名为 setbuffersize(int)\n\n\n# 19、升级到 4.9.03\n\n无需修改，平滑升级\n\n\n# 20、升级到 4.9.04\n\n无需修改，平滑升级。该版本只修正了 com.jfinal.plugin.redis.cache.hgetcounter(...) 中的一个 bug。\n\n\n# 21、升级到 4.9.05\n\n无需修改，平滑升级。该版本在 model、db 中新增了一个 each 方法，新增方法不影响升级\n\n\n# 22、升级到 4.9.06\n\n该版本的 metabuilder.filter(...) 方法更名为 skip，使用逻辑没有变化。一般很少人用到这个方法，只有用到过这个方法的人才需要修改代码，并且 eclipse、idea 开发工具会提示修改。\n\n\n# 23、升级到 4.9.07\n\n无需修改，平滑升级\n\n\n# 24、升级到 4.9.08\n\n无需修改，平滑升级\n\n\n# 25、升级到 4.9.09\n\n无需修改，平滑升级\n\n\n# 26、升级到 4.9.10\n\n无需修改，平滑升级\n\n\n# 27、升级到 4.9.11\n\n无需修改，平滑升级\n\n\n# 28、升级到 4.9.12\n\n不要使用这个版本，模板生成内容会多出一些空行，请使用后续版本\n\n\n# 29、升级到 4.9.13\n\n无需修改，平滑升级。\n\n但要注意：由于 pathkit.getwebrootpath() 方法已经被改进，在标准的 maven 项目中已经可以正确获取到 web 根目录，所以将该方法用于 model、base model 生成器的代码注意要改一下，可以将 pathkit.getwebrootpath() 改成下面方式获取项目根目录：\n\nsystem.getproperty("user.dir")\n\n\n1\n\n\n\n# 30、升级到 4.9.14\n\n无需修改，平滑升级\n\n\n# 31、升级到 4.9.15\n\n无需修改，平滑升级。注意跨多版本升级要看看升级到 4.9.13 这一小节。\n\n\n# 32、升级到 4.9.16\n\n由于该版本升级了 redis 插件所依赖的 jedis 与 fst，而 jedis 的 safeencoder 移动了目录，所以如果用到了 jfinal 的 redis 插件的项目，需要将其 jedis 依赖升级到 3.6.3。\n\n如果你想升级 fst，需要注意升级前存入 redis 中的数据无法被读取，因为新版本 fst 序列化/反序列算法不兼容老版本，简单的解决办法是清空 redis 数据重新写入，如果不方便清空可以先不升级 fst 而只升级 jedis。\n\n\n# 33、升级到 4.9.17\n\n无需修改，平滑升级。\n\n\n# 34、升级到 4.9.18\n\n如果用到文件上传 cos 依赖必须升级到 2022.2 版本，因为 getfile 方法的 int maxpostsize 改成了 long。不建议使用该版本，建议至少升级到 4.9.21。\n\n注意：从本版本开始，后续版本文件上传依赖 cos 都要升级至少到 2022.2 版本（int maxpostsize 变量改为了 long 类型）\n\n\n# 35、升级到 4.9.19\n\n无需修改，平滑升级。不建议使用该版本，建议至少升级到 4.9.21。\n\n\n# 36、升级到 4.9.20\n\nret.create(object,object) 更名为 ret.of(object, object)，ret.ok(object, object)、ret.fail(object, object) 已被删除，可以使用 ret.ok().set(object, object)、ret.fail().set(object, object) 替代。不建议使用该版本，建议至少升级到 4.9.21。\n\n\n# 37、升级到 4.9.21\n\n为保持兼容性，恢复了上一版本 4.9.20 中删掉的 ret.ok(object, object)、ret.fail(object, object) 两个方法。\n\n相对于 4.9.18 以及更早版本，升级到本版本，需要改变的是 ret.create(key, value) 改为 ret.of(key, value)，以及 cos 升级到 2022.2，其它不用动。\n\n注意：不建议使用 4.9.18、4.9.19、4.9.20，而是直接使用 4.9.21，因为该版本针对前面三个版本进行了完善并且兼容老项目，属于本轮迭代的最终版。\n\n\n# 38、升级到 5.0.0\n\n无需修改，平滑升级。\n\n\n# 39、升级到 5.0.1\n\n无需修改，平滑升级。\n\n\n# 40、升级到 5.0.2\n\nenjoy 模板引擎的静态方法调用与静态属性访问表达式默认值改为了 "不开启"，如果用到这两类表达式，需要通过如下配置开启：\n\n// 以下配置支持静态方法调用表达式：com.jfinal.kit.strkit::isblank(\'abc\')\nengine.setstaticmethodexpression(true);\n \n// 以下配置支持静态属性访问表达式：com.jfinal.core.constant::jfinal_version\nengine.setstaticfieldexpression(true);\n\n\n1\n2\n3\n4\n5\n\n\n\n# 41、升级到 5.0.3\n\n无需修改，平滑升级。\n\n\n# 42、升级到 5.0.4\n\n无需修改，平滑升级。\n\n\n# 43、升级到 5.0.5\n\n无需修改，平滑升级。\n\n\n# 44、升级到 5.0.6\n\n之前 5.0.3 版本 redis 插件新增的分布式锁 lock(...)、withlock(...) 中的 timeout 参数单位由 "毫秒" 改为了 "秒"。如果是 5.0.3 之前版本升级不必关心，因为5.0.3版本之前还未提供过这个方法。\n\n\n# 45、升级到 5.0.7\n\n无需修改，平滑升级。\n\n\n# 46、升级到 5.0.8\n\n无需修改，平滑升级。\n\n\n# 47、升级到 5.0.8\n\n无需修改，平滑升级。\n\n\n# 48、升级到 5.0.9\n\n无需修改，平滑升级。\n\n\n# 49、升级到 5.1.0\n\n无需修改，平滑升级。\n\n\n# 50、升级到 5.1.1\n\n无需修改，平滑升级。\n\n\n# 51、升级到 5.1.2\n\nscheduledkit 带有 runnable/callable 参数的方法其 runnable/callable 参数挪到了最后一个位置。',charsets:{cjk:!0}},{title:"14.2 Ret",frontmatter:{},regularPath:"/zh/14%20%E5%8D%87%E7%BA%A7JFinal/14.2%20Ret.html",relativePath:"zh/14 升级JFinal/14.2 Ret.md",key:"v-7861a453",path:"/zh/14%20%E5%8D%87%E7%BA%A7JFinal/14.2%20Ret.html",lastUpdated:"9/17/2023, 5:25:03 AM",lastUpdatedTimestamp:1694928303e3,headersStr:null,content:'# 14.2 Ret\n\n如果待升级项目中未使用过 Ret，那么可以忽略本小节。如果是 jfinal 3.2、3.3、3.4 或者更高版本的 jfinal 也可以忽略。\n\nJFinal 3.2 对Ret工具类进行了改进，使其更加适用于json数据格式交互的API类型项目。新版本状态名只有一个：state，取值为：ok/fail，而老版本状态名有两个：isOk与isFail，取值为：true/false。\n\n所以，新旧版本Ret对象生成的json数据会有差异，对于大多数web项目来说，升级方法如下：\n\n * 利用查找替换功能将 html 与js文件中的 ret.isOk 替换为 ret.state == "ok"\n\n * 利用查找替换功能将 html 与js文件中的 ret.isFail 替换为 ret.state == "fail"\n\n如果希望尽可能小的改动代码进行升级，可以调用一次Ret.setToOldWorkMode()方法沿用老版本模式即可。',normalizedContent:'# 14.2 ret\n\n如果待升级项目中未使用过 ret，那么可以忽略本小节。如果是 jfinal 3.2、3.3、3.4 或者更高版本的 jfinal 也可以忽略。\n\njfinal 3.2 对ret工具类进行了改进，使其更加适用于json数据格式交互的api类型项目。新版本状态名只有一个：state，取值为：ok/fail，而老版本状态名有两个：isok与isfail，取值为：true/false。\n\n所以，新旧版本ret对象生成的json数据会有差异，对于大多数web项目来说，升级方法如下：\n\n * 利用查找替换功能将 html 与js文件中的 ret.isok 替换为 ret.state == "ok"\n\n * 利用查找替换功能将 html 与js文件中的 ret.isfail 替换为 ret.state == "fail"\n\n如果希望尽可能小的改动代码进行升级，可以调用一次ret.settooldworkmode()方法沿用老版本模式即可。',charsets:{cjk:!0}},{title:"14.3 configEngine",frontmatter:{},regularPath:"/zh/14%20%E5%8D%87%E7%BA%A7JFinal/14.3%20configEngine.html",relativePath:"zh/14 升级JFinal/14.3 configEngine.md",key:"v-74d2de46",path:"/zh/14%20%E5%8D%87%E7%BA%A7JFinal/14.3%20configEngine.html",lastUpdated:"9/17/2023, 5:25:03 AM",lastUpdatedTimestamp:1694928303e3,headersStr:null,content:'# 14.3 configEngine\n\nFinal 3.0新增了模板引擎模块，继承JFinalConfig的实现类中需要添加public void configEngine(Engine me)方法，以便对模板引擎进行配置。以下是示例代码：\n\npublic void configEngine(Engine me) {\n  me.setDevMode(true);\n  \n  me.addSharedFunction("/view/common/layout.html");\n  me.addSharedFunction("/view/common/paginate.html");\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n项目升级如果不使用Template Engine该方法可以留空。\n\nJFinal 3.0 默认ViewType 为 ViewType.JFINAL_TEMPLATE，如果老项目使用的是Freemarker模板，并且不希望改变模板类型，需要在 configConstant 方法中通过me.setViewType(ViewType.FREE_MARKER)进行指定，以前已经指定过 ViewType的则不必理会。',normalizedContent:'# 14.3 configengine\n\nfinal 3.0新增了模板引擎模块，继承jfinalconfig的实现类中需要添加public void configengine(engine me)方法，以便对模板引擎进行配置。以下是示例代码：\n\npublic void configengine(engine me) {\n  me.setdevmode(true);\n  \n  me.addsharedfunction("/view/common/layout.html");\n  me.addsharedfunction("/view/common/paginate.html");\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n项目升级如果不使用template engine该方法可以留空。\n\njfinal 3.0 默认viewtype 为 viewtype.jfinal_template，如果老项目使用的是freemarker模板，并且不希望改变模板类型，需要在 configconstant 方法中通过me.setviewtype(viewtype.free_marker)进行指定，以前已经指定过 viewtype的则不必理会。',charsets:{cjk:!0}},{title:"14.4 baseViewPath",frontmatter:{},regularPath:"/zh/14%20%E5%8D%87%E7%BA%A7JFinal/14.4%20baseViewPath.html",relativePath:"zh/14 升级JFinal/14.4 baseViewPath.md",key:"v-55a5db1e",path:"/zh/14%20%E5%8D%87%E7%BA%A7JFinal/14.4%20baseViewPath.html",lastUpdated:"9/17/2023, 5:25:03 AM",lastUpdatedTimestamp:1694928303e3,headersStr:null,content:'# 14.4 baseViewPath\n\nbaseViewPath 设置由原来的configConstant(…) 方法中转移到了Routes 对象中，并且可以对不同的Routes对象分别设置，如下是示例：\n\npublic class FrontRoutes extends Routes {\n \n  public void config() {\n    setBaseViewPath("/_view");\n \n    add("/", IndexController.class, "/index");\n    add("/project", ProjectController.class);\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n从configConstant(…)转移到configRoute(…)中的好处是可以分别对不同的Routes进行设置，不同模块的baseViewPath很可能不相同，从而可以减少冗余代码。上面的代码示例是用于Routes拆分后的情况，如果你的应用并没有对Routes进行拆分，只需要在configRoute 中如下配置即可：\n\npublic void configRoute(Routes me) {\n   me.setBaseViewPath("/_view");\n \n   me.add("/", IndexController.class);\n}\n\n\n1\n2\n3\n4\n5\n',normalizedContent:'# 14.4 baseviewpath\n\nbaseviewpath 设置由原来的configconstant(…) 方法中转移到了routes 对象中，并且可以对不同的routes对象分别设置，如下是示例：\n\npublic class frontroutes extends routes {\n \n  public void config() {\n    setbaseviewpath("/_view");\n \n    add("/", indexcontroller.class, "/index");\n    add("/project", projectcontroller.class);\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n从configconstant(…)转移到configroute(…)中的好处是可以分别对不同的routes进行设置，不同模块的baseviewpath很可能不相同，从而可以减少冗余代码。上面的代码示例是用于routes拆分后的情况，如果你的应用并没有对routes进行拆分，只需要在configroute 中如下配置即可：\n\npublic void configroute(routes me) {\n   me.setbaseviewpath("/_view");\n \n   me.add("/", indexcontroller.class);\n}\n\n\n1\n2\n3\n4\n5\n',charsets:{cjk:!0}},{title:"14.5 RenderFactory",frontmatter:{},regularPath:"/zh/14%20%E5%8D%87%E7%BA%A7JFinal/14.5%20RenderFactory.html",relativePath:"zh/14 升级JFinal/14.5 RenderFactory.md",key:"v-7934fc13",path:"/zh/14%20%E5%8D%87%E7%BA%A7JFinal/14.5%20RenderFactory.html",lastUpdated:"9/17/2023, 5:25:03 AM",lastUpdatedTimestamp:1694928303e3,headersStr:null,content:"# 14.5 RenderFactory\n\nJFinal 3.0 对 render 模块做了全面重构，抽取出了IRenderFactory接口，而原来的RenderFactory成为了接口的默认实现类，去除了原来的IMainRenderFactory、IErrorRenderFactory、IXmlRenderFactory三个接口，所有对 render 的扩展与定制全部都可以通过继承RenderFactory来实现，3.0版本的render模块可对所有render进行切换与定制，并且扩展方式完全一致。如果老项目对IMainRenderFactory做过扩展，只需要照如下方式进行升级：\n\npublic class MyRenderFactory extends RenderFactory {\n  public Render getRender(String view) {\n     return new MyRender(view);\n  }\n}\n\n\n1\n2\n3\n4\n5\n\n\n同理，如果以前对 IErrorRenderFactory 或者 IXmlRenderFactory 做过扩展的，只需要在上面的MyRenderFactory类中添加上getErrorRender(…) 与 getXmlRender(…) 方法即可。扩展完以后在configConstant 中进行如下配置：\n\npublic void configConstant(Constants me) {\n  me.setRenderFactory(new MyRenderFactory());\n}\n\n\n1\n2\n3\n\n\nJFinal 3.0 对所有render扩展，采取了完全一致的扩展方式，学习成本更低，使用更方便，升级也很方便。此外，原来RenderFactory类中的me() 已经被取消，老项目对此有依赖的只需要将RenderFactory.me() 直接改为RenderManager.me().getRenderFactory() 即可。",normalizedContent:"# 14.5 renderfactory\n\njfinal 3.0 对 render 模块做了全面重构，抽取出了irenderfactory接口，而原来的renderfactory成为了接口的默认实现类，去除了原来的imainrenderfactory、ierrorrenderfactory、ixmlrenderfactory三个接口，所有对 render 的扩展与定制全部都可以通过继承renderfactory来实现，3.0版本的render模块可对所有render进行切换与定制，并且扩展方式完全一致。如果老项目对imainrenderfactory做过扩展，只需要照如下方式进行升级：\n\npublic class myrenderfactory extends renderfactory {\n  public render getrender(string view) {\n     return new myrender(view);\n  }\n}\n\n\n1\n2\n3\n4\n5\n\n\n同理，如果以前对 ierrorrenderfactory 或者 ixmlrenderfactory 做过扩展的，只需要在上面的myrenderfactory类中添加上geterrorrender(…) 与 getxmlrender(…) 方法即可。扩展完以后在configconstant 中进行如下配置：\n\npublic void configconstant(constants me) {\n  me.setrenderfactory(new myrenderfactory());\n}\n\n\n1\n2\n3\n\n\njfinal 3.0 对所有render扩展，采取了完全一致的扩展方式，学习成本更低，使用更方便，升级也很方便。此外，原来renderfactory类中的me() 已经被取消，老项目对此有依赖的只需要将renderfactory.me() 直接改为rendermanager.me().getrenderfactory() 即可。",charsets:{cjk:!0}},{title:"14.6 其它",frontmatter:{},regularPath:"/zh/14%20%E5%8D%87%E7%BA%A7JFinal/14.6%20%E5%85%B6%E5%AE%83.html",relativePath:"zh/14 升级JFinal/14.6 其它.md",key:"v-0ea52584",path:"/zh/14%20%E5%8D%87%E7%BA%A7JFinal/14.6%20%E5%85%B6%E5%AE%83.html",lastUpdated:"9/17/2023, 5:25:03 AM",lastUpdatedTimestamp:1694928303e3,headersStr:null,content:"# 14.6 其它\n\nRet.put(…).put(…)这种链式用法，需要改成Ret.set(…).set(…)，因为Ret改为继承自HashMap，为了避免与HashMap.put(…)相冲突。Ret.get(…)方法返回泛型值的场景改为Ret.getAs(…)。\n\nconfigConstant(…) 的Constants 参数中的setFreeMarkerExtension、setVelocityExtension 方法统一改为使用setViewExtension方法。setMainRenderFactory、setErrorRenderFactory被setRenderFactory取代。\n\nrenderXml(…)方法依赖的XmlRender由原来Freemarker语法实现改成了由JFinal Template Engine实现，用到renderXml(…)的项目需要修改模板内容。\n\nJFinal 官方QQ群: 用”jfinal”关键字搜索QQ群\n\n强烈建议加入 JFinal 俱乐部，获取JFinal最佳实践项目源代码 jfinal-club，以最快的速度、最轻松的方式掌握最简洁的用法，省去看文档的时间：http://www.jfinal.com/club",normalizedContent:"# 14.6 其它\n\nret.put(…).put(…)这种链式用法，需要改成ret.set(…).set(…)，因为ret改为继承自hashmap，为了避免与hashmap.put(…)相冲突。ret.get(…)方法返回泛型值的场景改为ret.getas(…)。\n\nconfigconstant(…) 的constants 参数中的setfreemarkerextension、setvelocityextension 方法统一改为使用setviewextension方法。setmainrenderfactory、seterrorrenderfactory被setrenderfactory取代。\n\nrenderxml(…)方法依赖的xmlrender由原来freemarker语法实现改成了由jfinal template engine实现，用到renderxml(…)的项目需要修改模板内容。\n\njfinal 官方qq群: 用”jfinal”关键字搜索qq群\n\n强烈建议加入 jfinal 俱乐部，获取jfinal最佳实践项目源代码 jfinal-club，以最快的速度、最轻松的方式掌握最简洁的用法，省去看文档的时间：http://www.jfinal.com/club",charsets:{cjk:!0}},{title:"1.9 IDEA下开发",frontmatter:{},regularPath:"/zh/1%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/1.9%20IDEA%E4%B8%8B%E5%BC%80%E5%8F%91.html",relativePath:"zh/1 快速上手/1.9 IDEA下开发.md",key:"v-74ddc929",path:"/zh/1%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/1.9%20IDEA%E4%B8%8B%E5%BC%80%E5%8F%91.html",headers:[{level:3,title:"1､热加载",slug:"_1、热加载",normalizedTitle:"1､热加载",charIndex:18},{level:3,title:"2、多模块",slug:"_2、多模块",normalizedTitle:"2、多模块",charIndex:480},{level:3,title:"3、IDEA 下模板文件路径不正确",slug:"_3、idea-下模板文件路径不正确",normalizedTitle:"3、idea 下模板文件路径不正确",charIndex:580}],lastUpdated:"9/8/2023, 9:00:03 AM",lastUpdatedTimestamp:1694163603e3,headersStr:"1､热加载 2、多模块 3、IDEA 下模板文件路径不正确",content:"# 1.9 IDEA下开发\n\n\n# 1､热加载\n\n由于 jfinal-undertow 与 jetty-server 的热加载都是通过监控 class 文件是否被更新而触发的，但 IDEA 默认不支持自动编译，所以其 class 文件在开发过程中不会被更新。因此，在 IDEA 下默认不支持热加载，可以在网上找一找开启 IDEA 自动编译的配置来支持，下面给出几个这类资源：\n\nhttps://jfinal.com/share/2541\n\nhttps://jfinal.com/share/2434\n\nhttps://my.oschina.net/fdblog/blog/172229\n\nhttps://jfinal.com/share/1357\n\n也可以使用Shift + F9的快捷键启动，在修改代码后，再使用Ctrl + F5的方式重启，此方式比用传统的 maven jetty plugin要快速，注意使用 Ctrl + F5重启前需要使用Alt + 5 将焦点转向debug窗。IDEA下开发尽量使用快捷键，避免使用鼠标，将极大提升开发率。\n\n\n# 2、多模块\n\n在 jfinal undertow 之下使用 maven 多模块开发，有跨模块加载资源的需求，可以参考这里：\n\nhttp://www.jfinal.com/share/1285\n\n\n# 3、IDEA 下模板文件路径不正确\n\n详见：https://jfinal.com/doc/1-5",normalizedContent:"# 1.9 idea下开发\n\n\n# 1､热加载\n\n由于 jfinal-undertow 与 jetty-server 的热加载都是通过监控 class 文件是否被更新而触发的，但 idea 默认不支持自动编译，所以其 class 文件在开发过程中不会被更新。因此，在 idea 下默认不支持热加载，可以在网上找一找开启 idea 自动编译的配置来支持，下面给出几个这类资源：\n\nhttps://jfinal.com/share/2541\n\nhttps://jfinal.com/share/2434\n\nhttps://my.oschina.net/fdblog/blog/172229\n\nhttps://jfinal.com/share/1357\n\n也可以使用shift + f9的快捷键启动，在修改代码后，再使用ctrl + f5的方式重启，此方式比用传统的 maven jetty plugin要快速，注意使用 ctrl + f5重启前需要使用alt + 5 将焦点转向debug窗。idea下开发尽量使用快捷键，避免使用鼠标，将极大提升开发率。\n\n\n# 2、多模块\n\n在 jfinal undertow 之下使用 maven 多模块开发，有跨模块加载资源的需求，可以参考这里：\n\nhttp://www.jfinal.com/share/1285\n\n\n# 3、idea 下模板文件路径不正确\n\n详见：https://jfinal.com/doc/1-5",charsets:{cjk:!0}},{title:"2.1 概述",frontmatter:{},regularPath:"/zh/2%20JFinalConfig/2.1%20%E6%A6%82%E8%BF%B0.html",relativePath:"zh/2 JFinalConfig/2.1 概述.md",key:"v-069efee4",path:"/zh/2%20JFinalConfig/2.1%20%E6%A6%82%E8%BF%B0.html",lastUpdated:"9/8/2023, 9:00:03 AM",lastUpdatedTimestamp:1694163603e3,headersStr:null,content:"# 2.1 概述\n\n基于JFinal的web项目需要创建一个继承自JFinalConfig类的子类，该类用于对整个web项目进行配置。\n\nJFinalConfig子类需要实现六个抽象方法，如下所示：\n\npublic class DemoConfig extends JFinalConfig {\n    public void configConstant(Constants me) {}\n    public void configRoute(Routes me) {}\n    public void configEngine(Engine me) {}\n    public void configPlugin(Plugins me) {}\n    public void configInterceptor(Interceptors me) {}\n    public void configHandler(Handlers me) {}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n",normalizedContent:"# 2.1 概述\n\n基于jfinal的web项目需要创建一个继承自jfinalconfig类的子类，该类用于对整个web项目进行配置。\n\njfinalconfig子类需要实现六个抽象方法，如下所示：\n\npublic class democonfig extends jfinalconfig {\n    public void configconstant(constants me) {}\n    public void configroute(routes me) {}\n    public void configengine(engine me) {}\n    public void configplugin(plugins me) {}\n    public void configinterceptor(interceptors me) {}\n    public void confighandler(handlers me) {}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n",charsets:{cjk:!0}},{title:"2.2 configConstant",frontmatter:{},regularPath:"/zh/2%20JFinalConfig/2.2%20configConstant.html",relativePath:"zh/2 JFinalConfig/2.2 configConstant.md",key:"v-5d51c12f",path:"/zh/2%20JFinalConfig/2.2%20configConstant.html",headers:[{level:3,title:"1､常用配置",slug:"_1、常用配置",normalizedTitle:"1､常用配置",charIndex:25}],lastUpdated:"9/8/2023, 9:00:03 AM",lastUpdatedTimestamp:1694163603e3,headersStr:"1､常用配置",content:'# 2.2 configConstant\n\n\n# 1､常用配置\n\n此方法用来配置JFinal常量值，如开发模式常量devMode的配置，如下代码是一些常用的配置：\n\npublic void configConstant(Constants me) {\n    // 配置开发模式，true 值为开发模式\n    me.setDevMode(true);\n    \n    // 配置 aop 代理使用 cglib，否则将使用 jfinal 默认的动态编译代理方案\n    me.setToCglibProxyFactory();\n    \n    // 配置依赖注入\n    me.setInjectDependency(true);\n    \n    // 配置依赖注入时，是否对被注入类的超类进行注入\n    me.setInjectSuperClass(false);\n    \n    // 配置为 slf4j 日志系统，否则默认将使用 log4j\n    // 还可以通过 me.setLogFactory(...) 配置为自行扩展的日志系统实现类\n    me.setToSlf4jLogFactory();\n    \n    // 设置 Json 转换工厂实现类，更多说明见第 12 章\n    me.setJsonFactory(new MixedJsonFactory());\n    \n    // 配置视图类型，默认使用 jfinal enjoy 模板引擎\n    me.setViewType(ViewType.JFINAL_TEMPLATE);\n    \n    // 配置基础下载路径，默认为 webapp 下的 download\n    me.setBaseDownloadPath(...);\n    \n    // 配置基础上传路径，默认为 webapp 下的 upload\n    me.setBaseUploadPath(...);\n    \n    // 配置 404、500 页面\n    me.setError404View("/common/404.html");\n    me.setError500View("/common/500.html");\n    \n    // 开启解析 json 请求，5.0.0 版本新增功能\n    me.setResolveJsonRequest(true);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n\n\n在开发模式下，JFinal会对每次请求输出报告，如输出本次请求的URL、Controller、Method以及请求所携带的参数。\n\n2､其它配置 其它配置：\n\npublic void configConstant(Constants me) {\n    // 配置 encoding，默认为 UTF8\n    me.setEncoding("UTF8");\n    \n    // 配置 json 转换 Date 类型时使用的 data parttern\n    me.setJsonDatePattern("yyyy-MM-dd HH:mm");\n    \n    // 配置是否拒绝访问 JSP，是指直接访问 .jsp 文件，与 renderJsp(xxx.jsp) 无关\n    me.setDenyAccessJsp(true);\n    \n    // 配置上传文件最大数据量，默认 10M\n    me.setMaxPostSize(10 * 1024 * 1024);\n    \n    // 配置验证码缓存 cache，配置成集中共享缓存可以支持分布式与集群\n    me.setCaptchaCache(...);\n    \n    // 配置 urlPara 参数分隔字符，默认为 "-"\n    me.setUrlParaSeparator("-");\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n',normalizedContent:'# 2.2 configconstant\n\n\n# 1､常用配置\n\n此方法用来配置jfinal常量值，如开发模式常量devmode的配置，如下代码是一些常用的配置：\n\npublic void configconstant(constants me) {\n    // 配置开发模式，true 值为开发模式\n    me.setdevmode(true);\n    \n    // 配置 aop 代理使用 cglib，否则将使用 jfinal 默认的动态编译代理方案\n    me.settocglibproxyfactory();\n    \n    // 配置依赖注入\n    me.setinjectdependency(true);\n    \n    // 配置依赖注入时，是否对被注入类的超类进行注入\n    me.setinjectsuperclass(false);\n    \n    // 配置为 slf4j 日志系统，否则默认将使用 log4j\n    // 还可以通过 me.setlogfactory(...) 配置为自行扩展的日志系统实现类\n    me.settoslf4jlogfactory();\n    \n    // 设置 json 转换工厂实现类，更多说明见第 12 章\n    me.setjsonfactory(new mixedjsonfactory());\n    \n    // 配置视图类型，默认使用 jfinal enjoy 模板引擎\n    me.setviewtype(viewtype.jfinal_template);\n    \n    // 配置基础下载路径，默认为 webapp 下的 download\n    me.setbasedownloadpath(...);\n    \n    // 配置基础上传路径，默认为 webapp 下的 upload\n    me.setbaseuploadpath(...);\n    \n    // 配置 404、500 页面\n    me.seterror404view("/common/404.html");\n    me.seterror500view("/common/500.html");\n    \n    // 开启解析 json 请求，5.0.0 版本新增功能\n    me.setresolvejsonrequest(true);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n\n\n在开发模式下，jfinal会对每次请求输出报告，如输出本次请求的url、controller、method以及请求所携带的参数。\n\n2､其它配置 其它配置：\n\npublic void configconstant(constants me) {\n    // 配置 encoding，默认为 utf8\n    me.setencoding("utf8");\n    \n    // 配置 json 转换 date 类型时使用的 data parttern\n    me.setjsondatepattern("yyyy-mm-dd hh:mm");\n    \n    // 配置是否拒绝访问 jsp，是指直接访问 .jsp 文件，与 renderjsp(xxx.jsp) 无关\n    me.setdenyaccessjsp(true);\n    \n    // 配置上传文件最大数据量，默认 10m\n    me.setmaxpostsize(10 * 1024 * 1024);\n    \n    // 配置验证码缓存 cache，配置成集中共享缓存可以支持分布式与集群\n    me.setcaptchacache(...);\n    \n    // 配置 urlpara 参数分隔字符，默认为 "-"\n    me.seturlparaseparator("-");\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n',charsets:{cjk:!0}},{title:"2.4 configEngine",frontmatter:{},regularPath:"/zh/2%20JFinalConfig/2.4%20configEngine.html",relativePath:"zh/2 JFinalConfig/2.4 configEngine.md",key:"v-02524af7",path:"/zh/2%20JFinalConfig/2.4%20configEngine.html",lastUpdated:"9/8/2023, 9:00:48 AM",lastUpdatedTimestamp:1694163648e3,headersStr:null,content:'# 2.4 configEngine\n\n此方法用来配置Template Engine，以下是代码示例：\n\npublic void configEngine(Engine me) {\n    me.addSharedFunction("/view/common/layout.html");\n    me.addSharedFunction("/view/common/paginate.html");\n    me.addSharedFunction("/view/admin/common/layout.html");\n}\n\n\n1\n2\n3\n4\n5\n\n\n上面的方法向模板引擎中添加了三个定义了 template function 的模板文件，更详细的介绍详见 Template Engine 那一章节的内容。\n\n注意：me.setToClassPathSourceFactory()、me.setBaseTemplatePath(...)、me.setDevMode(...) 这三个配置要放在最前面，因为后续的 me.addSharedFunction(...) 等配置对前面三个配置有依赖。\n\njfinal 4.9.02 新增配置，可支持中文表达式、变量名、方法名、模板函数名：\n\nEngine.setChineseExpression(true);\n\n\n1\n\n\n注意该配置要放在 addSharedTemplateFunction(...) 与 addSqlTemplate(...) 之前，以免生效时机太晚。该配置为全局配置，对所有 Engine 都有效。',normalizedContent:'# 2.4 configengine\n\n此方法用来配置template engine，以下是代码示例：\n\npublic void configengine(engine me) {\n    me.addsharedfunction("/view/common/layout.html");\n    me.addsharedfunction("/view/common/paginate.html");\n    me.addsharedfunction("/view/admin/common/layout.html");\n}\n\n\n1\n2\n3\n4\n5\n\n\n上面的方法向模板引擎中添加了三个定义了 template function 的模板文件，更详细的介绍详见 template engine 那一章节的内容。\n\n注意：me.settoclasspathsourcefactory()、me.setbasetemplatepath(...)、me.setdevmode(...) 这三个配置要放在最前面，因为后续的 me.addsharedfunction(...) 等配置对前面三个配置有依赖。\n\njfinal 4.9.02 新增配置，可支持中文表达式、变量名、方法名、模板函数名：\n\nengine.setchineseexpression(true);\n\n\n1\n\n\n注意该配置要放在 addsharedtemplatefunction(...) 与 addsqltemplate(...) 之前，以免生效时机太晚。该配置为全局配置，对所有 engine 都有效。',charsets:{cjk:!0}},{title:"2.3 configRoute",frontmatter:{},regularPath:"/zh/2%20JFinalConfig/2.3%20configRoute.html",relativePath:"zh/2 JFinalConfig/2.3 configRoute.md",key:"v-03977a47",path:"/zh/2%20JFinalConfig/2.3%20configRoute.html",headers:[{level:3,title:"1、常用配置",slug:"_1、常用配置",normalizedTitle:"1、常用配置",charIndex:22},{level:3,title:"2、路由扫描（jfinal 4.9.03 新增功能）",slug:"_2、路由扫描-jfinal-4-9-03-新增功能",normalizedTitle:"2、路由扫描（jfinal 4.9.03 新增功能）",charIndex:1092},{level:3,title:"3、手工配置路由",slug:"_3、手工配置路由",normalizedTitle:"3、手工配置路由",charIndex:3759},{level:3,title:"4、极简路由规则",slug:"_4、极简路由规则",normalizedTitle:"4、极简路由规则",charIndex:4259},{level:3,title:"5、路由拆分、模块化",slug:"_5、路由拆分、模块化",normalizedTitle:"5、路由拆分、模块化",charIndex:5515},{level:3,title:"6､控制器父类中的action映射",slug:"_6、控制器父类中的action映射",normalizedTitle:"6､控制器父类中的action映射",charIndex:7009}],lastUpdated:"9/8/2023, 9:00:03 AM",lastUpdatedTimestamp:1694163603e3,headersStr:"1、常用配置 2、路由扫描（jfinal 4.9.03 新增功能） 3、手工配置路由 4、极简路由规则 5、路由拆分、模块化 6､控制器父类中的action映射",content:'# 2.3 configRoute\n\n\n# 1、常用配置\n\n此方法用来配置访问路由，如下代码配置了将 "/hello" 映射到HelloController这个控制器，通过以下的配置，http://localhost/hello 将访问 HelloController.index() 方法，而http://localhost/hello/methodName 将访问到 HelloController.methodName() 方法。\n\npublic void configRoute(Routes me) {\n    // 如果要将控制器超类中的 public 方法映射为 action 配置成 true，一般不用配置\n    me.setMappingSuperClass(false);\n    \n    // 配置 baseViewPath，可以让 render(...) 参数省去 baseViewPath 这部分前缀\n    me.setBaseViewPath("/view");\n    \n    // 配置作用于该 Routes 对象内配置的所有 Controller 的拦截器\n    me.addInterceptor(new FrontInterceptor());\n    \n    // 路由扫描，jfinal 4.9.03 新增功能。参数 "com.xxx." 表示扫描被限定的包名，\n    // 扫描仅会在该包以及该包的子包下进行\n    me.scan("com.xxx.");\n    \n    // 手工添加路由。注意：使用了路由扫描就不要再使用手工添加路由，两者选其一\n    me.add("/hello", HelloController.class);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\nRoutes.setBaseViewPath(baseViewPath) 方法用于为该 Routes 内部的所有 Controller 设置视图渲染时的基础路径，该基础路径与Routes.add(…, viewPath) 方法传入的viewPath以及 Controller.render(view) 方法传入的 view 参数联合组成最终的视图路径，规则如下：\n\nfinalView = baseViewPath + viewPath + view\n\n\n1\n\n\n注意：当view以 “/” 字符打头时表示绝对路径，baseViewPath 与 viewPath 将被忽略。\n\n\n# 2、路由扫描（jfinal 4.9.03 新增功能）\n\njfinal 4.9.03 新增了路由扫描功能，扫描功能需要在 Controller 声明之处使用 @Path 注解，例如：\n\n@Path("/project")\npublic class ProjectController extends Controller {\n   ...\n}\n \n// 以下用法为 controller 配置了 viewPath\n@Path(value="/", viewPath="/index")\npublic class IndexController extends Controller {\n   ...\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n@Path 注解可以配置 controllerPath 与 viewPath 两个参数，当 viewPath 省略时默认与第一个参数值相同。上例中的两个 Controller，第一个只配置了 controllerPath，第二个还配置了 viewPath。\n\n快速掌握：对于已经熟悉了 jfinal 手工注册路由的同学来说，@Path 注解的两个参数完全等价于 Routes.add(controllerPath, controllerClass, viewPath) 方法中的第一与第三个参数。\n\n使用了 @Path 注解以后，通过如下简单配置即可开启路由扫描功能：\n\npublic void configRoute(Routes me) {\n   me.scan("com.xxx.");\n}\n\n\n1\n2\n3\n\n\n通过 scan(...) 方法即开启了路由扫描功能，以上代码中的参数 "com.xxx." 表示扫描被限定在 "com.xxx." 包以及子包下面，其它地方不被扫描。\n\n如果需要对路由进行分类拆分，并且需要分类进行 baseViewPath 配置，以及分类进行 Routes 级别的拦截器配置，可以参考 jfinal 俱乐部项目中使用的如下配置：\n\npublic void configRoute(Routes me) {\n   /**\n    * 扫描后台路由\n    */\n   me.add(new Routes() {\n      public void config() {\n         // 添加后台管理拦截器，将拦截在此方法中注册的所有 Controller\n         this.addInterceptor(new AdminAuthInterceptor());\n         this.addInterceptor(new PjaxInterceptor());\n         \t\t\t\n         this.setBaseViewPath("/_view/_admin");\n\t\t\t\t\n         // 如果被扫描的包在 jar 文件之中，需要添加如下配置：\n         // undertow.hotSwapClassPrefix = com.jfinal.club._admin.\n         this.scan("com.jfinal.club._admin.");\n      }\n   });\n   \t\t\n   /**\n    * 扫描前台路由\n    * \n    * 注意：\n    * 1：scan(...) 方法要添加 skip 参数，跳过后台路由，否则后台路由会被扫描到，\n    *    造成 baseViewPath 以及 routes 级别的拦截器配置错误\n    *    \n    * 2: 由于 scan(...) 内部避免了重复扫描同一个类，所以需要将扫描前台路由代码\n    *    放在扫描后台路由之前才能验证没有 skip 参数造成的后果\n    */\n   me.add(new Routes() {\n      public void config() {\n         this.setBaseViewPath("/_view");\n      \t\t\t\n         // 如果被扫描的包在 jar 文件之中，需要添加如下配置：\n         // undertow.hotSwapClassPrefix = com.jfinal.club.\n         this.scan("com.jfinal.club.", className -> {\n            // className 为当前正扫描的类名，返回 true 时表示跳过当前类不扫描\n            return className.startsWith("com.jfinal.club._admin.");\n         });\n      }\n   });\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n\n\n以上配置分别创建了两个拆分的 Routes，并分别对其配置了 setBaseViewPath，后台路由还配置了 Routes 级别的拦截器，最后分别对 scan(...) 扫描方法限定了扫描范围。\n\n以上配置的关键是第一个 scan("com.jfinal.club._admin.") 的参数包含了 "._admin." 这个包路径，所以扫描范围被限定为只扫描后台管理部分的路由。而第二个 scan("com.jfinal.club.", skip) 的第一个参数虽然会同时扫描到前台与后台管理的路由，但是第二个参数 skip 跳过了后台控管理那部分的路由。\n\n常见问题：当被扫描路由在 jar 包之中，如果路由扫描不成功，需要将 scan(basePackage) 中的 basePackage 参数配置在 undertow.txt 中（未使用 undertow 不必关心该问题），需要配置的变量为 undertow.hotSwapClassPrefix，例如：\n\nundertow.hotSwapClassPrefix = com.jfinal.blog.admin.\n\n\n1\n\n\n该情况只可能出现在开发时，部署环境无需关心。\n\n\n# 3、手工配置路由\n\nRoutes 类中添加路由的方法有两个：\n\npublic Routes add(String controllerPath, Class<? extends Controller> controllerClass, String viewPath)\npublic Routes add(String controllerPath, Class<? extends Controller> controllerClass)\n\n\n1\n2\n\n\n第一个参数 controllerPath 是指访问某个 Controller 所需要的一个字符串，从 jfinal 4.9.03 版本开始，多个 controller 可以配置相同的 controllerPath。\n\n第二个参数 controllerClass 是该 controllerPath 所对应到的 Controller 。\n\n第三个参数viewPath是指该Controller返回的视图的相对路径(该参数具体细节将在Controller相关章节中给出)。当viewPath未指定时默认值为controllerPath。\n\n\n# 4、极简路由规则\n\nJFinal 仅有四种路由，路由规则如\n\n * url组成 controllerKey 访问目标 YourController.index()\n * url组成 controllerKey/method 访问目标 YourController.method()\n * url组成 controllerKey/method/v0-v1 访问目标 YourController.method() 所带的url参数值为:v0-v1\n * url组成 controllerKey/v0-v1 访问目标 YourController.index() 所带的url参数值为:v0-v1\n\n变更：从 jfinal 4.9.03 版本开始，controllerKey 改名为 controllerPath，多个 controller 可以共享同一个 controllerPath。\n\n从表中可以看出，JFinal 访问一个确切的 Action(Action定义见3.2节) 需要使用 controllerPath 与 method 来精确定位，当 method 省略时默认值为 index。\n\nurlPara是为了能在url中携带参数值，urlPara可以在一次请求中同时携带多个值，JFinal默认使用减号“-”来分隔多个值（可通过constants. setUrlParaSeparator(String)设置分隔符），在 Controller 中可以通过 getPara(int index) 分别取出这些值。controllerPath、method、urlPara 这三部分必须使用正斜杠“/”分隔。\n\n注意，controllerPath 自身也可以包含正斜杠“/”，如“/admin/article”，这样实质上实现了struts2的namespace功能。\n\nJFinal在以上路由规则之外还提供了ActionKey注解，可以打破原有规则，以下是代码示例：\n\npublic class UserController extends Controller {\n    @ActionKey("/login")\n    public void login() {\n       render("login.html");\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n假定 UserController 的 controllerPath 值为“/user”，在使用了 @ActionKey(“/login”) 注解以后，actionKey 由原来的 “/user/login” 变为了“/login”。该注解还可以让actionKey中使用减号或数字等字符，如“/user/123-456”。\n\n如果 JFinal 默认路由规则不能满足需求，开发者还可以根据需要使用Handler定制更加个性化的路由，大体思路就是在 Handler 中改变第一个参数 String target 的值。\n\n\n# 5、路由拆分、模块化\n\nJFinal路由还可以进行拆分配置，这对大规模团队开发十分有用，以下是代码示例：\n\npublic class FrontRoutes extends Routes {\n    public void config() {\n       setBaseViewPath("/view/front");\n       add("/", IndexController.class);\n       add("/blog", BlogController.class);\n    }\n}\npublic class AdminRoutes extends Routes {\n    public void config() {\n       setBaseViewPath("/view/admin");\n       addInterceptor(new AdminInterceptor());\n       add("/admin", AdminController.class);\n       add("/admin/user", UserController.class);\n    }\n}\npublic class MyJFinalConfig extends JFinalConfig {\n    public void configRoute(Routes me) {\n       me.add(new FrontRoutes());  // 前台路由\n       me.add(new AdminRoutes());  // 后台路由\n    }\n    \n    public void configConstant(Constants me) {}\n    public void configEngine(Engine me) {}\n    public void configPlugin(Plugins me) {}\n    public void configInterceptor(Interceptors me) {}\n    public void configHandler(Handlers me) {}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\n如上三段代码，FrontRoutes 类中配置了系统前台路由，AdminRoutes 配置了系统后台路由，MyJFinalConfig.configRoute(…)方法将拆分后的这两个路由合并起来。使用这种拆分配置不仅可以让MyJFinalConfig文件更简洁，而且有利于大规模团队开发，避免多人同时修改MyJFinalConfig时的版本冲突。\n\nFrontRoutes 与 AdminRoutes 中分别使用 setBaseViewPath(…) 设置了各自 Controller.render(view) 时使用的 baseViewPath。\n\nAdminRoutes 还通过 addInterceptor(new AdminInterceptor()) 添加了 Routes 级别的拦截器，该拦截器将拦截 AdminRoutes 中添加的所有 Controller，会在 class 拦截器之前被调用。这种用法可以避免在后台管理这样的模块中的所有 class 上使用@Before(AdminInterceptor.class)，减少代码冗余。\n\n\n# 6､控制器父类中的action映射\n\njfinal 3.6 新增了如下配置方法：\n\npublic void configRoute(Routes me) {\n  me.setMappingSuperClass(false);\n}\n\n\n1\n2\n3\n\n\n该方法用于配置是否要将控制器父类中的 public 方法映射成 action。默认配置为 false，也即父类中的所有方法都不会成为 action。\n\n注意：由于该配置是 3.6 版才引入，所以老版本 jfinal 项目升级时，如果控制器父类中存在 action 的需要开启这个配置为 true。因为 MsgController 中的 index() 需要被映射成 action 才能正常分发微信服务端的消息。\n\n引入该配置本质是一个性能优化。可以加快项目启动速度。如果 Routes 被拆分成了多个子 Routes，建议在需要该配置的子 Routes 中进行配置，因为该配置可以在子 Routes 内独立生效，其它没有该配置的 Routes 仍然可以使用到该性能优化，',normalizedContent:'# 2.3 configroute\n\n\n# 1、常用配置\n\n此方法用来配置访问路由，如下代码配置了将 "/hello" 映射到hellocontroller这个控制器，通过以下的配置，http://localhost/hello 将访问 hellocontroller.index() 方法，而http://localhost/hello/methodname 将访问到 hellocontroller.methodname() 方法。\n\npublic void configroute(routes me) {\n    // 如果要将控制器超类中的 public 方法映射为 action 配置成 true，一般不用配置\n    me.setmappingsuperclass(false);\n    \n    // 配置 baseviewpath，可以让 render(...) 参数省去 baseviewpath 这部分前缀\n    me.setbaseviewpath("/view");\n    \n    // 配置作用于该 routes 对象内配置的所有 controller 的拦截器\n    me.addinterceptor(new frontinterceptor());\n    \n    // 路由扫描，jfinal 4.9.03 新增功能。参数 "com.xxx." 表示扫描被限定的包名，\n    // 扫描仅会在该包以及该包的子包下进行\n    me.scan("com.xxx.");\n    \n    // 手工添加路由。注意：使用了路由扫描就不要再使用手工添加路由，两者选其一\n    me.add("/hello", hellocontroller.class);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\nroutes.setbaseviewpath(baseviewpath) 方法用于为该 routes 内部的所有 controller 设置视图渲染时的基础路径，该基础路径与routes.add(…, viewpath) 方法传入的viewpath以及 controller.render(view) 方法传入的 view 参数联合组成最终的视图路径，规则如下：\n\nfinalview = baseviewpath + viewpath + view\n\n\n1\n\n\n注意：当view以 “/” 字符打头时表示绝对路径，baseviewpath 与 viewpath 将被忽略。\n\n\n# 2、路由扫描（jfinal 4.9.03 新增功能）\n\njfinal 4.9.03 新增了路由扫描功能，扫描功能需要在 controller 声明之处使用 @path 注解，例如：\n\n@path("/project")\npublic class projectcontroller extends controller {\n   ...\n}\n \n// 以下用法为 controller 配置了 viewpath\n@path(value="/", viewpath="/index")\npublic class indexcontroller extends controller {\n   ...\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n@path 注解可以配置 controllerpath 与 viewpath 两个参数，当 viewpath 省略时默认与第一个参数值相同。上例中的两个 controller，第一个只配置了 controllerpath，第二个还配置了 viewpath。\n\n快速掌握：对于已经熟悉了 jfinal 手工注册路由的同学来说，@path 注解的两个参数完全等价于 routes.add(controllerpath, controllerclass, viewpath) 方法中的第一与第三个参数。\n\n使用了 @path 注解以后，通过如下简单配置即可开启路由扫描功能：\n\npublic void configroute(routes me) {\n   me.scan("com.xxx.");\n}\n\n\n1\n2\n3\n\n\n通过 scan(...) 方法即开启了路由扫描功能，以上代码中的参数 "com.xxx." 表示扫描被限定在 "com.xxx." 包以及子包下面，其它地方不被扫描。\n\n如果需要对路由进行分类拆分，并且需要分类进行 baseviewpath 配置，以及分类进行 routes 级别的拦截器配置，可以参考 jfinal 俱乐部项目中使用的如下配置：\n\npublic void configroute(routes me) {\n   /**\n    * 扫描后台路由\n    */\n   me.add(new routes() {\n      public void config() {\n         // 添加后台管理拦截器，将拦截在此方法中注册的所有 controller\n         this.addinterceptor(new adminauthinterceptor());\n         this.addinterceptor(new pjaxinterceptor());\n         \t\t\t\n         this.setbaseviewpath("/_view/_admin");\n\t\t\t\t\n         // 如果被扫描的包在 jar 文件之中，需要添加如下配置：\n         // undertow.hotswapclassprefix = com.jfinal.club._admin.\n         this.scan("com.jfinal.club._admin.");\n      }\n   });\n   \t\t\n   /**\n    * 扫描前台路由\n    * \n    * 注意：\n    * 1：scan(...) 方法要添加 skip 参数，跳过后台路由，否则后台路由会被扫描到，\n    *    造成 baseviewpath 以及 routes 级别的拦截器配置错误\n    *    \n    * 2: 由于 scan(...) 内部避免了重复扫描同一个类，所以需要将扫描前台路由代码\n    *    放在扫描后台路由之前才能验证没有 skip 参数造成的后果\n    */\n   me.add(new routes() {\n      public void config() {\n         this.setbaseviewpath("/_view");\n      \t\t\t\n         // 如果被扫描的包在 jar 文件之中，需要添加如下配置：\n         // undertow.hotswapclassprefix = com.jfinal.club.\n         this.scan("com.jfinal.club.", classname -> {\n            // classname 为当前正扫描的类名，返回 true 时表示跳过当前类不扫描\n            return classname.startswith("com.jfinal.club._admin.");\n         });\n      }\n   });\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n\n\n以上配置分别创建了两个拆分的 routes，并分别对其配置了 setbaseviewpath，后台路由还配置了 routes 级别的拦截器，最后分别对 scan(...) 扫描方法限定了扫描范围。\n\n以上配置的关键是第一个 scan("com.jfinal.club._admin.") 的参数包含了 "._admin." 这个包路径，所以扫描范围被限定为只扫描后台管理部分的路由。而第二个 scan("com.jfinal.club.", skip) 的第一个参数虽然会同时扫描到前台与后台管理的路由，但是第二个参数 skip 跳过了后台控管理那部分的路由。\n\n常见问题：当被扫描路由在 jar 包之中，如果路由扫描不成功，需要将 scan(basepackage) 中的 basepackage 参数配置在 undertow.txt 中（未使用 undertow 不必关心该问题），需要配置的变量为 undertow.hotswapclassprefix，例如：\n\nundertow.hotswapclassprefix = com.jfinal.blog.admin.\n\n\n1\n\n\n该情况只可能出现在开发时，部署环境无需关心。\n\n\n# 3、手工配置路由\n\nroutes 类中添加路由的方法有两个：\n\npublic routes add(string controllerpath, class<? extends controller> controllerclass, string viewpath)\npublic routes add(string controllerpath, class<? extends controller> controllerclass)\n\n\n1\n2\n\n\n第一个参数 controllerpath 是指访问某个 controller 所需要的一个字符串，从 jfinal 4.9.03 版本开始，多个 controller 可以配置相同的 controllerpath。\n\n第二个参数 controllerclass 是该 controllerpath 所对应到的 controller 。\n\n第三个参数viewpath是指该controller返回的视图的相对路径(该参数具体细节将在controller相关章节中给出)。当viewpath未指定时默认值为controllerpath。\n\n\n# 4、极简路由规则\n\njfinal 仅有四种路由，路由规则如\n\n * url组成 controllerkey 访问目标 yourcontroller.index()\n * url组成 controllerkey/method 访问目标 yourcontroller.method()\n * url组成 controllerkey/method/v0-v1 访问目标 yourcontroller.method() 所带的url参数值为:v0-v1\n * url组成 controllerkey/v0-v1 访问目标 yourcontroller.index() 所带的url参数值为:v0-v1\n\n变更：从 jfinal 4.9.03 版本开始，controllerkey 改名为 controllerpath，多个 controller 可以共享同一个 controllerpath。\n\n从表中可以看出，jfinal 访问一个确切的 action(action定义见3.2节) 需要使用 controllerpath 与 method 来精确定位，当 method 省略时默认值为 index。\n\nurlpara是为了能在url中携带参数值，urlpara可以在一次请求中同时携带多个值，jfinal默认使用减号“-”来分隔多个值（可通过constants. seturlparaseparator(string)设置分隔符），在 controller 中可以通过 getpara(int index) 分别取出这些值。controllerpath、method、urlpara 这三部分必须使用正斜杠“/”分隔。\n\n注意，controllerpath 自身也可以包含正斜杠“/”，如“/admin/article”，这样实质上实现了struts2的namespace功能。\n\njfinal在以上路由规则之外还提供了actionkey注解，可以打破原有规则，以下是代码示例：\n\npublic class usercontroller extends controller {\n    @actionkey("/login")\n    public void login() {\n       render("login.html");\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n假定 usercontroller 的 controllerpath 值为“/user”，在使用了 @actionkey(“/login”) 注解以后，actionkey 由原来的 “/user/login” 变为了“/login”。该注解还可以让actionkey中使用减号或数字等字符，如“/user/123-456”。\n\n如果 jfinal 默认路由规则不能满足需求，开发者还可以根据需要使用handler定制更加个性化的路由，大体思路就是在 handler 中改变第一个参数 string target 的值。\n\n\n# 5、路由拆分、模块化\n\njfinal路由还可以进行拆分配置，这对大规模团队开发十分有用，以下是代码示例：\n\npublic class frontroutes extends routes {\n    public void config() {\n       setbaseviewpath("/view/front");\n       add("/", indexcontroller.class);\n       add("/blog", blogcontroller.class);\n    }\n}\npublic class adminroutes extends routes {\n    public void config() {\n       setbaseviewpath("/view/admin");\n       addinterceptor(new admininterceptor());\n       add("/admin", admincontroller.class);\n       add("/admin/user", usercontroller.class);\n    }\n}\npublic class myjfinalconfig extends jfinalconfig {\n    public void configroute(routes me) {\n       me.add(new frontroutes());  // 前台路由\n       me.add(new adminroutes());  // 后台路由\n    }\n    \n    public void configconstant(constants me) {}\n    public void configengine(engine me) {}\n    public void configplugin(plugins me) {}\n    public void configinterceptor(interceptors me) {}\n    public void confighandler(handlers me) {}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\n如上三段代码，frontroutes 类中配置了系统前台路由，adminroutes 配置了系统后台路由，myjfinalconfig.configroute(…)方法将拆分后的这两个路由合并起来。使用这种拆分配置不仅可以让myjfinalconfig文件更简洁，而且有利于大规模团队开发，避免多人同时修改myjfinalconfig时的版本冲突。\n\nfrontroutes 与 adminroutes 中分别使用 setbaseviewpath(…) 设置了各自 controller.render(view) 时使用的 baseviewpath。\n\nadminroutes 还通过 addinterceptor(new admininterceptor()) 添加了 routes 级别的拦截器，该拦截器将拦截 adminroutes 中添加的所有 controller，会在 class 拦截器之前被调用。这种用法可以避免在后台管理这样的模块中的所有 class 上使用@before(admininterceptor.class)，减少代码冗余。\n\n\n# 6､控制器父类中的action映射\n\njfinal 3.6 新增了如下配置方法：\n\npublic void configroute(routes me) {\n  me.setmappingsuperclass(false);\n}\n\n\n1\n2\n3\n\n\n该方法用于配置是否要将控制器父类中的 public 方法映射成 action。默认配置为 false，也即父类中的所有方法都不会成为 action。\n\n注意：由于该配置是 3.6 版才引入，所以老版本 jfinal 项目升级时，如果控制器父类中存在 action 的需要开启这个配置为 true。因为 msgcontroller 中的 index() 需要被映射成 action 才能正常分发微信服务端的消息。\n\n引入该配置本质是一个性能优化。可以加快项目启动速度。如果 routes 被拆分成了多个子 routes，建议在需要该配置的子 routes 中进行配置，因为该配置可以在子 routes 内独立生效，其它没有该配置的 routes 仍然可以使用到该性能优化，',charsets:{cjk:!0}},{title:"2.5 configPlugin",frontmatter:{},regularPath:"/zh/2%20JFinalConfig/2.5%20configPlugin.html",relativePath:"zh/2 JFinalConfig/2.5 configPlugin.md",key:"v-28064997",path:"/zh/2%20JFinalConfig/2.5%20configPlugin.html",lastUpdated:"9/8/2023, 9:01:28 AM",lastUpdatedTimestamp:1694163688e3,headersStr:null,content:'# 2.5 configPlugin\n\n此方法用来配置JFinal的Plugin，如下代码配置了Druid数据库连接池插件与ActiveRecord数据库访问插件。通过以下的配置，可以在应用中使用ActiveRecord非常方便地操作数据库。\n\npublic void configPlugin(Plugins me) {\n    DruidPlugin dp = new DruidPlugin(jdbcUrl, userName, password);\n    me.add(dp);\n    \n    ActiveRecordPlugin arp = new ActiveRecordPlugin(dp);\n    arp.addMapping("user", User.class);\n    me.add(arp);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nJFinal插件架构是其主要扩展方式之一，可以方便地创建插件并应用到项目中去。',normalizedContent:'# 2.5 configplugin\n\n此方法用来配置jfinal的plugin，如下代码配置了druid数据库连接池插件与activerecord数据库访问插件。通过以下的配置，可以在应用中使用activerecord非常方便地操作数据库。\n\npublic void configplugin(plugins me) {\n    druidplugin dp = new druidplugin(jdbcurl, username, password);\n    me.add(dp);\n    \n    activerecordplugin arp = new activerecordplugin(dp);\n    arp.addmapping("user", user.class);\n    me.add(arp);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\njfinal插件架构是其主要扩展方式之一，可以方便地创建插件并应用到项目中去。',charsets:{cjk:!0}},{title:"2.6 configInterceptor",frontmatter:{},regularPath:"/zh/2%20JFinalConfig/2.6%20configInterceptor.html",relativePath:"zh/2 JFinalConfig/2.6 configInterceptor.md",key:"v-34868267",path:"/zh/2%20JFinalConfig/2.6%20configInterceptor.html",headers:[{level:3,title:"1、配置全局拦截器",slug:"_1、配置全局拦截器",normalizedTitle:"1、配置全局拦截器",charIndex:28},{level:3,title:"2、拦截器配置层次/粒度",slug:"_2、拦截器配置层次-粒度",normalizedTitle:"2、拦截器配置层次/粒度",charIndex:682}],lastUpdated:"9/8/2023, 9:02:33 AM",lastUpdatedTimestamp:1694163753e3,headersStr:"1、配置全局拦截器 2、拦截器配置层次/粒度",content:'# 2.6 configInterceptor\n\n\n# 1、配置全局拦截器\n\nconfigInterceptor 方法用来配置全局拦截器，全局拦截器分为两类：控制层、业务层，以下是配置示例：\n\npublic void configInterceptor(Interceptors me) {\n    // 以下两行代码配置作用于控制层的全局拦截器\n    me.add(new AuthInterceptor());\n    me.addGlobalActionInterceptor(new AaaInterceptor());\n    \n    // 以下一行代码配置业务层全局拦截器\n    me.addGlobalServiceInterceptor(new BbbInterceptor());\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n以上 me.add(...) 与 me.addGlobalActionInterceptor(...) 两个方法是完全等价的，都是配置拦截所有 Controller 中 action 方法的拦截器。而 me.addGlobalServiceInterceptor(...) 配置的拦截器将拦截业务层所有 public 方法。\n\n注意：以上描述中所谓的 "业务层" 本质上是指除了 "控制层" 以外的含义，不一定要求是业务层，也可以是一个除了 controller 以外的任何一个类。\n\n以上方式配置的拦截器可以在方法定义之处通过 @Clear 注解进行移除，具体用法见后续有关 @Clear 注解的章节。\n\n\n# 2、拦截器配置层次/粒度\n\nInterceptor 配置粒度分为 Global、Routes、Class、Method 四个层次，其中以上小节配置粒度为全局。Routes、Class 与 Method 级的配置将在后续章节中详细介绍。',normalizedContent:'# 2.6 configinterceptor\n\n\n# 1、配置全局拦截器\n\nconfiginterceptor 方法用来配置全局拦截器，全局拦截器分为两类：控制层、业务层，以下是配置示例：\n\npublic void configinterceptor(interceptors me) {\n    // 以下两行代码配置作用于控制层的全局拦截器\n    me.add(new authinterceptor());\n    me.addglobalactioninterceptor(new aaainterceptor());\n    \n    // 以下一行代码配置业务层全局拦截器\n    me.addglobalserviceinterceptor(new bbbinterceptor());\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n以上 me.add(...) 与 me.addglobalactioninterceptor(...) 两个方法是完全等价的，都是配置拦截所有 controller 中 action 方法的拦截器。而 me.addglobalserviceinterceptor(...) 配置的拦截器将拦截业务层所有 public 方法。\n\n注意：以上描述中所谓的 "业务层" 本质上是指除了 "控制层" 以外的含义，不一定要求是业务层，也可以是一个除了 controller 以外的任何一个类。\n\n以上方式配置的拦截器可以在方法定义之处通过 @clear 注解进行移除，具体用法见后续有关 @clear 注解的章节。\n\n\n# 2、拦截器配置层次/粒度\n\ninterceptor 配置粒度分为 global、routes、class、method 四个层次，其中以上小节配置粒度为全局。routes、class 与 method 级的配置将在后续章节中详细介绍。',charsets:{cjk:!0}},{title:"2.7 configHandler",frontmatter:{},regularPath:"/zh/2%20JFinalConfig/2.7%20configHandler.html",relativePath:"zh/2 JFinalConfig/2.7 configHandler.md",key:"v-351ae8e7",path:"/zh/2%20JFinalConfig/2.7%20configHandler.html",lastUpdated:"9/8/2023, 9:03:17 AM",lastUpdatedTimestamp:1694163797e3,headersStr:null,content:"# 2.7 configHandler\n\n此方法用来配置JFinal的Handler，如下代码配置了名为ResourceHandler的处理器，Handler可以接管所有web请求，并对应用拥有完全的控制权，可以很方便地实现更高层的功能性扩展。\n\npublic void configHandler(Handlers me) {\n    me.add(new ResourceHandler());\n}\n\n\n1\n2\n3\n\n\n具体用法可以参考 jfinal 源码中给出的几个功能的官方实现：https://gitee.com/jfinal/jfinal/tree/master/src/main/java/com/jfinal/ext/handler",normalizedContent:"# 2.7 confighandler\n\n此方法用来配置jfinal的handler，如下代码配置了名为resourcehandler的处理器，handler可以接管所有web请求，并对应用拥有完全的控制权，可以很方便地实现更高层的功能性扩展。\n\npublic void confighandler(handlers me) {\n    me.add(new resourcehandler());\n}\n\n\n1\n2\n3\n\n\n具体用法可以参考 jfinal 源码中给出的几个功能的官方实现：https://gitee.com/jfinal/jfinal/tree/master/src/main/java/com/jfinal/ext/handler",charsets:{cjk:!0}},{title:"2.8 onStart and onStop 回调配置",frontmatter:{},regularPath:"/zh/2%20JFinalConfig/2.8%20onStart%20and%20onStop%20%E5%9B%9E%E8%B0%83%E9%85%8D%E7%BD%AE.html",relativePath:"zh/2 JFinalConfig/2.8 onStart and onStop 回调配置.md",key:"v-4ca2acd2",path:"/zh/2%20JFinalConfig/2.8%20onStart%20and%20onStop%20%E5%9B%9E%E8%B0%83%E9%85%8D%E7%BD%AE.html",lastUpdated:"9/8/2023, 9:04:13 AM",lastUpdatedTimestamp:1694163853e3,headersStr:null,content:"# 2.8 onStart and onStop 回调配置\n\n在 JFinalConfig 继承类中可以添加 onStart() 与 onStop()，JFinal 会在系统启动完成之后以及系统关闭之前分别回调这两个方法：\n\n// 系统启动完成后回调\npublic void onStart() {\n}\n \n// 系统关闭之前回调\npublic void onStop() {\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n这两个方法可以很方便地在项目启动后与关闭前让开发者有机会进行额外操作，如在系统启动后创建调度线程或在系统关闭前写回缓存。\n\n注意：jfinal 3.6 版本之前这两个方法名为：afterJFinalStart() 与 beforeJFinalStop()。为减少记忆成本、代码输入量以及输入手误的概率，jfinal 3.6 版本改为了目前更简短的方法名。老方法名仍然被保留，仍然可以使用，方便老项目升级到 jfinal 最新版本。",normalizedContent:"# 2.8 onstart and onstop 回调配置\n\n在 jfinalconfig 继承类中可以添加 onstart() 与 onstop()，jfinal 会在系统启动完成之后以及系统关闭之前分别回调这两个方法：\n\n// 系统启动完成后回调\npublic void onstart() {\n}\n \n// 系统关闭之前回调\npublic void onstop() {\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n这两个方法可以很方便地在项目启动后与关闭前让开发者有机会进行额外操作，如在系统启动后创建调度线程或在系统关闭前写回缓存。\n\n注意：jfinal 3.6 版本之前这两个方法名为：afterjfinalstart() 与 beforejfinalstop()。为减少记忆成本、代码输入量以及输入手误的概率，jfinal 3.6 版本改为了目前更简短的方法名。老方法名仍然被保留，仍然可以使用，方便老项目升级到 jfinal 最新版本。",charsets:{cjk:!0}},{title:"2.9 PropKit 读取配置",frontmatter:{},regularPath:"/zh/2%20JFinalConfig/2.9%20PropKit%20%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE.html",relativePath:"zh/2 JFinalConfig/2.9 PropKit 读取配置.md",key:"v-168d4624",path:"/zh/2%20JFinalConfig/2.9%20PropKit%20%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE.html",lastUpdated:"9/8/2023, 9:05:27 AM",lastUpdatedTimestamp:1694163927e3,headersStr:null,content:'# 2.9 PropKit 读取配置\n\nPropKit工具类用来读取外部键值对配置文件，PropKit可以极度方便地在系统任意时空使用，配置文件的格式如下：\n\nuserName=james\nemail=no-reply@jfinal.com\ndevMode=true\n\n\n1\n2\n3\n\n\n如下是 PropKit 代码示例：\n\nPropKit.use("config.txt");\nString userName = PropKit.get("userName");\nString email = PropKit.get("email");\n \n// Prop 配合用法\nProp p = PropKit.use("config.txt");\nBoolean devMode = p.getBoolean("devMode");\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n如下是在项目中具体的使用示例：\n\npublic class AppConfig extends JFinalConfig {\n  public void configConstant(Constants me) {\n    // 第一次使用use加载的配置将成为主配置，可以通过PropKit.get(...)直接取值\n    PropKit.use("a_little_config.txt");\n    me.setDevMode(PropKit.getBoolean("devMode"));\n  }\n \n  public void configPlugin(Plugins me) {\n    // 非第一次使用use加载的配置，需要通过每次使用use来指定配置文件名再来取值\n    String redisHost = PropKit.use("redis_config.txt").get("host");\n    int redisPort = PropKit.use("redis_config.txt").getInt("port");\n    RedisPlugin rp = new RedisPlugin("myRedis", redisHost, redisPort);\n    me.add(rp);\n \n    // 非第一次使用 use加载的配置，也可以先得到一个Prop对象，再通过该对象来获取值\n    Prop p = PropKit.use("db_config.txt");\n    DruidPlugin dp = new DruidPlugin(p.get("jdbcUrl"), p.get("user")…);\n    me.add(dp);\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n如上代码所示，PropKit可同时加载多个配置文件，第一个被加载的配置文件可以使用PorpKit.get(…)方法直接操作，非第一个被加载的配置文件则需要使用PropKit.use(…).get(…)来操作。\n\nPropKit 的使用并不限于在 YourJFinalConfig 中，可以在项目的任何地方使用。此外PropKit.use(…)方法在加载配置文件内容以后会将数据缓存在内存之中，可以通过PropKit.useless(…)将缓存的内容进行清除。',normalizedContent:'# 2.9 propkit 读取配置\n\npropkit工具类用来读取外部键值对配置文件，propkit可以极度方便地在系统任意时空使用，配置文件的格式如下：\n\nusername=james\nemail=no-reply@jfinal.com\ndevmode=true\n\n\n1\n2\n3\n\n\n如下是 propkit 代码示例：\n\npropkit.use("config.txt");\nstring username = propkit.get("username");\nstring email = propkit.get("email");\n \n// prop 配合用法\nprop p = propkit.use("config.txt");\nboolean devmode = p.getboolean("devmode");\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n如下是在项目中具体的使用示例：\n\npublic class appconfig extends jfinalconfig {\n  public void configconstant(constants me) {\n    // 第一次使用use加载的配置将成为主配置，可以通过propkit.get(...)直接取值\n    propkit.use("a_little_config.txt");\n    me.setdevmode(propkit.getboolean("devmode"));\n  }\n \n  public void configplugin(plugins me) {\n    // 非第一次使用use加载的配置，需要通过每次使用use来指定配置文件名再来取值\n    string redishost = propkit.use("redis_config.txt").get("host");\n    int redisport = propkit.use("redis_config.txt").getint("port");\n    redisplugin rp = new redisplugin("myredis", redishost, redisport);\n    me.add(rp);\n \n    // 非第一次使用 use加载的配置，也可以先得到一个prop对象，再通过该对象来获取值\n    prop p = propkit.use("db_config.txt");\n    druidplugin dp = new druidplugin(p.get("jdbcurl"), p.get("user")…);\n    me.add(dp);\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n如上代码所示，propkit可同时加载多个配置文件，第一个被加载的配置文件可以使用porpkit.get(…)方法直接操作，非第一个被加载的配置文件则需要使用propkit.use(…).get(…)来操作。\n\npropkit 的使用并不限于在 yourjfinalconfig 中，可以在项目的任何地方使用。此外propkit.use(…)方法在加载配置文件内容以后会将数据缓存在内存之中，可以通过propkit.useless(…)将缓存的内容进行清除。',charsets:{cjk:!0}},{title:"3.1 概述",frontmatter:{},regularPath:"/zh/3%20Controller/3.1%20%E6%A6%82%E8%BF%B0.html",relativePath:"zh/3 Controller/3.1 概述.md",key:"v-521c3580",path:"/zh/3%20Controller/3.1%20%E6%A6%82%E8%BF%B0.html",lastUpdated:"9/8/2023, 9:35:11 AM",lastUpdatedTimestamp:1694165711e3,headersStr:null,content:"# 3.1 概述\n\nController是JFinal核心类之一，该类作为MVC模式中的控制器。基于JFinal的Web应用的控制器需要继承该类。Controller是定义Action方法的地点，是组织Action的一种方式，一个Controller可以包含多个Action。Controller是线程安全的。",normalizedContent:"# 3.1 概述\n\ncontroller是jfinal核心类之一，该类作为mvc模式中的控制器。基于jfinal的web应用的控制器需要继承该类。controller是定义action方法的地点，是组织action的一种方式，一个controller可以包含多个action。controller是线程安全的。",charsets:{cjk:!0}},{title:"3.10 session 操作",frontmatter:{},regularPath:"/zh/3%20Controller/3.10%20session%20%E6%93%8D%E4%BD%9C.html",relativePath:"zh/3 Controller/3.10 session 操作.md",key:"v-874d584e",path:"/zh/3%20Controller/3.10%20session%20%E6%93%8D%E4%BD%9C.html",lastUpdated:"9/8/2023, 9:35:11 AM",lastUpdatedTimestamp:1694165711e3,headersStr:null,content:'# 3.10 session 操作\n\n通过 setSessionAttr(key, value) 可以向 session 中存放数据，getSessionAttr(key) 可以从 session 中读取数据。还可以通过 getSession()得到 session 对象从而使用全面的session API。\n\npublic void login() {\n   User user = loginService.login(...);\n   if (user != null) {\n      setSessionAttr("loginUser", user);\n   }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n为了便于项目支持集群与分布式，不建议使用 session 存放数据，建议将 session 范畴数据存放在数据库或者类似于 redis 的共享空间之中。',normalizedContent:'# 3.10 session 操作\n\n通过 setsessionattr(key, value) 可以向 session 中存放数据，getsessionattr(key) 可以从 session 中读取数据。还可以通过 getsession()得到 session 对象从而使用全面的session api。\n\npublic void login() {\n   user user = loginservice.login(...);\n   if (user != null) {\n      setsessionattr("loginuser", user);\n   }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n为了便于项目支持集群与分布式，不建议使用 session 存放数据，建议将 session 范畴数据存放在数据库或者类似于 redis 的共享空间之中。',charsets:{cjk:!0}},{title:"3.11 getFile 文件上传",frontmatter:{},regularPath:"/zh/3%20Controller/3.11%20getFile%20%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0.html",relativePath:"zh/3 Controller/3.11 getFile 文件上传.md",key:"v-697a0f50",path:"/zh/3%20Controller/3.11%20getFile%20%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0.html",lastUpdated:"9/8/2023, 9:35:11 AM",lastUpdatedTimestamp:1694165711e3,headersStr:null,content:'# 3.11 getFile 文件上传\n\nController提供了getFile系列方法支持文件上传。\n\n如果用到了文件上传功能，需要添加一个 maven 依赖：\n\n<dependency>\n    <groupId>com.jfinal</groupId>\n    <artifactId>cos</artifactId>\n    <version>2022.2</version>\n</dependency>\n\n\n1\n2\n3\n4\n5\n\n\n注意版本问题：jfinal 4.9.18 版本支持大于 2G 的文件上传，从该 jfinal 版本开始，cos 必须升级到 2022.2 及其未来的更高版本，否则文件上传功能无法使用。这里要注意早于 4.9.18 的 jfinal 只能使用 cos 2020.4 以及更早其的 cos 版本。\n\n特别注意：如果客户端请求为multipart request（form表单使用了enctype="multipart/form-data"），那么必须先调用getFile系列方法才能使getPara系列方法正常工作，因为multipart request需要通过getFile系列方法解析请求体中的数据，包括参数。同样的道理在Interceptor、Validator中也需要先调用getFile。\n\n文件默认上传至项目根路径下的upload子路径之下，该路径称为文件上传基础路径。可以在 JFinalConfig.configConstant(Constants me)方法中通过me.setBaseUploadPath(baseUploadPath) 设置文件上传基础路径，该路径参数接受以”/”打头或者以windows磁盘盘符打头的绝对路径，即可将基础路径指向项目根径之外，方便单机多实例部署。当该路径参数设置为相对路径时，则是以项目根为基础的相对路径。',normalizedContent:'# 3.11 getfile 文件上传\n\ncontroller提供了getfile系列方法支持文件上传。\n\n如果用到了文件上传功能，需要添加一个 maven 依赖：\n\n<dependency>\n    <groupid>com.jfinal</groupid>\n    <artifactid>cos</artifactid>\n    <version>2022.2</version>\n</dependency>\n\n\n1\n2\n3\n4\n5\n\n\n注意版本问题：jfinal 4.9.18 版本支持大于 2g 的文件上传，从该 jfinal 版本开始，cos 必须升级到 2022.2 及其未来的更高版本，否则文件上传功能无法使用。这里要注意早于 4.9.18 的 jfinal 只能使用 cos 2020.4 以及更早其的 cos 版本。\n\n特别注意：如果客户端请求为multipart request（form表单使用了enctype="multipart/form-data"），那么必须先调用getfile系列方法才能使getpara系列方法正常工作，因为multipart request需要通过getfile系列方法解析请求体中的数据，包括参数。同样的道理在interceptor、validator中也需要先调用getfile。\n\n文件默认上传至项目根路径下的upload子路径之下，该路径称为文件上传基础路径。可以在 jfinalconfig.configconstant(constants me)方法中通过me.setbaseuploadpath(baseuploadpath) 设置文件上传基础路径，该路径参数接受以”/”打头或者以windows磁盘盘符打头的绝对路径，即可将基础路径指向项目根径之外，方便单机多实例部署。当该路径参数设置为相对路径时，则是以项目根为基础的相对路径。',charsets:{cjk:!0}},{title:"3.12 keep 系方法",frontmatter:{},regularPath:"/zh/3%20Controller/3.12%20keep%20%E7%B3%BB%E6%96%B9%E6%B3%95.html",relativePath:"zh/3 Controller/3.12 keep 系方法.md",key:"v-7a3c7de4",path:"/zh/3%20Controller/3.12%20keep%20%E7%B3%BB%E6%96%B9%E6%B3%95.html",headers:[{level:3,title:"1、keepPara",slug:"_1、keeppara",normalizedTitle:"1、keeppara",charIndex:20},{level:3,title:"2、keepModel 与 keepBean",slug:"_2、keepmodel-与-keepbean",normalizedTitle:"2、keepmodel 与 keepbean",charIndex:1057}],lastUpdated:"9/8/2023, 9:35:11 AM",lastUpdatedTimestamp:1694165711e3,headersStr:"1、keepPara 2、keepModel 与 keepBean",content:'# 3.12 keep 系方法\n\n\n# 1、keepPara\n\n当页面提交表单请求到 action，如果提交过来的数据存在错误或者缺失，这时应该让用户继续修改或填写表单数据，这时可以使用 keepPara 方法将用户之前填写过的内容保持住：\n\n// 保持住所有表单域\nkeepPara()\n \n//指定保持住的表单域，如： nickName、email 等等\nkeepPara("nickName", "email", ...);\n   如上，不带参的 keepPara() 方法将保持住所有表单域的内容。以上两种用法保持住的参数返回页面时，无论是什么类型都将转换成 String 类型，所以，如果表单域的类型必须要保持住的话可以使用如下的方式：\n\n// 指定 keep 后的类型为 Date\nkeepPara(Date.class, "createAt");\n \n// 指定 keep 后的类型为 Integer\nkeepPara(Integer.class, "age");\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n由于上面的 createAt、age 两个表单域 keep 时指定了类型，所以在页中就可以利用其类型参与表达式求值，例如：\n\n// 由于前面代码 keep 时指定 createAT 为 Date，所以 #date(...) 指令输出时不会抛异常\n#date(createAt)\n \n// 由于前面代码 keep 时指定 age 类型为 Integer，所以才可以进行 age > 18 操作\n#if (age > 18)\n...\n#end\n    当然，如果类型为 Integer、Long、Float、Double、Byte、Short、String，还可以使用 enjoy 的 extension method 来解决类型问题，例如：\n\n#if (age.toInt() > 18)\n...\n#end\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n如上所示，age 被 keepPara() 后为 String 型，那么 age.toInt() 会将其转化成 Integer 型。extension method 更多文档请见：https://www.jfinal.com/doc/6-9\n\nkeepPara 一般用在 Validator 或者拦截器之中，在本站首页右侧可以下载 jfinal demo for maven，里面有实际的例子。\n\n\n# 2、keepModel 与 keepBean\n\nkeepModel 可以将以 modelName 前缀的表单域保持住内容与类型，例如：\n\n<input name="blog.title"   value="#(blog.title ??)"/>\n<input name="blog.content" value="#(blog.content ??)" />\n\n\n1\n2\n\n\n如上所示，表单域是以前缀为 blog 的 model，提交到后端是通过 getModel 来接收数据，如果提交的数据不完整或者有错误可以使用 keepModel 保持住内容返回给页面，让用户继续填写。\n\nkeepBean 与 keepModel 的功能相似，只不过 keepBean 针对的是传统 java bean，而不是 Model。当然，如果 Model 使用生成器生成了 setter 方法，使用 keepBean 也可以。\n\n注意：keepModel 与 keepBean 都可以 keep 住表单域原有的类型，无需指定类型。',normalizedContent:'# 3.12 keep 系方法\n\n\n# 1、keeppara\n\n当页面提交表单请求到 action，如果提交过来的数据存在错误或者缺失，这时应该让用户继续修改或填写表单数据，这时可以使用 keeppara 方法将用户之前填写过的内容保持住：\n\n// 保持住所有表单域\nkeeppara()\n \n//指定保持住的表单域，如： nickname、email 等等\nkeeppara("nickname", "email", ...);\n   如上，不带参的 keeppara() 方法将保持住所有表单域的内容。以上两种用法保持住的参数返回页面时，无论是什么类型都将转换成 string 类型，所以，如果表单域的类型必须要保持住的话可以使用如下的方式：\n\n// 指定 keep 后的类型为 date\nkeeppara(date.class, "createat");\n \n// 指定 keep 后的类型为 integer\nkeeppara(integer.class, "age");\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n由于上面的 createat、age 两个表单域 keep 时指定了类型，所以在页中就可以利用其类型参与表达式求值，例如：\n\n// 由于前面代码 keep 时指定 createat 为 date，所以 #date(...) 指令输出时不会抛异常\n#date(createat)\n \n// 由于前面代码 keep 时指定 age 类型为 integer，所以才可以进行 age > 18 操作\n#if (age > 18)\n...\n#end\n    当然，如果类型为 integer、long、float、double、byte、short、string，还可以使用 enjoy 的 extension method 来解决类型问题，例如：\n\n#if (age.toint() > 18)\n...\n#end\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n如上所示，age 被 keeppara() 后为 string 型，那么 age.toint() 会将其转化成 integer 型。extension method 更多文档请见：https://www.jfinal.com/doc/6-9\n\nkeeppara 一般用在 validator 或者拦截器之中，在本站首页右侧可以下载 jfinal demo for maven，里面有实际的例子。\n\n\n# 2、keepmodel 与 keepbean\n\nkeepmodel 可以将以 modelname 前缀的表单域保持住内容与类型，例如：\n\n<input name="blog.title"   value="#(blog.title ??)"/>\n<input name="blog.content" value="#(blog.content ??)" />\n\n\n1\n2\n\n\n如上所示，表单域是以前缀为 blog 的 model，提交到后端是通过 getmodel 来接收数据，如果提交的数据不完整或者有错误可以使用 keepmodel 保持住内容返回给页面，让用户继续填写。\n\nkeepbean 与 keepmodel 的功能相似，只不过 keepbean 针对的是传统 java bean，而不是 model。当然，如果 model 使用生成器生成了 setter 方法，使用 keepbean 也可以。\n\n注意：keepmodel 与 keepbean 都可以 keep 住表单域原有的类型，无需指定类型。',charsets:{cjk:!0}},{title:"3.2 Action",frontmatter:{},regularPath:"/zh/3%20Controller/3.2%20Action.html",relativePath:"zh/3 Controller/3.2 Action.md",key:"v-aa516b2a",path:"/zh/3%20Controller/3.2%20Action.html",headers:[{level:3,title:"1、Action 定义",slug:"_1、action-定义",normalizedTitle:"1、action 定义",charIndex:17},{level:3,title:"2、@NotAction 注解",slug:"_2、-notaction-注解",normalizedTitle:"2、@notaction 注解",charIndex:469},{level:3,title:"3、控制器超类的路由映射",slug:"_3、控制器超类的路由映射",normalizedTitle:"3、控制器超类的路由映射",charIndex:769}],lastUpdated:"9/8/2023, 9:35:11 AM",lastUpdatedTimestamp:1694165711e3,headersStr:"1、Action 定义 2、@NotAction 注解 3、控制器超类的路由映射",content:'# 3.2 Action\n\n\n# 1、Action 定义\n\n在 Controller 之中定义的 public 方法称为Action。Action 是请求的最小单位。Action 方法必须在 Controller 中定义，且必须是 public 可见性。\n\npublic class HelloController extends Controller {\n    public void index() {\n       renderText("此方法是一个action");\n    }\n    public String test() {\n       return "index.html";\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n以上代码中定义了两个Action：HelloController.index()、HelloController.test()。\n\nAction可以有返回值，返回值可在拦截器中通过invocation.getReturnValue() 获取到，以便进行render控制。\n\n\n# 2、@NotAction 注解\n\n如果希望 controller 中的 public 方法不成为一个 action，可以使用 @NotAction 注解。@NotAction 注解通常用于引入了 BaseController 的中间 Controller，例如：\n\npublic class BaseController extends Controller {\n   \n   // 不希望成为 action，仅供子类调用，或拦截器中调用\n   @NotAction\n   public void getLoginUser() {\n   \n   }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 3、控制器超类的路由映射\n\n自 jfinal 3.6 开始，控制器超类中的所有方法默认不会被映射为 action。（也就是自 jfinal 3.6 版本开始上例中 BaseController 中的 @NotAction 默认已经不需要了，因为 BaseController 是你最终控制器 XxxController 的超类）\n\n如果希望超类中的方法也被映射为 action 只需添加一行配置：\n\npublic void configRoute(Routes me) {\n    me.setMappingSuperClass(true);\n}\n\n\n1\n2\n3\n\n\n该功能属于性能优化，拥有大量路由的大型项目可加快启动速度。该配置如果配置在 "子Routes" 中，将只对该 "子Routes" 有效，例如：\n\npublic FrontRoutes extends Routes {\n   public void config() {\n      // 这里配置只对 FrontRoutes 下的路由有效，建议这样配置以提升性能\n      setMappingSuperClass(true);\n      \n      add("/weixin", WeixinController.class);\n   }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n"子Routes" 相关内容详见文档第二章 configRoute 章节。',normalizedContent:'# 3.2 action\n\n\n# 1、action 定义\n\n在 controller 之中定义的 public 方法称为action。action 是请求的最小单位。action 方法必须在 controller 中定义，且必须是 public 可见性。\n\npublic class hellocontroller extends controller {\n    public void index() {\n       rendertext("此方法是一个action");\n    }\n    public string test() {\n       return "index.html";\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n以上代码中定义了两个action：hellocontroller.index()、hellocontroller.test()。\n\naction可以有返回值，返回值可在拦截器中通过invocation.getreturnvalue() 获取到，以便进行render控制。\n\n\n# 2、@notaction 注解\n\n如果希望 controller 中的 public 方法不成为一个 action，可以使用 @notaction 注解。@notaction 注解通常用于引入了 basecontroller 的中间 controller，例如：\n\npublic class basecontroller extends controller {\n   \n   // 不希望成为 action，仅供子类调用，或拦截器中调用\n   @notaction\n   public void getloginuser() {\n   \n   }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 3、控制器超类的路由映射\n\n自 jfinal 3.6 开始，控制器超类中的所有方法默认不会被映射为 action。（也就是自 jfinal 3.6 版本开始上例中 basecontroller 中的 @notaction 默认已经不需要了，因为 basecontroller 是你最终控制器 xxxcontroller 的超类）\n\n如果希望超类中的方法也被映射为 action 只需添加一行配置：\n\npublic void configroute(routes me) {\n    me.setmappingsuperclass(true);\n}\n\n\n1\n2\n3\n\n\n该功能属于性能优化，拥有大量路由的大型项目可加快启动速度。该配置如果配置在 "子routes" 中，将只对该 "子routes" 有效，例如：\n\npublic frontroutes extends routes {\n   public void config() {\n      // 这里配置只对 frontroutes 下的路由有效，建议这样配置以提升性能\n      setmappingsuperclass(true);\n      \n      add("/weixin", weixincontroller.class);\n   }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n"子routes" 相关内容详见文档第二章 configroute 章节。',charsets:{cjk:!0}},{title:"3.3 Action 参数注入",frontmatter:{},regularPath:"/zh/3%20Controller/3.3%20Action%20%E5%8F%82%E6%95%B0%E6%B3%A8%E5%85%A5.html",relativePath:"zh/3 Controller/3.3 Action 参数注入.md",key:"v-376a5658",path:"/zh/3%20Controller/3.3%20Action%20%E5%8F%82%E6%95%B0%E6%B3%A8%E5%85%A5.html",lastUpdated:"9/22/2023, 9:39:45 AM",lastUpdatedTimestamp:1695375585e3,headersStr:null,content:'# 3.3 Action 参数注入\n\nAction 参数注入是指为 action 方法传入参数，可以省去 getPara(...) 代码直接获得参数值，以下是代码示例：\n\npublic class ProjectController extends Controller {\n    public void index(Project project) {\n       project.save();\n       render("index.html");\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\nAction 参数注入可以代替 getPara、getBean、getModel 系列方法获取参数，使用 File、UploadFile 参数时可以代替 getFile 方法实现文件上传。这种传参方式还有一个好处是便于与 swagger 这类第三方无缝集成，生成API文档。\n\n注意，如果不希望 Controller 带有参数的 public 方法成为一个 action，可以使用 @NotAction 注解将其标注来解决。\n\n重要用法：如果 action 形参是一个 model 或者 bean，原先通过 getBean(User.class, "") 获取时第二个参数为空字符串或null，那么与之等价的形参注入只需要用一下 @Para("") 注解即可：\n\npublic void action(@Para("")User user) { …. }\n\n\n1\n\n\n使用 Action 参数注入功能需要在开发工具中配置打开编译参数保留住方法参数名称。注意过于老旧的 eclipse 版本不支持 java 8 和该配置项，建议至少使用eclipse mars版本，以下是eclipse中的设置：\n\n检查项目属性配置的Java Build Path菜单下的Libraries下的java版本是否为1.8：\n\n检查项目属性配置的Project Facets菜单下的 java版本配置确定是否为1.8：\n\n注意：配置完成后，先将原有编译出来的class文件clear掉，并重新编译一次整个项目\n\n如果使用IDEA，添加一个编译参数 -parameters即可，其配置方法如下：\n\n如果要使用maven插件进行编译，为maven-compiler-plugin编译插件配置一个-parameters 属性即可：\n\n以上截图中的红色箭头指向部分是配置关键，以下 XML 配置内容与上面截图完全一样，提供出来便于复制使用：\n\n<plugin>\n   <groupId>org.apache.maven.plugins</groupId>\n   <artifactId>maven-compiler-plugin</artifactId>\n   <version>3.6.1</version>\n   <configuration>\n      <source>1.8</source>\n      <target>1.8</target>\n      <encoding>UTF-8</encoding>\n      \x3c!-- java8 保留参数名编译参数 --\x3e\n      <compilerArgument>-parameters</compilerArgument>\n   </configuration>\n</plugin>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n最后要注意：从 jfinal 3.5 版开始，已直接支持 action 参数注入功能，如果使用的 jfinal 3.2、3.3、3.4 这三个老版本希望支持该功能需要使用 jfinal 的 jfinal-java8 这个分支发行版，其 maven坐标如下：\n\n<dependency>\n    <groupId>com.jfinal</groupId>\n    <artifactId>jfinal-java8</artifactId>\n    <version>3.4</version>\n</dependency>\n\n\n1\n2\n3\n4\n5\n\n\n如果 jfinal 版本等于或高于 3.5 可以不必理会。',normalizedContent:'# 3.3 action 参数注入\n\naction 参数注入是指为 action 方法传入参数，可以省去 getpara(...) 代码直接获得参数值，以下是代码示例：\n\npublic class projectcontroller extends controller {\n    public void index(project project) {\n       project.save();\n       render("index.html");\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\naction 参数注入可以代替 getpara、getbean、getmodel 系列方法获取参数，使用 file、uploadfile 参数时可以代替 getfile 方法实现文件上传。这种传参方式还有一个好处是便于与 swagger 这类第三方无缝集成，生成api文档。\n\n注意，如果不希望 controller 带有参数的 public 方法成为一个 action，可以使用 @notaction 注解将其标注来解决。\n\n重要用法：如果 action 形参是一个 model 或者 bean，原先通过 getbean(user.class, "") 获取时第二个参数为空字符串或null，那么与之等价的形参注入只需要用一下 @para("") 注解即可：\n\npublic void action(@para("")user user) { …. }\n\n\n1\n\n\n使用 action 参数注入功能需要在开发工具中配置打开编译参数保留住方法参数名称。注意过于老旧的 eclipse 版本不支持 java 8 和该配置项，建议至少使用eclipse mars版本，以下是eclipse中的设置：\n\n检查项目属性配置的java build path菜单下的libraries下的java版本是否为1.8：\n\n检查项目属性配置的project facets菜单下的 java版本配置确定是否为1.8：\n\n注意：配置完成后，先将原有编译出来的class文件clear掉，并重新编译一次整个项目\n\n如果使用idea，添加一个编译参数 -parameters即可，其配置方法如下：\n\n如果要使用maven插件进行编译，为maven-compiler-plugin编译插件配置一个-parameters 属性即可：\n\n以上截图中的红色箭头指向部分是配置关键，以下 xml 配置内容与上面截图完全一样，提供出来便于复制使用：\n\n<plugin>\n   <groupid>org.apache.maven.plugins</groupid>\n   <artifactid>maven-compiler-plugin</artifactid>\n   <version>3.6.1</version>\n   <configuration>\n      <source>1.8</source>\n      <target>1.8</target>\n      <encoding>utf-8</encoding>\n      \x3c!-- java8 保留参数名编译参数 --\x3e\n      <compilerargument>-parameters</compilerargument>\n   </configuration>\n</plugin>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n最后要注意：从 jfinal 3.5 版开始，已直接支持 action 参数注入功能，如果使用的 jfinal 3.2、3.3、3.4 这三个老版本希望支持该功能需要使用 jfinal 的 jfinal-java8 这个分支发行版，其 maven坐标如下：\n\n<dependency>\n    <groupid>com.jfinal</groupid>\n    <artifactid>jfinal-java8</artifactid>\n    <version>3.4</version>\n</dependency>\n\n\n1\n2\n3\n4\n5\n\n\n如果 jfinal 版本等于或高于 3.5 可以不必理会。',charsets:{cjk:!0}},{title:"3.4 get & getPara 系列方法",frontmatter:{},regularPath:"/zh/3%20Controller/3.4%20get%20&%20getPara%20%E7%B3%BB%E5%88%97%E6%96%B9%E6%B3%95.html",relativePath:"zh/3 Controller/3.4 get & getPara 系列方法.md",key:"v-ce7c74c0",path:"/zh/3%20Controller/3.4%20get%20&%20getPara%20%E7%B3%BB%E5%88%97%E6%96%B9%E6%B3%95.html",lastUpdated:"9/8/2023, 9:35:11 AM",lastUpdatedTimestamp:1694165711e3,headersStr:null,content:'# 3.4 get & getPara 系列方法\n\nController提供了getPara系列方法用来从请求中获取参数。getPara系列方法分为两种类型。第一种类型为第一个形参为String的getPara系列方法。该系列方法是对HttpServletRequest.getParameter(String name)的封装，这类方法都是转调了HttpServletRequest.getParameter(String name)。\n\n第二种类型为第一个形参为int或无形参的getPara系列方法。该系列方法是去获取urlPara中所带的参数值。getParaMap与getParaNames分别对应HttpServletRequest的getParameterMap与getParameterNames。\n\n记忆技巧：第一个参数为String类型的将获取表单或者url中问号挂参的域值。第一个参数为int或无参数的将获取urlPara中的参数值。\n\ngetPara使用例子：\n\n方法调用                  返回值\ngetPara("title")      返回页面表单域为"title"参数值\ngetParaToInt("age")   返回页面表单域为"age"参数值并转为int类型\ngetPara(0)            返回url请求的urlPara参数的第一个值,如http://localhost/controllerKey/method/v0-v1-v2\n                      这个请求将返回"v0"\ngetParaInt(1)         返回url请求的urlPara参数的第二个值并转为int了下,如http://localhost/controllerKey/method/2-5-9\n                      这个请求将返回5\ngetParaInt(2)         如http://localhost/controllerKey/method/2-5-N8这请求将返回-8.注意:约定字母N与n都可以表示符号,这对urlParaSeparator为"-"时非常有用\ngetPara()             返回url请求中的urlPara参数的整体值,,如http://localhost/controllerKey/method/v0-v1-v2\n                      这个请求将返回"v0-v1-v2-v3"\n\njfinal 3.6 重要更新：jfinal 3.6 针对 getPara 系以及 getParaToXxx 系统方法添加了更简短的替代方法，以下是部分使用示例：\n\n// 替代 getPara 的 get 用法\nString title = get("title");\n \n// 替代 getParaToInt 的 getInt 用法\nInteger age = getInt("age");\n \n// 替代 setAttr 的 set 用法\nset("article", article);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\njfinal 3.5 重要更新：jfinal 3.5 版本新增了 getRawData() 方法，可以很方便地从 http 请求 body 中获取 String 型的数据，通常这类数据是 json 或 XML 数据，例如：\n\nString json = getRawData();\nUser user = FastJson.getJson().parse(json, User.class);\n\n\n1\n2\n\n\n以上代码通过 getRawData() 获取到了客户端传过来的 String 型的 json 数据库。 getRawData() 方法可以在一次请求交互中多次反复调用，不会抛出异常。\n\n这里要注意一个问题：通过 forwardAction(...) 转发到另一个 action 时，getRawData() 无法获取到数据，此时需要使用 setAttr("rawData", getRawData()) 将数据传递给 forward 到的目标 action，然后在目标 action 通过 getAttr("rawData") 获取。一般这种情况很少见。',normalizedContent:'# 3.4 get & getpara 系列方法\n\ncontroller提供了getpara系列方法用来从请求中获取参数。getpara系列方法分为两种类型。第一种类型为第一个形参为string的getpara系列方法。该系列方法是对httpservletrequest.getparameter(string name)的封装，这类方法都是转调了httpservletrequest.getparameter(string name)。\n\n第二种类型为第一个形参为int或无形参的getpara系列方法。该系列方法是去获取urlpara中所带的参数值。getparamap与getparanames分别对应httpservletrequest的getparametermap与getparameternames。\n\n记忆技巧：第一个参数为string类型的将获取表单或者url中问号挂参的域值。第一个参数为int或无参数的将获取urlpara中的参数值。\n\ngetpara使用例子：\n\n方法调用                  返回值\ngetpara("title")      返回页面表单域为"title"参数值\ngetparatoint("age")   返回页面表单域为"age"参数值并转为int类型\ngetpara(0)            返回url请求的urlpara参数的第一个值,如http://localhost/controllerkey/method/v0-v1-v2\n                      这个请求将返回"v0"\ngetparaint(1)         返回url请求的urlpara参数的第二个值并转为int了下,如http://localhost/controllerkey/method/2-5-9\n                      这个请求将返回5\ngetparaint(2)         如http://localhost/controllerkey/method/2-5-n8这请求将返回-8.注意:约定字母n与n都可以表示符号,这对urlparaseparator为"-"时非常有用\ngetpara()             返回url请求中的urlpara参数的整体值,,如http://localhost/controllerkey/method/v0-v1-v2\n                      这个请求将返回"v0-v1-v2-v3"\n\njfinal 3.6 重要更新：jfinal 3.6 针对 getpara 系以及 getparatoxxx 系统方法添加了更简短的替代方法，以下是部分使用示例：\n\n// 替代 getpara 的 get 用法\nstring title = get("title");\n \n// 替代 getparatoint 的 getint 用法\ninteger age = getint("age");\n \n// 替代 setattr 的 set 用法\nset("article", article);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\njfinal 3.5 重要更新：jfinal 3.5 版本新增了 getrawdata() 方法，可以很方便地从 http 请求 body 中获取 string 型的数据，通常这类数据是 json 或 xml 数据，例如：\n\nstring json = getrawdata();\nuser user = fastjson.getjson().parse(json, user.class);\n\n\n1\n2\n\n\n以上代码通过 getrawdata() 获取到了客户端传过来的 string 型的 json 数据库。 getrawdata() 方法可以在一次请求交互中多次反复调用，不会抛出异常。\n\n这里要注意一个问题：通过 forwardaction(...) 转发到另一个 action 时，getrawdata() 无法获取到数据，此时需要使用 setattr("rawdata", getrawdata()) 将数据传递给 forward 到的目标 action，然后在目标 action 通过 getattr("rawdata") 获取。一般这种情况很少见。',charsets:{cjk:!0}},{title:"3.5 getBean & getModel 系列",frontmatter:{},regularPath:"/zh/3%20Controller/3.5%20getBean%20&%20getModel%20%E7%B3%BB%E5%88%97.html",relativePath:"zh/3 Controller/3.5 getBean & getModel 系列.md",key:"v-2ecfe04e",path:"/zh/3%20Controller/3.5%20getBean%20&%20getModel%20%E7%B3%BB%E5%88%97.html",lastUpdated:"9/8/2023, 9:35:11 AM",lastUpdatedTimestamp:1694165711e3,headersStr:null,content:'# 3.5 getBean & getModel 系列\n\ngetModel 用来接收页面表单域传递过来的model对象，表单域名称以”modelName.attrName”方式命名，getModel使用的attrName必须与数据表字段名完全一样。\n\ngetBean 方法用于支持传统Java Bean，包括支持使用jfinal生成器生成了getter、setter方法的Model，页面表单传参时使用与setter方法相一致的attrName，而非数据表字段名。\n\ngetModel与getBean区别在于前者使用数据库表字段名而后者使用与setter方法一致的属性名进行数据注入。建议优先使用getBean方法。\n\n以下是一个简单的示例：\n\n// 定义Model，在此为Blog\npublic class Blog extends Model<Blog> {\n    \n}\n\n\n1\n2\n3\n4\n\n\n// 在页面表单中采用modelName.attrName形式为作为表单域的name\n<form action="/blog/save" method="post">\n  <input name="blog.title" type="text">\n  <input name="blog.content" type="text">\n  <input value="提交" type="submit">\n</form>\n\n\n1\n2\n3\n4\n5\n6\n\n\npublic class BlogController extends Controller {\n  public void save() {\n    // 页面的modelName正好是Blog类名的首字母小写\n    Blog blog = getModel(Blog.class);\n \n    // 如果表单域的名称为 "otherName.title"可加上一个参数来获取\n    blog = getModel(Blog.class, "otherName");\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，表单域采用了 "blog.title"、"blog.content" 作为表单域的name属性，"blog" 是类文件名称 "Blog" 的首字母变小写， "title" 是blog数据库表的title字段，如果希望表单域使用任意的modelName，只需要在getModel时多添加一个参数来指定，例如：getModel(Blog.class, "otherName")。\n\n如果希望传参时避免使用modelName前缀，可以使用空串作为modelName来实现：getModel(Blog.class, ""); 这对开发纯API项目非常有用。（getBean 同样适用）\n\n如果希望在接收时跳过数据转换或者属性名错误异常可以传入true参：getBean(…, true)',normalizedContent:'# 3.5 getbean & getmodel 系列\n\ngetmodel 用来接收页面表单域传递过来的model对象，表单域名称以”modelname.attrname”方式命名，getmodel使用的attrname必须与数据表字段名完全一样。\n\ngetbean 方法用于支持传统java bean，包括支持使用jfinal生成器生成了getter、setter方法的model，页面表单传参时使用与setter方法相一致的attrname，而非数据表字段名。\n\ngetmodel与getbean区别在于前者使用数据库表字段名而后者使用与setter方法一致的属性名进行数据注入。建议优先使用getbean方法。\n\n以下是一个简单的示例：\n\n// 定义model，在此为blog\npublic class blog extends model<blog> {\n    \n}\n\n\n1\n2\n3\n4\n\n\n// 在页面表单中采用modelname.attrname形式为作为表单域的name\n<form action="/blog/save" method="post">\n  <input name="blog.title" type="text">\n  <input name="blog.content" type="text">\n  <input value="提交" type="submit">\n</form>\n\n\n1\n2\n3\n4\n5\n6\n\n\npublic class blogcontroller extends controller {\n  public void save() {\n    // 页面的modelname正好是blog类名的首字母小写\n    blog blog = getmodel(blog.class);\n \n    // 如果表单域的名称为 "othername.title"可加上一个参数来获取\n    blog = getmodel(blog.class, "othername");\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，表单域采用了 "blog.title"、"blog.content" 作为表单域的name属性，"blog" 是类文件名称 "blog" 的首字母变小写， "title" 是blog数据库表的title字段，如果希望表单域使用任意的modelname，只需要在getmodel时多添加一个参数来指定，例如：getmodel(blog.class, "othername")。\n\n如果希望传参时避免使用modelname前缀，可以使用空串作为modelname来实现：getmodel(blog.class, ""); 这对开发纯api项目非常有用。（getbean 同样适用）\n\n如果希望在接收时跳过数据转换或者属性名错误异常可以传入true参：getbean(…, true)',charsets:{cjk:!0}},{title:"3.6 set & setAttr 方法",frontmatter:{},regularPath:"/zh/3%20Controller/3.6%20set%20&%20setAttr%20%E6%96%B9%E6%B3%95.html",relativePath:"zh/3 Controller/3.6 set & setAttr 方法.md",key:"v-ee5a7982",path:"/zh/3%20Controller/3.6%20set%20&%20setAttr%20%E6%96%B9%E6%B3%95.html",lastUpdated:"9/8/2023, 9:35:11 AM",lastUpdatedTimestamp:1694165711e3,headersStr:null,content:'# 3.6 set & setAttr 方法\n\nsetAttr(String, Object) 转调了 HttpServletRequest.setAttribute(String, Object)，该方法可以将各种数据传递给View并在View中显示出来。 通过查看 jfinal 源码 Controller 可知 setAttr(String, Object) 方法在底层仅仅转调了底层的 HttpServletRequest 方法：\n\nprivate HttpServletRequest request;\n \npublic Controller setAttr(String name, Object value) {\n    request.setAttribute(name, value);\n    return this;\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\njfinal 3.6 新增：为了进一步减少代码量、提升开发效率，jfinal 3.6 新增了 set 方法替代 setAttr，用法如下：\n\nset("article", article);\n \n// 链式用法\nset("project", project).set("replyList", replyList).render("index.html");\n\n\n1\n2\n3\n4\n\n\njfinal 对于减少代码量、提升开发效率、降低学习成本的追求永不止步。',normalizedContent:'# 3.6 set & setattr 方法\n\nsetattr(string, object) 转调了 httpservletrequest.setattribute(string, object)，该方法可以将各种数据传递给view并在view中显示出来。 通过查看 jfinal 源码 controller 可知 setattr(string, object) 方法在底层仅仅转调了底层的 httpservletrequest 方法：\n\nprivate httpservletrequest request;\n \npublic controller setattr(string name, object value) {\n    request.setattribute(name, value);\n    return this;\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\njfinal 3.6 新增：为了进一步减少代码量、提升开发效率，jfinal 3.6 新增了 set 方法替代 setattr，用法如下：\n\nset("article", article);\n \n// 链式用法\nset("project", project).set("replylist", replylist).render("index.html");\n\n\n1\n2\n3\n4\n\n\njfinal 对于减少代码量、提升开发效率、降低学习成本的追求永不止步。',charsets:{cjk:!0}},{title:"3.7 render 方法",frontmatter:{},regularPath:"/zh/3%20Controller/3.7%20render%20%E6%96%B9%E6%B3%95.html",relativePath:"zh/3 Controller/3.7 render 方法.md",key:"v-60fd334f",path:"/zh/3%20Controller/3.7%20render%20%E6%96%B9%E6%B3%95.html",headers:[{level:3,title:"1､render(String view)",slug:"_1、render-string-view",normalizedTitle:"1､render(string view)",charIndex:20},{level:3,title:"2、render(String view) 方法配置模板引擎",slug:"_2、render-string-view-方法配置模板引擎",normalizedTitle:"2、render(string view) 方法配置模板引擎",charIndex:1365},{level:3,title:"3、render 系列其它方法",slug:"_3、render-系列其它方法",normalizedTitle:"3、render 系列其它方法",charIndex:1721},{level:3,title:"4、定制 Controller.render 系方法的实现类",slug:"_4、定制-controller-render-系方法的实现类",normalizedTitle:"4、定制 controller.render 系方法的实现类",charIndex:3642}],lastUpdated:"9/8/2023, 9:35:11 AM",lastUpdatedTimestamp:1694165711e3,headersStr:"1､render(String view) 2、render(String view) 方法配置模板引擎 3、render 系列其它方法 4、定制 Controller.render 系方法的实现类",content:'# 3.7 render 方法\n\n\n# 1､render(String view)\n\nrender(String view) 方法将对 view 所指向的模板进行渲染，view 参数最终指向的模板文件规则如下：\n\nString template = baseViewPath + viewPath + view\n\n\n1\n\n\n其中 view 即为 render(String view) 方法所携带的参数值，而 baseViewPath、viewPath 则是在路由配置时指定的两个值，例如：\n\npublic void configRoute(Routes me) {\n   // baseViewPath 为 "/_view"，该 Routes 对象之下映射的所有 Controller 都将取这个值\n   me.setBaseViewPath("/_view");\n   \n   // basePath 为第三个参数 "/index"\n   me.add("/", IndexController.class, "/index");\n   \n   // 第三个参数省略时， basePath 取第一个参数的值 : "/project"\n   me.add("/project", ProjectController.class);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n注意看上面的代码，其中的 me.setBaseViewPath(...) 指定的值即为 baseViewPath，其中 me.add(...) 第三个参数即为 viewPath，当第三个参数省略时默认取第一个参数的值。\n\n针对上述配置，在 IndexController 中使用 render 时的模板文件如下：\n\npublic class IndexController extends Controller {\n   public void demo() {\n     // 模板指向 : "/_view/index/abc.html"\n     render("abc.html");\n   }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n上述的 render("abc.html") 将指向 webapp 目录下面的 "/_view/index/abc.html" 这个模板。\n\n使用技巧：baseViewPath 配置为项目存放模板的总的根目录。viewPath 配置为当前被映射的 controller 的子目录。最终的效果就是 render(view) 的参数 view 永远是一个最终的文件名，例如： render("index.html")，从而消除掉了 view 参数中的目录部分。\n\n当需要打破 baseViewPath 与 viewPath 这两个参数的限制时，view 参数以 "/" 打头即可：\n\nrender("/other_path/my_path/index.html");\n\n\n1\n\n\nview 参数以 "/" 打头时，将勿略掉 baseViewPath 与 viewPath 这两个值：\n\nString template = "/other_path/my_path/index.html";\n\n\n1\n\n\n\n# 2、render(String view) 方法配置模板引擎\n\nrender(String view) 将根据 configConstant(Constants me) 中配置的 me.setViewType(ViewType) 方法选择一种模板引进渲染模板文件，例如：\n\npublic void configConstant(Constants me) {\n  me.setViewType(ViewType.JFINAL_TEMPLATE);\n}\n\n\n1\n2\n3\n\n\n以上配置将选择 jfinal 内置的 enjoy 模板引擎渲染模板，该配置是默认值，在使用时无需配置。注意该配置仅仅针对 Controller.render(String view) 方法，其它 render 系方法完全不受影响。\n\n\n# 3、render 系列其它方法\n\nrender系列方法将渲染不同类型的视图并返回给客户端。JFinal目前支持的视图类型有：JFinal Template、FreeMarker、JSP、Velocity、JSON、File、Text、Html、QrCode 二维码 等等。除了JFinal支持的视图型以外，还可以通过继承Render抽象类来无限扩展视图类型。\n\n通常情况下使用Controller.render(String)方法来渲染视图，使用Controller.render(String)时的视图类型由JFinalConfig.configConstant(Constants constants)配置中的constants. setViewType(ViewType)来决定，该设置方法支持的ViewType有：JFINAL_TEMPLATE、FreeMarker、JSP、Velocity，不进行配置时的缺省配置为JFINAL_TEMPLATE。\n\n此外，还可以通过 constants.setRenderFactory(RenderFactory)来设置Controller中所有render系列方法所使用的Render实现类。\n\n以上是 render 系方法使用例子：\n\n// 渲染名为test.html的视图，且视图类型为 JFinal Template\nrenderTemplate(”test.html”);\n \n// 生成二维码\nrenderQrCode("content");\n \n// 渲染名为test.html的视图，且视图类型为FreeMarker\nrenderFreeMarker(”test.html”);\n \n// 渲染名为test.html的视图，且视图类型为Velocity\nrenderVelocity(“test.html”);\n \n// 将所有setAttr(..)设置的变量转换成 json 并渲染\nrenderJson();\n \n// 以 "users" 为根，仅将 userList 中的数据转换成 json 并渲染\nrenderJson(“users”, userList);\n \n// 将user对象转换成 json 并渲染\nrenderJson(user);\n \n// 直接渲染 json 字符串\nrenderJson("{\\"age\\":18}" );\n \n// 仅将setAttr(“user”, user)与setAttr(“blog”, blog)设置的属性转换成json并渲染\nrenderJson(new  String[]{"user", "blog"});\n \n// 渲染名为test.zip的文件，一般用于文件下载\nrenderFile("test.zip");\n \n// 渲染纯文本内容 "Hello JFinal"\nrenderText("Hello JFinal");\n \n// 渲染 Html 内容 "Hello Html"\nrenderHtml("Hello Html");\n \n// 渲染名为 test.html 的文件，且状态为 404\nrenderError(404 , "test.html");\n \n// 渲染名为 test.html 的文件，且状态为 500\nrenderError(500 , "test.html");\n \n// 不渲染，即不向客户端返回数据\nrenderNull();\n \n// 使用自定义的MyRender来渲染\nrender(new MyRender());\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n\n\n注意：\n\n1：IE不支持contentType为application/json,在ajax上传文件完成后返回json时IE提示下载文件,解决办法是使用：render(new JsonRender().forIE())或者render(new JsonRender(params).forIE())。这种情况只出现在IE浏览器 ajax 文件上传，其它普通ajax请求不必理会。\n\n2：除renderError方法以外，在调用render系列的方法后程序并不会立即返回，如果需要立即返回需要使用return语句。在一个action中多次调用render方法只有最后一次有效。\n\n\n# 4、定制 Controller.render 系方法的实现类\n\njfinal 提供了 RenderFactory 来定制 Controller.render 所有 render 方法的实现类，以下是定制 Controller.render(String view) 实现类的代码：\n\n// 定制一个 MyRender\npublic class MyRender extends Render {\n  ...\n}\n \n// 扩展 RenderFactory，用于将 Controller.render(String view)\n// 切换到自己定制的 MyRender 上去\npublic class MyRenderFactory extends RenderFactory {\n   public Render getRender(String view) {\n      return new MyRender(view);\n   }\n}\n \n// 配置生效\npublic void configConstant(Constants me) {\n   me.setRenderFactory(new MyRenderFactory());\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n以上代码中 MyRenderFactory.getRender(...) 方法重写了父类 RenderFactory.getRender(...) 方法，将切换掉 Controller.render(String view) 的实现类。同理，可以通过覆盖掉 getJsonRender() 来切换掉 Controller.renderJson()。 Controller 中所有 render 方法的实现类都可以通过这种方式来切换到自己的实现类上去，极度方便灵活，',normalizedContent:'# 3.7 render 方法\n\n\n# 1､render(string view)\n\nrender(string view) 方法将对 view 所指向的模板进行渲染，view 参数最终指向的模板文件规则如下：\n\nstring template = baseviewpath + viewpath + view\n\n\n1\n\n\n其中 view 即为 render(string view) 方法所携带的参数值，而 baseviewpath、viewpath 则是在路由配置时指定的两个值，例如：\n\npublic void configroute(routes me) {\n   // baseviewpath 为 "/_view"，该 routes 对象之下映射的所有 controller 都将取这个值\n   me.setbaseviewpath("/_view");\n   \n   // basepath 为第三个参数 "/index"\n   me.add("/", indexcontroller.class, "/index");\n   \n   // 第三个参数省略时， basepath 取第一个参数的值 : "/project"\n   me.add("/project", projectcontroller.class);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n注意看上面的代码，其中的 me.setbaseviewpath(...) 指定的值即为 baseviewpath，其中 me.add(...) 第三个参数即为 viewpath，当第三个参数省略时默认取第一个参数的值。\n\n针对上述配置，在 indexcontroller 中使用 render 时的模板文件如下：\n\npublic class indexcontroller extends controller {\n   public void demo() {\n     // 模板指向 : "/_view/index/abc.html"\n     render("abc.html");\n   }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n上述的 render("abc.html") 将指向 webapp 目录下面的 "/_view/index/abc.html" 这个模板。\n\n使用技巧：baseviewpath 配置为项目存放模板的总的根目录。viewpath 配置为当前被映射的 controller 的子目录。最终的效果就是 render(view) 的参数 view 永远是一个最终的文件名，例如： render("index.html")，从而消除掉了 view 参数中的目录部分。\n\n当需要打破 baseviewpath 与 viewpath 这两个参数的限制时，view 参数以 "/" 打头即可：\n\nrender("/other_path/my_path/index.html");\n\n\n1\n\n\nview 参数以 "/" 打头时，将勿略掉 baseviewpath 与 viewpath 这两个值：\n\nstring template = "/other_path/my_path/index.html";\n\n\n1\n\n\n\n# 2、render(string view) 方法配置模板引擎\n\nrender(string view) 将根据 configconstant(constants me) 中配置的 me.setviewtype(viewtype) 方法选择一种模板引进渲染模板文件，例如：\n\npublic void configconstant(constants me) {\n  me.setviewtype(viewtype.jfinal_template);\n}\n\n\n1\n2\n3\n\n\n以上配置将选择 jfinal 内置的 enjoy 模板引擎渲染模板，该配置是默认值，在使用时无需配置。注意该配置仅仅针对 controller.render(string view) 方法，其它 render 系方法完全不受影响。\n\n\n# 3、render 系列其它方法\n\nrender系列方法将渲染不同类型的视图并返回给客户端。jfinal目前支持的视图类型有：jfinal template、freemarker、jsp、velocity、json、file、text、html、qrcode 二维码 等等。除了jfinal支持的视图型以外，还可以通过继承render抽象类来无限扩展视图类型。\n\n通常情况下使用controller.render(string)方法来渲染视图，使用controller.render(string)时的视图类型由jfinalconfig.configconstant(constants constants)配置中的constants. setviewtype(viewtype)来决定，该设置方法支持的viewtype有：jfinal_template、freemarker、jsp、velocity，不进行配置时的缺省配置为jfinal_template。\n\n此外，还可以通过 constants.setrenderfactory(renderfactory)来设置controller中所有render系列方法所使用的render实现类。\n\n以上是 render 系方法使用例子：\n\n// 渲染名为test.html的视图，且视图类型为 jfinal template\nrendertemplate(”test.html”);\n \n// 生成二维码\nrenderqrcode("content");\n \n// 渲染名为test.html的视图，且视图类型为freemarker\nrenderfreemarker(”test.html”);\n \n// 渲染名为test.html的视图，且视图类型为velocity\nrendervelocity(“test.html”);\n \n// 将所有setattr(..)设置的变量转换成 json 并渲染\nrenderjson();\n \n// 以 "users" 为根，仅将 userlist 中的数据转换成 json 并渲染\nrenderjson(“users”, userlist);\n \n// 将user对象转换成 json 并渲染\nrenderjson(user);\n \n// 直接渲染 json 字符串\nrenderjson("{\\"age\\":18}" );\n \n// 仅将setattr(“user”, user)与setattr(“blog”, blog)设置的属性转换成json并渲染\nrenderjson(new  string[]{"user", "blog"});\n \n// 渲染名为test.zip的文件，一般用于文件下载\nrenderfile("test.zip");\n \n// 渲染纯文本内容 "hello jfinal"\nrendertext("hello jfinal");\n \n// 渲染 html 内容 "hello html"\nrenderhtml("hello html");\n \n// 渲染名为 test.html 的文件，且状态为 404\nrendererror(404 , "test.html");\n \n// 渲染名为 test.html 的文件，且状态为 500\nrendererror(500 , "test.html");\n \n// 不渲染，即不向客户端返回数据\nrendernull();\n \n// 使用自定义的myrender来渲染\nrender(new myrender());\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n\n\n注意：\n\n1：ie不支持contenttype为application/json,在ajax上传文件完成后返回json时ie提示下载文件,解决办法是使用：render(new jsonrender().forie())或者render(new jsonrender(params).forie())。这种情况只出现在ie浏览器 ajax 文件上传，其它普通ajax请求不必理会。\n\n2：除rendererror方法以外，在调用render系列的方法后程序并不会立即返回，如果需要立即返回需要使用return语句。在一个action中多次调用render方法只有最后一次有效。\n\n\n# 4、定制 controller.render 系方法的实现类\n\njfinal 提供了 renderfactory 来定制 controller.render 所有 render 方法的实现类，以下是定制 controller.render(string view) 实现类的代码：\n\n// 定制一个 myrender\npublic class myrender extends render {\n  ...\n}\n \n// 扩展 renderfactory，用于将 controller.render(string view)\n// 切换到自己定制的 myrender 上去\npublic class myrenderfactory extends renderfactory {\n   public render getrender(string view) {\n      return new myrender(view);\n   }\n}\n \n// 配置生效\npublic void configconstant(constants me) {\n   me.setrenderfactory(new myrenderfactory());\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n以上代码中 myrenderfactory.getrender(...) 方法重写了父类 renderfactory.getrender(...) 方法，将切换掉 controller.render(string view) 的实现类。同理，可以通过覆盖掉 getjsonrender() 来切换掉 controller.renderjson()。 controller 中所有 render 方法的实现类都可以通过这种方式来切换到自己的实现类上去，极度方便灵活，',charsets:{cjk:!0}},{title:"3.9 renderQrCode 二维码生成",frontmatter:{},regularPath:"/zh/3%20Controller/3.9%20renderQrCode%20%E4%BA%8C%E7%BB%B4%E7%A0%81%E7%94%9F%E6%88%90.html",relativePath:"zh/3 Controller/3.9 renderQrCode 二维码生成.md",key:"v-55ba108c",path:"/zh/3%20Controller/3.9%20renderQrCode%20%E4%BA%8C%E7%BB%B4%E7%A0%81%E7%94%9F%E6%88%90.html",headers:[{level:3,title:"1、renderQrCode 用法",slug:"_1、renderqrcode-用法",normalizedTitle:"1、renderqrcode 用法",charIndex:29},{level:3,title:"2、maven 依赖",slug:"_2、maven-依赖",normalizedTitle:"2、maven 依赖",charIndex:489}],lastUpdated:"9/8/2023, 9:35:11 AM",lastUpdatedTimestamp:1694165711e3,headersStr:"1、renderQrCode 用法 2、maven 依赖",content:"# 3.9 renderQrCode 二维码生成\n\n\n# 1、renderQrCode 用法\n\nrenderQrCode 生成二维码极其简单方便，常见用法如下：\n\n// 二维码携带的数据\nString data = \"weixin://wxpay/bizpayurl?appid=xx&mch_id=xx......\";\n \n// 渲染二维码图片，长度与宽度为 200 像素\nrenderQrCode(data, 200, 200);\n\n\n1\n2\n3\n4\n5\n\n\n上例代码中的 data 为该二维码所携带的数据，该数据将被二维码扫描程序读取到。\n\n此外，renderQrCode 还可以指定二维码的 \"纠错级别\"，例如：\n\n// 最后一个参数 'M' 为纠错级别\nrenderQrCode(data, 200, 200, 'M');\n\n\n1\n2\n\n\n纠错参数可以在二维码图片被遮挡或者被损坏一部分时仍然可以正确读取其中的内容。\n\n纠错级别从高到低可以指定为：'H'、'Q'、'M'、'L'，其纠错率分别为：30%、25%、15%、7%。 不指定该参数值默认为 'L'。\n\n\n# 2、maven 依赖\n\n使用 renderQrCode 方法需要引入第三方依赖，其坐标如下：\n\n<dependency>\n    <groupId>com.google.zxing</groupId>\n    <artifactId>javase</artifactId>\n    <version>3.2.1</version>\n</dependency>\n\n\n1\n2\n3\n4\n5\n",normalizedContent:"# 3.9 renderqrcode 二维码生成\n\n\n# 1、renderqrcode 用法\n\nrenderqrcode 生成二维码极其简单方便，常见用法如下：\n\n// 二维码携带的数据\nstring data = \"weixin://wxpay/bizpayurl?appid=xx&mch_id=xx......\";\n \n// 渲染二维码图片，长度与宽度为 200 像素\nrenderqrcode(data, 200, 200);\n\n\n1\n2\n3\n4\n5\n\n\n上例代码中的 data 为该二维码所携带的数据，该数据将被二维码扫描程序读取到。\n\n此外，renderqrcode 还可以指定二维码的 \"纠错级别\"，例如：\n\n// 最后一个参数 'm' 为纠错级别\nrenderqrcode(data, 200, 200, 'm');\n\n\n1\n2\n\n\n纠错参数可以在二维码图片被遮挡或者被损坏一部分时仍然可以正确读取其中的内容。\n\n纠错级别从高到低可以指定为：'h'、'q'、'm'、'l'，其纠错率分别为：30%、25%、15%、7%。 不指定该参数值默认为 'l'。\n\n\n# 2、maven 依赖\n\n使用 renderqrcode 方法需要引入第三方依赖，其坐标如下：\n\n<dependency>\n    <groupid>com.google.zxing</groupid>\n    <artifactid>javase</artifactid>\n    <version>3.2.1</version>\n</dependency>\n\n\n1\n2\n3\n4\n5\n",charsets:{cjk:!0}},{title:"3.8 renderFile 文件下载",frontmatter:{},regularPath:"/zh/3%20Controller/3.8%20renderFile%20%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD.html",relativePath:"zh/3 Controller/3.8 renderFile 文件下载.md",key:"v-ad400136",path:"/zh/3%20Controller/3.8%20renderFile%20%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD.html",headers:[{level:3,title:"1、renderFile 基本用法",slug:"_1、renderfile-基本用法",normalizedTitle:"1、renderfile 基本用法",charIndex:26},{level:3,title:"2、配置 baseDownloadPath",slug:"_2、配置-basedownloadpath",normalizedTitle:"2、配置 basedownloadpath",charIndex:475},{level:3,title:"3、renderFile(File file)",slug:"_3、renderfile-file-file",normalizedTitle:"3、renderfile(file file)",charIndex:1019},{level:3,title:"4、为下载文件重新命名",slug:"_4、为下载文件重新命名",normalizedTitle:"4、为下载文件重新命名",charIndex:1275}],lastUpdated:"9/8/2023, 9:35:11 AM",lastUpdatedTimestamp:1694165711e3,headersStr:"1、renderFile 基本用法 2、配置 baseDownloadPath 3、renderFile(File file) 4、为下载文件重新命名",content:'# 3.8 renderFile 文件下载\n\n\n# 1、renderFile 基本用法\n\nrenderFile 系列方法用于下载文件。\n\nrenderFile 方法使用一个 baseDownloadPath 参数为基础路径去寻找文件。以标准的 maven 项目为例，该参数默认值指向目录：src/main/webapp/download\n\n以下是在默认配置下的使用示例：\n\n// 最终下载文件为：src/main/webapp/download/file.zip\nrenderFile("file.zip");\n \n// 最终下载文件为：src/main/webapp/download/abc/def/file.zip\nrenderFile("abc/deb/file.zip");\n\n\n1\n2\n3\n4\n5\n\n\n如上所示，最终下载文件总是：baseDownloadPath + renderFile 传入的参数\n\nbaseDownloadPath 的存在相当于固定了一个基础路路径。renderFile 总是以该路径为基础路径去寻找文件。\n\n\n# 2、配置 baseDownloadPath\n\nbaseDownloadPath 还可以在 configConstant(Constants me) 中自由配置，例如：\n\nme.setBaseDownloadPath("files"); 以标准的 maven 项目为例，以上配置的 baseDonwnloadPath 值将指向目录 src/main/webapp/files。\n\n此外，还可以将 baseDownloadPath 配置为绝对路径，那么该路径将跳出项目之外，例如：\n\n// linux、mac 系统以字符 "/" 打头是绝对路径\nme.setBaseDownloadPath("/var/download");\n \n// windows 系统以盘符打头也是绝对路径\nme.setBaseDownloadPath("D:/download");\n\n\n1\n2\n3\n4\n5\n\n\n以上配置 Linux 下以 "/" 打头则表示是绝对路径，那么 renderFile 将去该路径 "/var/download" 之下去寻找下载文件。\n\n这种配置可以跳出项目之外，便于项目资源与下载资源进行分离，也便于集群部署（单机多实例部署）时多个节点可以共享同一个目录，共享同一份下载文件。\n\n\n# 3、renderFile(File file)\n\nrenderFile(File file) 方法直接使用 File 参数去获取下载文件，可脱离 baseDownloadPath 的束缚，指向任意地点的文件，例如：\n\nString file = "D:/my-project/share/files/jfinal-all.zip";\nrenderFile(new File(file));\n\n\n1\n2\n\n\n如上所示，File 指向了一个任意地点的文件，跳出了 baseDownloadPath 的束缚。\n\n\n# 4、为下载文件重新命名\n\n如果不想使用下载文件原有的文件名，还可以指定新的下载文件名：\n\nrenderFile("老文件名.txt", "新文件名.txt");`\n\n\n1\n',normalizedContent:'# 3.8 renderfile 文件下载\n\n\n# 1、renderfile 基本用法\n\nrenderfile 系列方法用于下载文件。\n\nrenderfile 方法使用一个 basedownloadpath 参数为基础路径去寻找文件。以标准的 maven 项目为例，该参数默认值指向目录：src/main/webapp/download\n\n以下是在默认配置下的使用示例：\n\n// 最终下载文件为：src/main/webapp/download/file.zip\nrenderfile("file.zip");\n \n// 最终下载文件为：src/main/webapp/download/abc/def/file.zip\nrenderfile("abc/deb/file.zip");\n\n\n1\n2\n3\n4\n5\n\n\n如上所示，最终下载文件总是：basedownloadpath + renderfile 传入的参数\n\nbasedownloadpath 的存在相当于固定了一个基础路路径。renderfile 总是以该路径为基础路径去寻找文件。\n\n\n# 2、配置 basedownloadpath\n\nbasedownloadpath 还可以在 configconstant(constants me) 中自由配置，例如：\n\nme.setbasedownloadpath("files"); 以标准的 maven 项目为例，以上配置的 basedonwnloadpath 值将指向目录 src/main/webapp/files。\n\n此外，还可以将 basedownloadpath 配置为绝对路径，那么该路径将跳出项目之外，例如：\n\n// linux、mac 系统以字符 "/" 打头是绝对路径\nme.setbasedownloadpath("/var/download");\n \n// windows 系统以盘符打头也是绝对路径\nme.setbasedownloadpath("d:/download");\n\n\n1\n2\n3\n4\n5\n\n\n以上配置 linux 下以 "/" 打头则表示是绝对路径，那么 renderfile 将去该路径 "/var/download" 之下去寻找下载文件。\n\n这种配置可以跳出项目之外，便于项目资源与下载资源进行分离，也便于集群部署（单机多实例部署）时多个节点可以共享同一个目录，共享同一份下载文件。\n\n\n# 3、renderfile(file file)\n\nrenderfile(file file) 方法直接使用 file 参数去获取下载文件，可脱离 basedownloadpath 的束缚，指向任意地点的文件，例如：\n\nstring file = "d:/my-project/share/files/jfinal-all.zip";\nrenderfile(new file(file));\n\n\n1\n2\n\n\n如上所示，file 指向了一个任意地点的文件，跳出了 basedownloadpath 的束缚。\n\n\n# 4、为下载文件重新命名\n\n如果不想使用下载文件原有的文件名，还可以指定新的下载文件名：\n\nrenderfile("老文件名.txt", "新文件名.txt");`\n\n\n1\n',charsets:{cjk:!0}},{title:"4.1 概述",frontmatter:{},regularPath:"/zh/4%20AOP/4.1%20%E6%A6%82%E8%BF%B0.html",relativePath:"zh/4 AOP/4.1 概述.md",key:"v-60f47108",path:"/zh/4%20AOP/4.1%20%E6%A6%82%E8%BF%B0.html",lastUpdated:"9/8/2023, 10:00:47 AM",lastUpdatedTimestamp:1694167247e3,headersStr:null,content:"# 4.1 概述\n\n传统AOP实现需要引入大量繁杂而多余的概念，例如：Aspect、Advice、Joinpoint、Poincut、Introduction、Weaving、Around等等，并且需要引入IOC容器并配合大量的XML或者annotation来进行组件装配。\n\n传统AOP不但学习成本极高，开发效率极低，开发体验极差，而且还影响系统性能，尤其是在开发阶段造成项目启动缓慢，极大影响开发效率。\n\nJFinal采用极速化的AOP设计，专注AOP最核心的目标，将概念减少到极致，仅有三个概念：Interceptor、Before、Clear，并且无需引入IOC也无需使用啰嗦的XML。",normalizedContent:"# 4.1 概述\n\n传统aop实现需要引入大量繁杂而多余的概念，例如：aspect、advice、joinpoint、poincut、introduction、weaving、around等等，并且需要引入ioc容器并配合大量的xml或者annotation来进行组件装配。\n\n传统aop不但学习成本极高，开发效率极低，开发体验极差，而且还影响系统性能，尤其是在开发阶段造成项目启动缓慢，极大影响开发效率。\n\njfinal采用极速化的aop设计，专注aop最核心的目标，将概念减少到极致，仅有三个概念：interceptor、before、clear，并且无需引入ioc也无需使用啰嗦的xml。",charsets:{cjk:!0}},{title:"4.2 Interceptor",frontmatter:{},regularPath:"/zh/4%20AOP/4.2%20Interceptor.html",relativePath:"zh/4 AOP/4.2 Interceptor.md",key:"v-8dd3db5a",path:"/zh/4%20AOP/4.2%20Interceptor.html",headers:[{level:3,title:"1、基本用法",slug:"_1、基本用法",normalizedTitle:"1、基本用法",charIndex:22},{level:3,title:"2､ 全局共享，注意线程安全问题",slug:"_2、-全局共享-注意线程安全问题",normalizedTitle:"2､ 全局共享，注意线程安全问题",charIndex:1840}],lastUpdated:"9/8/2023, 10:00:47 AM",lastUpdatedTimestamp:1694167247e3,headersStr:"1、基本用法 2､ 全局共享，注意线程安全问题",content:'# 4.2 Interceptor\n\n\n# 1、基本用法\n\nInterceptor 可以对方法进行拦截，并提供机会在方法的前后添加切面代码，实现 AOP 的核心目标。Interceptor 接口仅仅定义了一个方法 public void intercept(Invocation inv)。以下是简单示例：\n\npublic class DemoInterceptor implements Interceptor {\n    public void intercept(Invocation inv) {\n       System.out.println("Before method invoking");\n       inv.invoke();\n       System.out.println("After method invoking");\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n以上代码中的 DemoInterceptor 将拦截目标方法，并且在目标方法调用前后向控制台输出文本。inv.invoke() 这一行代码是对目标方法的调用，在这一行代码的前后插入切面代码可以很方便地实现AOP。\n\n注意：必须调用 inv.invoke() 方法，才能将当前调用传递到后续的 Interceptor 与 Action。\n\n常见错误：目前为止仍有很多同学忘了调用 inv.invoke() 方法，造成 controller 中的 action 不会被执行。在此再次强调一次，一定要调用一次 inv.invoke()，除非是刻意不去调用剩下的拦截器与 action，这种情况仍然需要使用 inv.getController().render()/renderJson() 调用一下相关的 render() 方法为客户端响应数据。\n\nInvocation 作为 Interceptor 接口 intercept 方法中的唯一参数，提供了很多便利的方法在拦截器中使用。以下为 Invocation 中的方法：\n\n方法                             描述\nvoid invoke()                  传递本次调用，调用剩下的拦截器与目标方法\nController getController()     获取 Action 调用的Controller对象（仅用于控制层拦截）\nString getActionKey()          获取 Action 调用的action key值（仅用于控制层拦截）\nString getControllerKey()      获取 Action 调用的Controller key值（仅用于控制层拦截）\nString getViewPath()           获取 Action 调用的视图路径（仅用于控制层拦截）\n<T> getTarget()                获取被拦截方法所属的对象\nMethod getMethod()             获取被拦截方法的 Method 对象\nString getMethodName()         获取被拦截方法的方法名\nObject[] agetArgs()            获取被拦截方法的所有参数值\nObject getArg(int)             获取被拦截方法指定序号的参数值\n<T> getReturnValue()           获取被拦截方法的返回值\nvoid setArg(int)               设置被拦截方法指定序号的参数值\nvoid setReturnValue(Object)    设置被拦截方法的返回值\nboolean isActionInvocation()   判断是否为 Action 调用，也即是否为控制层拦截\n\n更正一下上面截图中倒数第三行的一处手误：setArg(int) 应该改为 setArg(int, Object)\n\n注意：jfinal 4.9.03 版本将 getControllerKey() 更名为了 getControllerPath()，原方法被保留仍然可用。更名为 getControllerPath() 是为了让多个 Controller 可以共享同一个 controllerPath 值。\n\n\n# 2､ 全局共享，注意线程安全问题\n\nInterceptor 是全局共享的，所以如果要在其中使用属性需要保证其属性是线程安全的，如下代码将是错误的：\n\npublic class MyInterceptor implements Interceptor {\n \n   private int value = 123;\n   \n   public void intercept(Invocation inv) {\n       // 多线程将会并发访问 value 值，造成错乱\n       value++;\n       \n       inv.invoke();\n   }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n如上代码所示，其中的 value 属性将会被多线程访问到，从而引发线程安全问题。',normalizedContent:'# 4.2 interceptor\n\n\n# 1、基本用法\n\ninterceptor 可以对方法进行拦截，并提供机会在方法的前后添加切面代码，实现 aop 的核心目标。interceptor 接口仅仅定义了一个方法 public void intercept(invocation inv)。以下是简单示例：\n\npublic class demointerceptor implements interceptor {\n    public void intercept(invocation inv) {\n       system.out.println("before method invoking");\n       inv.invoke();\n       system.out.println("after method invoking");\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n以上代码中的 demointerceptor 将拦截目标方法，并且在目标方法调用前后向控制台输出文本。inv.invoke() 这一行代码是对目标方法的调用，在这一行代码的前后插入切面代码可以很方便地实现aop。\n\n注意：必须调用 inv.invoke() 方法，才能将当前调用传递到后续的 interceptor 与 action。\n\n常见错误：目前为止仍有很多同学忘了调用 inv.invoke() 方法，造成 controller 中的 action 不会被执行。在此再次强调一次，一定要调用一次 inv.invoke()，除非是刻意不去调用剩下的拦截器与 action，这种情况仍然需要使用 inv.getcontroller().render()/renderjson() 调用一下相关的 render() 方法为客户端响应数据。\n\ninvocation 作为 interceptor 接口 intercept 方法中的唯一参数，提供了很多便利的方法在拦截器中使用。以下为 invocation 中的方法：\n\n方法                             描述\nvoid invoke()                  传递本次调用，调用剩下的拦截器与目标方法\ncontroller getcontroller()     获取 action 调用的controller对象（仅用于控制层拦截）\nstring getactionkey()          获取 action 调用的action key值（仅用于控制层拦截）\nstring getcontrollerkey()      获取 action 调用的controller key值（仅用于控制层拦截）\nstring getviewpath()           获取 action 调用的视图路径（仅用于控制层拦截）\n<t> gettarget()                获取被拦截方法所属的对象\nmethod getmethod()             获取被拦截方法的 method 对象\nstring getmethodname()         获取被拦截方法的方法名\nobject[] agetargs()            获取被拦截方法的所有参数值\nobject getarg(int)             获取被拦截方法指定序号的参数值\n<t> getreturnvalue()           获取被拦截方法的返回值\nvoid setarg(int)               设置被拦截方法指定序号的参数值\nvoid setreturnvalue(object)    设置被拦截方法的返回值\nboolean isactioninvocation()   判断是否为 action 调用，也即是否为控制层拦截\n\n更正一下上面截图中倒数第三行的一处手误：setarg(int) 应该改为 setarg(int, object)\n\n注意：jfinal 4.9.03 版本将 getcontrollerkey() 更名为了 getcontrollerpath()，原方法被保留仍然可用。更名为 getcontrollerpath() 是为了让多个 controller 可以共享同一个 controllerpath 值。\n\n\n# 2､ 全局共享，注意线程安全问题\n\ninterceptor 是全局共享的，所以如果要在其中使用属性需要保证其属性是线程安全的，如下代码将是错误的：\n\npublic class myinterceptor implements interceptor {\n \n   private int value = 123;\n   \n   public void intercept(invocation inv) {\n       // 多线程将会并发访问 value 值，造成错乱\n       value++;\n       \n       inv.invoke();\n   }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n如上代码所示，其中的 value 属性将会被多线程访问到，从而引发线程安全问题。',charsets:{cjk:!0}},{title:"4.3 Before",frontmatter:{},regularPath:"/zh/4%20AOP/4.3%20Before.html",relativePath:"zh/4 AOP/4.3 Before.md",key:"v-47bdc4a1",path:"/zh/4%20AOP/4.3%20Before.html",lastUpdated:"9/8/2023, 10:00:47 AM",lastUpdatedTimestamp:1694167247e3,headersStr:null,content:"# 4.3 Before\n\nBefore注解用来对拦截器进行配置，该注解可配置Class、Method级别的拦截器，以下是代码示例：\n\n// 配置一个Class级别的拦截器，她将拦截本类中的所有方法\n@Before(AaaInter.class)\npublic class BlogController extends Controller {\n \n  // 配置多个Method级别的拦截器，仅拦截本方法\n  @Before({BbbInter.class, CccInter.class})\n  public void index() {\n  }\n \n  // 未配置Method级别拦截器，但会被Class级别拦截器AaaInter所拦截\n  public void show() {\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n如上代码所示，Before可以将拦截器配置为Class级别与Method级别，前者将拦截本类中所有方法，后者仅拦截本方法。此外Before可以同时配置多个拦截器，只需用在大括号内用逗号将多个拦截器进行分隔即可。\n\n除了 Class 与 Method 级别的拦截器以外，JFinal 还支持全局拦截器以及 Routes 拦截器，全局拦截器分为控制层全局拦截器与业务层全局拦截器，前者拦截控制 层所有 Action 方法，后者拦截业务层所有方法。\n\n全局拦截器需要在 YourJFinalConfig 进行配置，以下是配置示例：\n\npublic class YourJFinalConfig extends JFinalConfig {\n   public void configInterceptor(Interceptors me) {\n      // 添加控制层全局拦截器\n      me.addGlobalActionInterceptor(new GlobalActionInterceptor());\n  \n      // 添加业务层全局拦截器\n      me.addGlobalServiceInterceptor(new GlobalServiceInterceptor());\n  \n      // 为兼容老版本保留的方法，功能与addGlobalActionInterceptor完全一样\n      me.add(new GlobalActionInterceptor());\n   }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n当某个Method被多个级别的拦截器所拦截，拦截器各级别执行的次序依次为：Global、Routes、Class、Method，如果同级中有多个拦截器，那么同级中的执行次序是：配置在前面的先执行。",normalizedContent:"# 4.3 before\n\nbefore注解用来对拦截器进行配置，该注解可配置class、method级别的拦截器，以下是代码示例：\n\n// 配置一个class级别的拦截器，她将拦截本类中的所有方法\n@before(aaainter.class)\npublic class blogcontroller extends controller {\n \n  // 配置多个method级别的拦截器，仅拦截本方法\n  @before({bbbinter.class, cccinter.class})\n  public void index() {\n  }\n \n  // 未配置method级别拦截器，但会被class级别拦截器aaainter所拦截\n  public void show() {\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n如上代码所示，before可以将拦截器配置为class级别与method级别，前者将拦截本类中所有方法，后者仅拦截本方法。此外before可以同时配置多个拦截器，只需用在大括号内用逗号将多个拦截器进行分隔即可。\n\n除了 class 与 method 级别的拦截器以外，jfinal 还支持全局拦截器以及 routes 拦截器，全局拦截器分为控制层全局拦截器与业务层全局拦截器，前者拦截控制 层所有 action 方法，后者拦截业务层所有方法。\n\n全局拦截器需要在 yourjfinalconfig 进行配置，以下是配置示例：\n\npublic class yourjfinalconfig extends jfinalconfig {\n   public void configinterceptor(interceptors me) {\n      // 添加控制层全局拦截器\n      me.addglobalactioninterceptor(new globalactioninterceptor());\n  \n      // 添加业务层全局拦截器\n      me.addglobalserviceinterceptor(new globalserviceinterceptor());\n  \n      // 为兼容老版本保留的方法，功能与addglobalactioninterceptor完全一样\n      me.add(new globalactioninterceptor());\n   }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n当某个method被多个级别的拦截器所拦截，拦截器各级别执行的次序依次为：global、routes、class、method，如果同级中有多个拦截器，那么同级中的执行次序是：配置在前面的先执行。",charsets:{cjk:!0}},{title:"4.4 Clear",frontmatter:{},regularPath:"/zh/4%20AOP/4.4%20Clear.html",relativePath:"zh/4 AOP/4.4 Clear.md",key:"v-17da8b82",path:"/zh/4%20AOP/4.4%20Clear.html",lastUpdated:"9/8/2023, 10:00:47 AM",lastUpdatedTimestamp:1694167247e3,headersStr:null,content:"# 4.4 Clear\n\n拦截器从上到下依次分为Global、Routes、Class、Method四个层次，Clear用于清除自身所处层次以上层的拦截器。\n\nClear声明在Method层时将针对Global、Routes、Class进行清除。Clear声明在Class层时将针对Global、Routes 进行清除。Clear注解携带参数时清除目标层中指定的拦截器。\n\nClear用法记忆技巧：\n\n * 一共有Global、Routes、Class、Method 四层拦截器\n\n * 清除只针对Clear本身所处层的向上所有层，本层与下层不清除\n\n * 不带参数时清除所有拦截器，带参时清除参数指定的拦截器\n\n在某些应用场景之下，需要移除Global或Class拦截器。例如某个后台管理系统，配置了一个全局的权限拦截器，但是其登录action就必须清除掉她，否则无法完成登录操作，以下是代码示例：\n\n// login方法需要移除该权限拦截器才能正常登录\n@Before(AuthInterceptor.class)\npublic class UserController extends Controller {\n    // AuthInterceptor 已被Clear清除掉，不会被其拦截\n    @Clear\n    public void login() {\n    }\n    \n    // 此方法将被AuthInterceptor拦截\n    public void show() {\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nClear注解带有参数时，能清除指定的拦截器，以下是一个更加全面的示例：\n\n@Before(AAA.class)\npublic class UserController extends Controller {\n  @Clear\n  @Before(BBB.class)\n  public void login() {\n     // Global、Class级别的拦截器将被清除，但本方法上声明的BBB不受影响\n  }\n \n  @Clear({AAA.class, CCC.class})// 清除指定的拦截器AAA与CCC\n  @Before(CCC.class)\n  public void show() {\n     // 虽然Clear注解中指定清除CCC，但她无法被清除，因为清除操作只针对于本层以上的各层\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n上面的清除都用在了 method 上，还可以将其用于 class 之上，例如：\n\n@Clear(AAA.class)\npublic class UserController {\n   public void index() {\n      ...\n   }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n如上所示，@Clear(AAA.class) 将清除上层也就是 Global、Route 这两层中配置的 AAA.java 这个拦截器。",normalizedContent:"# 4.4 clear\n\n拦截器从上到下依次分为global、routes、class、method四个层次，clear用于清除自身所处层次以上层的拦截器。\n\nclear声明在method层时将针对global、routes、class进行清除。clear声明在class层时将针对global、routes 进行清除。clear注解携带参数时清除目标层中指定的拦截器。\n\nclear用法记忆技巧：\n\n * 一共有global、routes、class、method 四层拦截器\n\n * 清除只针对clear本身所处层的向上所有层，本层与下层不清除\n\n * 不带参数时清除所有拦截器，带参时清除参数指定的拦截器\n\n在某些应用场景之下，需要移除global或class拦截器。例如某个后台管理系统，配置了一个全局的权限拦截器，但是其登录action就必须清除掉她，否则无法完成登录操作，以下是代码示例：\n\n// login方法需要移除该权限拦截器才能正常登录\n@before(authinterceptor.class)\npublic class usercontroller extends controller {\n    // authinterceptor 已被clear清除掉，不会被其拦截\n    @clear\n    public void login() {\n    }\n    \n    // 此方法将被authinterceptor拦截\n    public void show() {\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nclear注解带有参数时，能清除指定的拦截器，以下是一个更加全面的示例：\n\n@before(aaa.class)\npublic class usercontroller extends controller {\n  @clear\n  @before(bbb.class)\n  public void login() {\n     // global、class级别的拦截器将被清除，但本方法上声明的bbb不受影响\n  }\n \n  @clear({aaa.class, ccc.class})// 清除指定的拦截器aaa与ccc\n  @before(ccc.class)\n  public void show() {\n     // 虽然clear注解中指定清除ccc，但她无法被清除，因为清除操作只针对于本层以上的各层\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n上面的清除都用在了 method 上，还可以将其用于 class 之上，例如：\n\n@clear(aaa.class)\npublic class usercontroller {\n   public void index() {\n      ...\n   }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n如上所示，@clear(aaa.class) 将清除上层也就是 global、route 这两层中配置的 aaa.java 这个拦截器。",charsets:{cjk:!0}},{title:"4.5 Inject 依赖注入",frontmatter:{},regularPath:"/zh/4%20AOP/4.5%20Inject%20%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5.html",relativePath:"zh/4 AOP/4.5 Inject 依赖注入.md",key:"v-971a23ec",path:"/zh/4%20AOP/4.5%20Inject%20%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5.html",lastUpdated:"9/8/2023, 10:00:47 AM",lastUpdatedTimestamp:1694167247e3,headersStr:null,content:"# 4.5 Inject 依赖注入\n\n使用 @Inject 注解可以向 Controller 以及 Interceptor 中注入依赖对象，使用注入功能需要如下配置：\n\npublic void configConstant(Constants me) {\n    // 开启对 jfinal web 项目组件 Controller、Interceptor、Validator 的注入\n    me.setInjectDependency(true);\n    \n    // 开启对超类的注入。不开启时可以在超类中通过 Aop.get(...) 进行注入\n    me.setInjectSuperClass(true);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n以上的 me.setInjectDependency(true) 仅是针于 jfinal 的 web 组件而言的配置。而 Aop.get(...)、Aop.inject(...) 无需配置即可支持注入。\n\n配置完成以后就可以在控制器中使用了，例如：\n\npublic class AccountController {\n   \n   @Inject\n   AccountService service;    // 此处会注入依赖对象\n   \n   public void index() {\n       service.justDoIt();    // 调用被注入对象的方法\n   }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n@Inject 还可以用于拦截器的属性注入，例如：\n\npublic class MyInterceptor implements Interceptor {\n    \n    @Inject\n    Service service;    // 此处会注入依赖对象\n    \n    public void intercept(Invocation inv) {\n        service.justDoIt();    // 调用被注入对象的方法\n        inv.invoke();\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n特别注意：使用 Inject 注入的前提是使用 @Inject 注解的类的对象的创建是由 jfinal 接管的，这样 jfinal 才有机会对其进行注入。例如 Controller、Interceptor、Validator 的创建是 jfinal 接管的，所以这三种组件中可以使用 @Inject 注入。\n\n此外：注入动作可以向下传递。例如在 Controller 中使用 @Inject 注入一个 AaaService，那么在 AaaService 中可以使用 @Inject 注入一个 BbbService，如此可以一直向下传递进行注入.\n\n如果需要创建的对象并不是 jfinal 接管的，那么可以使用 Aop.get(...) 方法进行依赖对象的创建以及注入，例如：\n\npublic class MyKit {\n   \n   static Service service = Aop.get(Service.class);\n   \n   public void doIt() {\n      service.justDoIt();\n   }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n由于 MyKit 的创建并不是 jfinal 接管的，所以不能使用 @Inject 进行依赖注入。 而 Controller、Interceptor 的创建和组装是由 jfinal 接管的，所以可以使用 @Inject 注入依赖。\n\n有了 Aop.get(...) 就可以在任何地方创建对象并且对创建的对象进行注入。此外还可以使用 Aop.inject(...) 仅仅向对象注入依赖但不创建对象。\n\n@Inject 注解还支持指定注入的实现类，例如下面的代码，将为 Service 注入 MyService 对象：\n\n@Inject(MyService.class)\nService service;\n\n\n1\n2\n\n\n当 @Inject(...) 注解不指定被注入的类型时，还可以通过 AopManager.me().addMapping(...) 事先添加映射来指定被注入的类型，例如：\n\nAopManager.me().addMapping(Service.class, MyService.class);\n\n\n1\n\n\n通过上面的映射，下面的代码将会为 Service 注入 MyService\n\npublic class IndexController {\n    \n    @Inject\n    Service service;\n    \n    public void index() {\n        service.justDoIt();\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n",normalizedContent:"# 4.5 inject 依赖注入\n\n使用 @inject 注解可以向 controller 以及 interceptor 中注入依赖对象，使用注入功能需要如下配置：\n\npublic void configconstant(constants me) {\n    // 开启对 jfinal web 项目组件 controller、interceptor、validator 的注入\n    me.setinjectdependency(true);\n    \n    // 开启对超类的注入。不开启时可以在超类中通过 aop.get(...) 进行注入\n    me.setinjectsuperclass(true);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n以上的 me.setinjectdependency(true) 仅是针于 jfinal 的 web 组件而言的配置。而 aop.get(...)、aop.inject(...) 无需配置即可支持注入。\n\n配置完成以后就可以在控制器中使用了，例如：\n\npublic class accountcontroller {\n   \n   @inject\n   accountservice service;    // 此处会注入依赖对象\n   \n   public void index() {\n       service.justdoit();    // 调用被注入对象的方法\n   }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n@inject 还可以用于拦截器的属性注入，例如：\n\npublic class myinterceptor implements interceptor {\n    \n    @inject\n    service service;    // 此处会注入依赖对象\n    \n    public void intercept(invocation inv) {\n        service.justdoit();    // 调用被注入对象的方法\n        inv.invoke();\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n特别注意：使用 inject 注入的前提是使用 @inject 注解的类的对象的创建是由 jfinal 接管的，这样 jfinal 才有机会对其进行注入。例如 controller、interceptor、validator 的创建是 jfinal 接管的，所以这三种组件中可以使用 @inject 注入。\n\n此外：注入动作可以向下传递。例如在 controller 中使用 @inject 注入一个 aaaservice，那么在 aaaservice 中可以使用 @inject 注入一个 bbbservice，如此可以一直向下传递进行注入.\n\n如果需要创建的对象并不是 jfinal 接管的，那么可以使用 aop.get(...) 方法进行依赖对象的创建以及注入，例如：\n\npublic class mykit {\n   \n   static service service = aop.get(service.class);\n   \n   public void doit() {\n      service.justdoit();\n   }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n由于 mykit 的创建并不是 jfinal 接管的，所以不能使用 @inject 进行依赖注入。 而 controller、interceptor 的创建和组装是由 jfinal 接管的，所以可以使用 @inject 注入依赖。\n\n有了 aop.get(...) 就可以在任何地方创建对象并且对创建的对象进行注入。此外还可以使用 aop.inject(...) 仅仅向对象注入依赖但不创建对象。\n\n@inject 注解还支持指定注入的实现类，例如下面的代码，将为 service 注入 myservice 对象：\n\n@inject(myservice.class)\nservice service;\n\n\n1\n2\n\n\n当 @inject(...) 注解不指定被注入的类型时，还可以通过 aopmanager.me().addmapping(...) 事先添加映射来指定被注入的类型，例如：\n\naopmanager.me().addmapping(service.class, myservice.class);\n\n\n1\n\n\n通过上面的映射，下面的代码将会为 service 注入 myservice\n\npublic class indexcontroller {\n    \n    @inject\n    service service;\n    \n    public void index() {\n        service.justdoit();\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n",charsets:{cjk:!0}},{title:"4.6 Aop 工具",frontmatter:{},regularPath:"/zh/4%20AOP/4.6%20Aop%20%E5%B7%A5%E5%85%B7.html",relativePath:"zh/4 AOP/4.6 Aop 工具.md",key:"v-6d58b377",path:"/zh/4%20AOP/4.6%20Aop%20%E5%B7%A5%E5%85%B7.html",headers:[{level:3,title:"1、Aop",slug:"_1、aop",normalizedTitle:"1、aop",charIndex:17},{level:3,title:"2、AopManager",slug:"_2、aopmanager",normalizedTitle:"2、aopmanager",charIndex:421}],lastUpdated:"9/8/2023, 10:00:47 AM",lastUpdatedTimestamp:1694167247e3,headersStr:"1、Aop 2、AopManager",content:"# 4.6 Aop 工具\n\n\n# 1、Aop\n\n# 1.1、get(...)\n\nAop.get(...) 可以在任意时空创建对象并且对其进行依赖注入，例如：\n\nService service = Aop.get(Service.class);\n\n\n1\n\n\n以上代码会创建 Service 对象，如果 Service 中使用了 @Before 配置过拦截器，那么会生效，如果 Service 中的属性使用了 @Inject，则会被注入依赖对象。\n\n# 1.2、inject(...)\n\nAop.inject(...) 可以在任意时空对目标对象进行注入，该方法相对于 Aop.get(...) 方法少一个对象创建功能：\n\nService service = new Service(...);\nAop.inject(service);\n\n\n1\n2\n\n\n以上代码将会对 Service 类中使用 @Inject 注解过的属性进行依赖注入。\n\n\n# 2、AopManager\n\nAopManager 用于管理 Aop 的各种配置\n\n# 2.1、addMapping(...)\n\naddMapping 用于建立接口、抽象类到其实现类之间的映射关系，例如：\n\nAopManager.me().addMapping(Service.class, MyService.class);\n\n\n1\n\n\n通过上面的映射，下面的代码将会为 Serivce 创建 MyService 对象，而非 Service 对象：\n\n// 这里获取到的是 MyService 对象\nAop.get(Service.class);\n \n// 这里被注入的是 MyService 对象\n@Inject\nService service;\n\n\n1\n2\n3\n4\n5\n6\n\n\nAopManager.me().addMapping(...) 的用途是为接口、抽象类指定被注入的具体实现类。\n\n# 2.2、addSingletonObject(...)\n\n由于 Aop 创建对象时不支持为构造方法传递参数，所以还需提供 addSingletonObject(...) 添加单例对象：\n\n// Service 类的构造方法中传入了两个参数\nService service = new Service(paraAaa, paraBbb);\nAopManager.me().addSingletonObject(service);\n\n\n1\n2\n3\n\n\n上面代码添加完成以后，可以在任何地方通过下面的方式获取单例对象：\n\n// 获取时使用单例对象\nservice = Aop.get(Service.class);\n \n// 注入时也可以使用前面配置的单例对象\n@Inject\nService service;\n\n\n1\n2\n3\n4\n5\n6\n\n\n在添加为单例对象之前还可以先为其注入依赖对象：\n\nService service = new Service(paraAaa, paraBbb);\n// 这里是对 Service 进行依赖注入\nAop.inject(service);\n \n// 为单例注入依赖以后，再添加为单例供后续使用\nAopManager.me().addSingletonObject(service);\n\n\n1\n2\n3\n4\n5\n6\n\n\n# 2.3、setAopFactory(...)\n\nsetAopFactory(...) 用于用户扩展出 AopFactory 实现类，实现更多扩展性功能，例如 jboot 项目中对于注入远程访问对象的扩展：https://gitee.com/JbootProjects/jboot/blob/master/src/main/java/io/jboot/aop/JbootAopFactory.java ，JbootAopFactory.java 中的 doInjectRPC 即注入远程过程调用的实现类。",normalizedContent:"# 4.6 aop 工具\n\n\n# 1、aop\n\n# 1.1、get(...)\n\naop.get(...) 可以在任意时空创建对象并且对其进行依赖注入，例如：\n\nservice service = aop.get(service.class);\n\n\n1\n\n\n以上代码会创建 service 对象，如果 service 中使用了 @before 配置过拦截器，那么会生效，如果 service 中的属性使用了 @inject，则会被注入依赖对象。\n\n# 1.2、inject(...)\n\naop.inject(...) 可以在任意时空对目标对象进行注入，该方法相对于 aop.get(...) 方法少一个对象创建功能：\n\nservice service = new service(...);\naop.inject(service);\n\n\n1\n2\n\n\n以上代码将会对 service 类中使用 @inject 注解过的属性进行依赖注入。\n\n\n# 2、aopmanager\n\naopmanager 用于管理 aop 的各种配置\n\n# 2.1、addmapping(...)\n\naddmapping 用于建立接口、抽象类到其实现类之间的映射关系，例如：\n\naopmanager.me().addmapping(service.class, myservice.class);\n\n\n1\n\n\n通过上面的映射，下面的代码将会为 serivce 创建 myservice 对象，而非 service 对象：\n\n// 这里获取到的是 myservice 对象\naop.get(service.class);\n \n// 这里被注入的是 myservice 对象\n@inject\nservice service;\n\n\n1\n2\n3\n4\n5\n6\n\n\naopmanager.me().addmapping(...) 的用途是为接口、抽象类指定被注入的具体实现类。\n\n# 2.2、addsingletonobject(...)\n\n由于 aop 创建对象时不支持为构造方法传递参数，所以还需提供 addsingletonobject(...) 添加单例对象：\n\n// service 类的构造方法中传入了两个参数\nservice service = new service(paraaaa, parabbb);\naopmanager.me().addsingletonobject(service);\n\n\n1\n2\n3\n\n\n上面代码添加完成以后，可以在任何地方通过下面的方式获取单例对象：\n\n// 获取时使用单例对象\nservice = aop.get(service.class);\n \n// 注入时也可以使用前面配置的单例对象\n@inject\nservice service;\n\n\n1\n2\n3\n4\n5\n6\n\n\n在添加为单例对象之前还可以先为其注入依赖对象：\n\nservice service = new service(paraaaa, parabbb);\n// 这里是对 service 进行依赖注入\naop.inject(service);\n \n// 为单例注入依赖以后，再添加为单例供后续使用\naopmanager.me().addsingletonobject(service);\n\n\n1\n2\n3\n4\n5\n6\n\n\n# 2.3、setaopfactory(...)\n\nsetaopfactory(...) 用于用户扩展出 aopfactory 实现类，实现更多扩展性功能，例如 jboot 项目中对于注入远程访问对象的扩展：https://gitee.com/jbootprojects/jboot/blob/master/src/main/java/io/jboot/aop/jbootaopfactory.java ，jbootaopfactory.java 中的 doinjectrpc 即注入远程过程调用的实现类。",charsets:{cjk:!0}},{title:"4.7 Routes 级别拦截器",frontmatter:{},regularPath:"/zh/4%20AOP/4.7%20Routes%20%E7%BA%A7%E5%88%AB%E6%8B%A6%E6%88%AA%E5%99%A8.html",relativePath:"zh/4 AOP/4.7 Routes 级别拦截器.md",key:"v-d30df2d6",path:"/zh/4%20AOP/4.7%20Routes%20%E7%BA%A7%E5%88%AB%E6%8B%A6%E6%88%AA%E5%99%A8.html",lastUpdated:"9/8/2023, 10:00:47 AM",lastUpdatedTimestamp:1694167247e3,headersStr:null,content:'# 4.7 Routes 级别拦截器\n\nRoutes级别拦截器是指在Routes中添加的拦截器，如下是示例：\n\n/**\n * 后端路由\n */\npublic class AdminRoutes extends Routes {\n \n  public void config() {\n     // 此处配置 Routes 级别的拦截器，可配置多个\n     addInterceptor(new AdminAuthInterceptor());\n \n     add("/admin", IndexAdminController.class, "/index");\n     add("/admin/project", ProjectAdminController.class, "/project");\n     add("/admin/share", ShareAdminController.class, "/share");\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n在上例中，AdminAuthInterceptor 将拦截IndexAdminController、ProjectAdminController、ShareAdminController 中所有的 action 方法。\n\nRoutes 拦截器在功能上通过一行代码，同时为多个 Controller 配置好相同的拦截器，减少了代码冗余。Routes 级别拦截器将在 Class 级别拦截器之前被调用。',normalizedContent:'# 4.7 routes 级别拦截器\n\nroutes级别拦截器是指在routes中添加的拦截器，如下是示例：\n\n/**\n * 后端路由\n */\npublic class adminroutes extends routes {\n \n  public void config() {\n     // 此处配置 routes 级别的拦截器，可配置多个\n     addinterceptor(new adminauthinterceptor());\n \n     add("/admin", indexadmincontroller.class, "/index");\n     add("/admin/project", projectadmincontroller.class, "/project");\n     add("/admin/share", shareadmincontroller.class, "/share");\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n在上例中，adminauthinterceptor 将拦截indexadmincontroller、projectadmincontroller、shareadmincontroller 中所有的 action 方法。\n\nroutes 拦截器在功能上通过一行代码，同时为多个 controller 配置好相同的拦截器，减少了代码冗余。routes 级别拦截器将在 class 级别拦截器之前被调用。',charsets:{cjk:!0}},{title:"4.8 Proxy 动态代理",frontmatter:{},regularPath:"/zh/4%20AOP/4.8%20Proxy%20%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86.html",relativePath:"zh/4 AOP/4.8 Proxy 动态代理.md",key:"v-0f04d02e",path:"/zh/4%20AOP/4.8%20Proxy%20%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86.html",lastUpdated:"9/17/2023, 6:16:57 AM",lastUpdatedTimestamp:1694931417e3,headersStr:null,content:'# 4.8 Proxy 动态代理\n\nProxy 动态代理是 jfinal AOP 的底层实现机制。jfinal 4.0 版本新增了 com.jfinal.proxy 模块用于消除对 cglib/asm 的依赖来实现动态代理。\n\nproxy 模块需要运行在 JDK 环境之下，如果需要运行在 JRE 之下，可以添加如下配置来支持：\n\npublic void configConstant(Constants me) {\n \n  // 4.6 之前的版本的配置方式: me.setProxyFactory(new CglibProxyFactory());\n  me.setToCglibProxyFactory();  // 4.6 版本新增配置方式\n}\n\n\n1\n2\n3\n4\n5\n\n\n面的配置将切换到 cglib 对 proxy 模块的实现，需要在 pom.xml 中添加其 maven 依赖：\n\n<dependency>\n   <groupId>cglib</groupId>\n   <artifactId>cglib-nodep</artifactId>\n   <version>3.2.5</version>\n</dependency>\n\n\n1\n2\n3\n4\n5\n\n\n如果是在 "非 web 环境" 下使用，配置方法如下：\n\n// 4.6 之前的版本的配置方式: ProxyManager.me().setProxyFactory(new CglibProxyFactory());\nProxyManager.me().setToCglibProxyFactory();\n\n\n1\n2\n',normalizedContent:'# 4.8 proxy 动态代理\n\nproxy 动态代理是 jfinal aop 的底层实现机制。jfinal 4.0 版本新增了 com.jfinal.proxy 模块用于消除对 cglib/asm 的依赖来实现动态代理。\n\nproxy 模块需要运行在 jdk 环境之下，如果需要运行在 jre 之下，可以添加如下配置来支持：\n\npublic void configconstant(constants me) {\n \n  // 4.6 之前的版本的配置方式: me.setproxyfactory(new cglibproxyfactory());\n  me.settocglibproxyfactory();  // 4.6 版本新增配置方式\n}\n\n\n1\n2\n3\n4\n5\n\n\n面的配置将切换到 cglib 对 proxy 模块的实现，需要在 pom.xml 中添加其 maven 依赖：\n\n<dependency>\n   <groupid>cglib</groupid>\n   <artifactid>cglib-nodep</artifactid>\n   <version>3.2.5</version>\n</dependency>\n\n\n1\n2\n3\n4\n5\n\n\n如果是在 "非 web 环境" 下使用，配置方法如下：\n\n// 4.6 之前的版本的配置方式: proxymanager.me().setproxyfactory(new cglibproxyfactory());\nproxymanager.me().settocglibproxyfactory();\n\n\n1\n2\n',charsets:{cjk:!0}},{title:"5.1 概述",frontmatter:{},regularPath:"/zh/5%20ActiveRecord/5.1%20%E6%A6%82%E8%BF%B0.html",relativePath:"zh/5 ActiveRecord/5.1 概述.md",key:"v-4efb9076",path:"/zh/5%20ActiveRecord/5.1%20%E6%A6%82%E8%BF%B0.html",lastUpdated:"9/8/2023, 10:15:47 AM",lastUpdatedTimestamp:1694168147e3,headersStr:null,content:"# 5.1 概述\n\n重大更新：自 jfinal 3.0 起，添加了 sql 管理模块，比 mybatis 使用 XML 管理 sql 的方案要爽得多，快速查看：http://www.jfinal.com/doc/5-13\n\nActiveRecord 是 JFinal 最核心的组成部分之一，通过 ActiveRecord 来操作数据库，将极大地减少代码量，极大地提升开发效率。\n\nActiveRecord 模式的核心是：一个 Model 对象唯一对应数据库表中的一条记录，而对应关系依靠的是数据库表的主键值。\n\n因此，ActiveRecord 模式要求数据库表必须要有主键。当数据库表没有主键时，只能使用 Db + Record 模式来操作数据库。",normalizedContent:"# 5.1 概述\n\n重大更新：自 jfinal 3.0 起，添加了 sql 管理模块，比 mybatis 使用 xml 管理 sql 的方案要爽得多，快速查看：http://www.jfinal.com/doc/5-13\n\nactiverecord 是 jfinal 最核心的组成部分之一，通过 activerecord 来操作数据库，将极大地减少代码量，极大地提升开发效率。\n\nactiverecord 模式的核心是：一个 model 对象唯一对应数据库表中的一条记录，而对应关系依靠的是数据库表的主键值。\n\n因此，activerecord 模式要求数据库表必须要有主键。当数据库表没有主键时，只能使用 db + record 模式来操作数据库。",charsets:{cjk:!0}},{title:"5.11 复合主键",frontmatter:{},regularPath:"/zh/5%20ActiveRecord/5.11%20%E5%A4%8D%E5%90%88%E4%B8%BB%E9%94%AE.html",relativePath:"zh/5 ActiveRecord/5.11 复合主键.md",key:"v-95e4deca",path:"/zh/5%20ActiveRecord/5.11%20%E5%A4%8D%E5%90%88%E4%B8%BB%E9%94%AE.html",lastUpdated:"9/11/2023, 1:38:26 AM",lastUpdatedTimestamp:1694396306e3,headersStr:null,content:'# 5.11 复合主键\n\nJFinal ActiveRecord 从 2.0 版本开始，采用极简设计支持复合主键，对于 Model 来说需要在映射时指定复合主键名称，以下是具体例子：\n\nActiveRecordPlugin arp = new ActiveRecordPlugin(druidPlugin);\n// 多数据源的配置仅仅是如下第二个参数指定一次复合主键名称\narp.addMapping("user_role", "userId, roleId", UserRole.class);\n \n//同时指定复合主键值即可查找记录\nUserRole.dao.findByIds(123, 456);\n \n//同时指定复合主键值即可删除记录\nUserRole.dao.deleteByIds(123, 456);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n如上代码所示，对于Model来说，只需要在添加Model映射时指定复合主键名称即可开始使用复合主键，在后续的操作中JFinal会对复合主键支持的个数进行检测，当复合主键数量不正确时会报异常，尤其是复合主键数量不够时能够确保数据安全。复合主键不限定只能有两个，可以是数据库支持下的任意多个。\n\n对于 Db + Record 模式来说，复合主键的使用不需要配置，直接用即可：\n\nDb.findByIds("user_role", "roleId, userId", 123, 456);\nDb.deleteByIds("user_role", "roleId, userId", 123, 456);\n\n\n1\n2\n',normalizedContent:'# 5.11 复合主键\n\njfinal activerecord 从 2.0 版本开始，采用极简设计支持复合主键，对于 model 来说需要在映射时指定复合主键名称，以下是具体例子：\n\nactiverecordplugin arp = new activerecordplugin(druidplugin);\n// 多数据源的配置仅仅是如下第二个参数指定一次复合主键名称\narp.addmapping("user_role", "userid, roleid", userrole.class);\n \n//同时指定复合主键值即可查找记录\nuserrole.dao.findbyids(123, 456);\n \n//同时指定复合主键值即可删除记录\nuserrole.dao.deletebyids(123, 456);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n如上代码所示，对于model来说，只需要在添加model映射时指定复合主键名称即可开始使用复合主键，在后续的操作中jfinal会对复合主键支持的个数进行检测，当复合主键数量不正确时会报异常，尤其是复合主键数量不够时能够确保数据安全。复合主键不限定只能有两个，可以是数据库支持下的任意多个。\n\n对于 db + record 模式来说，复合主键的使用不需要配置，直接用即可：\n\ndb.findbyids("user_role", "roleid, userid", 123, 456);\ndb.deletebyids("user_role", "roleid, userid", 123, 456);\n\n\n1\n2\n',charsets:{cjk:!0}},{title:"5.12 Oracle支持",frontmatter:{},regularPath:"/zh/5%20ActiveRecord/5.12%20Oracle%E6%94%AF%E6%8C%81.html",relativePath:"zh/5 ActiveRecord/5.12 Oracle支持.md",key:"v-9374fba2",path:"/zh/5%20ActiveRecord/5.12%20Oracle%E6%94%AF%E6%8C%81.html",lastUpdated:"9/11/2023, 1:38:26 AM",lastUpdatedTimestamp:1694396306e3,headersStr:null,content:'# 5.12 Oracle支持\n\nOracle数据库具有一定的特殊性，JFinal针对这些特殊性进行了一些额外的支持以方便广大的Oracle使用者。以下是一个完整的Oracle配置示例：\n\npublic class DemoConfig extends JFinalConfig {\n  public void configPlugin(Plugins me) {\n    DruidPlugin dp = new DruidPlugin(……);\n    me.add(dp);\n    //配置Oracle驱动，使用 DruidPlugin 时可以省略下面这行配置\n    dp.setDriverClass("oracle.jdbc.driver.OracleDriver");\n    \n    ActiveRecordPlugin arp = new ActiveRecordPlugin(dp);\n    me.add(arp);\n    // 配置Oracle方言\n    arp.setDialect(new OracleDialect());\n    // 配置属性名(字段名)大小写不敏感容器工厂\n    arp.setContainerFactory(new CaseInsensitiveContainerFactory());\n    arp.addMapping("user", "user_id", User.class);\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n由于Oracle数据库会自动将属性名(字段名)转换成大写，所以需要手动指定主键名为大写，如：arp.addMaping(“user”, “ID”, User.class)。如果想让ActiveRecord对属性名（字段名）的大小写不敏感可以通过设置CaseInsensitiveContainerFactory来达到，有了这个设置，则arp.addMaping(“user”, “ID”, User.class)不再需要了。\n\n另外，Oracle并未直接支持自增主键，JFinal为此提供了便捷的解决方案。要让Oracle支持自动主键主要分为两步：一是创建序列，二是在model中使用这个序列，具体办法如下： 1：通过如下办法创建序列，本例中序列名为：MY_SEQ\n\nCREATE SEQUENCE MY_SEQ\n INCREMENT BY 1\n MINVALUE 1\n MAXVALUE 9999999999999999\n START WITH 1\n CACHE 20;\n\n\n1\n2\n3\n4\n5\n6\n\n\n2：在YourModel.set(…)中使用上面创建的序列\n\n// 创建User并使用序列\nUser user = new User().set("id", "MY_SEQ.nextval").set("age", 18);\nuser.save();\n// 获取id值\nInteger id = user.get("id");\n\n\n1\n2\n3\n4\n5\n\n\n序列的使用很简单，只需要 yourModel.set(主键名, 序列名 + “.nextval”)就可以了。特别注意这里的 “.nextval” 后缀一定要是小写，OracleDialect对该值的大小写敏感。\n\n注意：Oracle下分页排序Sql语句必须满足2个条件：\n\nSql语句中必须有排序条件；\n\n排序条件如果没有唯一性，那么必须在后边跟上一个唯一性的条件，比如主键\n\n相关博文：http://database.51cto.com/art/201010/231533.htm\n\n相关反馈：http://www.jfinal.com/feedback/64#replyContent',normalizedContent:'# 5.12 oracle支持\n\noracle数据库具有一定的特殊性，jfinal针对这些特殊性进行了一些额外的支持以方便广大的oracle使用者。以下是一个完整的oracle配置示例：\n\npublic class democonfig extends jfinalconfig {\n  public void configplugin(plugins me) {\n    druidplugin dp = new druidplugin(……);\n    me.add(dp);\n    //配置oracle驱动，使用 druidplugin 时可以省略下面这行配置\n    dp.setdriverclass("oracle.jdbc.driver.oracledriver");\n    \n    activerecordplugin arp = new activerecordplugin(dp);\n    me.add(arp);\n    // 配置oracle方言\n    arp.setdialect(new oracledialect());\n    // 配置属性名(字段名)大小写不敏感容器工厂\n    arp.setcontainerfactory(new caseinsensitivecontainerfactory());\n    arp.addmapping("user", "user_id", user.class);\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n由于oracle数据库会自动将属性名(字段名)转换成大写，所以需要手动指定主键名为大写，如：arp.addmaping(“user”, “id”, user.class)。如果想让activerecord对属性名（字段名）的大小写不敏感可以通过设置caseinsensitivecontainerfactory来达到，有了这个设置，则arp.addmaping(“user”, “id”, user.class)不再需要了。\n\n另外，oracle并未直接支持自增主键，jfinal为此提供了便捷的解决方案。要让oracle支持自动主键主要分为两步：一是创建序列，二是在model中使用这个序列，具体办法如下： 1：通过如下办法创建序列，本例中序列名为：my_seq\n\ncreate sequence my_seq\n increment by 1\n minvalue 1\n maxvalue 9999999999999999\n start with 1\n cache 20;\n\n\n1\n2\n3\n4\n5\n6\n\n\n2：在yourmodel.set(…)中使用上面创建的序列\n\n// 创建user并使用序列\nuser user = new user().set("id", "my_seq.nextval").set("age", 18);\nuser.save();\n// 获取id值\ninteger id = user.get("id");\n\n\n1\n2\n3\n4\n5\n\n\n序列的使用很简单，只需要 yourmodel.set(主键名, 序列名 + “.nextval”)就可以了。特别注意这里的 “.nextval” 后缀一定要是小写，oracledialect对该值的大小写敏感。\n\n注意：oracle下分页排序sql语句必须满足2个条件：\n\nsql语句中必须有排序条件；\n\n排序条件如果没有唯一性，那么必须在后边跟上一个唯一性的条件，比如主键\n\n相关博文：http://database.51cto.com/art/201010/231533.htm\n\n相关反馈：http://www.jfinal.com/feedback/64#replycontent',charsets:{cjk:!0}},{title:"5.10 表关联操作",frontmatter:{},regularPath:"/zh/5%20ActiveRecord/5.10%20%E8%A1%A8%E5%85%B3%E8%81%94%E6%93%8D%E4%BD%9C.html",relativePath:"zh/5 ActiveRecord/5.10 表关联操作.md",key:"v-0d70d955",path:"/zh/5%20ActiveRecord/5.10%20%E8%A1%A8%E5%85%B3%E8%81%94%E6%93%8D%E4%BD%9C.html",lastUpdated:"9/11/2023, 1:38:26 AM",lastUpdatedTimestamp:1694396306e3,headersStr:null,content:'# 5.10 表关联操作\n\nJFinal ActiveRecord 天然支持表关联操作，并不需要学习新的东西，此为无招胜有招。表关联操作主要有两种方式：一是直接使用sql得到关联数据；二是在Model中添加获取关联数据的方法。\n\n假定现有两张数据库表：user、blog，并且user到blog是一对多关系，blog表中使用user_id关联到user表。如下代码演示使用第一种方式得到user_name：\n\npublic void relation() {\n  String sql = "select b.*, u.user_name from blog b inner join user u on b.user_id=u.id where b.id=?";\n  Blog blog = Blog.dao.findFirst(sql, 123);\n  String name = blog.getStr("user_name");\n}\n\n\n1\n2\n3\n4\n5\n\n\n以下代码演示第二种方式在Blog中获取相关联的User以及在User中获取相关联的Blog：\n\npublic class Blog extends Model<Blog>{\n    public static final Blog dao = new Blog().dao();\n    \n    public User getUser() {\n       return User.dao.findById(get("user_id"));\n    }\n}\n \npublic class User extends Model<User>{\n    public static final User dao = new User().dao();\n    \n    public List<Blog> getBlogs() {\n       return Blog.dao.find("select * from blog where user_id=?", get("id"));\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n上面代码在具体的 Model 中 new 了一个 dao 对象出来，这种用法仅用于表关联操作，其它情况的 dao 对象应该让 Service 层持有。',normalizedContent:'# 5.10 表关联操作\n\njfinal activerecord 天然支持表关联操作，并不需要学习新的东西，此为无招胜有招。表关联操作主要有两种方式：一是直接使用sql得到关联数据；二是在model中添加获取关联数据的方法。\n\n假定现有两张数据库表：user、blog，并且user到blog是一对多关系，blog表中使用user_id关联到user表。如下代码演示使用第一种方式得到user_name：\n\npublic void relation() {\n  string sql = "select b.*, u.user_name from blog b inner join user u on b.user_id=u.id where b.id=?";\n  blog blog = blog.dao.findfirst(sql, 123);\n  string name = blog.getstr("user_name");\n}\n\n\n1\n2\n3\n4\n5\n\n\n以下代码演示第二种方式在blog中获取相关联的user以及在user中获取相关联的blog：\n\npublic class blog extends model<blog>{\n    public static final blog dao = new blog().dao();\n    \n    public user getuser() {\n       return user.dao.findbyid(get("user_id"));\n    }\n}\n \npublic class user extends model<user>{\n    public static final user dao = new user().dao();\n    \n    public list<blog> getblogs() {\n       return blog.dao.find("select * from blog where user_id=?", get("id"));\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n上面代码在具体的 model 中 new 了一个 dao 对象出来，这种用法仅用于表关联操作，其它情况的 dao 对象应该让 service 层持有。',charsets:{cjk:!0}},{title:"5.13 Enjoy SQL 模板",frontmatter:{},regularPath:"/zh/5%20ActiveRecord/5.13%20Enjoy%20SQL%20%E6%A8%A1%E6%9D%BF.html",relativePath:"zh/5 ActiveRecord/5.13 Enjoy SQL 模板.md",key:"v-4fe22899",path:"/zh/5%20ActiveRecord/5.13%20Enjoy%20SQL%20%E6%A8%A1%E6%9D%BF.html",headers:[{level:2,title:"1、基本配置",slug:"_1、基本配置",normalizedTitle:"1、基本配置",charIndex:237},{level:2,title:"2、#sql 指令",slug:"_2、-sql-指令",normalizedTitle:"2、#sql 指令",charIndex:974},{level:2,title:"3、#para 指令",slug:"_3、-para-指令",normalizedTitle:"3、#para 指令",charIndex:1372},{level:3,title:"3.1 使用 int 常量 #para(int)",slug:"_3-1-使用-int-常量-para-int",normalizedTitle:"3.1 使用 int 常量 #para(int)",charIndex:1387},{level:3,title:"3.2 使用非 int 常量 #para(expr)",slug:"_3-2-使用非-int-常量-para-expr",normalizedTitle:"3.2 使用非 int 常量 #para(expr)",charIndex:2430},{level:3,title:"3.3 #para(int) 与 #para(expressioin) 比较",slug:"_3-3-para-int-与-para-expressioin-比较",normalizedTitle:"3.3 #para(int) 与 #para(expressioin) 比较",charIndex:3016},{level:3,title:"3.4 #para 指令支持 like 与 in 子句（5.0.0版新增功能）",slug:"_3-4-para-指令支持-like-与-in-子句-5-0-0版新增功能",normalizedTitle:"3.4 #para 指令支持 like 与 in 子句（5.0.0版新增功能）",charIndex:5395},{level:3,title:"4、#namespace 指令",slug:"_4、-namespace-指令",normalizedTitle:"4、#namespace 指令",charIndex:6063},{level:2,title:"5、template() 与 getSqlPara()",slug:"_5、template-与-getsqlpara",normalizedTitle:"5、template() 与 getsqlpara()",charIndex:6427},{level:2,title:"6、templateByString()",slug:"_6、templatebystring",normalizedTitle:"6、templatebystring()",charIndex:6682},{level:2,title:"7、分页用法",slug:"_7、分页用法",normalizedTitle:"7、分页用法",charIndex:7209},{level:2,title:"8、高级用法",slug:"_8、高级用法",normalizedTitle:"8、高级用法",charIndex:7628},{level:2,title:"9、多数源支持",slug:"_9、多数源支持",normalizedTitle:"9、多数源支持",charIndex:8492},{level:2,title:"10、对 sql 内容进行压缩",slug:"_10、对-sql-内容进行压缩",normalizedTitle:"10、对 sql 内容进行压缩",charIndex:9012}],lastUpdated:"9/11/2023, 1:38:26 AM",lastUpdatedTimestamp:1694396306e3,headersStr:"1、基本配置 2、#sql 指令 3、#para 指令 3.1 使用 int 常量 #para(int) 3.2 使用非 int 常量 #para(expr) 3.3 #para(int) 与 #para(expressioin) 比较 3.4 #para 指令支持 like 与 in 子句（5.0.0版新增功能） 4、#namespace 指令 5、template() 与 getSqlPara() 6、templateByString() 7、分页用法 8、高级用法 9、多数源支持 10、对 sql 内容进行压缩",content:'# 5.13 Enjoy SQL 模板\n\nJFinal利用自带的 Enjoy Template Engine 极为简洁的实现了 Sql 模板管理功能。一如既往的极简设计，仅有 #sql、#para、#namespace 三个指令，学习成本依然低到极致。\n\n重要：除了以上三个 sql 管理专用指令以外，jfinal 模板引擎的所有指令和功能也可以用在 sql 管理，jfinal 模板引擎用法见第 6 章：http://www.jfinal.com/doc/6-1\n\n\n# 1、基本配置\n\n在ActiveRecordPlugin中使用sql管理功能示例代码如下：\n\nActiveRecordPlugin arp = new ActiveRecordPlugin(druidPlugin);\narp.addSqlTemplate("all.sql");\n_MappingKit.mapping(arp);\nme.add(arp);\n\n\n1\n2\n3\n4\n\n\n如上例所示，ar.addSqlTemplate("all.sql") 将从 class path 或者 jar 包中读取 "all.sql" 文件。\n\n可以通过多次调用addSqlTemplate来添加任意多个外部 sql 文件，并且对于不同的 ActiveRecordPlugin 对象都是彼此独立配置的，有利于多数据源下对 sql 进行模块化管理。\n\n可以将 sql 文件放在maven项目下的 src/main/resources 之下，编译器会自动将其编译至 class path 之下，进而可以被读取到，打包进入 jar 包中以后也可以被读到。\n\n如果希望在开发阶段可以对修改的sql文件实现热加载，可以配置 arp.setDevMode(true)，如果不配置则默认使用 configConstant中的 me.setDevMode(…) 配置。\n\n特别注意：sql 管理模块使用的 Engine 对象并非在 configEngine(Engine me)配置，因此在对其配置 shared method、directive 等扩展时需要使用 activeRecordPlugin.getEngine() 先得到 Engine 对象，然后对该 Engine 对象进行配置。\n\n\n# 2、#sql 指令\n\n#sql 指令用于定义 sql 模板，如下是代码示例：\n\n#sql("findGirl")\n  select * from girl where age > ? and age < ? and weight < 50\n#end\n\n\n1\n2\n3\n\n\n上例通过 #sql 指令在模板文件中定义了 sqlkey 为 "findGirl" 的 sql 模板，在java 代码中的获取方式如下：\n\nString sql = Db.getSql("findGirl");\nDb.find(sql, 16, 23);\n\n\n1\n2\n\n\n上例中第一行代码通过 Db.getSql() 方法获取到定义好的sql语句，第二行代码直接将 sql 用于数据库查询。\n\n此外，还可以通过 Model.getSql(key) 方法来获取sql语句，功能与Db.getSql(key) 完全一样。\n\n\n# 3、#para 指令\n\n\n# 3.1 使用 int 常量 #para(int)\n\n#para 指令用于生成 sql 模板中的问号占位符以及问号占位符所对应的参数值，两者分别保存在 SqlPara对象的 sql 和 paraList 属性之中。\n\n#para指令支持两种用法，一种是传入 int型常量参数 的用法，如下示例展示的是 int 型常量参数的用法：\n\n#sql("findGirl")\n  select * from girl where age > #para(0) and weight < #para(1)\n#end\n上例代码中两个 #para 指令，传入了两个 int 型常量参数，所对应的 java 后端代码必须调用 getSqlPara(String key, Object… paras)，如下是代码示例：\n\n// Db.template 用法（jfinal 4.0 新增）\nDb.template("findGirl", 18, 50).find();\n \n// Model.template 用法完全一样，以下假定 girl 为 Model\ngirl.template("findGirl", 18, 50).find();\n \n// getSqlPara 用法\nSqlPara sqlPara = Db.getSqlPara("findGirl", 18, 50);\nDb.find(sqlPara);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n以上第一行代码中的 18 与 50 这两个参数，分别被前面 #sql 指令中定义的 #para(0) 与 #para(1) 所使用。\n\nDb.template(String key, Object... paras) 与 Db.getSqlPara(String key, Object... paras) 方法的第二个参数 Object... paras，在传入实际参数时，下标值从 0 开始算起与 #para(int) 指令中使用的 int 型常量一一对应。\n\njfinal 4.0 新增的 template(...) 用法与 getSqlPara(...) 所接受的参数完全一样，所以两者在本质上完全一样。\n\n新增的 template(...) 方法仅仅是为了减少代码量，提升开发体验，在功能上与 getSqlPara 完全一样，对于已经熟悉 getSqlPara 用法的同学不会增加学习成本。\n\n\n# 3.2 使用非 int 常量 #para(expr)\n\n#para 指令的另一种用法是传入除了 int 型常量以外的任意表达式参数 (注意：两种用法处在同一个 #sql 模板之中时只能选择其中一种)，如下是代码示例：\n\n#sql("findGirl")\n  select * from girl where age > #para(age) and weight < #para(weight)\n#end\n\n\n1\n2\n3\n\n\n与上例模板文件配套的java代码如下所示：\n\n// 构造参数\nKv cond = Kv.of("age", 18).set("weight", 50);\n \n// 使用 Db 的 template 方法\nDb.template("findGirl", cond).find();\n \n// 使用 Model 的 template 方法，以下假定 girl 为 Model\ngirl.template("findGirl", cond).find();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上例代码获取到的 SqlPara 对象 sqlPara 中封装的 sql 为：select * from girl where age > ? and weight < ?，封装的与 sql 问号占位符次序一致的参数列表值为：[18, 50]。\n\n\n# 3.3 #para(int) 与 #para(expressioin) 比较\n\n指令参数：#para(int) 参数必须传入 int 型常量，#para(expression) 参数是除了 int 型常量以外的任意表达式\n\njava 参数：template 的第二个参数，对应 #para(int) 时必须是 Object... paras，对应 #para(expression) 时必须是 Map。\n\n#para(int) 用法示例：\n\n// #para(int) 用法\n#sql("findGirl")\n   select * from girl where age > #para(0) and weight < #para(1)\n#end\n \n// 对应于 #para(int) 指令，第二个参数必须是 Object... paras\nDb.template("findGirl", 18, 50).find();\n \n// Model.template 使用方法完全一样\ngirl.template("findGirl", 18, 50).find();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n#para(expression) 用法示例：\n\n// #para(expression) 用法\n#sql("findGirl")\n   select * from girl where age > #para(age) and weight < #para(weight)\n#end\n \n// 构造 Nap 参数，下面的 Kv 是 Map 的子类\nKv cond = Kv.of("age", 18,).set("weight", 50);\n \n// 对应于 #para(expression) 指令，第二个参数必须是 Map 或者其子类\nDb.template("findGirl", cond).find()\n \n// Model.template 使用方法完全一样\ngirl.template("findGirl", cond).find()\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n简单一句话：#para(int) 用下标获取参数值，#para(expr) 用名称获取参数值，所对应的 getSqlPara(...)、template(...) 方法参数自然就是 Object... 与 Map。\n\n以上两个示例，获取到的 SqlPara 对象中的值完全一样。其中的sql值都为：select * from girl where age > ? and weight < ?，其中的参数列表值也都为 [18、50]。\n\n重要： #para 指令所到之处永远是生成一个问号占位符，并不是参数的值，参数值被生成在了SqlPara对象的paraList属性之中，通过sqlPara.getPara()可获取。如果想生成参数值用一下模板输出指令即可：#(value)\n\n极其重要的通用技巧：如果某些数据库操作 API 不支持 SqlPara 参数，而只支持 String sql 和 Object… paras 这两个参数，可以这样来用：method(sqlPara.getSql(), sqlPara.getPara())。这样就可以让所有这类API都能用上 Sql 管理功能。\n\n加餐：有些同学希望在 sql 文件中获取 template(String, Object... paras)、getSqlPara(String, Object… paras) 方法传入的paras参数，可以通过表达式 PARA_ARRAY[index] 来获取到下标为index的参数值。\n\n由于经常有人问到 mysql 数据库 sql 语句的 like 子句用法，补充如下示例：\n\n#sql("search")\n  ### #para 指令用法\n  select * from article where title like concat(\'%\', #para(0), \'%\')\n  \n  ### java 代码用法，大家可以自行扩展一个 #like 指令，在添加 value 的时候自动添加 % 前缀与后缀\n  ### Db.find("select * from article where title like ?", "%" + value + "%")\n#end\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n以上示例的like用法完全是 JDBC 决定的，JFinal仅仅是生成了如下sql而已：\n\nselect * from article where title like concat(\'%\', ?, \'%\')，也就是仅仅将 #para(0) 替换生成为一个问号占位 ”?” 而已。\n\n如果你使用是其它数据库（不支持 concat 函敉），like 的用法如下：\n\n#sql("search")\n  select * from article where title like #para(0)\n#end\n\n\n1\n2\n3\n\n\n注意，在传入参数的时候要将参数添加上百分号字符 \'%\'\n\nString title = "要搜索的关键词";\n// 注意添加百分号字符\ntitle = "%" + title + "%";\ndao.template("search", title).find();\n\n\n1\n2\n3\n4\n\n\n以上用法 mysql 也同样支持，唯一的缺点就是要对搜索入参追加百分号字符。当然，如果其它数据库也有像 concat 类似的函数应该也可以像 mysql 那样去用，多多尝试。\n\n\n# 3.4 #para 指令支持 like 与 in 子句（5.0.0版新增功能）\n\n### 一般用法，第二个参数传入 "like"、"in" 参数即可\n\n\n1\n\n\nselect * from t title like #para(title, "like") select * from t title id in #para(idList, "in")\n\n### like 类型第一个参数支持 int 类型\nselect * from t title like #para(0, "like")\n \n### like 支持左侧与右侧百分号用法\nselect * from t title like #para(title, "%like")\nselect * from t title like #para(title, "like%")\n \n### 警告：对于 in 子句，如果 #para 第一个参数是 int 型，并且 java 代码针对 Object... 参数传入的是数组\nselect * from t id in #para(0, "in")\n### 那么 java 代码中要将 Object... 处的参数强制转成 Object，否则参数传递不正确（建议这种情况传入List参数）\nInteger[] idArray = {1, 2, 3};\nDb.template("findByIdArray", (Object)idArray).find();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 4、#namespace 指令\n\n#namespace 指令为 sql 语句指定命名空间，不同的命名空间可以让#sql指令使用相同的key值去定义sql，有利于模块化管理，如下所示：\n\n#namespace("japan")\n  #sql("findGirl")\n    select * from girl where age > #para(0) and age < #para(1) and weight < 50\n  #end\n#end\n\n\n1\n2\n3\n4\n5\n\n\n上面代码指定了namespace为”japan”，在使用的时候，只需要在key前面添加namesapce值前缀 + 句点符 + key即可：\n\nDb.template("japan.findGirl", 17, 21).find();\n\n\n1\n\n\n\n# 5、template() 与 getSqlPara()\n\n为了进一步减少代码量，提升开发体验，jfinal 4.0 新增了 template 方法，该方法在本质上与 getSqlPara 用法完全一样，所以传递的参数完全一样，都是：String sqlKey、Object... paras 或者 String sqlKey、Map paras。\n\n在 template 方法可以使用链式调用直接去查询，而 getSqlPara 则是先得到 sql + para ，然后再将其传递给查询方法进行查询。\n\n\n# 6、templateByString()\n\n如果希望将 sql 模板放在 String 变量之中而不是放在外部的文件之中，可以使用 templateByString 方法，例如：\n\n// 将 sql 模板存放在 String 变量中，注意：此时不再需要 #sql、#namespace 指令\nString sqlTemplate = "select * from girl where age > #para(0) and weight < #para(1)"\n \n// templateByString 将从 String 变量中加载模板\nDb.templateByString(sqlTemplate, 18, 50).find();\n \n// Model 也支持 templateByString 方法\ngirl.templateByString(sqlTemplate, 18, 50).find();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\ntemplateByString 与 template 的用法基本一样，区别在于前者从 String 变量中获取模板并且不支持 #namespace、#sql 指令，后者从外部文件中获取模板。\n\n\n# 7、分页用法\n\nSql 管理实现分页功能，在使用 #sql 定义 sql 时，与普通查询完全一样，不需要使用额外的指令，以下是代码示例：\n\n// Db.template 用法\nDb.template("findGirl", 18, 50).paginate(1, 10);\n \n// Model.template 用法，以下假定 girl 为 Model\ngirl.template("findGirl", 18, 50).paginate(1, 10);\n \n// getSqlPara 用法\nSqlPara sqlPara = Db.getSqlPara("findGirl", 18, 50);\nDb.paginate(1, 10, sqlPara);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\ntemplate 与 getSqlPara 用法参数完全一样，都是 "findGirl"、18、50 这三个，前者更省代码。\n\n\n# 8、高级用法\n\n除了#sql、#para、#namespace之外，还可以使用JFinal Template Engine中所有存在的指令，生成复杂条件的sql语句，以下是相对灵活的示例：\n\n#sql("find")\n  select * from girl\n  #for(x : cond)\n    #(for.first ? "where": "and") #(x.key) #para(x.value)\n  #end\n#end\n\n\n1\n2\n3\n4\n5\n6\n\n\n以上代码#for指令对Map类型的cond参数进行迭代，动态生成自由的查询条件。上图中的三元表达式表示在第一次迭代时生成 where，后续则生成 and 。#(x.key) 输出参数 key 值，#para(x.value) 输出一个问号占位符，以及将参数 value 值输出到 SqlPara.paraList 中去。\n\n以上sql 模板所对应的 java 代码如下：\n\nKv cond = Kv.of("age > ", 16).set("sex = ", "female");\nDb.template("find", Kv.of("cond", cond)).find();\n\n\n1\n2\n\n\n以上第一行代码是 JFinal 独创的参数带有比较运算符的用法，可以同时生成sql查询条件名称、条件运算符号、参数列表，一石三鸟。甚至可以将此法用于 and or not再搭配一个 LinkedHashMap 生成更加灵活的逻辑组合条件sql。\n\n更加好玩的用法，可以用jfinal 模板引擎的 #define 指令将常用的 sql 定义成通用的模板函数，以便消除重复性 sql 代码。总之，利用 #sql、#para、#namespace 这三个指令再结合模板引擎已有指令自由组合，可非常简洁地实现极为强大的 sql管理功能。\n\n注意：以上例子中的Kv是 JFinal 提供的用户体验更好的 Map 实现，使用任意的 Map 实现都可以，不限定为Kv。\n\n\n# 9、多数源支持\n\n多数源下，Model.getSql(...) 与 Model.getSqlPara(...) 会自动从该 Model 所对应的 ActiveRecordPlugin 配置的 sql 模板中去取 sql。\n\nDb.getSql(...) 与 Db.getSqlPara(...) 会从主数据源对应的 ActiveRecordPlugin 配置的 sql 模板中去取 sql。如果要使用别的数据源的 sql，使用一下 Db.use(...) 即可：\n\n// template 用法\nDb.use(otherDataSource).template(sqlKey, para).find();\n \n// getSqlPara 用法\nSqlPara sqlPara = Db.use(otherDataSource).getSqlPara(sqlKey, para);\nDb.use(otherDataSource).find(sqlPara);\n\n\n1\n2\n3\n4\n5\n6\n\n\n在多数据源下， template 用法显然比 getSqlPara 方法更省代码，在可以满足需求的前提下尽可能使用 template 方法。\n\n\n# 10、对 sql 内容进行压缩\n\njfinal 4.9 对 Engine 添加了空白压缩功能，该功能也可以用于 sql 模板：\n\nActiveRecordPlugin arp = new ActiveRecordPlugin(...);\nEngine engine = arp.getEngine();\n \nengine.setCompressorOn(\' \');\n\n\n1\n2\n3\n4\n\n\n以上第三行代码配置开启了空白压缩功能，除了配置空格为压缩分隔字符以外，还可以配置换行字符 \'\\n\' 为压缩分隔字符：\n\nengine.setCompressorOn(\'\\n\');\n\n\n1\n',normalizedContent:'# 5.13 enjoy sql 模板\n\njfinal利用自带的 enjoy template engine 极为简洁的实现了 sql 模板管理功能。一如既往的极简设计，仅有 #sql、#para、#namespace 三个指令，学习成本依然低到极致。\n\n重要：除了以上三个 sql 管理专用指令以外，jfinal 模板引擎的所有指令和功能也可以用在 sql 管理，jfinal 模板引擎用法见第 6 章：http://www.jfinal.com/doc/6-1\n\n\n# 1、基本配置\n\n在activerecordplugin中使用sql管理功能示例代码如下：\n\nactiverecordplugin arp = new activerecordplugin(druidplugin);\narp.addsqltemplate("all.sql");\n_mappingkit.mapping(arp);\nme.add(arp);\n\n\n1\n2\n3\n4\n\n\n如上例所示，ar.addsqltemplate("all.sql") 将从 class path 或者 jar 包中读取 "all.sql" 文件。\n\n可以通过多次调用addsqltemplate来添加任意多个外部 sql 文件，并且对于不同的 activerecordplugin 对象都是彼此独立配置的，有利于多数据源下对 sql 进行模块化管理。\n\n可以将 sql 文件放在maven项目下的 src/main/resources 之下，编译器会自动将其编译至 class path 之下，进而可以被读取到，打包进入 jar 包中以后也可以被读到。\n\n如果希望在开发阶段可以对修改的sql文件实现热加载，可以配置 arp.setdevmode(true)，如果不配置则默认使用 configconstant中的 me.setdevmode(…) 配置。\n\n特别注意：sql 管理模块使用的 engine 对象并非在 configengine(engine me)配置，因此在对其配置 shared method、directive 等扩展时需要使用 activerecordplugin.getengine() 先得到 engine 对象，然后对该 engine 对象进行配置。\n\n\n# 2、#sql 指令\n\n#sql 指令用于定义 sql 模板，如下是代码示例：\n\n#sql("findgirl")\n  select * from girl where age > ? and age < ? and weight < 50\n#end\n\n\n1\n2\n3\n\n\n上例通过 #sql 指令在模板文件中定义了 sqlkey 为 "findgirl" 的 sql 模板，在java 代码中的获取方式如下：\n\nstring sql = db.getsql("findgirl");\ndb.find(sql, 16, 23);\n\n\n1\n2\n\n\n上例中第一行代码通过 db.getsql() 方法获取到定义好的sql语句，第二行代码直接将 sql 用于数据库查询。\n\n此外，还可以通过 model.getsql(key) 方法来获取sql语句，功能与db.getsql(key) 完全一样。\n\n\n# 3、#para 指令\n\n\n# 3.1 使用 int 常量 #para(int)\n\n#para 指令用于生成 sql 模板中的问号占位符以及问号占位符所对应的参数值，两者分别保存在 sqlpara对象的 sql 和 paralist 属性之中。\n\n#para指令支持两种用法，一种是传入 int型常量参数 的用法，如下示例展示的是 int 型常量参数的用法：\n\n#sql("findgirl")\n  select * from girl where age > #para(0) and weight < #para(1)\n#end\n上例代码中两个 #para 指令，传入了两个 int 型常量参数，所对应的 java 后端代码必须调用 getsqlpara(string key, object… paras)，如下是代码示例：\n\n// db.template 用法（jfinal 4.0 新增）\ndb.template("findgirl", 18, 50).find();\n \n// model.template 用法完全一样，以下假定 girl 为 model\ngirl.template("findgirl", 18, 50).find();\n \n// getsqlpara 用法\nsqlpara sqlpara = db.getsqlpara("findgirl", 18, 50);\ndb.find(sqlpara);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n以上第一行代码中的 18 与 50 这两个参数，分别被前面 #sql 指令中定义的 #para(0) 与 #para(1) 所使用。\n\ndb.template(string key, object... paras) 与 db.getsqlpara(string key, object... paras) 方法的第二个参数 object... paras，在传入实际参数时，下标值从 0 开始算起与 #para(int) 指令中使用的 int 型常量一一对应。\n\njfinal 4.0 新增的 template(...) 用法与 getsqlpara(...) 所接受的参数完全一样，所以两者在本质上完全一样。\n\n新增的 template(...) 方法仅仅是为了减少代码量，提升开发体验，在功能上与 getsqlpara 完全一样，对于已经熟悉 getsqlpara 用法的同学不会增加学习成本。\n\n\n# 3.2 使用非 int 常量 #para(expr)\n\n#para 指令的另一种用法是传入除了 int 型常量以外的任意表达式参数 (注意：两种用法处在同一个 #sql 模板之中时只能选择其中一种)，如下是代码示例：\n\n#sql("findgirl")\n  select * from girl where age > #para(age) and weight < #para(weight)\n#end\n\n\n1\n2\n3\n\n\n与上例模板文件配套的java代码如下所示：\n\n// 构造参数\nkv cond = kv.of("age", 18).set("weight", 50);\n \n// 使用 db 的 template 方法\ndb.template("findgirl", cond).find();\n \n// 使用 model 的 template 方法，以下假定 girl 为 model\ngirl.template("findgirl", cond).find();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上例代码获取到的 sqlpara 对象 sqlpara 中封装的 sql 为：select * from girl where age > ? and weight < ?，封装的与 sql 问号占位符次序一致的参数列表值为：[18, 50]。\n\n\n# 3.3 #para(int) 与 #para(expressioin) 比较\n\n指令参数：#para(int) 参数必须传入 int 型常量，#para(expression) 参数是除了 int 型常量以外的任意表达式\n\njava 参数：template 的第二个参数，对应 #para(int) 时必须是 object... paras，对应 #para(expression) 时必须是 map。\n\n#para(int) 用法示例：\n\n// #para(int) 用法\n#sql("findgirl")\n   select * from girl where age > #para(0) and weight < #para(1)\n#end\n \n// 对应于 #para(int) 指令，第二个参数必须是 object... paras\ndb.template("findgirl", 18, 50).find();\n \n// model.template 使用方法完全一样\ngirl.template("findgirl", 18, 50).find();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n#para(expression) 用法示例：\n\n// #para(expression) 用法\n#sql("findgirl")\n   select * from girl where age > #para(age) and weight < #para(weight)\n#end\n \n// 构造 nap 参数，下面的 kv 是 map 的子类\nkv cond = kv.of("age", 18,).set("weight", 50);\n \n// 对应于 #para(expression) 指令，第二个参数必须是 map 或者其子类\ndb.template("findgirl", cond).find()\n \n// model.template 使用方法完全一样\ngirl.template("findgirl", cond).find()\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n简单一句话：#para(int) 用下标获取参数值，#para(expr) 用名称获取参数值，所对应的 getsqlpara(...)、template(...) 方法参数自然就是 object... 与 map。\n\n以上两个示例，获取到的 sqlpara 对象中的值完全一样。其中的sql值都为：select * from girl where age > ? and weight < ?，其中的参数列表值也都为 [18、50]。\n\n重要： #para 指令所到之处永远是生成一个问号占位符，并不是参数的值，参数值被生成在了sqlpara对象的paralist属性之中，通过sqlpara.getpara()可获取。如果想生成参数值用一下模板输出指令即可：#(value)\n\n极其重要的通用技巧：如果某些数据库操作 api 不支持 sqlpara 参数，而只支持 string sql 和 object… paras 这两个参数，可以这样来用：method(sqlpara.getsql(), sqlpara.getpara())。这样就可以让所有这类api都能用上 sql 管理功能。\n\n加餐：有些同学希望在 sql 文件中获取 template(string, object... paras)、getsqlpara(string, object… paras) 方法传入的paras参数，可以通过表达式 para_array[index] 来获取到下标为index的参数值。\n\n由于经常有人问到 mysql 数据库 sql 语句的 like 子句用法，补充如下示例：\n\n#sql("search")\n  ### #para 指令用法\n  select * from article where title like concat(\'%\', #para(0), \'%\')\n  \n  ### java 代码用法，大家可以自行扩展一个 #like 指令，在添加 value 的时候自动添加 % 前缀与后缀\n  ### db.find("select * from article where title like ?", "%" + value + "%")\n#end\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n以上示例的like用法完全是 jdbc 决定的，jfinal仅仅是生成了如下sql而已：\n\nselect * from article where title like concat(\'%\', ?, \'%\')，也就是仅仅将 #para(0) 替换生成为一个问号占位 ”?” 而已。\n\n如果你使用是其它数据库（不支持 concat 函敉），like 的用法如下：\n\n#sql("search")\n  select * from article where title like #para(0)\n#end\n\n\n1\n2\n3\n\n\n注意，在传入参数的时候要将参数添加上百分号字符 \'%\'\n\nstring title = "要搜索的关键词";\n// 注意添加百分号字符\ntitle = "%" + title + "%";\ndao.template("search", title).find();\n\n\n1\n2\n3\n4\n\n\n以上用法 mysql 也同样支持，唯一的缺点就是要对搜索入参追加百分号字符。当然，如果其它数据库也有像 concat 类似的函数应该也可以像 mysql 那样去用，多多尝试。\n\n\n# 3.4 #para 指令支持 like 与 in 子句（5.0.0版新增功能）\n\n### 一般用法，第二个参数传入 "like"、"in" 参数即可\n\n\n1\n\n\nselect * from t title like #para(title, "like") select * from t title id in #para(idlist, "in")\n\n### like 类型第一个参数支持 int 类型\nselect * from t title like #para(0, "like")\n \n### like 支持左侧与右侧百分号用法\nselect * from t title like #para(title, "%like")\nselect * from t title like #para(title, "like%")\n \n### 警告：对于 in 子句，如果 #para 第一个参数是 int 型，并且 java 代码针对 object... 参数传入的是数组\nselect * from t id in #para(0, "in")\n### 那么 java 代码中要将 object... 处的参数强制转成 object，否则参数传递不正确（建议这种情况传入list参数）\ninteger[] idarray = {1, 2, 3};\ndb.template("findbyidarray", (object)idarray).find();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 4、#namespace 指令\n\n#namespace 指令为 sql 语句指定命名空间，不同的命名空间可以让#sql指令使用相同的key值去定义sql，有利于模块化管理，如下所示：\n\n#namespace("japan")\n  #sql("findgirl")\n    select * from girl where age > #para(0) and age < #para(1) and weight < 50\n  #end\n#end\n\n\n1\n2\n3\n4\n5\n\n\n上面代码指定了namespace为”japan”，在使用的时候，只需要在key前面添加namesapce值前缀 + 句点符 + key即可：\n\ndb.template("japan.findgirl", 17, 21).find();\n\n\n1\n\n\n\n# 5、template() 与 getsqlpara()\n\n为了进一步减少代码量，提升开发体验，jfinal 4.0 新增了 template 方法，该方法在本质上与 getsqlpara 用法完全一样，所以传递的参数完全一样，都是：string sqlkey、object... paras 或者 string sqlkey、map paras。\n\n在 template 方法可以使用链式调用直接去查询，而 getsqlpara 则是先得到 sql + para ，然后再将其传递给查询方法进行查询。\n\n\n# 6、templatebystring()\n\n如果希望将 sql 模板放在 string 变量之中而不是放在外部的文件之中，可以使用 templatebystring 方法，例如：\n\n// 将 sql 模板存放在 string 变量中，注意：此时不再需要 #sql、#namespace 指令\nstring sqltemplate = "select * from girl where age > #para(0) and weight < #para(1)"\n \n// templatebystring 将从 string 变量中加载模板\ndb.templatebystring(sqltemplate, 18, 50).find();\n \n// model 也支持 templatebystring 方法\ngirl.templatebystring(sqltemplate, 18, 50).find();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\ntemplatebystring 与 template 的用法基本一样，区别在于前者从 string 变量中获取模板并且不支持 #namespace、#sql 指令，后者从外部文件中获取模板。\n\n\n# 7、分页用法\n\nsql 管理实现分页功能，在使用 #sql 定义 sql 时，与普通查询完全一样，不需要使用额外的指令，以下是代码示例：\n\n// db.template 用法\ndb.template("findgirl", 18, 50).paginate(1, 10);\n \n// model.template 用法，以下假定 girl 为 model\ngirl.template("findgirl", 18, 50).paginate(1, 10);\n \n// getsqlpara 用法\nsqlpara sqlpara = db.getsqlpara("findgirl", 18, 50);\ndb.paginate(1, 10, sqlpara);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\ntemplate 与 getsqlpara 用法参数完全一样，都是 "findgirl"、18、50 这三个，前者更省代码。\n\n\n# 8、高级用法\n\n除了#sql、#para、#namespace之外，还可以使用jfinal template engine中所有存在的指令，生成复杂条件的sql语句，以下是相对灵活的示例：\n\n#sql("find")\n  select * from girl\n  #for(x : cond)\n    #(for.first ? "where": "and") #(x.key) #para(x.value)\n  #end\n#end\n\n\n1\n2\n3\n4\n5\n6\n\n\n以上代码#for指令对map类型的cond参数进行迭代，动态生成自由的查询条件。上图中的三元表达式表示在第一次迭代时生成 where，后续则生成 and 。#(x.key) 输出参数 key 值，#para(x.value) 输出一个问号占位符，以及将参数 value 值输出到 sqlpara.paralist 中去。\n\n以上sql 模板所对应的 java 代码如下：\n\nkv cond = kv.of("age > ", 16).set("sex = ", "female");\ndb.template("find", kv.of("cond", cond)).find();\n\n\n1\n2\n\n\n以上第一行代码是 jfinal 独创的参数带有比较运算符的用法，可以同时生成sql查询条件名称、条件运算符号、参数列表，一石三鸟。甚至可以将此法用于 and or not再搭配一个 linkedhashmap 生成更加灵活的逻辑组合条件sql。\n\n更加好玩的用法，可以用jfinal 模板引擎的 #define 指令将常用的 sql 定义成通用的模板函数，以便消除重复性 sql 代码。总之，利用 #sql、#para、#namespace 这三个指令再结合模板引擎已有指令自由组合，可非常简洁地实现极为强大的 sql管理功能。\n\n注意：以上例子中的kv是 jfinal 提供的用户体验更好的 map 实现，使用任意的 map 实现都可以，不限定为kv。\n\n\n# 9、多数源支持\n\n多数源下，model.getsql(...) 与 model.getsqlpara(...) 会自动从该 model 所对应的 activerecordplugin 配置的 sql 模板中去取 sql。\n\ndb.getsql(...) 与 db.getsqlpara(...) 会从主数据源对应的 activerecordplugin 配置的 sql 模板中去取 sql。如果要使用别的数据源的 sql，使用一下 db.use(...) 即可：\n\n// template 用法\ndb.use(otherdatasource).template(sqlkey, para).find();\n \n// getsqlpara 用法\nsqlpara sqlpara = db.use(otherdatasource).getsqlpara(sqlkey, para);\ndb.use(otherdatasource).find(sqlpara);\n\n\n1\n2\n3\n4\n5\n6\n\n\n在多数据源下， template 用法显然比 getsqlpara 方法更省代码，在可以满足需求的前提下尽可能使用 template 方法。\n\n\n# 10、对 sql 内容进行压缩\n\njfinal 4.9 对 engine 添加了空白压缩功能，该功能也可以用于 sql 模板：\n\nactiverecordplugin arp = new activerecordplugin(...);\nengine engine = arp.getengine();\n \nengine.setcompressoron(\' \');\n\n\n1\n2\n3\n4\n\n\n以上第三行代码配置开启了空白压缩功能，除了配置空格为压缩分隔字符以外，还可以配置换行字符 \'\\n\' 为压缩分隔字符：\n\nengine.setcompressoron(\'\\n\');\n\n\n1\n',charsets:{cjk:!0}},{title:"5.14 多数据源支持",frontmatter:{},regularPath:"/zh/5%20ActiveRecord/5.14%20%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E6%94%AF%E6%8C%81.html",relativePath:"zh/5 ActiveRecord/5.14 多数据源支持.md",key:"v-0d33af69",path:"/zh/5%20ActiveRecord/5.14%20%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E6%94%AF%E6%8C%81.html",lastUpdated:"9/11/2023, 1:38:26 AM",lastUpdatedTimestamp:1694396306e3,headersStr:null,content:'# 5.14 多数据源支持\n\nActiveRecordPlugin可同时支持多数据源、多方言、多缓存、多事务级别等特性，对每个 ActiveRecordPlugin 可进行彼此独立的配置。简言之 JFinal 可以同时使用多数据源，并且可以针对这多个数据源配置独立的方言、缓存、事务级别等。\n\n当使用多数据源时，只需要对每个 ActiveRecordPlugin指定一个 configName即可，如下是代码示例：\n\npublic void configPlugin(Plugins me) {\n  // mysql 数据源\n  DruidPlugin dsMysql = new DruidPlugin(…);\n  me.add(dsMysql);\n  \n  // mysql ActiveRecrodPlugin 实例，并指定configName为 mysql\n  ActiveRecordPlugin arpMysql = new ActiveRecordPlugin("mysql", dsMysql);\n  me.add(arpMysql);\n  arpMysql.addMapping("user", User.class);\n  \n  // oracle 数据源\n  DruidPlugin dsOracle = new DruidPlugin(…);\n  me.add(dsOracle);\n  \n  // oracle ActiveRecrodPlugin 实例，并指定configName为 oracle\n  ActiveRecordPlugin arpOracle = new ActiveRecordPlugin("oracle", dsOracle);\n  me.add(arpOracle);\n  arpOracle.setDialect(new OracleDialect());\n  arpOracle.addMapping("blog", Blog.class);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n以上代码创建了创了两个ActiveRecordPlugin实例arpMysql与arpOrace，特别注意创建实例的同时指定其configName分别为mysql与oracle。arpMysql与arpOracle分别映射了不同的Model，配置了不同的方言。\n\n对于Model的使用，不同的Model会自动找到其所属的ActiveRecrodPlugin实例以及相关配置进行数据库操作。假如希望同一个Model能够切换到不同的数据源上使用，也极度方便，这种用法非常适合不同数据源中的table拥有相同表结构的情况，开发者希望用同一个Model来操作这些相同表结构的table，以下是示例代码：\n\npublic void multiDsModel() {\n  // 默认使用arp.addMapping(...)时关联起来的数据源\n  Blog blog = new Blog().dao().findById(123);\n \n  // 只需调用一次use方法即可切换到另一数据源上去\n  blog.use("mysql-bak").save();\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上例中的代码，blog.use("mysql-bak") 方法切换数据源到 mysql-bak ，随后的 save() 将数据保存到该数据源。\n\n特别注意：只有在同一个Model希望对应到多个数据源的table时才需要使用use方法，如果同一个Model唯一对应一个数据源的一个table，那么数据源的切换是自动的，无需使用use方法。\n\n对于Db + Record的使用，数据源的切换需要使用Db.use(configName)方法得到数据库操作对象，然后就可以进行数据库操作了，以下是代码示例：\n\n// 查询 dsMysql数据源中的 user\nList<Record> users = Db.use("mysql").find("select * from user");\n// 查询 dsOracle数据源中的 blog\nList<Record> blogs = Db.use("oracle").find("select * from blog");\n\n\n1\n2\n3\n4\n\n\n以上两行代码，分别通过configName为mysql、oracle得到各自的数据库操作对象，然后就可以如同单数据完全一样的方式来使用数据库操作 API了。简言之，对于 Db + Record来说，多数据源相比单数据源仅需多调用一下Db.use(configName)，随后的API使用方式完全一样。\n\n注意最先创建的 ActiveRecrodPlugin实例将会成为主数据源，可以省略configName。最先创建的 ActiveRecrodPlugin实例中的配置将默认成为主配置，此外还可以通过设置configName为 DbKit.MAIN_CONFIG_NAME常量来设置主配置。',normalizedContent:'# 5.14 多数据源支持\n\nactiverecordplugin可同时支持多数据源、多方言、多缓存、多事务级别等特性，对每个 activerecordplugin 可进行彼此独立的配置。简言之 jfinal 可以同时使用多数据源，并且可以针对这多个数据源配置独立的方言、缓存、事务级别等。\n\n当使用多数据源时，只需要对每个 activerecordplugin指定一个 configname即可，如下是代码示例：\n\npublic void configplugin(plugins me) {\n  // mysql 数据源\n  druidplugin dsmysql = new druidplugin(…);\n  me.add(dsmysql);\n  \n  // mysql activerecrodplugin 实例，并指定configname为 mysql\n  activerecordplugin arpmysql = new activerecordplugin("mysql", dsmysql);\n  me.add(arpmysql);\n  arpmysql.addmapping("user", user.class);\n  \n  // oracle 数据源\n  druidplugin dsoracle = new druidplugin(…);\n  me.add(dsoracle);\n  \n  // oracle activerecrodplugin 实例，并指定configname为 oracle\n  activerecordplugin arporacle = new activerecordplugin("oracle", dsoracle);\n  me.add(arporacle);\n  arporacle.setdialect(new oracledialect());\n  arporacle.addmapping("blog", blog.class);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n以上代码创建了创了两个activerecordplugin实例arpmysql与arporace，特别注意创建实例的同时指定其configname分别为mysql与oracle。arpmysql与arporacle分别映射了不同的model，配置了不同的方言。\n\n对于model的使用，不同的model会自动找到其所属的activerecrodplugin实例以及相关配置进行数据库操作。假如希望同一个model能够切换到不同的数据源上使用，也极度方便，这种用法非常适合不同数据源中的table拥有相同表结构的情况，开发者希望用同一个model来操作这些相同表结构的table，以下是示例代码：\n\npublic void multidsmodel() {\n  // 默认使用arp.addmapping(...)时关联起来的数据源\n  blog blog = new blog().dao().findbyid(123);\n \n  // 只需调用一次use方法即可切换到另一数据源上去\n  blog.use("mysql-bak").save();\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上例中的代码，blog.use("mysql-bak") 方法切换数据源到 mysql-bak ，随后的 save() 将数据保存到该数据源。\n\n特别注意：只有在同一个model希望对应到多个数据源的table时才需要使用use方法，如果同一个model唯一对应一个数据源的一个table，那么数据源的切换是自动的，无需使用use方法。\n\n对于db + record的使用，数据源的切换需要使用db.use(configname)方法得到数据库操作对象，然后就可以进行数据库操作了，以下是代码示例：\n\n// 查询 dsmysql数据源中的 user\nlist<record> users = db.use("mysql").find("select * from user");\n// 查询 dsoracle数据源中的 blog\nlist<record> blogs = db.use("oracle").find("select * from blog");\n\n\n1\n2\n3\n4\n\n\n以上两行代码，分别通过configname为mysql、oracle得到各自的数据库操作对象，然后就可以如同单数据完全一样的方式来使用数据库操作 api了。简言之，对于 db + record来说，多数据源相比单数据源仅需多调用一下db.use(configname)，随后的api使用方式完全一样。\n\n注意最先创建的 activerecrodplugin实例将会成为主数据源，可以省略configname。最先创建的 activerecrodplugin实例中的配置将默认成为主配置，此外还可以通过设置configname为 dbkit.main_config_name常量来设置主配置。',charsets:{cjk:!0}},{title:"5.15 独立使用 ActiveRecord",frontmatter:{},regularPath:"/zh/5%20ActiveRecord/5.15%20%E7%8B%AC%E7%AB%8B%E4%BD%BF%E7%94%A8%20ActiveRecord.html",relativePath:"zh/5 ActiveRecord/5.15 独立使用 ActiveRecord.md",key:"v-6bee94cc",path:"/zh/5%20ActiveRecord/5.15%20%E7%8B%AC%E7%AB%8B%E4%BD%BF%E7%94%A8%20ActiveRecord.html",lastUpdated:"9/11/2023, 1:38:26 AM",lastUpdatedTimestamp:1694396306e3,headersStr:null,content:'# 5.15 独立使用 ActiveRecord\n\nActiveRecordPlugin可以独立于java web 环境运行在任何普通的java程序中，使用方式极度简单，相对于web项目只需要手动调用一下其start() 方法即可立即使用。以下是代码示例：\n\npublic class ActiveRecordTest {\n  public static void main(String[] args) {\n    DruidPlugin dp = new DruidPlugin("localhost", "userName", "password");\n    ActiveRecordPlugin arp = new ActiveRecordPlugin(dp);\n    arp.addMapping("blog", Blog.class);\n    \n    // 与 jfinal web 环境唯一的不同是要手动调用一次相关插件的start()方法\n    dp.start();\n    arp.start();\n    \n    // 通过上面简单的几行代码，即可立即开始使用\n    new Blog().set("title", "title").set("content", "cxt text").save();\n    Blog.dao.findById(123);\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n注意：ActiveRecordPlugin所依赖的其它插件也必须手动调用一下start()方法，如上例中的dp.start()。 jfinal 的 activerecord 模块已被独立发布到了 maven 库，如果只想使用 jfinal activerecord 模块而不想引入整个 jfinal 的可以使用下面的坐标：\n\n<dependency>\n    <groupId>com.jfinal</groupId>\n    <artifactId>activerecord</artifactId>\n    <version>5.1.2</version>\n</dependency>\n\n\n1\n2\n3\n4\n5\n\n\n独立使用该模块的用法与在 jfinal 中使用时完全一样\n\n特别注意：activerecord 模块中包含了 enjoy template 模块，如果要使用 enjoy 模板引擎，直接使用就好，无需引入 enjoy template 模块的 maven 依赖，否则会造成冲突。 如果是与 spring boot 整合使用，可以参考这篇文章：https://blog.csdn.net/suxiaoqiuking/article/details/78999857',normalizedContent:'# 5.15 独立使用 activerecord\n\nactiverecordplugin可以独立于java web 环境运行在任何普通的java程序中，使用方式极度简单，相对于web项目只需要手动调用一下其start() 方法即可立即使用。以下是代码示例：\n\npublic class activerecordtest {\n  public static void main(string[] args) {\n    druidplugin dp = new druidplugin("localhost", "username", "password");\n    activerecordplugin arp = new activerecordplugin(dp);\n    arp.addmapping("blog", blog.class);\n    \n    // 与 jfinal web 环境唯一的不同是要手动调用一次相关插件的start()方法\n    dp.start();\n    arp.start();\n    \n    // 通过上面简单的几行代码，即可立即开始使用\n    new blog().set("title", "title").set("content", "cxt text").save();\n    blog.dao.findbyid(123);\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n注意：activerecordplugin所依赖的其它插件也必须手动调用一下start()方法，如上例中的dp.start()。 jfinal 的 activerecord 模块已被独立发布到了 maven 库，如果只想使用 jfinal activerecord 模块而不想引入整个 jfinal 的可以使用下面的坐标：\n\n<dependency>\n    <groupid>com.jfinal</groupid>\n    <artifactid>activerecord</artifactid>\n    <version>5.1.2</version>\n</dependency>\n\n\n1\n2\n3\n4\n5\n\n\n独立使用该模块的用法与在 jfinal 中使用时完全一样\n\n特别注意：activerecord 模块中包含了 enjoy template 模块，如果要使用 enjoy 模板引擎，直接使用就好，无需引入 enjoy template 模块的 maven 依赖，否则会造成冲突。 如果是与 spring boot 整合使用，可以参考这篇文章：https://blog.csdn.net/suxiaoqiuking/article/details/78999857',charsets:{cjk:!0}},{title:"5.16 调用存储过程",frontmatter:{},regularPath:"/zh/5%20ActiveRecord/5.16%20%E8%B0%83%E7%94%A8%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B.html",relativePath:"zh/5 ActiveRecord/5.16 调用存储过程.md",key:"v-a8ec52d8",path:"/zh/5%20ActiveRecord/5.16%20%E8%B0%83%E7%94%A8%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B.html",lastUpdated:"9/11/2023, 1:38:26 AM",lastUpdatedTimestamp:1694396306e3,headersStr:null,content:'# 5.16 调用存储过程\n\n使用工具类 Db 可以很方便调用存储过程，以下是代码示例：\n\nDb.execute((connection) -> {\n    CallableStatement cs = connection.prepareCall(...);\n    cs.setObject(1, ...);\n    cs.setObject(2, ...);\n    cs.execute();\n    cs.close();\n    return cs.getObject(1);\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n如上所示，使用 Db.execute(...) 可以很方便去调用存储过程，其中的 connection 是一个 Connection 类型的对象，该对象在使用完以后，不必 close()，因为 jfinal 在上层会默认帮你 close() 掉。 此外，MySQL 之下还可以使用更简单的方式调用存储过程：\n\n// 调用存储过程，查询 salary 表\nRecord first = Db.findFirst("CALL FindSalary (1,\\"201901\\")");\n \n// 调用存储过程，插入 salary 表\nint update2 = Db.update("CALL InsertSalary (3, 123)");\n \n// 调用存储过程，更新 salary 表\nint update = Db.update("CALL UpdateSalary (3, 99999)");\n \n// 调用存储过程，删除 salary 表\nint delete = Db.delete("CALL DeleteSalary(3)");\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n',normalizedContent:'# 5.16 调用存储过程\n\n使用工具类 db 可以很方便调用存储过程，以下是代码示例：\n\ndb.execute((connection) -> {\n    callablestatement cs = connection.preparecall(...);\n    cs.setobject(1, ...);\n    cs.setobject(2, ...);\n    cs.execute();\n    cs.close();\n    return cs.getobject(1);\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n如上所示，使用 db.execute(...) 可以很方便去调用存储过程，其中的 connection 是一个 connection 类型的对象，该对象在使用完以后，不必 close()，因为 jfinal 在上层会默认帮你 close() 掉。 此外，mysql 之下还可以使用更简单的方式调用存储过程：\n\n// 调用存储过程，查询 salary 表\nrecord first = db.findfirst("call findsalary (1,\\"201901\\")");\n \n// 调用存储过程，插入 salary 表\nint update2 = db.update("call insertsalary (3, 123)");\n \n// 调用存储过程，更新 salary 表\nint update = db.update("call updatesalary (3, 99999)");\n \n// 调用存储过程，删除 salary 表\nint delete = db.delete("call deletesalary(3)");\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n',charsets:{cjk:!0}},{title:"5.2 ActiveRecordPlugin",frontmatter:{},regularPath:"/zh/5%20ActiveRecord/5.2%20ActiveRecordPlugin.html",relativePath:"zh/5 ActiveRecord/5.2 ActiveRecordPlugin.md",key:"v-7fdf5b79",path:"/zh/5%20ActiveRecord/5.2%20ActiveRecordPlugin.html",lastUpdated:"9/8/2023, 10:15:47 AM",lastUpdatedTimestamp:1694168147e3,headersStr:null,content:'# 5.2 ActiveRecordPlugin\n\nActiveRecord是作为JFinal的Plugin而存在的，所以使用时需要在JFinalConfig中配置ActiveRecordPlugin。\n\n以下是Plugin配置示例代码：\n\npublic class DemoConfig extends JFinalConfig {\n  public void configPlugin(Plugins me) {\n  DruidPlugin dp = new DruidPlugin("jdbc:mysql://localhost/db_name", "userName", "password");\n    me.add(dp);\n    ActiveRecordPlugin arp = new ActiveRecordPlugin(dp);\n    me.add(arp);\n    arp.addMapping("user", User.class);\n    arp.addMapping("article", "article_id", Article.class);\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n以上代码配置了两个插件：DruidPlugin与ActiveRecordPlugin，前者是druid数据源插件，后者是ActiveRecrod支持插件。ActiveReceord中定义了addMapping(String tableName, Class<? extends Model> modelClass>)方法，该方法建立了数据库表名到Model的映射关系。\n\n另外，以上代码中arp.addMapping("user", User.class)，表的主键名为默认为 "id"，如果主键名称为 "user_id" 则需要手动指定，如：arp.addMapping("user", "user_id", User.class)。\n\n重要：以上的 arp.addMapping(...) 映射配置，可以让 jfinal 生成器自动化完成，不再需要手动添加这类配置，具体用法见文档：https://www.jfinal.com/doc/5-4',normalizedContent:'# 5.2 activerecordplugin\n\nactiverecord是作为jfinal的plugin而存在的，所以使用时需要在jfinalconfig中配置activerecordplugin。\n\n以下是plugin配置示例代码：\n\npublic class democonfig extends jfinalconfig {\n  public void configplugin(plugins me) {\n  druidplugin dp = new druidplugin("jdbc:mysql://localhost/db_name", "username", "password");\n    me.add(dp);\n    activerecordplugin arp = new activerecordplugin(dp);\n    me.add(arp);\n    arp.addmapping("user", user.class);\n    arp.addmapping("article", "article_id", article.class);\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n以上代码配置了两个插件：druidplugin与activerecordplugin，前者是druid数据源插件，后者是activerecrod支持插件。activereceord中定义了addmapping(string tablename, class<? extends model> modelclass>)方法，该方法建立了数据库表名到model的映射关系。\n\n另外，以上代码中arp.addmapping("user", user.class)，表的主键名为默认为 "id"，如果主键名称为 "user_id" 则需要手动指定，如：arp.addmapping("user", "user_id", user.class)。\n\n重要：以上的 arp.addmapping(...) 映射配置，可以让 jfinal 生成器自动化完成，不再需要手动添加这类配置，具体用法见文档：https://www.jfinal.com/doc/5-4',charsets:{cjk:!0}},{title:"5.3 Model",frontmatter:{},regularPath:"/zh/5%20ActiveRecord/5.3%20Model.html",relativePath:"zh/5 ActiveRecord/5.3 Model.md",key:"v-28b5b627",path:"/zh/5%20ActiveRecord/5.3%20Model.html",headers:[{level:3,title:"1、基本用法",slug:"_1、基本用法",normalizedTitle:"1、基本用法",charIndex:16},{level:3,title:"2、常见错误",slug:"_2、常见错误",normalizedTitle:"2、常见错误",charIndex:1376}],lastUpdated:"9/8/2023, 10:15:47 AM",lastUpdatedTimestamp:1694168147e3,headersStr:"1、基本用法 2、常见错误",content:'# 5.3 Model\n\n\n# 1、基本用法\n\nModel是ActiveRecord中最重要的组件之一，它充当MVC模式中的Model部分。以下是Model定义示例代码：\n\npublic class User extends Model<User> {\n    public static final User dao = new User().dao();\n}\n\n\n1\n2\n3\n\n\n以上代码中的User通过继承Model，便立即拥有的众多方便的操作数据库的方法。在User中声明的dao静态对象是为了方便查询操作而定义的，该对象并不是必须的。基于ActiveRecord的Model无需定义属性，无需定义getter、setter方法，无需XML配置，无需Annotation配置，极大降低了代码量。\n\n以下为Model的一些常见用法：\n\n// 创建name属性为James,age属性为25的User对象并添加到数据库\nnew User().set("name", "James").set("age", 25).save();\n \n// 删除id值为25的User\nUser.dao.deleteById(25);\n \n// 查询id值为25的User将其name属性改为James并更新到数据库\nUser.dao.findById(25).set("name", "James").update();\n \n// 查询id值为25的user, 且仅仅取name与age两个字段的值\nUser user = User.dao.findByIdLoadColumns(25, "name, age");\n \n// 获取user的name属性\nString userName = user.getStr("name");\n \n// 获取user的age属性\nInteger userAge = user.getInt("age");\n \n// 查询所有年龄大于18岁的user\nList<User> users = User.dao.find("select * from user where age>18");\n \n// 分页查询年龄大于18的user,当前页号为1,每页10个user\nPage<User> userPage = User.dao.paginate(1, 10, "select *", "from user where age > ?", 18);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n以上用法将 dao 对象声明在了 model 中仅为方便展示，在实际应用中应该将 dao 对象放在 Service 中，并且让其成为 private，这样可以保障 sql 以及数据库操作被限定在 service 层中。可以通过下载官网首页的 jfinal_demo_for_maven 来参考 dao 在 Service 层中的用法。\n\n特别注意：User中定义的 public static final User dao对象是全局共享的，只能用于数据库查询，不能用于数据承载对象。数据承载需要使用new User().set(…)来实现。\n\n\n# 2、常见错误\n\n有不少用户经常在使用 model.find(....) 这类方法时碰到 NullPointerException 异常，通常是由于该 model 没有使用 ActionRecordPlugin.addMapping(....) 进行过映射。 建议通过生成器自动化生成映射，无需手工添加这类代码，生成器在本站首页下载 jfinal demo，里面有提供。',normalizedContent:'# 5.3 model\n\n\n# 1、基本用法\n\nmodel是activerecord中最重要的组件之一，它充当mvc模式中的model部分。以下是model定义示例代码：\n\npublic class user extends model<user> {\n    public static final user dao = new user().dao();\n}\n\n\n1\n2\n3\n\n\n以上代码中的user通过继承model，便立即拥有的众多方便的操作数据库的方法。在user中声明的dao静态对象是为了方便查询操作而定义的，该对象并不是必须的。基于activerecord的model无需定义属性，无需定义getter、setter方法，无需xml配置，无需annotation配置，极大降低了代码量。\n\n以下为model的一些常见用法：\n\n// 创建name属性为james,age属性为25的user对象并添加到数据库\nnew user().set("name", "james").set("age", 25).save();\n \n// 删除id值为25的user\nuser.dao.deletebyid(25);\n \n// 查询id值为25的user将其name属性改为james并更新到数据库\nuser.dao.findbyid(25).set("name", "james").update();\n \n// 查询id值为25的user, 且仅仅取name与age两个字段的值\nuser user = user.dao.findbyidloadcolumns(25, "name, age");\n \n// 获取user的name属性\nstring username = user.getstr("name");\n \n// 获取user的age属性\ninteger userage = user.getint("age");\n \n// 查询所有年龄大于18岁的user\nlist<user> users = user.dao.find("select * from user where age>18");\n \n// 分页查询年龄大于18的user,当前页号为1,每页10个user\npage<user> userpage = user.dao.paginate(1, 10, "select *", "from user where age > ?", 18);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n以上用法将 dao 对象声明在了 model 中仅为方便展示，在实际应用中应该将 dao 对象放在 service 中，并且让其成为 private，这样可以保障 sql 以及数据库操作被限定在 service 层中。可以通过下载官网首页的 jfinal_demo_for_maven 来参考 dao 在 service 层中的用法。\n\n特别注意：user中定义的 public static final user dao对象是全局共享的，只能用于数据库查询，不能用于数据承载对象。数据承载需要使用new user().set(…)来实现。\n\n\n# 2、常见错误\n\n有不少用户经常在使用 model.find(....) 这类方法时碰到 nullpointerexception 异常，通常是由于该 model 没有使用 actionrecordplugin.addmapping(....) 进行过映射。 建议通过生成器自动化生成映射，无需手工添加这类代码，生成器在本站首页下载 jfinal demo，里面有提供。',charsets:{cjk:!0}},{title:"5.4 生成器与 JavaBean",frontmatter:{},regularPath:"/zh/5%20ActiveRecord/5.4%20%E7%94%9F%E6%88%90%E5%99%A8%E4%B8%8E%20JavaBean.html",relativePath:"zh/5 ActiveRecord/5.4 生成器与 JavaBean.md",key:"v-5546ce10",path:"/zh/5%20ActiveRecord/5.4%20%E7%94%9F%E6%88%90%E5%99%A8%E4%B8%8E%20JavaBean.html",headers:[{level:3,title:"1、生成器的使用",slug:"_1、生成器的使用",normalizedTitle:"1、生成器的使用",charIndex:24},{level:3,title:"2、相关生成文件",slug:"_2、相关生成文件",normalizedTitle:"2、相关生成文件",charIndex:2114},{level:3,title:"3､ table 过滤、排除",slug:"_3、-table-过滤、排除",normalizedTitle:"3､ table 过滤、排除",charIndex:2406},{level:3,title:"4、使用生成器的主要优势",slug:"_4、使用生成器的主要优势",normalizedTitle:"4、使用生成器的主要优势",charIndex:3548},{level:3,title:"5、Model 与 Bean 合体后注意事项",slug:"_5、model-与-bean-合体后注意事项",normalizedTitle:"5、model 与 bean 合体后注意事项",charIndex:3921},{level:3,title:"6、常见问题解决",slug:"_6、常见问题解决",normalizedTitle:"6、常见问题解决",charIndex:4693}],lastUpdated:"9/8/2023, 10:15:47 AM",lastUpdatedTimestamp:1694168147e3,headersStr:"1、生成器的使用 2、相关生成文件 3､ table 过滤、排除 4、使用生成器的主要优势 5、Model 与 Bean 合体后注意事项 6、常见问题解决",content:'# 5.4 生成器与 JavaBean\n\n\n# 1、生成器的使用\n\nActiveRecord 模块的 com.jfinal.plugin.activerecord.generator 包下，提供了一个 Generator 工具类，可自动生成 Model、BaseModel、MappingKit、DataDictionary 四类文件。\n\n生成后的 Model 将与 java bean 合体，立即拥有了 getter、setter 方法，使之遵守传统的 java bean 规范，立即拥有了传统 JavaBean 所有的优势，开发过程中不再需要记忆字段名。\n\n使用生成器通常只需配置 Generator 的四个参数即可，以下是具体使用示例：\n\n// model 所使用的包名 (MappingKit 默认使用的包名)\nString modelPackageName = "com.xxx.common.model";\n\t\t\n// base model 所使用的包名\nString baseModelPackageName = modelPackageName + ".base";\n\t\t\n// base model 文件保存路径\n// 注意从 jfinal 4.9.12 版开始，PathKit.getWebRootPath() 在此的用法要改成 System.getProperty("user.dir")\nString baseModelOutputDir = System.getProperty("user.dir") + "/src/main/java/" + baseModelPackageName.replace(\'.\', \'/\');\n\t\t\n// model 文件保存路径 (MappingKit 与 DataDictionary 文件默认保存路径)\nString modelOutputDir = baseModelOutputDir + "/..";\n\t\t\nSystem.out.println("输出路径："+ baseModelOutputDir);\n \n// 创建生成器\nGenerator gen = new Generator(getDataSource(), baseModelPackageName, baseModelOutputDir, modelPackageName, modelOutputDir);\n \n// 设置数据库方言\ngen.setDialect(new MysqlDialect());\n \n// 在 getter、setter 方法上生成字段备注内容\ngen.setGenerateRemarks(true);\n \n// 开始生成代码\ngen.generate();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\nbaseModelPackageName、baseModelOutputDir、modelPackageName、modelOutputDir，四个参数分别表示 base model 的包名，baseModel 的输出路径，model 的包名，model 的输出路径。\n\n由于后三个参数可以根据第一个参数来生成，所以通常只需要配置 modelPackageName 这一个参数即可。\n\n可在官网下载 jfinal-demo 项目，其中的生成器可直接用于项目：http://www.jfinal.com\n\n生成器的各部分组件都可以扩展，例如，MetaBuilder 可以指定 table 的过滤规则：https://jfinal.com/feedback/7290\n\n此外，生成器 Generator 提供了很多 setter 配置方法，可以很方便控制生成的结果，如下配置可以指定生成器依赖的模板文件：\n\n// 指定 base model 文件生成的模板文件\ngenerator.setBaseModelTemplate(...);\n \n// 指定 model model 文件生成的模板文件\ngenerator.setModelTemplate(...);\n \n// 指定 MappingKit 文件生成的模板文件\ngenerator.setMappingKitTemplate(...)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n以上代码可以用于指定生成器所依赖的模板文件，将模板文件放入 src/main/resources 目录下面可以被生成器获取到。定制模板文件一般需要在原有模板文件的基础之上做修改，原有模板文件在 jfinal 源码中有提供：https://gitee.com/jfinal/jfinal/tree/master/src/main/java/com/jfinal/plugin/activerecord/generator\n\n后缀为 ".jf" 即为生成器所需的模板文件，里面所使用的语法为 enjoy 模板引擎语法。\n\n\n# 2、相关生成文件\n\nBaseModel 是用于被最终的 Model 继承的基类，所有的 getter、setter 方法都将生成在此文件内，这样就保障了最终 Model 的清爽与干净，BaseModel不需要人工维护，在数据库有任何变化时重新生成一次即可。\n\nMappingKit 用于生成 table 到 Model 的映射关系，并且会生成主键/复合主键的配置，也即无需在 configPlugin(Plugins me) 方法中书写任何样板式的映射代码。\n\nDataDictionary 是指生成的数据字典，会生成数据表所有字段的名称、类型、长度、备注、是否主键等信息。\n\n\n# 3､ table 过滤、排除\n\nGenerator 内部工作流程由 MetaBuilder、ModelGenerator、BaseModelGenerator、MappingKitGenerator、DataDictionaryGenerator 组件组合而成，而这些组件都可以通过继承扩展，或者独立配置，然后再组装到 Generator 中，从而实现个性化的定制功能\n\njfinal 5.0.0 版本新增了 Generator.addBlacklist(blacklist) 以及 addWhitelist(whitelist) 两个方法，可以将需要生成的 table 添加到白名单或者黑名单，用法如下：\n\n// 添加多个表名到黑名单\ngenerator.addBlacklist("login_log", "role_permission", "user_role");\n \n// 添加多个表名白名单\ngenerator.addWhitelist(...);\n\n\n1\n2\n3\n4\n5\n\n\n以下内容是 jfinal 5.0.0 版本之前的过滤、排除方式，不再建议使用：\n\n下面代码通过配置 MetaBuilder 实现 table 过滤功能，过滤掉的 table 将不会生成相应的类与映射文件：\n\nMetaBuilder metaBuilder = new MetaBuilder(dataSource)\n   // 使用 filter 方法定制过滤逻辑，返回 true 表示过滤掉当前 table\n   .filter(tableName -> {\n      return tableName.startsWith("sys_");\n   });\n \nGenerator gen = new Generator(dataSource, baseModelPackageName, baseModelOutputDir);\ngen.setMetaBuilder(metaBuilder);\ngen.generate();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n以上代码通过创建 MetaBuilder 对象，并单独对它进行 filter 配置，然后再通过 generator.setMetaBuilder(...) 将其注入到生成器之中，从而实现了 talbe 的定制化过滤。\n\n注意：jfinal 4.9.05 版本之后，filter(...) 方法将更名为 skip(...);\n\n除此之外，还可以通过继承 MetaBuilder、ModelGenerator、BaseModelGenerator 等等组件，然后再将其注入到生成器之中，实现更多的个性化功能。\n\n\n# 4、使用生成器的主要优势\n\n * 充分利用海量的针对于 Bean 设计的第三方工具，例如 jackson、freemarker\n\n * 快速响应数据库表变动，极速重构，提升开发效率，提升代码质量\n\n * 拥有 IDE 代码提示不用记忆数据表字段名，消除记忆负担，避免手写字段名出现手误\n\n * BaseModel 设计令 Model 中依然保持清爽，在表结构变化时极速重构关联代码\n\n * 自动化 table 至 Model 映射\n\n * 自动化主键、复合主键名称识别与映射\n\n * MappingKit 承载映射代码，JFinalConfig 保持干净清爽\n\n * 有利于分布式场景和无数据源时使用 Model\n\n * 新设计避免了以往自动扫描映射设计的若干缺点：引入新概念(如注解)增加学习成本、性能低、jar包扫描可靠性与安全性低\n\n\n# 5、Model 与 Bean 合体后注意事项\n\n * 合体后 JSP 模板输出 Bean 中的数据将依赖其 getter 方法，输出的变量名即为 getter 方法去掉 ”get” 前缀字符后剩下的字符首字母变小写，如果希望 JSP 仍然使用之前的输出方式，可以在系统启动时调用一下 ModelRecordElResolver. setResolveBeanAsModel(true);\n\n * Controller 之中的 getModel() 需要表单域名称对应于数据表字段名，而 getBean() 则依赖于setter方法，表单域名对应于 setter 方法去掉 ”set” 前缀字符后剩下的字符串字母变小写。\n\n * 许多类似于 jackson、fastjson 的第三方工具依赖于 Bean 的 getter 方法进行操作，所以只有合体后才可以使用 jackson、fastjson\n\n * JFinalJson将 Model 转换为json数据时，json 的 keyName 是原始的数据表字段名，而 jackson、fastjson 这类依赖于 getter 方法转化成的 json 的 keyName 是数据表字段名转换而成的驼峰命名\n\n * 建议 mysql 数据表的字段名直接使用驼峰命名，这样可以令 json 的 keyName 完全一致，也可以使 JSP 在页面中取值时使用完全一致的属性名。注意：mysql 数据表的名称仍然使用下划线命名方式并使用小写字母，方便在 linux 与 windows 系统之间移植。\n\n * 总之，合体后的 Bean 在使用时要清楚使用的是其 BaseModel 中的 getter、setter 方法还是其 Model 中的 get(String attrName) 方法\n\n\n# 6、常见问题解决\n\nSql Server 数据库在使用生成器之时，会获取到系统自带的表，需要对这些表进行过滤，具体办法参考：http://www.jfinal.com/share/211',normalizedContent:'# 5.4 生成器与 javabean\n\n\n# 1、生成器的使用\n\nactiverecord 模块的 com.jfinal.plugin.activerecord.generator 包下，提供了一个 generator 工具类，可自动生成 model、basemodel、mappingkit、datadictionary 四类文件。\n\n生成后的 model 将与 java bean 合体，立即拥有了 getter、setter 方法，使之遵守传统的 java bean 规范，立即拥有了传统 javabean 所有的优势，开发过程中不再需要记忆字段名。\n\n使用生成器通常只需配置 generator 的四个参数即可，以下是具体使用示例：\n\n// model 所使用的包名 (mappingkit 默认使用的包名)\nstring modelpackagename = "com.xxx.common.model";\n\t\t\n// base model 所使用的包名\nstring basemodelpackagename = modelpackagename + ".base";\n\t\t\n// base model 文件保存路径\n// 注意从 jfinal 4.9.12 版开始，pathkit.getwebrootpath() 在此的用法要改成 system.getproperty("user.dir")\nstring basemodeloutputdir = system.getproperty("user.dir") + "/src/main/java/" + basemodelpackagename.replace(\'.\', \'/\');\n\t\t\n// model 文件保存路径 (mappingkit 与 datadictionary 文件默认保存路径)\nstring modeloutputdir = basemodeloutputdir + "/..";\n\t\t\nsystem.out.println("输出路径："+ basemodeloutputdir);\n \n// 创建生成器\ngenerator gen = new generator(getdatasource(), basemodelpackagename, basemodeloutputdir, modelpackagename, modeloutputdir);\n \n// 设置数据库方言\ngen.setdialect(new mysqldialect());\n \n// 在 getter、setter 方法上生成字段备注内容\ngen.setgenerateremarks(true);\n \n// 开始生成代码\ngen.generate();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\nbasemodelpackagename、basemodeloutputdir、modelpackagename、modeloutputdir，四个参数分别表示 base model 的包名，basemodel 的输出路径，model 的包名，model 的输出路径。\n\n由于后三个参数可以根据第一个参数来生成，所以通常只需要配置 modelpackagename 这一个参数即可。\n\n可在官网下载 jfinal-demo 项目，其中的生成器可直接用于项目：http://www.jfinal.com\n\n生成器的各部分组件都可以扩展，例如，metabuilder 可以指定 table 的过滤规则：https://jfinal.com/feedback/7290\n\n此外，生成器 generator 提供了很多 setter 配置方法，可以很方便控制生成的结果，如下配置可以指定生成器依赖的模板文件：\n\n// 指定 base model 文件生成的模板文件\ngenerator.setbasemodeltemplate(...);\n \n// 指定 model model 文件生成的模板文件\ngenerator.setmodeltemplate(...);\n \n// 指定 mappingkit 文件生成的模板文件\ngenerator.setmappingkittemplate(...)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n以上代码可以用于指定生成器所依赖的模板文件，将模板文件放入 src/main/resources 目录下面可以被生成器获取到。定制模板文件一般需要在原有模板文件的基础之上做修改，原有模板文件在 jfinal 源码中有提供：https://gitee.com/jfinal/jfinal/tree/master/src/main/java/com/jfinal/plugin/activerecord/generator\n\n后缀为 ".jf" 即为生成器所需的模板文件，里面所使用的语法为 enjoy 模板引擎语法。\n\n\n# 2、相关生成文件\n\nbasemodel 是用于被最终的 model 继承的基类，所有的 getter、setter 方法都将生成在此文件内，这样就保障了最终 model 的清爽与干净，basemodel不需要人工维护，在数据库有任何变化时重新生成一次即可。\n\nmappingkit 用于生成 table 到 model 的映射关系，并且会生成主键/复合主键的配置，也即无需在 configplugin(plugins me) 方法中书写任何样板式的映射代码。\n\ndatadictionary 是指生成的数据字典，会生成数据表所有字段的名称、类型、长度、备注、是否主键等信息。\n\n\n# 3､ table 过滤、排除\n\ngenerator 内部工作流程由 metabuilder、modelgenerator、basemodelgenerator、mappingkitgenerator、datadictionarygenerator 组件组合而成，而这些组件都可以通过继承扩展，或者独立配置，然后再组装到 generator 中，从而实现个性化的定制功能\n\njfinal 5.0.0 版本新增了 generator.addblacklist(blacklist) 以及 addwhitelist(whitelist) 两个方法，可以将需要生成的 table 添加到白名单或者黑名单，用法如下：\n\n// 添加多个表名到黑名单\ngenerator.addblacklist("login_log", "role_permission", "user_role");\n \n// 添加多个表名白名单\ngenerator.addwhitelist(...);\n\n\n1\n2\n3\n4\n5\n\n\n以下内容是 jfinal 5.0.0 版本之前的过滤、排除方式，不再建议使用：\n\n下面代码通过配置 metabuilder 实现 table 过滤功能，过滤掉的 table 将不会生成相应的类与映射文件：\n\nmetabuilder metabuilder = new metabuilder(datasource)\n   // 使用 filter 方法定制过滤逻辑，返回 true 表示过滤掉当前 table\n   .filter(tablename -> {\n      return tablename.startswith("sys_");\n   });\n \ngenerator gen = new generator(datasource, basemodelpackagename, basemodeloutputdir);\ngen.setmetabuilder(metabuilder);\ngen.generate();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n以上代码通过创建 metabuilder 对象，并单独对它进行 filter 配置，然后再通过 generator.setmetabuilder(...) 将其注入到生成器之中，从而实现了 talbe 的定制化过滤。\n\n注意：jfinal 4.9.05 版本之后，filter(...) 方法将更名为 skip(...);\n\n除此之外，还可以通过继承 metabuilder、modelgenerator、basemodelgenerator 等等组件，然后再将其注入到生成器之中，实现更多的个性化功能。\n\n\n# 4、使用生成器的主要优势\n\n * 充分利用海量的针对于 bean 设计的第三方工具，例如 jackson、freemarker\n\n * 快速响应数据库表变动，极速重构，提升开发效率，提升代码质量\n\n * 拥有 ide 代码提示不用记忆数据表字段名，消除记忆负担，避免手写字段名出现手误\n\n * basemodel 设计令 model 中依然保持清爽，在表结构变化时极速重构关联代码\n\n * 自动化 table 至 model 映射\n\n * 自动化主键、复合主键名称识别与映射\n\n * mappingkit 承载映射代码，jfinalconfig 保持干净清爽\n\n * 有利于分布式场景和无数据源时使用 model\n\n * 新设计避免了以往自动扫描映射设计的若干缺点：引入新概念(如注解)增加学习成本、性能低、jar包扫描可靠性与安全性低\n\n\n# 5、model 与 bean 合体后注意事项\n\n * 合体后 jsp 模板输出 bean 中的数据将依赖其 getter 方法，输出的变量名即为 getter 方法去掉 ”get” 前缀字符后剩下的字符首字母变小写，如果希望 jsp 仍然使用之前的输出方式，可以在系统启动时调用一下 modelrecordelresolver. setresolvebeanasmodel(true);\n\n * controller 之中的 getmodel() 需要表单域名称对应于数据表字段名，而 getbean() 则依赖于setter方法，表单域名对应于 setter 方法去掉 ”set” 前缀字符后剩下的字符串字母变小写。\n\n * 许多类似于 jackson、fastjson 的第三方工具依赖于 bean 的 getter 方法进行操作，所以只有合体后才可以使用 jackson、fastjson\n\n * jfinaljson将 model 转换为json数据时，json 的 keyname 是原始的数据表字段名，而 jackson、fastjson 这类依赖于 getter 方法转化成的 json 的 keyname 是数据表字段名转换而成的驼峰命名\n\n * 建议 mysql 数据表的字段名直接使用驼峰命名，这样可以令 json 的 keyname 完全一致，也可以使 jsp 在页面中取值时使用完全一致的属性名。注意：mysql 数据表的名称仍然使用下划线命名方式并使用小写字母，方便在 linux 与 windows 系统之间移植。\n\n * 总之，合体后的 bean 在使用时要清楚使用的是其 basemodel 中的 getter、setter 方法还是其 model 中的 get(string attrname) 方法\n\n\n# 6、常见问题解决\n\nsql server 数据库在使用生成器之时，会获取到系统自带的表，需要对这些表进行过滤，具体办法参考：http://www.jfinal.com/share/211',charsets:{cjk:!0}},{title:"5.5 独创Db Record模式",frontmatter:{},regularPath:"/zh/5%20ActiveRecord/5.5%20%E7%8B%AC%E5%88%9BDb%20Record%E6%A8%A1%E5%BC%8F.html",relativePath:"zh/5 ActiveRecord/5.5 独创Db Record模式.md",key:"v-0a4e7e1f",path:"/zh/5%20ActiveRecord/5.5%20%E7%8B%AC%E5%88%9BDb%20Record%E6%A8%A1%E5%BC%8F.html",headers:[{level:3,title:"1､常见用法",slug:"_1、常见用法",normalizedTitle:"1､常见用法",charIndex:24},{level:3,title:"2、Db.query(...)",slug:"_2、db-query",normalizedTitle:"2、db.query(...)",charIndex:1238},{level:3,title:"3、Db.queryXxx(...)",slug:"_3、db-queryxxx",normalizedTitle:"3、db.queryxxx(...)",charIndex:1769},{level:3,title:"4、Db.find(...) 系与 Db.query(...)/Db.queryXxx(...) 系的区别",slug:"_4、db-find-系与-db-query-db-queryxxx-系的区别",normalizedTitle:"4、db.find(...) 系与 db.query(...)/db.queryxxx(...) 系的区别",charIndex:2253},{level:3,title:"5､扩展 Db 功能",slug:"_5、扩展-db-功能",normalizedTitle:"5､扩展 db 功能",charIndex:2375}],lastUpdated:"9/10/2023, 7:44:28 AM",lastUpdatedTimestamp:1694331868e3,headersStr:"1､常见用法 2、Db.query(...) 3、Db.queryXxx(...) 4、Db.find(...) 系与 Db.query(...)/Db.queryXxx(...) 系的区别 5､扩展 Db 功能",content:'# 5.5 独创Db Record模式\n\n\n# 1､常见用法\n\nDb类及其配套的Record类，提供了在Model类之外更为丰富的数据库操作功能。使用Db与Record类时，无需对数据库表进行映射，Record相当于一个通用的Model。以下为Db + Record模式的一些常见用法：\n\n// 创建name属性为James,age属性为25的record对象并添加到数据库\nRecord user = new Record().set("name", "James").set("age", 25);\nDb.save("user", user);\n \n// 删除id值为25的user表中的记录\nDb.deleteById("user", 25);\n \n// 查询id值为25的Record将其name属性改为James并更新到数据库\nuser = Db.findById("user", 25).set("name", "James");\nDb.update("user", user);\n \n// 获取user的name属性\nString userName = user.getStr("name");\n// 获取user的age属性\nInteger userAge = user.getInt("age");\n \n// 查询所有年龄大于18岁的user\nList<Record> users = Db.find("select * from user where age > 18");\n \n// 分页查询年龄大于18的user,当前页号为1,每页10个user\nPage<Record> userPage = Db.paginate(1, 10, "select *", "from user where age > ?", 18);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n以下为事务处理示例：\n\nboolean succeed = Db.tx(new IAtom(){\n    public boolean run() throws SQLException {\n       int count = Db.update("update account set cash = cash - ? where id = ?", 100, 123);\n       int count2 = Db.update("update account set cash = cash + ? where id = ?", 100, 456);\n       return count == 1 && count2 == 1;\n    }});\\\n\n\n1\n2\n3\n4\n5\n6\n\n\n以上两次数据库更新操作在一个事务中执行，如果执行过程中发生异常或者run()方法返回false，则自动回滚事务。\n\n\n# 2、Db.query(...)\n\n第一种用法：当 select 后的字段只有一个时，可以使用合适的泛型接收数据：\n\nList<String> titleList = Db.query("select title from blog");\n\n\n1\n\n\n以上 sql 中 select 后面只有一个 title 字段，所以使用 List<String> 来接收数据。接收数据的泛型变量可根据返回值类理来变动，例如当前返回值为 Integer 时，代码如下：\n\nList<Integer> idList = Db.query("select id from blog");\n\n\n1\n\n\n以上 sql 中的字段 id 返回值为 Integer，所以接收变量为 List<Integer>\n\n第二种用法：当 select 后的字段有多个时，必须使用 List<Object[]> 接收数据，例如：\n\nList<Object[]> list = Db.query("select id, title, content from blog");\nList<Object[]> list = Db.query("select * from blog");\n\n\n1\n2\n\n\n\n# 3、Db.queryXxx(...)\n\nDb.queryXxx 系方法有：queryInt、queryLong、queryStr 等等，这些方法对于使用聚合函数这类的 sql 十分方便，例如：\n\nint total = Db.queryInt("select count(*) from account");\n\n\n1\n\n\n以上 sql 使用了 count(*) 聚合函数，使用 Db.queryInt 不仅方便而且性能是最好的。\n\n除了聚合函数以外，还可以用于查询某条记录的某个字段值，例如：\n\nString nickName = Db.queryStr("select nickName from account where id = ? limit 1", 123);\n\n\n1\n\n\n以上代码通过 queryStr 可以很方便去查询 id 值为 123 的 account 的 nickName。\n\n至此可以看出来，Db.queryXxx 系方法要求 select 后面必须只能有一个字段名，或者说只能返回一个 column 值（例如 count(*)）。\n\n\n# 4、Db.find(...) 系与 Db.query(...)/Db.queryXxx(...) 系的区别\n\n前者将返回值一律封装到一个 Record 对象中，而后者不封装，只将数据原样返回。查询所使用的 sql 与参数用法完全一样。\n\n\n# 5､扩展 Db 功能\n\nDb 工具类所有功能都依赖于底层的 DbPro，而 DbPro 可以通过继承来定制自己想要的功能，例如：\n\npublic class MyDbPro extends DbPro {\n  public MyDbPro(String configName) {\n    super(configName);\n  }\n \n  public List<Record> find(String sql, Object... paras) {\n    System.out.println("Sql: " + sql);\n    System.out.println("Paras: " + Arrays.toString(paras));\n    return super.find(sql, paras);\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n以上代码扩展了 DbPro 并覆盖了父类的 find(String, Object...) 方法，该方法在调用 super.find(...) 之前输出了 sql 及其 para 值。\n\n然后配置一下即可让 MyDbPro 取代 DbPro 的功能：\n\nActiveRecordPlugin arp = new ActiveRecordPlugin(...);\narp.setDbProFactory(configName -> new MyDbPro(configName));\n\n\n1\n2\n\n\n通过如上配置，在使用 Db.find(String, Object...) 方法时用到的将是自己在 MyDbPro 中实现的 find 方法。通过此方法可以替换、增强、改变所有 DbPro 中 public、protected 方法的行为，极为灵活方便',normalizedContent:'# 5.5 独创db record模式\n\n\n# 1､常见用法\n\ndb类及其配套的record类，提供了在model类之外更为丰富的数据库操作功能。使用db与record类时，无需对数据库表进行映射，record相当于一个通用的model。以下为db + record模式的一些常见用法：\n\n// 创建name属性为james,age属性为25的record对象并添加到数据库\nrecord user = new record().set("name", "james").set("age", 25);\ndb.save("user", user);\n \n// 删除id值为25的user表中的记录\ndb.deletebyid("user", 25);\n \n// 查询id值为25的record将其name属性改为james并更新到数据库\nuser = db.findbyid("user", 25).set("name", "james");\ndb.update("user", user);\n \n// 获取user的name属性\nstring username = user.getstr("name");\n// 获取user的age属性\ninteger userage = user.getint("age");\n \n// 查询所有年龄大于18岁的user\nlist<record> users = db.find("select * from user where age > 18");\n \n// 分页查询年龄大于18的user,当前页号为1,每页10个user\npage<record> userpage = db.paginate(1, 10, "select *", "from user where age > ?", 18);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n以下为事务处理示例：\n\nboolean succeed = db.tx(new iatom(){\n    public boolean run() throws sqlexception {\n       int count = db.update("update account set cash = cash - ? where id = ?", 100, 123);\n       int count2 = db.update("update account set cash = cash + ? where id = ?", 100, 456);\n       return count == 1 && count2 == 1;\n    }});\\\n\n\n1\n2\n3\n4\n5\n6\n\n\n以上两次数据库更新操作在一个事务中执行，如果执行过程中发生异常或者run()方法返回false，则自动回滚事务。\n\n\n# 2、db.query(...)\n\n第一种用法：当 select 后的字段只有一个时，可以使用合适的泛型接收数据：\n\nlist<string> titlelist = db.query("select title from blog");\n\n\n1\n\n\n以上 sql 中 select 后面只有一个 title 字段，所以使用 list<string> 来接收数据。接收数据的泛型变量可根据返回值类理来变动，例如当前返回值为 integer 时，代码如下：\n\nlist<integer> idlist = db.query("select id from blog");\n\n\n1\n\n\n以上 sql 中的字段 id 返回值为 integer，所以接收变量为 list<integer>\n\n第二种用法：当 select 后的字段有多个时，必须使用 list<object[]> 接收数据，例如：\n\nlist<object[]> list = db.query("select id, title, content from blog");\nlist<object[]> list = db.query("select * from blog");\n\n\n1\n2\n\n\n\n# 3、db.queryxxx(...)\n\ndb.queryxxx 系方法有：queryint、querylong、querystr 等等，这些方法对于使用聚合函数这类的 sql 十分方便，例如：\n\nint total = db.queryint("select count(*) from account");\n\n\n1\n\n\n以上 sql 使用了 count(*) 聚合函数，使用 db.queryint 不仅方便而且性能是最好的。\n\n除了聚合函数以外，还可以用于查询某条记录的某个字段值，例如：\n\nstring nickname = db.querystr("select nickname from account where id = ? limit 1", 123);\n\n\n1\n\n\n以上代码通过 querystr 可以很方便去查询 id 值为 123 的 account 的 nickname。\n\n至此可以看出来，db.queryxxx 系方法要求 select 后面必须只能有一个字段名，或者说只能返回一个 column 值（例如 count(*)）。\n\n\n# 4、db.find(...) 系与 db.query(...)/db.queryxxx(...) 系的区别\n\n前者将返回值一律封装到一个 record 对象中，而后者不封装，只将数据原样返回。查询所使用的 sql 与参数用法完全一样。\n\n\n# 5､扩展 db 功能\n\ndb 工具类所有功能都依赖于底层的 dbpro，而 dbpro 可以通过继承来定制自己想要的功能，例如：\n\npublic class mydbpro extends dbpro {\n  public mydbpro(string configname) {\n    super(configname);\n  }\n \n  public list<record> find(string sql, object... paras) {\n    system.out.println("sql: " + sql);\n    system.out.println("paras: " + arrays.tostring(paras));\n    return super.find(sql, paras);\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n以上代码扩展了 dbpro 并覆盖了父类的 find(string, object...) 方法，该方法在调用 super.find(...) 之前输出了 sql 及其 para 值。\n\n然后配置一下即可让 mydbpro 取代 dbpro 的功能：\n\nactiverecordplugin arp = new activerecordplugin(...);\narp.setdbprofactory(configname -> new mydbpro(configname));\n\n\n1\n2\n\n\n通过如上配置，在使用 db.find(string, object...) 方法时用到的将是自己在 mydbpro 中实现的 find 方法。通过此方法可以替换、增强、改变所有 dbpro 中 public、protected 方法的行为，极为灵活方便',charsets:{cjk:!0}},{title:"5.6 paginate 分页",frontmatter:{},regularPath:"/zh/5%20ActiveRecord/5.6%20paginate%20%E5%88%86%E9%A1%B5.html",relativePath:"zh/5 ActiveRecord/5.6 paginate 分页.md",key:"v-a330c5ac",path:"/zh/5%20ActiveRecord/5.6%20paginate%20%E5%88%86%E9%A1%B5.html",headers:[{level:3,title:"1、常用 paginate",slug:"_1、常用-paginate",normalizedTitle:"1、常用 paginate",charIndex:22},{level:3,title:"2、sql 最外层带 group by 的 paginate",slug:"_2、sql-最外层带-group-by-的-paginate",normalizedTitle:"2、sql 最外层带 group by 的 paginate",charIndex:341},{level:3,title:"3、paginateByFullSql",slug:"_3、paginatebyfullsql",normalizedTitle:"3、paginatebyfullsql",charIndex:895},{level:3,title:"4、使用SqlPara 参数的 paginate",slug:"_4、使用sqlpara-参数的-paginate",normalizedTitle:"4、使用sqlpara 参数的 paginate",charIndex:1695},{level:3,title:"5、常见问题解决",slug:"_5、常见问题解决",normalizedTitle:"5、常见问题解决",charIndex:1818}],lastUpdated:"9/10/2023, 7:44:28 AM",lastUpdatedTimestamp:1694331868e3,headersStr:"1、常用 paginate 2、sql 最外层带 group by 的 paginate 3、paginateByFullSql 4、使用SqlPara 参数的 paginate 5、常见问题解决",content:'# 5.6 paginate 分页\n\n\n# 1、常用 paginate\n\nModel 与 Db 中提供了最常用的分页API：paginate(int pageNumber, int pageSize, String select, String sqlExceptSelect, Object... paras)\n\n其中的参数含义分别为：当前页的页号、每页数据条数、sql语句的select部分、sql语句除了select以外的部分、查询参数。绝大多数情况下使用这个API即可。以下是使用示例：\n\ndao.paginate(1, 10, "select *", "from girl where age > ? and weight < ?", 18, 50);\n\n\n1\n\n\n\n# 2、sql 最外层带 group by 的 paginate\n\nAPI 原型：paginate(int pageNumber, int pageSize, boolean isGroupBySql, String select, String sqlExceptSelect, Object... paras)，相对于第一种仅仅多了一个boolean isGroupBySql参数，以下是代码示例：\n\ndao.paginate(1, 10, true, "select *", "from girl where age > ? group by age", 18);\n\n\n1\n\n\n以上代码中 sql 的最外层有一个 group by age，所以第三个参数 isGroupBySql 要传入 true 值。\n\n如果是嵌套型sql，但是 group by 不在最外层，那么第三个参数必须为 false，例如：select * from (select x from t group by y) as temp。\n\n再次强调：isGroupBy 参数只有在最外层 sql 具有 group by 子句时才能为 true 值，嵌套 sql 中仅仅内层具有 group by 子句时仍然要使用 false。\n\n\n# 3、paginateByFullSql\n\nAPI 原型：paginateByFullSql(int pageNumber, int pageSize, String totalRowSql, String findSql, Object... paras)。 相对于其它 paginate API，将查询总行数与查询数据的两条sql独立出来，这样处理主要是应对具有复杂order by语句或者select中带有distinct的情况，只有在使用第一种paginate出现异常时才需要使用该API，以下是代码示例：\n\nString from = "from girl where age > ?";\nString totalRowSql = "select count(*) " + from;\nString findSql = "select * " + from + " order by age";\ndao.paginateByFullSql(1, 10, totalRowSql, findSql, 18);\n\n\n1\n2\n3\n4\n\n\n上例代码中的order by子句并不复杂，所以仍然可以使用第一种API搞定。\n\n重点：paginateByFullSql 最关键的地方是 totalRowSql、findSql 这两条 sql 要能够共用最后一个参数 Object... paras，相当于 dao.find(totalRowSql, paras) 与 dao.find(findSql, paras) 都要能正确执行，否则断然不能使用 paginateByFullSql。 当 paginate、paginateByFullSql 仍然无法满足业务需求时，可以通过使用 Model.find、Db.query 系列方法组合出自己想要的分页方法。jfinal 只为最常见场景提供支持。\n\n\n# 4、使用SqlPara 参数的 paginate\n\nAPI原型： paginate(int pageNumber, int pageSize, SqlPara sqlPara)，用于配合sql管理功能使用，将在sql管理功能那章做介绍。\n\n\n# 5、常见问题解决\n\n首先必须要介绍一下 paginate 底层的基本实现原理，才能有效呈现和解决问题，假定有如下分页代码：\n\npaginate(1, 5, "select *", "from article where id > ? order by id", 10);\n\n\n1\n\n\n底层首先会利用上面第三个与第四个 String 参数生成如下 sql 去获取分页所需要的满足查询条件的所有记录数，也叫 totalRow：\n\n"select count(*)" + "from article where id > 10"\n\n\n1\n\n\n注意看上面的 sql，第一部分的 "select count(*)" 是固定写死的，第二部分是根据用户的第四个参数，去除 order by id 而得到的。\n\n去除 order by 子句这部分，一是因为很多数据库根本不支持 select count() 型 sql 带有 order by 子句，必须要去掉否则出错。二是因为 select count() 查询在有没有 order by 子句时结果是完全一样的，所以去除后有助于提升性能。\n\n第一类错误： 如果用户分页的第二个参数不是 "select *" ，而是里面带有一个或多个问号占位符，这种情况下最后面的 para 部分不仅仅只有上例中的 10 这一个参数\n\n以下是这种问题的一个例子：\n\npaginate(1, 5, "select (... where x = ?)", "from article where id=?", 8, 10)\n\n\n1\n\n\n注意看上面的例子中有两个问号占位符，对应的参数值是 8 和 10。但是生成的用于计算 totalRow 的代码如下：\n\nqueryLong("select count(*) from article where id=?", 8, 10);\n\n\n1\n\n\n因此，多出来一个参数 8 是多余的，从而造成异常。出现这种情况只需要在外层再套一个 sql 就可解决：\n\npaginate(1, 5, "select *", "from (" + 原sql在此 + ") as t", 8, 10);\n\n\n1\n\n\n也就是将原来的 sql 外层再套一个 select * from (...) as t ，让第三个参数中没有问号占位符而是一个 "select *" 。这样处理就避免掉了第一个问号占位符被生成 totalRow 的 sql 吃掉了。 第二类错误： 如果 order by 子句使用了子查询，或者使用了函数调用，例如：\n\npaginate(1, 5, "select *", "from ... order by concat(...)");\n\n\n1\n\n\n如上所示，order by 子句使用了 concat 函数，由于 jfinal 是使用了一个简单的正则来移除 order by 子句的，但是无法完全移除带有函数的 order by 子句，也就是移除不干净，结果就是 sql 是错误的。\n\njfinal 也曾使用复杂的正则来将 order by 子句移除干净，但性能低得无法忍受，最后只能取舍使用简单正则。 由于 order by 子句可以是极为复杂的嵌套 sql ，所以要移除干净的代价就是性能的急剧下降，jfinal 也是不得以这样设计。\n\n所以，解决第二类常见错误就是使用 paginateByFullSql 方法，这个方法让你的计算 totalRow 的 sql 与查询数据的 sql 完全手写，jfinal 也就不再需要处理 select 部分与移除 order by 这部分，全交由用户自己手写。\n\n综上，只要了解了 paginate 在底层的工作机制，解决问题就很容易了。最终可以通过 paginateByFullSql 来稍多写点代码来解决。',normalizedContent:'# 5.6 paginate 分页\n\n\n# 1、常用 paginate\n\nmodel 与 db 中提供了最常用的分页api：paginate(int pagenumber, int pagesize, string select, string sqlexceptselect, object... paras)\n\n其中的参数含义分别为：当前页的页号、每页数据条数、sql语句的select部分、sql语句除了select以外的部分、查询参数。绝大多数情况下使用这个api即可。以下是使用示例：\n\ndao.paginate(1, 10, "select *", "from girl where age > ? and weight < ?", 18, 50);\n\n\n1\n\n\n\n# 2、sql 最外层带 group by 的 paginate\n\napi 原型：paginate(int pagenumber, int pagesize, boolean isgroupbysql, string select, string sqlexceptselect, object... paras)，相对于第一种仅仅多了一个boolean isgroupbysql参数，以下是代码示例：\n\ndao.paginate(1, 10, true, "select *", "from girl where age > ? group by age", 18);\n\n\n1\n\n\n以上代码中 sql 的最外层有一个 group by age，所以第三个参数 isgroupbysql 要传入 true 值。\n\n如果是嵌套型sql，但是 group by 不在最外层，那么第三个参数必须为 false，例如：select * from (select x from t group by y) as temp。\n\n再次强调：isgroupby 参数只有在最外层 sql 具有 group by 子句时才能为 true 值，嵌套 sql 中仅仅内层具有 group by 子句时仍然要使用 false。\n\n\n# 3、paginatebyfullsql\n\napi 原型：paginatebyfullsql(int pagenumber, int pagesize, string totalrowsql, string findsql, object... paras)。 相对于其它 paginate api，将查询总行数与查询数据的两条sql独立出来，这样处理主要是应对具有复杂order by语句或者select中带有distinct的情况，只有在使用第一种paginate出现异常时才需要使用该api，以下是代码示例：\n\nstring from = "from girl where age > ?";\nstring totalrowsql = "select count(*) " + from;\nstring findsql = "select * " + from + " order by age";\ndao.paginatebyfullsql(1, 10, totalrowsql, findsql, 18);\n\n\n1\n2\n3\n4\n\n\n上例代码中的order by子句并不复杂，所以仍然可以使用第一种api搞定。\n\n重点：paginatebyfullsql 最关键的地方是 totalrowsql、findsql 这两条 sql 要能够共用最后一个参数 object... paras，相当于 dao.find(totalrowsql, paras) 与 dao.find(findsql, paras) 都要能正确执行，否则断然不能使用 paginatebyfullsql。 当 paginate、paginatebyfullsql 仍然无法满足业务需求时，可以通过使用 model.find、db.query 系列方法组合出自己想要的分页方法。jfinal 只为最常见场景提供支持。\n\n\n# 4、使用sqlpara 参数的 paginate\n\napi原型： paginate(int pagenumber, int pagesize, sqlpara sqlpara)，用于配合sql管理功能使用，将在sql管理功能那章做介绍。\n\n\n# 5、常见问题解决\n\n首先必须要介绍一下 paginate 底层的基本实现原理，才能有效呈现和解决问题，假定有如下分页代码：\n\npaginate(1, 5, "select *", "from article where id > ? order by id", 10);\n\n\n1\n\n\n底层首先会利用上面第三个与第四个 string 参数生成如下 sql 去获取分页所需要的满足查询条件的所有记录数，也叫 totalrow：\n\n"select count(*)" + "from article where id > 10"\n\n\n1\n\n\n注意看上面的 sql，第一部分的 "select count(*)" 是固定写死的，第二部分是根据用户的第四个参数，去除 order by id 而得到的。\n\n去除 order by 子句这部分，一是因为很多数据库根本不支持 select count() 型 sql 带有 order by 子句，必须要去掉否则出错。二是因为 select count() 查询在有没有 order by 子句时结果是完全一样的，所以去除后有助于提升性能。\n\n第一类错误： 如果用户分页的第二个参数不是 "select *" ，而是里面带有一个或多个问号占位符，这种情况下最后面的 para 部分不仅仅只有上例中的 10 这一个参数\n\n以下是这种问题的一个例子：\n\npaginate(1, 5, "select (... where x = ?)", "from article where id=?", 8, 10)\n\n\n1\n\n\n注意看上面的例子中有两个问号占位符，对应的参数值是 8 和 10。但是生成的用于计算 totalrow 的代码如下：\n\nquerylong("select count(*) from article where id=?", 8, 10);\n\n\n1\n\n\n因此，多出来一个参数 8 是多余的，从而造成异常。出现这种情况只需要在外层再套一个 sql 就可解决：\n\npaginate(1, 5, "select *", "from (" + 原sql在此 + ") as t", 8, 10);\n\n\n1\n\n\n也就是将原来的 sql 外层再套一个 select * from (...) as t ，让第三个参数中没有问号占位符而是一个 "select *" 。这样处理就避免掉了第一个问号占位符被生成 totalrow 的 sql 吃掉了。 第二类错误： 如果 order by 子句使用了子查询，或者使用了函数调用，例如：\n\npaginate(1, 5, "select *", "from ... order by concat(...)");\n\n\n1\n\n\n如上所示，order by 子句使用了 concat 函数，由于 jfinal 是使用了一个简单的正则来移除 order by 子句的，但是无法完全移除带有函数的 order by 子句，也就是移除不干净，结果就是 sql 是错误的。\n\njfinal 也曾使用复杂的正则来将 order by 子句移除干净，但性能低得无法忍受，最后只能取舍使用简单正则。 由于 order by 子句可以是极为复杂的嵌套 sql ，所以要移除干净的代价就是性能的急剧下降，jfinal 也是不得以这样设计。\n\n所以，解决第二类常见错误就是使用 paginatebyfullsql 方法，这个方法让你的计算 totalrow 的 sql 与查询数据的 sql 完全手写，jfinal 也就不再需要处理 select 部分与移除 order by 这部分，全交由用户自己手写。\n\n综上，只要了解了 paginate 在底层的工作机制，解决问题就很容易了。最终可以通过 paginatebyfullsql 来稍多写点代码来解决。',charsets:{cjk:!0}},{title:"5.7 数据库事务处理",frontmatter:{},regularPath:"/zh/5%20ActiveRecord/5.7%20%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86.html",relativePath:"zh/5 ActiveRecord/5.7 数据库事务处理.md",key:"v-46c9ae0d",path:"/zh/5%20ActiveRecord/5.7%20%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86.html",headers:[{level:3,title:"1、Db.tx 事务",slug:"_1、db-tx-事务",normalizedTitle:"1、db.tx 事务",charIndex:18},{level:3,title:"2､声明式事务",slug:"_2、声明式事务",normalizedTitle:"2､声明式事务",charIndex:722},{level:3,title:"3、使用技巧",slug:"_3、使用技巧",normalizedTitle:"3、使用技巧",charIndex:2653},{level:3,title:"4、事务级别与性能",slug:"_4、事务级别与性能",normalizedTitle:"4、事务级别与性能",charIndex:3025}],lastUpdated:"9/11/2023, 1:38:26 AM",lastUpdatedTimestamp:1694396306e3,headersStr:"1、Db.tx 事务 2､声明式事务 3、使用技巧 4、事务级别与性能",content:'# 5.7 数据库事务处理\n\n\n# 1、Db.tx 事务\n\n在 Db 工具类里面，提供了一个系列的 tx(...) 方法支持数据库事务，以下是 Java 8 的 lambda 语法使用示例：\n\nDb.tx(() -> {\n  Db.update("update t1 set f1 = ?", 123);\n  Db.update("update t2 set f2 = ?", 456);\n  return true;\n});\n\n\n1\n2\n3\n4\n5\n\n\n以上代码中的两个 Db.update 数据库操作将开启事务，return true 提交事务，return false 则回滚事务。Db.tx(...) 做事务的好处是控制粒度更细，也即不必抛出异常即可回滚。\n\nDb.tx 方法 默认针对主数据源 进行事务处理，如果希望对其它数据源开启事务，使用 Db.use(configName).tx(...) 即可。此外，Db.tx(...) 还支持指定事务级别：\n\nDb.tx(Connection.TRANSACTION_SERIALIZABLE, () -> {\n  Db.update(...);\n  new User().setNickName("james").save();\n  return true;\n});\n\n\n1\n2\n3\n4\n5\n\n\n以上代码中的 Db.tx(...) 第一个参数传入了事务级别参数 Connection.TRANSACTION_SERIALIZABLE，该方法对于需要灵活控制事务级的场景十分方便实用。\n\n注意：MySql数据库表必须设置为InnoDB引擎时才支持事务，MyISAM并不支持事务。\n\n\n# 2､声明式事务\n\nActiveRecord支持声明式事务，声明式事务需要使用ActiveRecordPlugin提供的拦截器来实现，拦截器的配置方法见Interceptor有关章节。以下代码是声明式事务示例：\n\n// 本例仅为示例, 并未严格考虑账户状态等业务逻辑\n@Before(Tx.class)\npublic void trans_demo() {\n    // 获取转账金额\n    Integer transAmount = getInt("transAmount");\n    // 获取转出账户id\n    Integer fromAccountId = getInt("fromAccountId");\n    // 获取转入账户id\n    Integer toAccountId = getInt("toAccountId");\n    // 转出操作\n    Db.update("update account set cash = cash - ? where id = ?",\n transAmount, fromAccountId);\n    // 转入操作\n    Db.update("update account set cash = cash + ? where id = ?",\n transAmount, toAccountId);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n以上代码中，仅声明了一个Tx拦截器即为action添加了事务支持。\n\n当事务拦截器 Tx 配置在 Controller 层，并且希望使用 try catch 对其进行响应控制，在 jfinal 3.6 及更高版本中可以像下面这样使用：\n\n@Before(Tx.class)\npublic void trans {\n  try {\n    service.justDoIt(...);\n    render("ok.html");\n  } catch (Exception e) {\n    render("error.html");\n    throw e;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n如上所示，只需要在 catch 块中直接使用 render(....) 就可以在异常发生时指定响应的模板。最后一定要使用 throw e 将异常向上抛出，处于上层的 Tx 拦截器才能感知异常并回滚事务。（注意：这个功能是 jfinal 3.6 才添加的）\n\n除此之外ActiveRecord还配备了TxByActionKeys、TxByActionKeyRegex、TxByMethods、TxByMethodRegex，分别支持actionKeys、actionKey正则、actionMethods、actionMethod正则声明式事务，以下是示例代码：\n\npublic void configInterceptor(Interceptors me) {\n   me.add(new TxByMethodRegex("(.*save.*|.*update.*)"));\n   me.add(new TxByMethods("save", "update"));\n \n   me.add(new TxByActionKeyRegex("/trans.*"));\n   me.add(new TxByActionKeys("/tx/save", "/tx/update"));\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上例中的TxByRegex拦截器可通过传入正则表达式对action进行拦截，当actionKey被正则匹配上将开启事务。TxByActionKeys可以对指定的actionKey进行拦截并开启事务，TxByMethods可以对指定的method进行拦截并开启事务。\n\n特别注意：声明式事务默认只针对主数据源进行回滚，如果希望针对 “非主数据源” 进行回滚，需要使用注解进行配置，以下是示例：\n\n@TxConfig("otherConfigName")\n@Before(Tx.class)\npublic void doIt() {\n   ...\n}\n\n\n1\n2\n3\n4\n5\n\n\n以上代码中的 @TxConfig 注解可以配置针对 otherConfigName 进行回滚。Tx 拦截器是通过捕捉到异常以后才回滚事务的，所以上述代码中的 doIt() 方法中如果有 try catch 块捕获到异常，必须再次抛出，才能让 Tx 拦截器感知并回滚事务。\n\n\n# 3、使用技巧\n\n建议优先使用 Db.tx(...) 做数据库事务，一是该方式可以让事务覆盖的代码量最小，性能会最好。二是该方式可以利用返回值来控制是否回滚事务，而 Tx 拦截器只能通过捕捉到异常来回滚事务。三是 Java 8 的 lambda 语法使其代码也很简洁。\n\nTx 事务拦截器在捕捉到异常后回滚事务，会再次抛向外抛出异常，所以在使用 Tx 拦截器来做事务处理时，通常需要再额外添加一个 ExceptionInterceptor，放在 Tx 拦截器之前去再次捕捉到 Tx 所抛出的异常，然后在这里做 renderJson/render 之类的动作向客户端展示不同的数据与页面。如果不添加这样的机制，会展示一个统一默认的 500 error 页面，无法满足所有需求。\n\n综上，强烈建议优先使用 Db.tx(...) 做事务处理。\n\n\n# 4、事务级别与性能\n\nJDBC 默认的事务级别为：Connection.TRANSACTION_READ_COMMITTED。为了避免某些同学的应用场景下对事务级别要求较高，jfinal 的 ActiveRecordPlugin 默认使用的是 Connection.TRANSACTION_REPEATABLE_READ，但这在对某个表存在高并发锁争用时性能会下降，这时可以通过配置事务级别来提升性能：\n\npublic void configPlugin(Plugins me) {\n    ActiveRecordPlugin arp = new ActiveRecordPlugin(...);\n    arp.setTransactionLevel(Connection.TRANSACTION_REPEATABLE_READ);\n    me.add(arp);\n}\n\n\n1\n2\n3\n4\n5\n\n\n有一位同学就碰到了由事务级别引起的性能问题：\n\nhttp://www.jfinal.com/feedback/4703?p=1#reply_start',normalizedContent:'# 5.7 数据库事务处理\n\n\n# 1、db.tx 事务\n\n在 db 工具类里面，提供了一个系列的 tx(...) 方法支持数据库事务，以下是 java 8 的 lambda 语法使用示例：\n\ndb.tx(() -> {\n  db.update("update t1 set f1 = ?", 123);\n  db.update("update t2 set f2 = ?", 456);\n  return true;\n});\n\n\n1\n2\n3\n4\n5\n\n\n以上代码中的两个 db.update 数据库操作将开启事务，return true 提交事务，return false 则回滚事务。db.tx(...) 做事务的好处是控制粒度更细，也即不必抛出异常即可回滚。\n\ndb.tx 方法 默认针对主数据源 进行事务处理，如果希望对其它数据源开启事务，使用 db.use(configname).tx(...) 即可。此外，db.tx(...) 还支持指定事务级别：\n\ndb.tx(connection.transaction_serializable, () -> {\n  db.update(...);\n  new user().setnickname("james").save();\n  return true;\n});\n\n\n1\n2\n3\n4\n5\n\n\n以上代码中的 db.tx(...) 第一个参数传入了事务级别参数 connection.transaction_serializable，该方法对于需要灵活控制事务级的场景十分方便实用。\n\n注意：mysql数据库表必须设置为innodb引擎时才支持事务，myisam并不支持事务。\n\n\n# 2､声明式事务\n\nactiverecord支持声明式事务，声明式事务需要使用activerecordplugin提供的拦截器来实现，拦截器的配置方法见interceptor有关章节。以下代码是声明式事务示例：\n\n// 本例仅为示例, 并未严格考虑账户状态等业务逻辑\n@before(tx.class)\npublic void trans_demo() {\n    // 获取转账金额\n    integer transamount = getint("transamount");\n    // 获取转出账户id\n    integer fromaccountid = getint("fromaccountid");\n    // 获取转入账户id\n    integer toaccountid = getint("toaccountid");\n    // 转出操作\n    db.update("update account set cash = cash - ? where id = ?",\n transamount, fromaccountid);\n    // 转入操作\n    db.update("update account set cash = cash + ? where id = ?",\n transamount, toaccountid);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n以上代码中，仅声明了一个tx拦截器即为action添加了事务支持。\n\n当事务拦截器 tx 配置在 controller 层，并且希望使用 try catch 对其进行响应控制，在 jfinal 3.6 及更高版本中可以像下面这样使用：\n\n@before(tx.class)\npublic void trans {\n  try {\n    service.justdoit(...);\n    render("ok.html");\n  } catch (exception e) {\n    render("error.html");\n    throw e;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n如上所示，只需要在 catch 块中直接使用 render(....) 就可以在异常发生时指定响应的模板。最后一定要使用 throw e 将异常向上抛出，处于上层的 tx 拦截器才能感知异常并回滚事务。（注意：这个功能是 jfinal 3.6 才添加的）\n\n除此之外activerecord还配备了txbyactionkeys、txbyactionkeyregex、txbymethods、txbymethodregex，分别支持actionkeys、actionkey正则、actionmethods、actionmethod正则声明式事务，以下是示例代码：\n\npublic void configinterceptor(interceptors me) {\n   me.add(new txbymethodregex("(.*save.*|.*update.*)"));\n   me.add(new txbymethods("save", "update"));\n \n   me.add(new txbyactionkeyregex("/trans.*"));\n   me.add(new txbyactionkeys("/tx/save", "/tx/update"));\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上例中的txbyregex拦截器可通过传入正则表达式对action进行拦截，当actionkey被正则匹配上将开启事务。txbyactionkeys可以对指定的actionkey进行拦截并开启事务，txbymethods可以对指定的method进行拦截并开启事务。\n\n特别注意：声明式事务默认只针对主数据源进行回滚，如果希望针对 “非主数据源” 进行回滚，需要使用注解进行配置，以下是示例：\n\n@txconfig("otherconfigname")\n@before(tx.class)\npublic void doit() {\n   ...\n}\n\n\n1\n2\n3\n4\n5\n\n\n以上代码中的 @txconfig 注解可以配置针对 otherconfigname 进行回滚。tx 拦截器是通过捕捉到异常以后才回滚事务的，所以上述代码中的 doit() 方法中如果有 try catch 块捕获到异常，必须再次抛出，才能让 tx 拦截器感知并回滚事务。\n\n\n# 3、使用技巧\n\n建议优先使用 db.tx(...) 做数据库事务，一是该方式可以让事务覆盖的代码量最小，性能会最好。二是该方式可以利用返回值来控制是否回滚事务，而 tx 拦截器只能通过捕捉到异常来回滚事务。三是 java 8 的 lambda 语法使其代码也很简洁。\n\ntx 事务拦截器在捕捉到异常后回滚事务，会再次抛向外抛出异常，所以在使用 tx 拦截器来做事务处理时，通常需要再额外添加一个 exceptioninterceptor，放在 tx 拦截器之前去再次捕捉到 tx 所抛出的异常，然后在这里做 renderjson/render 之类的动作向客户端展示不同的数据与页面。如果不添加这样的机制，会展示一个统一默认的 500 error 页面，无法满足所有需求。\n\n综上，强烈建议优先使用 db.tx(...) 做事务处理。\n\n\n# 4、事务级别与性能\n\njdbc 默认的事务级别为：connection.transaction_read_committed。为了避免某些同学的应用场景下对事务级别要求较高，jfinal 的 activerecordplugin 默认使用的是 connection.transaction_repeatable_read，但这在对某个表存在高并发锁争用时性能会下降，这时可以通过配置事务级别来提升性能：\n\npublic void configplugin(plugins me) {\n    activerecordplugin arp = new activerecordplugin(...);\n    arp.settransactionlevel(connection.transaction_repeatable_read);\n    me.add(arp);\n}\n\n\n1\n2\n3\n4\n5\n\n\n有一位同学就碰到了由事务级别引起的性能问题：\n\nhttp://www.jfinal.com/feedback/4703?p=1#reply_start',charsets:{cjk:!0}},{title:"5.8 Cache 缓存",frontmatter:{},regularPath:"/zh/5%20ActiveRecord/5.8%20Cache%20%E7%BC%93%E5%AD%98.html",relativePath:"zh/5 ActiveRecord/5.8 Cache 缓存.md",key:"v-231a3ff4",path:"/zh/5%20ActiveRecord/5.8%20Cache%20%E7%BC%93%E5%AD%98.html",headers:[{level:3,title:"1、使用 Ehcache 缓存",slug:"_1、使用-ehcache-缓存",normalizedTitle:"1、使用 ehcache 缓存",charIndex:19},{level:3,title:"2、使用任意缓存实现",slug:"_2、使用任意缓存实现",normalizedTitle:"2、使用任意缓存实现",charIndex:522}],lastUpdated:"9/11/2023, 1:38:26 AM",lastUpdatedTimestamp:1694396306e3,headersStr:"1、使用 Ehcache 缓存 2、使用任意缓存实现",content:'# 5.8 Cache 缓存\n\n\n# 1、使用 Ehcache 缓存\n\nActiveRecord 可以使用缓存以大大提高性能，默认的缓存实现是 ehcache，使用时需要引入 ehcache 的 jar 包及其配置文件，以下代码是Cache使用示例：\n\npublic void list() {\n    List<Blog> blogList = Blog.dao.findByCache("cacheName", "key", "select * from blog");\n    setAttr("blogList", blogList).render("list.html");\n}\n\n\n1\n2\n3\n4\n\n\n上例findByCache方法中的cacheName需要在ehcache.xml中配置如：<cache name="cacheName" …>。此外Model.paginateByCache(…)、Db.findByCache(…)、Db.paginateByCache(…)方法都提供了cache支持。在使用时，只需传入cacheName、key以及在ehccache.xml中配置相对应的cacheName就可以了。\n\n\n# 2、使用任意缓存实现\n\n除了要把使用默认的 ehcache 实现以外，还可以通过实现 ICache 接口切换到任意的缓存实现上去，下面是个简单提示意性代码实现：\n\npublic class MyCache implements ICache {\n  public <T>T get(String cacheName, Object key) {\n  }\n \n  public void put(String cacheName, Object key, Object value) {\n  }\n \n  public void remove(String cacheName, Object key) {\n  }\n \n  public void removeAll(String cacheName) {\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n如上代码所示，MyCache 需要实现 ICache 中的四个抽象方法，然后通过下面的配置方式即可切换到自己的 cache 实现上去：\n\nActiveRecordPlugin arp = new ActiveRecordPlugin(...);\narp.setCache(new MyCache());\n\n\n1\n2\n\n\n如上代码所示，通过调用 ActiveRecordPlugin.setCache(...) 便可切换 cache 实现。',normalizedContent:'# 5.8 cache 缓存\n\n\n# 1、使用 ehcache 缓存\n\nactiverecord 可以使用缓存以大大提高性能，默认的缓存实现是 ehcache，使用时需要引入 ehcache 的 jar 包及其配置文件，以下代码是cache使用示例：\n\npublic void list() {\n    list<blog> bloglist = blog.dao.findbycache("cachename", "key", "select * from blog");\n    setattr("bloglist", bloglist).render("list.html");\n}\n\n\n1\n2\n3\n4\n\n\n上例findbycache方法中的cachename需要在ehcache.xml中配置如：<cache name="cachename" …>。此外model.paginatebycache(…)、db.findbycache(…)、db.paginatebycache(…)方法都提供了cache支持。在使用时，只需传入cachename、key以及在ehccache.xml中配置相对应的cachename就可以了。\n\n\n# 2、使用任意缓存实现\n\n除了要把使用默认的 ehcache 实现以外，还可以通过实现 icache 接口切换到任意的缓存实现上去，下面是个简单提示意性代码实现：\n\npublic class mycache implements icache {\n  public <t>t get(string cachename, object key) {\n  }\n \n  public void put(string cachename, object key, object value) {\n  }\n \n  public void remove(string cachename, object key) {\n  }\n \n  public void removeall(string cachename) {\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n如上代码所示，mycache 需要实现 icache 中的四个抽象方法，然后通过下面的配置方式即可切换到自己的 cache 实现上去：\n\nactiverecordplugin arp = new activerecordplugin(...);\narp.setcache(new mycache());\n\n\n1\n2\n\n\n如上代码所示，通过调用 activerecordplugin.setcache(...) 便可切换 cache 实现。',charsets:{cjk:!0}},{title:"5.9 Dialect多数据库支持",frontmatter:{},regularPath:"/zh/5%20ActiveRecord/5.9%20Dialect%E5%A4%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E6%94%AF%E6%8C%81.html",relativePath:"zh/5 ActiveRecord/5.9 Dialect多数据库支持.md",key:"v-696ace50",path:"/zh/5%20ActiveRecord/5.9%20Dialect%E5%A4%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E6%94%AF%E6%8C%81.html",lastUpdated:"9/11/2023, 1:38:26 AM",lastUpdatedTimestamp:1694396306e3,headersStr:null,content:"# 5.9 Dialect多数据库支持\n\n目前ActiveRecordPlugin提供了MysqlDialect、OracleDialect、PostgresqlDialect、SqlServerDialect、Sqlite3Dialect、AnsiSqlDialect实现类。MysqlDialect与OracleDialect分别实现对Mysql与Oracle的支持，AnsiSqlDialect实现对遵守ANSI SQL数据库的支持。以下是数据库Dialect的配置代码：\n\npublic class DemoConfig extends JFinalConfig {\n  public void configPlugin(Plugins me) {\n    ActiveRecordPlugin arp = new ActiveRecordPlugin(…);\n    me.add(arp);\n    // 配置Postgresql方言\n    arp.setDialect(new PostgresqlDialect());\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n",normalizedContent:"# 5.9 dialect多数据库支持\n\n目前activerecordplugin提供了mysqldialect、oracledialect、postgresqldialect、sqlserverdialect、sqlite3dialect、ansisqldialect实现类。mysqldialect与oracledialect分别实现对mysql与oracle的支持，ansisqldialect实现对遵守ansi sql数据库的支持。以下是数据库dialect的配置代码：\n\npublic class democonfig extends jfinalconfig {\n  public void configplugin(plugins me) {\n    activerecordplugin arp = new activerecordplugin(…);\n    me.add(arp);\n    // 配置postgresql方言\n    arp.setdialect(new postgresqldialect());\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n",charsets:{cjk:!0}},{title:"6.1 概述",frontmatter:{},regularPath:"/zh/6%20Enjoy%20%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/6.1%20%E6%A6%82%E8%BF%B0.html",relativePath:"zh/6 Enjoy 模板引擎/6.1 概述.md",key:"v-626dda05",path:"/zh/6%20Enjoy%20%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/6.1%20%E6%A6%82%E8%BF%B0.html",lastUpdated:"9/12/2023, 3:21:39 AM",lastUpdatedTimestamp:1694488899e3,headersStr:null,content:'# 6.1 概述\n\nEnjoy Template Engine 采用独创的 DKFF (Dynamic Key Feature Forward)词法分析算法以及独创的DLRD (Double Layer Recursive Descent)语法分析算法，极大减少了代码量，降低了学习成本，并提升了用户体验。\n\n与以往任何一款 java 模板引擎都有显著的不同，极简设计、独创算法、极爽开发体验，这里是发布时的盛况，传送门：JFinal 3.0 发布，重新定义模板引擎\n\n从 JFinal 3.0 到 JFinal 3.3，Enjoy 引擎进行了精细化的打磨，这里是与 Enjoy 引擎打磨有关的近几个版本发布时的盛况:\n\nJFinal 3.0 发布，重新定义模板引擎\n\nJFinal 3.1 发布，没有繁琐、没有复杂，只有妙不可言\n\nJFinal 3.2 发布，星星之火已成燎原之势\n\nJFinal 3.3 发布，天下武功，唯快不破\n\nEnjoy 模板引擎专为 java 开发者打造，所以坚持两个核心设计理念：一是在模板中可以直接与 java 代码通畅地交互，二是尽可能沿用 java 语法规则，将学习成本降到极致。\n\n因此，立即掌握 90% 的用法，只需要记住一句话：Enjoy 模板引擎表达式与 Java 是直接打通的。\n\n记住了上面这句话，就可以像下面这样愉快地使用模板引擎了：\n\n// 算术运算\n1 + 2 / 3 * 4\n// 比较运算\n1 > 2\n// 逻辑运算\n!a && b != c || d == e\n// 三元表达式\na > 0 ? a : b\n// 方法调用\n"abcdef".substring(0, 3)\ntarget.method(p1, p2, pn)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\nEnjoy 模板引擎核心概念只有指令与表达式这两个。而表达式是与 Java 直接打通的，所以没有学习成本，剩下来只有 #if、#for、#define、#set、#include、#switch、#(...) 七个指令需要了解，而这七个指令的学习成本又极低。\n\nEnjoy 模板引擎发布以来，得到了非常多用户的喜爱，反馈证明体验极好，强烈建议还没能尝试过的同学们试用。',normalizedContent:'# 6.1 概述\n\nenjoy template engine 采用独创的 dkff (dynamic key feature forward)词法分析算法以及独创的dlrd (double layer recursive descent)语法分析算法，极大减少了代码量，降低了学习成本，并提升了用户体验。\n\n与以往任何一款 java 模板引擎都有显著的不同，极简设计、独创算法、极爽开发体验，这里是发布时的盛况，传送门：jfinal 3.0 发布，重新定义模板引擎\n\n从 jfinal 3.0 到 jfinal 3.3，enjoy 引擎进行了精细化的打磨，这里是与 enjoy 引擎打磨有关的近几个版本发布时的盛况:\n\njfinal 3.0 发布，重新定义模板引擎\n\njfinal 3.1 发布，没有繁琐、没有复杂，只有妙不可言\n\njfinal 3.2 发布，星星之火已成燎原之势\n\njfinal 3.3 发布，天下武功，唯快不破\n\nenjoy 模板引擎专为 java 开发者打造，所以坚持两个核心设计理念：一是在模板中可以直接与 java 代码通畅地交互，二是尽可能沿用 java 语法规则，将学习成本降到极致。\n\n因此，立即掌握 90% 的用法，只需要记住一句话：enjoy 模板引擎表达式与 java 是直接打通的。\n\n记住了上面这句话，就可以像下面这样愉快地使用模板引擎了：\n\n// 算术运算\n1 + 2 / 3 * 4\n// 比较运算\n1 > 2\n// 逻辑运算\n!a && b != c || d == e\n// 三元表达式\na > 0 ? a : b\n// 方法调用\n"abcdef".substring(0, 3)\ntarget.method(p1, p2, pn)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\nenjoy 模板引擎核心概念只有指令与表达式这两个。而表达式是与 java 直接打通的，所以没有学习成本，剩下来只有 #if、#for、#define、#set、#include、#switch、#(...) 七个指令需要了解，而这七个指令的学习成本又极低。\n\nenjoy 模板引擎发布以来，得到了非常多用户的喜爱，反馈证明体验极好，强烈建议还没能尝试过的同学们试用。',charsets:{cjk:!0}},{title:"6.10 Spring boot 整合",frontmatter:{},regularPath:"/zh/6%20Enjoy%20%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/6.10%20Spring%20boot%20%E6%95%B4%E5%90%88.html",relativePath:"zh/6 Enjoy 模板引擎/6.10 Spring boot 整合.md",key:"v-43c9b5de",path:"/zh/6%20Enjoy%20%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/6.10%20Spring%20boot%20%E6%95%B4%E5%90%88.html",headers:[{level:3,title:"1、maven 坐标",slug:"_1、maven-坐标",normalizedTitle:"1、maven 坐标",charIndex:26},{level:3,title:"2、Spring Boot 整合",slug:"_2、spring-boot-整合",normalizedTitle:"2、spring boot 整合",charIndex:321},{level:3,title:"3、Spring MVC 整合",slug:"_3、spring-mvc-整合",normalizedTitle:"3、spring mvc 整合",charIndex:1830}],lastUpdated:"9/12/2023, 3:21:39 AM",lastUpdatedTimestamp:1694488899e3,headersStr:"1、maven 坐标 2、Spring Boot 整合 3、Spring MVC 整合",content:'# 6.10 Spring boot 整合\n\n\n# 1、maven 坐标\n\nSpring 整合可以在pom.xml中配置 jfinal 坐标，也可以配置 Enjoy Template Engine 的独立发布版本坐标，其 maven 坐标如下：\n\n<dependency>\n  <groupId>com.jfinal</groupId>\n  <artifactId>enjoy</artifactId>\n  <version>5.1.2</version>\n</dependency>\n\n\n1\n2\n3\n4\n5\n\n\nJFinal Template Engine 的独立发布版本 Enjoy 只有 207K 大小，并且无任何第三方依赖。\n\n\n# 2、Spring Boot 整合\n\nSpring boot 下整合配置如下：\n\n@Configuration\npublic class SpringBootConfig {\n \n  @Bean(name = "jfinalViewResolver")\n  public JFinalViewResolver getJFinalViewResolver() {\n    \n    // 创建用于整合 spring boot 的 ViewResolver 扩展对象\n    JFinalViewResolver jfr = new JFinalViewResolver();\n    \n    // 对 spring boot 进行配置\n    jfr.setSuffix(".html");\n    jfr.setContentType("text/html;charset=UTF-8");\n    jfr.setOrder(0);\n    \n    // 设置在模板中可通过 #(session.value) 访问 session 中的数据\n    jfr.setSessionInView(true);\n    \n    // 获取 engine 对象，对 enjoy 模板引擎进行配置，配置方式与前面章节完全一样\n    Engine engine  = JFinalViewResolver.engine;\n    \n    // 热加载配置能对后续配置产生影响，需要放在最前面\n    engine.setDevMode(true);\n \n    // 使用 ClassPathSourceFactory 从 class path 与 jar 包中加载模板文件\n    engine.setToClassPathSourceFactory();\n    \n    // 在使用 ClassPathSourceFactory 时要使用 setBaseTemplatePath\n    // 代替 jfr.setPrefix("/view/")\n    engine.setBaseTemplatePath("/view/");\n    \n    // 添加模板函数\n    engine.addSharedFunction("/common/_layout.html");\n    engine.addSharedFunction("/common/_paginate.html");\n    \n    // 更多配置与前面章节完全一样\n    // engine.addDirective(...)\n    // engine.addSharedMethod(...);\n    \n    return jfr;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n\n\n如上所示，jfr.setToClassPathSourceFactory() 配置的 ClassPathSourceFactory 将从class path和jar包中加载模板文件。jfr.addSharedFunction(...) 配置共享模板函数。其上有关 enjoy 的配置本质上与对 Engine 对象的配置是一致的\n\n如果从项目的 webapp 路径下加载模板文件则无需配置为 ClassPathSourceFactory。\n\n\n# 3、Spring MVC 整合\n\n在 Spring mvc下整合 Enjoy 非常简单，只需要配置一个 bean 即可，如下是具体配置方式：\n\n<bean id="viewResolver" class="com.jfinal.template.ext.spring.JFinalViewResolver">\n  \x3c!-- 是否热加载模板文件 --\x3e\n  <property name="devMode" value="true"/>\n  \x3c!-- 配置shared function，多文件用逗号分隔 --\x3e\n  <property name="sharedFunction" value="/view/_layout.html, /view/_paginate.html"/>\n \n  \x3c!-- 是否支持以 #(session.value) 的方式访问 session --\x3e\n  <property name="sessionInView" value="true"/>\n  <property name="prefix" value="/view/"/>\n  <property name="suffix" value=".html"/>\n  <property name="order" value="1"/>\n  <property name="contentType" value="text/html; charset=utf-8"/>\n</bean>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n更多、更详细的配置项及其说明，可以通过查看 JFinalViewResolver 头部的注释来了解，在绝大部分情况下，上面的配置项可以满足需求。',normalizedContent:'# 6.10 spring boot 整合\n\n\n# 1、maven 坐标\n\nspring 整合可以在pom.xml中配置 jfinal 坐标，也可以配置 enjoy template engine 的独立发布版本坐标，其 maven 坐标如下：\n\n<dependency>\n  <groupid>com.jfinal</groupid>\n  <artifactid>enjoy</artifactid>\n  <version>5.1.2</version>\n</dependency>\n\n\n1\n2\n3\n4\n5\n\n\njfinal template engine 的独立发布版本 enjoy 只有 207k 大小，并且无任何第三方依赖。\n\n\n# 2、spring boot 整合\n\nspring boot 下整合配置如下：\n\n@configuration\npublic class springbootconfig {\n \n  @bean(name = "jfinalviewresolver")\n  public jfinalviewresolver getjfinalviewresolver() {\n    \n    // 创建用于整合 spring boot 的 viewresolver 扩展对象\n    jfinalviewresolver jfr = new jfinalviewresolver();\n    \n    // 对 spring boot 进行配置\n    jfr.setsuffix(".html");\n    jfr.setcontenttype("text/html;charset=utf-8");\n    jfr.setorder(0);\n    \n    // 设置在模板中可通过 #(session.value) 访问 session 中的数据\n    jfr.setsessioninview(true);\n    \n    // 获取 engine 对象，对 enjoy 模板引擎进行配置，配置方式与前面章节完全一样\n    engine engine  = jfinalviewresolver.engine;\n    \n    // 热加载配置能对后续配置产生影响，需要放在最前面\n    engine.setdevmode(true);\n \n    // 使用 classpathsourcefactory 从 class path 与 jar 包中加载模板文件\n    engine.settoclasspathsourcefactory();\n    \n    // 在使用 classpathsourcefactory 时要使用 setbasetemplatepath\n    // 代替 jfr.setprefix("/view/")\n    engine.setbasetemplatepath("/view/");\n    \n    // 添加模板函数\n    engine.addsharedfunction("/common/_layout.html");\n    engine.addsharedfunction("/common/_paginate.html");\n    \n    // 更多配置与前面章节完全一样\n    // engine.adddirective(...)\n    // engine.addsharedmethod(...);\n    \n    return jfr;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n\n\n如上所示，jfr.settoclasspathsourcefactory() 配置的 classpathsourcefactory 将从class path和jar包中加载模板文件。jfr.addsharedfunction(...) 配置共享模板函数。其上有关 enjoy 的配置本质上与对 engine 对象的配置是一致的\n\n如果从项目的 webapp 路径下加载模板文件则无需配置为 classpathsourcefactory。\n\n\n# 3、spring mvc 整合\n\n在 spring mvc下整合 enjoy 非常简单，只需要配置一个 bean 即可，如下是具体配置方式：\n\n<bean id="viewresolver" class="com.jfinal.template.ext.spring.jfinalviewresolver">\n  \x3c!-- 是否热加载模板文件 --\x3e\n  <property name="devmode" value="true"/>\n  \x3c!-- 配置shared function，多文件用逗号分隔 --\x3e\n  <property name="sharedfunction" value="/view/_layout.html, /view/_paginate.html"/>\n \n  \x3c!-- 是否支持以 #(session.value) 的方式访问 session --\x3e\n  <property name="sessioninview" value="true"/>\n  <property name="prefix" value="/view/"/>\n  <property name="suffix" value=".html"/>\n  <property name="order" value="1"/>\n  <property name="contenttype" value="text/html; charset=utf-8"/>\n</bean>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n更多、更详细的配置项及其说明，可以通过查看 jfinalviewresolver 头部的注释来了解，在绝大部分情况下，上面的配置项可以满足需求。',charsets:{cjk:!0}},{title:"6.11 独立使用 Enjoy",frontmatter:{},regularPath:"/zh/6%20Enjoy%20%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/6.11%20%E7%8B%AC%E7%AB%8B%E4%BD%BF%E7%94%A8%20Enjoy.html",relativePath:"zh/6 Enjoy 模板引擎/6.11 独立使用 Enjoy.md",key:"v-72b0650e",path:"/zh/6%20Enjoy%20%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/6.11%20%E7%8B%AC%E7%AB%8B%E4%BD%BF%E7%94%A8%20Enjoy.html",headers:[{level:3,title:"1､Engine 与 Template",slug:"_1、engine-与-template",normalizedTitle:"1､engine 与 template",charIndex:360},{level:3,title:"2、基本用法",slug:"_2、基本用法",normalizedTitle:"2、基本用法",charIndex:1280},{level:3,title:"3、进阶用法",slug:"_3、进阶用法",normalizedTitle:"3、进阶用法",charIndex:1508},{level:3,title:"4、Engine对象管理",slug:"_4、engine对象管理",normalizedTitle:"4、engine对象管理",charIndex:2792}],lastUpdated:"9/12/2023, 3:21:39 AM",lastUpdatedTimestamp:1694488899e3,headersStr:"1､Engine 与 Template 2、基本用法 3、进阶用法 4、Engine对象管理",content:'# 6.11 独立使用 Enjoy\n\nEnjoy Template Engine 的使用不限于 web，可以使用在任何 java 开发环境中。Enjoy 常被用于代码生成、email 生成、模板消息生成等具有模板特征数据的应用场景，使用方式极为简单。\n\n由于很多同学提出要在非 jfinal 环境下使用 Enjoy，所以 Enjoy 模板引擎发布了独立版本，maven 坐标如下：\n\n<dependency>\n  <groupId>com.jfinal</groupId>\n  <artifactId>enjoy</artifactId>\n  <version>5.1.2</version>\n</dependency>\n\n\n1\n2\n3\n4\n5\n\n\n独立引入 enjoy 项目，可以用于任何 java 项目中。\n\n\n# 1､Engine 与 Template\n\nEngine 是使用 Enjoy 的配置入口和使用入口，主要功能之一是配置 Enjoy 各种参数，其二是通过 getTemplate、getTemplateByString 方法获取到 Template 对象，例如：\n\nEngine engine = Engine.use();\n \nengine.setDevMode(true);\nengine.setToClassPathSourceFactory();\n \nengine.getTemplate("index.html");\n\n\n1\n2\n3\n4\n5\n6\n\n\nTemplate 代表对模板的抽象，可以调用其 render 系方法对模板进行渲染，例如：\n\nKv kv = Kv.by("key", 123);\nTemplate template = engine.getTemplate("index.html");\n \n// 字节流模式输出到 OutputStream\nByteArrayOutputStream baos = new ByteArrayOutputStream();\ntemplate.render(kv, baos);\n \n// 字符流模式输出到 StringWriter\nStringWriter sw = new StringWriter();\ntemplate.render(kv, sw);\n \n// 直接输出到 String 变量\nString str = template.renderToString(kv);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n以上代码中的 template.render(kv. baos) 将数据渲染到 OutputStream 用于 web 项目可极大提升性能。后续的两种 render 方式分别将渲染结果输出到 Writer 与 String 变量中，方便 "非 web" 项目中使用。\n\n以上代码中的 render 系列方法的第一个参数类型为 Map。Kv 继承自 Map，并添加了一些提升用户体验的方法，可用于替代使用 Map 的场景。\n\n\n# 2、基本用法\n\n直接举例：\n\nEngine.use().getTemplate("demo.html").renderToString(Kv.by("k", "v"));\n\n\n1\n\n\n一行代码搞定模板引擎在任意环境下的使用，将极简贯彻到底。上例中的use()方法将从Engine中获取默认存在的main Engine对象，然后通过getTemplate获取Template对象，最后再使用renderToString将模板渲染到String之中。\n\n\n# 3、进阶用法\n\n直接举例：\n\nEngine engine = Engine.create("myEngine");\nengine.setDevMode(true);\nengine.setToClassPathSourceFactory();\nTemplate template = engine.getTemplate("wxAppMsg.txt");\nString wxAppMsg = template.renderToString(Kv.by("toUser", "james"));\n \nengine = Engine.use("myEngine");\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上例第一行代码创建了名为 "myEngine" 的Engine对象，第二行代码设置了热加载模板文件，第三行代码设置引擎从 class path 以及 jar 包中加载模板文件，第四行代码利用wxAppMsg.txt这个模板创建一个Template对象，第五行代码使用该对象渲染内容到String对象中，从而生成了微信小程序消息内容。\n\n注意，最后一行代码使用use方法获取到了第一行代码创建的engine对象，意味着使用正确的engineName可以在任何地方获取到之前创建的engine对象，极为方便。\n\n除了可以将模板渲染到String中以外，还可以渲染到任意的Writer之中，只需要用一下Template.render(Map data, java.io.Writer wirter)方法即可实现，例如：Writer接口如果指向文件，那么就将其内容渲染到文件之中，甚至可以实现Writer接口将内容渲染到socket套接字中。\n\n除了外部模板文件可以作为模板内容的来源以外，还可以通过String数据或者IStringSource接口实现类作为模板数据的来源，以下是代码示例：\n\nTemplate template = engine.getTemplateByString("#(x + 123)");\nString result = template.renderToString(Kv.by("x", 456));\n \ntemplate = engine.getTemplate(new MySource());\nresult = template.renderToString(Kv.by("k", "v"));\n\n\n1\n2\n3\n4\n5\n\n\n上例代码第一行通过 getTemplateByString 来获取 Template 对象，而非从外部模板文件来获取，这种用法非常适合模板内容非常简短的情况，避免了创建外部模板文件，例如：非常适合用于替换 JDK 中的 String.format(…) 方法。\n\n上例中的第三行代码，传入的参数是new MySource()，MySource类是ISource接口的实现类，通过该接口可以实现通过任意方式来获取模板内容，例如，通过网络socket连接来获取，ISource接口用法极其简单，在此不再赘述。\n\n\n# 4、Engine对象管理\n\nEngine对象的创建方式有两种，一种是通过 Engine.create(name) 方法，另一种是直接使用 new Engine() 语句，前者创建的对象是在 Engine 模块管辖之内，可以通过 Engine.use(name) 获取到，而后者创建的对象脱离了 Engine 模块管辖，无法通过 Engine.use(name) 获取到，开发者需要自行管理。\n\nJFinal 的 render 模块以及 activerecord 模块使用 new Engine() 创建实例，无法通过 Engine.use(name) 获取到，前者可以通过RenderManager.me().getEngine() 获取到，后者可以通过 activeRecordPlugin.getEngine() 获取到。\n\nEngine对象管理的设计，允许在同一个应用程序中使用多个 Engine 实例用于不同的用途，JFinal 自身的 render、activerecord 模块对 Engine 的使用就是典型的例子。\n\n强烈建议加入 JFinal 俱乐部，获取极为全面的 jfinal 最佳实践项目源代码 jfinal-club，项目中包含大量的 模板引擎使用实例，可以用最快的速度，几乎零成本的轻松方式，掌握 JFinal Template Engine最简洁的用法，省去看文档的时间：http://www.jfinal.com/club',normalizedContent:'# 6.11 独立使用 enjoy\n\nenjoy template engine 的使用不限于 web，可以使用在任何 java 开发环境中。enjoy 常被用于代码生成、email 生成、模板消息生成等具有模板特征数据的应用场景，使用方式极为简单。\n\n由于很多同学提出要在非 jfinal 环境下使用 enjoy，所以 enjoy 模板引擎发布了独立版本，maven 坐标如下：\n\n<dependency>\n  <groupid>com.jfinal</groupid>\n  <artifactid>enjoy</artifactid>\n  <version>5.1.2</version>\n</dependency>\n\n\n1\n2\n3\n4\n5\n\n\n独立引入 enjoy 项目，可以用于任何 java 项目中。\n\n\n# 1､engine 与 template\n\nengine 是使用 enjoy 的配置入口和使用入口，主要功能之一是配置 enjoy 各种参数，其二是通过 gettemplate、gettemplatebystring 方法获取到 template 对象，例如：\n\nengine engine = engine.use();\n \nengine.setdevmode(true);\nengine.settoclasspathsourcefactory();\n \nengine.gettemplate("index.html");\n\n\n1\n2\n3\n4\n5\n6\n\n\ntemplate 代表对模板的抽象，可以调用其 render 系方法对模板进行渲染，例如：\n\nkv kv = kv.by("key", 123);\ntemplate template = engine.gettemplate("index.html");\n \n// 字节流模式输出到 outputstream\nbytearrayoutputstream baos = new bytearrayoutputstream();\ntemplate.render(kv, baos);\n \n// 字符流模式输出到 stringwriter\nstringwriter sw = new stringwriter();\ntemplate.render(kv, sw);\n \n// 直接输出到 string 变量\nstring str = template.rendertostring(kv);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n以上代码中的 template.render(kv. baos) 将数据渲染到 outputstream 用于 web 项目可极大提升性能。后续的两种 render 方式分别将渲染结果输出到 writer 与 string 变量中，方便 "非 web" 项目中使用。\n\n以上代码中的 render 系列方法的第一个参数类型为 map。kv 继承自 map，并添加了一些提升用户体验的方法，可用于替代使用 map 的场景。\n\n\n# 2、基本用法\n\n直接举例：\n\nengine.use().gettemplate("demo.html").rendertostring(kv.by("k", "v"));\n\n\n1\n\n\n一行代码搞定模板引擎在任意环境下的使用，将极简贯彻到底。上例中的use()方法将从engine中获取默认存在的main engine对象，然后通过gettemplate获取template对象，最后再使用rendertostring将模板渲染到string之中。\n\n\n# 3、进阶用法\n\n直接举例：\n\nengine engine = engine.create("myengine");\nengine.setdevmode(true);\nengine.settoclasspathsourcefactory();\ntemplate template = engine.gettemplate("wxappmsg.txt");\nstring wxappmsg = template.rendertostring(kv.by("touser", "james"));\n \nengine = engine.use("myengine");\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上例第一行代码创建了名为 "myengine" 的engine对象，第二行代码设置了热加载模板文件，第三行代码设置引擎从 class path 以及 jar 包中加载模板文件，第四行代码利用wxappmsg.txt这个模板创建一个template对象，第五行代码使用该对象渲染内容到string对象中，从而生成了微信小程序消息内容。\n\n注意，最后一行代码使用use方法获取到了第一行代码创建的engine对象，意味着使用正确的enginename可以在任何地方获取到之前创建的engine对象，极为方便。\n\n除了可以将模板渲染到string中以外，还可以渲染到任意的writer之中，只需要用一下template.render(map data, java.io.writer wirter)方法即可实现，例如：writer接口如果指向文件，那么就将其内容渲染到文件之中，甚至可以实现writer接口将内容渲染到socket套接字中。\n\n除了外部模板文件可以作为模板内容的来源以外，还可以通过string数据或者istringsource接口实现类作为模板数据的来源，以下是代码示例：\n\ntemplate template = engine.gettemplatebystring("#(x + 123)");\nstring result = template.rendertostring(kv.by("x", 456));\n \ntemplate = engine.gettemplate(new mysource());\nresult = template.rendertostring(kv.by("k", "v"));\n\n\n1\n2\n3\n4\n5\n\n\n上例代码第一行通过 gettemplatebystring 来获取 template 对象，而非从外部模板文件来获取，这种用法非常适合模板内容非常简短的情况，避免了创建外部模板文件，例如：非常适合用于替换 jdk 中的 string.format(…) 方法。\n\n上例中的第三行代码，传入的参数是new mysource()，mysource类是isource接口的实现类，通过该接口可以实现通过任意方式来获取模板内容，例如，通过网络socket连接来获取，isource接口用法极其简单，在此不再赘述。\n\n\n# 4、engine对象管理\n\nengine对象的创建方式有两种，一种是通过 engine.create(name) 方法，另一种是直接使用 new engine() 语句，前者创建的对象是在 engine 模块管辖之内，可以通过 engine.use(name) 获取到，而后者创建的对象脱离了 engine 模块管辖，无法通过 engine.use(name) 获取到，开发者需要自行管理。\n\njfinal 的 render 模块以及 activerecord 模块使用 new engine() 创建实例，无法通过 engine.use(name) 获取到，前者可以通过rendermanager.me().getengine() 获取到，后者可以通过 activerecordplugin.getengine() 获取到。\n\nengine对象管理的设计，允许在同一个应用程序中使用多个 engine 实例用于不同的用途，jfinal 自身的 render、activerecord 模块对 engine 的使用就是典型的例子。\n\n强烈建议加入 jfinal 俱乐部，获取极为全面的 jfinal 最佳实践项目源代码 jfinal-club，项目中包含大量的 模板引擎使用实例，可以用最快的速度，几乎零成本的轻松方式，掌握 jfinal template engine最简洁的用法，省去看文档的时间：http://www.jfinal.com/club',charsets:{cjk:!0}},{title:"6.2 引擎配置",frontmatter:{},regularPath:"/zh/6%20Enjoy%20%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/6.2%20%E5%BC%95%E6%93%8E%E9%85%8D%E7%BD%AE.html",relativePath:"zh/6 Enjoy 模板引擎/6.2 引擎配置.md",key:"v-25952418",path:"/zh/6%20Enjoy%20%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/6.2%20%E5%BC%95%E6%93%8E%E9%85%8D%E7%BD%AE.html",headers:[{level:3,title:"1､配置入口",slug:"_1、配置入口",normalizedTitle:"1､配置入口",charIndex:15},{level:3,title:"2、配置多个 Engine 对象",slug:"_2、配置多个-engine-对象",normalizedTitle:"2、配置多个 engine 对象",charIndex:1623},{level:3,title:"3、多 Engine 对象管理",slug:"_3、多-engine-对象管理",normalizedTitle:"3、多 engine 对象管理",charIndex:2628},{level:3,title:"4､模板热加载配置",slug:"_4、模板热加载配置",normalizedTitle:"4､模板热加载配置",charIndex:3590},{level:3,title:"5、共享模板函数配置",slug:"_5、共享模板函数配置",normalizedTitle:"5、共享模板函数配置",charIndex:3861},{level:3,title:"6、从 class path 和 jar 包加载模板配置",slug:"_6、从-class-path-和-jar-包加载模板配置",normalizedTitle:"6、从 class path 和 jar 包加载模板配置",charIndex:4176},{level:3,title:"7、Eclipse 下开发",slug:"_7、eclipse-下开发",normalizedTitle:"7、eclipse 下开发",charIndex:4942}],lastUpdated:"9/22/2023, 9:39:45 AM",lastUpdatedTimestamp:1695375585e3,headersStr:"1､配置入口 2、配置多个 Engine 对象 3、多 Engine 对象管理 4､模板热加载配置 5、共享模板函数配置 6、从 class path 和 jar 包加载模板配置 7、Eclipse 下开发",content:'# 6.2 引擎配置\n\n\n# 1､配置入口\n\nEnjoy 引擎的配置入口统一在 Engine 类中。Engine 类中提供了一系列 setter 方法帮助引导配置，减少记忆负担，例如：\n\n// 支持模板热加载，绝大多数生产环境下也建议配置成 true，除非是极端高性能的场景\nengine.setDevMode(true);\n \n// 添加共享模板函数\nengine.addSharedFunction("_layout.html");\n \n// 配置极速模式，性能提升 13%\nEngine.setFastMode(true);\n \n// jfinal 4.9.02 新增配置：支持中文表达式、中文变量名、中文方法名、中文模板函数名\nEngine.setChineseExpression(true);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n注意：engine.setToClassPathSourceFactory()、engine.setBaseTemplatePath(...)、engine.setDevMode(...) 这三个配置要放在最前面，因为后续的 engine.addSharedFunction(...) 等配置对前面三个配置有依赖。\n\njfinal 4.9 新增了 HTML 压缩功能，其配置如下：\n\n// 开启 HTML 压缩功能，分隔字符参数可配置为：\'\\n\' 与 \' \'\nengine.setCompressorOn(\' \');\n\n\n1\n2\n\n\n该功能对于超高并发访问的 web 应用会有益处，节约流量、提升效率。配置完以后生成的 html 内容如下所示：\n\n\n注意：该功能只支持 HTML 压缩，如果 HTML 中混杂着 javascript 脚本，且其中含有单行注释，或者某些语句缺少分号，则会引起错误，例如下面的 js 代码：\n\n// 这里是 js 的注释\nvar s1 = "hello"\nvar s2 = "james"\ns3 = s1 + s2\n\n\n1\n2\n3\n4\n\n\n以上 js 代码中出现了单行注释，还出现了语句结尾缺少分号字符 \';\' 的情况，带有这类情况的 HTML 模板，需要使用换行符作为压缩分隔符：\n\n// 使用换行字符为分隔字符\nengine.setCompressorOn(\'\\n\');\n\n\n1\n2\n\n\n该配置与使用空格字符的压缩率是完全一样的，而且压缩出来的 HTML 可读性也更好，建议使用。如果 HTML 中混杂着 js 脚本，强烈建议使用该配置。\n\njfinal 4.9 新增 addEnum(...) 支持枚举类型\n\n// 假定有如下枚举定义\npublic enum UserType {\n    ADMIN,\n    USER;\n    \n    public String hello() {\n        return "hello";\n    }\n}\n        \n// 添加对该枚举的配置\nengine.addEnum(UserType.class);\n \n \n// 在模板中的使用方法如下\n### 以下的对象 u 通过 Controller 中的 setAttr("u", UserType.ADMIN) 传递\n#if(u == UserType.ADMIN)\n    #(UserType.ADMIN)\n \n    ### 以下两行代码演示直接方法调用\n    #(UserType.ADMIN.hello())   \n#end\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\njfinal 4.9.02 新增配置，支持中文表达式、中文变量名、中文方法名、中文模板函数名\n\nEngine.setChineseExpression(true);\n\n\n1\n\n\n\n# 2、配置多个 Engine 对象\n\n由于 Enjoy 引擎被设计为多种用途，同一个项目中的不同模块可以使用不同的 Engine 对象，分别用于不同的用途，那么则需要分别配置，各个 engine 对象的配置彼此独立互不干扰。\n\n例如 jfinal 中的 Controller.render(String) 以及 SQL 管理功能 Model.template(...)、Db.template(...)、Db.getSqlPara(...) 就分别使用了两个不同的 Engine 对象，所以这两个对象需要独立配置，并且配置的地点是完全不同的。\n\n应用于 Controller.render(String) 的 Engine 对象的配置在 configEngine(Engine me) 中进行：\n\npublic void configEngine(Engine me) {\n  // devMode 配置为 true，将支持模板实时热加载\n  me.setDevMode(true);\n}\n\n\n1\n2\n3\n4\n\n\n应用于 SQL 管理的 Engine 对象的配置在 configPlugin(Plugins me) 中进行：\n\npublic void configPlugin(Plugins me) {\n  ActiveRecordPlugin arp = new ActiveRecordPlugin(...);\n  Engine engine = arp.getEngine();\n  \n  // 上面的代码获取到了用于 sql 管理功能的 Engine 对象，接着就可以开始配置了\n  engine.setToClassPathSourceFactory();\n  engine.addSharedMethod(new StrKit());\n  \n  me.add(arp);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n常见错误：经常有同学在配置 SQL 管理的 Engine 对象时，是在 configEngine(Engine me) 中进行配置，造成配置错配的问题。 同理，自己创建出来的 Engine 对象也需要独立配置：\n\nEngine engine = Engine.create("myEngine");\nengine.setDevMode(true);\n\n\n1\n2\n\n\n\n# 3、多 Engine 对象管理\n\n使用 Engine.create(engineName) 创建的 engine 对象，可以在任意地方通过 Engine.use(engineName) 很方便获取，管理多个 engine 对象十分方便，例如：\n\n// 创建一个 Engine 对象并进行配置\nEngine forEmail = Engine.create("forEmail");\nforEmail.addSharedMethod(EmailKit.class);\nforEmail.addSharedFunction("email-function.txt");\n \n// 创建另一个 Engine 对象并进行配置\nEngine forWeixin = Engine.create("forWeixin");\nforWeixin.addSharedMethod(WeixinKit.class);\nforWeixin.addSharedFunction("weixin-function.txt");\n    上面代码创建了两个 Engine 对象，并分别取名为 "forEmail" 与 "forWeixin"，随后就可以分别使用这两个 Engine 对象了：\n\n// 使用名为 "forEmail" 的 engine 对象\nString ret = Engine.use("forEmail").getTemplate("email-template.txt").renderToString(...);\nSystem.out.print(ret);\n \n// 使用名为 "forWeixin" 的 engine 对象\nString ret = Engine.use("forWeixin").getTemplate("weixin-template.txt").renderToString(...);\nSystem.out.print(ret);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n如上代码所示，通过 Engine.use(...) 方法可以获取到 Engine.create(...) 创建的对象，既很方便独立配置，也很方便独立获取使用。\n\n\n# 4､模板热加载配置\n\n为了达到最高性能 Enjoy 引擎默认对模板解析结果进行缓存，所以模板被加载之后的修改不会生效，如果需要实时生效需要如下配置：\n\nengine.setDevMode(true);\n\n\n1\n\n\n配置成 devMode 模式，开发环境下是提升开发效率必须的配置。\n\n由于 Enjoy 的模板解析速度是 freemarker、velocity 这类模板引擎的 7 倍左右，并且模板解析前也会判断是否被修改，所以绝大部分情况下建议配置成热加载模式：setDevMode(true)，除非你的项目是极端高性能的应用场景。\n\n\n# 5、共享模板函数配置\n\n如果模板中通过 #define 指令定义了 template function，并且希望这些 template function 可以在其它模板中直接调用的话，可以进行如下配置：\n\n// 添加共享函数，随后可在任意地方调用这些共享函数\nme.addSharedFunction("/view/common/layout.html");\n\n\n1\n2\n\n\n以上代码添加了一个共享函数模板文件 layout.html，这个文件中使用了#define指令定义了template function。通过上面的配置，可以在任意地方直接调用 layout.html 里头的 template function。\n\n\n# 6、从 class path 和 jar 包加载模板配置\n\n如果模板文件在项目的 class path 路径或者 jar 包之内（注意：maven 项目的 src/main/resources 也属于 class path），可以通过me.setToClassPathSourceFactory() 以及 me.setBaseTemplatePath(null) 来实现，以下是代码示例：\n\npublic void configEngine(Engine me) {\n   me.setDevMode(true);\n \n   me.setBaseTemplatePath(null);\n   me.setToClassPathSourceFactory();\n \n   me.addSharedFunction("/view/common/layout.html");\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nEnjoy 引擎默认提供了 FileSourceFactory、与 ClassPathSourceFactory 来配置模板加载来源的策略，前者从文件系统中加载模板，后者从 class path 以及 jar 包加载模板。其中前者是默认配置，后者可通过 engine.setToClassPathSourceFactory() 进行配置。\n\n还可以通过实现 ISourceFactory 接口，扩展出从任意来源加载模板的策略。然后通过 engine.setSourceFactory(...) 切换到自己扩展的策略上去。\n\n还可以通过实现 ISource 接口，然后通过 engine.get(new MySource(...)) 去加载模板内容。目前已有用户实现 DbSource 从数据库加载模板的功能。\n\n\n# 7、Eclipse 下开发\n\n在 Eclipse 下开发时，可以将 Validation 配置中的 Html Syntax Validator 中的自动验证去除勾选，因为 eclipse 无法识别 Enjoy 使用的指令，从而会在指令下方显示黄色波浪线，影响美观。具体的配置方式见下图：\n\n\n配置完成后注意重启 eclipse 生效，这个操作不影响使用，仅为了代码美观，关爱处女座完美主义者。',normalizedContent:'# 6.2 引擎配置\n\n\n# 1､配置入口\n\nenjoy 引擎的配置入口统一在 engine 类中。engine 类中提供了一系列 setter 方法帮助引导配置，减少记忆负担，例如：\n\n// 支持模板热加载，绝大多数生产环境下也建议配置成 true，除非是极端高性能的场景\nengine.setdevmode(true);\n \n// 添加共享模板函数\nengine.addsharedfunction("_layout.html");\n \n// 配置极速模式，性能提升 13%\nengine.setfastmode(true);\n \n// jfinal 4.9.02 新增配置：支持中文表达式、中文变量名、中文方法名、中文模板函数名\nengine.setchineseexpression(true);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n注意：engine.settoclasspathsourcefactory()、engine.setbasetemplatepath(...)、engine.setdevmode(...) 这三个配置要放在最前面，因为后续的 engine.addsharedfunction(...) 等配置对前面三个配置有依赖。\n\njfinal 4.9 新增了 html 压缩功能，其配置如下：\n\n// 开启 html 压缩功能，分隔字符参数可配置为：\'\\n\' 与 \' \'\nengine.setcompressoron(\' \');\n\n\n1\n2\n\n\n该功能对于超高并发访问的 web 应用会有益处，节约流量、提升效率。配置完以后生成的 html 内容如下所示：\n\n\n注意：该功能只支持 html 压缩，如果 html 中混杂着 javascript 脚本，且其中含有单行注释，或者某些语句缺少分号，则会引起错误，例如下面的 js 代码：\n\n// 这里是 js 的注释\nvar s1 = "hello"\nvar s2 = "james"\ns3 = s1 + s2\n\n\n1\n2\n3\n4\n\n\n以上 js 代码中出现了单行注释，还出现了语句结尾缺少分号字符 \';\' 的情况，带有这类情况的 html 模板，需要使用换行符作为压缩分隔符：\n\n// 使用换行字符为分隔字符\nengine.setcompressoron(\'\\n\');\n\n\n1\n2\n\n\n该配置与使用空格字符的压缩率是完全一样的，而且压缩出来的 html 可读性也更好，建议使用。如果 html 中混杂着 js 脚本，强烈建议使用该配置。\n\njfinal 4.9 新增 addenum(...) 支持枚举类型\n\n// 假定有如下枚举定义\npublic enum usertype {\n    admin,\n    user;\n    \n    public string hello() {\n        return "hello";\n    }\n}\n        \n// 添加对该枚举的配置\nengine.addenum(usertype.class);\n \n \n// 在模板中的使用方法如下\n### 以下的对象 u 通过 controller 中的 setattr("u", usertype.admin) 传递\n#if(u == usertype.admin)\n    #(usertype.admin)\n \n    ### 以下两行代码演示直接方法调用\n    #(usertype.admin.hello())   \n#end\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\njfinal 4.9.02 新增配置，支持中文表达式、中文变量名、中文方法名、中文模板函数名\n\nengine.setchineseexpression(true);\n\n\n1\n\n\n\n# 2、配置多个 engine 对象\n\n由于 enjoy 引擎被设计为多种用途，同一个项目中的不同模块可以使用不同的 engine 对象，分别用于不同的用途，那么则需要分别配置，各个 engine 对象的配置彼此独立互不干扰。\n\n例如 jfinal 中的 controller.render(string) 以及 sql 管理功能 model.template(...)、db.template(...)、db.getsqlpara(...) 就分别使用了两个不同的 engine 对象，所以这两个对象需要独立配置，并且配置的地点是完全不同的。\n\n应用于 controller.render(string) 的 engine 对象的配置在 configengine(engine me) 中进行：\n\npublic void configengine(engine me) {\n  // devmode 配置为 true，将支持模板实时热加载\n  me.setdevmode(true);\n}\n\n\n1\n2\n3\n4\n\n\n应用于 sql 管理的 engine 对象的配置在 configplugin(plugins me) 中进行：\n\npublic void configplugin(plugins me) {\n  activerecordplugin arp = new activerecordplugin(...);\n  engine engine = arp.getengine();\n  \n  // 上面的代码获取到了用于 sql 管理功能的 engine 对象，接着就可以开始配置了\n  engine.settoclasspathsourcefactory();\n  engine.addsharedmethod(new strkit());\n  \n  me.add(arp);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n常见错误：经常有同学在配置 sql 管理的 engine 对象时，是在 configengine(engine me) 中进行配置，造成配置错配的问题。 同理，自己创建出来的 engine 对象也需要独立配置：\n\nengine engine = engine.create("myengine");\nengine.setdevmode(true);\n\n\n1\n2\n\n\n\n# 3、多 engine 对象管理\n\n使用 engine.create(enginename) 创建的 engine 对象，可以在任意地方通过 engine.use(enginename) 很方便获取，管理多个 engine 对象十分方便，例如：\n\n// 创建一个 engine 对象并进行配置\nengine foremail = engine.create("foremail");\nforemail.addsharedmethod(emailkit.class);\nforemail.addsharedfunction("email-function.txt");\n \n// 创建另一个 engine 对象并进行配置\nengine forweixin = engine.create("forweixin");\nforweixin.addsharedmethod(weixinkit.class);\nforweixin.addsharedfunction("weixin-function.txt");\n    上面代码创建了两个 engine 对象，并分别取名为 "foremail" 与 "forweixin"，随后就可以分别使用这两个 engine 对象了：\n\n// 使用名为 "foremail" 的 engine 对象\nstring ret = engine.use("foremail").gettemplate("email-template.txt").rendertostring(...);\nsystem.out.print(ret);\n \n// 使用名为 "forweixin" 的 engine 对象\nstring ret = engine.use("forweixin").gettemplate("weixin-template.txt").rendertostring(...);\nsystem.out.print(ret);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n如上代码所示，通过 engine.use(...) 方法可以获取到 engine.create(...) 创建的对象，既很方便独立配置，也很方便独立获取使用。\n\n\n# 4､模板热加载配置\n\n为了达到最高性能 enjoy 引擎默认对模板解析结果进行缓存，所以模板被加载之后的修改不会生效，如果需要实时生效需要如下配置：\n\nengine.setdevmode(true);\n\n\n1\n\n\n配置成 devmode 模式，开发环境下是提升开发效率必须的配置。\n\n由于 enjoy 的模板解析速度是 freemarker、velocity 这类模板引擎的 7 倍左右，并且模板解析前也会判断是否被修改，所以绝大部分情况下建议配置成热加载模式：setdevmode(true)，除非你的项目是极端高性能的应用场景。\n\n\n# 5、共享模板函数配置\n\n如果模板中通过 #define 指令定义了 template function，并且希望这些 template function 可以在其它模板中直接调用的话，可以进行如下配置：\n\n// 添加共享函数，随后可在任意地方调用这些共享函数\nme.addsharedfunction("/view/common/layout.html");\n\n\n1\n2\n\n\n以上代码添加了一个共享函数模板文件 layout.html，这个文件中使用了#define指令定义了template function。通过上面的配置，可以在任意地方直接调用 layout.html 里头的 template function。\n\n\n# 6、从 class path 和 jar 包加载模板配置\n\n如果模板文件在项目的 class path 路径或者 jar 包之内（注意：maven 项目的 src/main/resources 也属于 class path），可以通过me.settoclasspathsourcefactory() 以及 me.setbasetemplatepath(null) 来实现，以下是代码示例：\n\npublic void configengine(engine me) {\n   me.setdevmode(true);\n \n   me.setbasetemplatepath(null);\n   me.settoclasspathsourcefactory();\n \n   me.addsharedfunction("/view/common/layout.html");\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nenjoy 引擎默认提供了 filesourcefactory、与 classpathsourcefactory 来配置模板加载来源的策略，前者从文件系统中加载模板，后者从 class path 以及 jar 包加载模板。其中前者是默认配置，后者可通过 engine.settoclasspathsourcefactory() 进行配置。\n\n还可以通过实现 isourcefactory 接口，扩展出从任意来源加载模板的策略。然后通过 engine.setsourcefactory(...) 切换到自己扩展的策略上去。\n\n还可以通过实现 isource 接口，然后通过 engine.get(new mysource(...)) 去加载模板内容。目前已有用户实现 dbsource 从数据库加载模板的功能。\n\n\n# 7、eclipse 下开发\n\n在 eclipse 下开发时，可以将 validation 配置中的 html syntax validator 中的自动验证去除勾选，因为 eclipse 无法识别 enjoy 使用的指令，从而会在指令下方显示黄色波浪线，影响美观。具体的配置方式见下图：\n\n\n配置完成后注意重启 eclipse 生效，这个操作不影响使用，仅为了代码美观，关爱处女座完美主义者。',charsets:{cjk:!0}},{title:"6.3 表达式",frontmatter:{},regularPath:"/zh/6%20Enjoy%20%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/6.3%20%E8%A1%A8%E8%BE%BE%E5%BC%8F.html",relativePath:"zh/6 Enjoy 模板引擎/6.3 表达式.md",key:"v-7047fb52",path:"/zh/6%20Enjoy%20%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/6.3%20%E8%A1%A8%E8%BE%BE%E5%BC%8F.html",headers:[{level:3,title:"1、与java规则基本相同的表达式",slug:"_1、与java规则基本相同的表达式",normalizedTitle:"1、与java规则基本相同的表达式",charIndex:345},{level:3,title:"2、属性访问",slug:"_2、属性访问",normalizedTitle:"2、属性访问",charIndex:929},{level:3,title:"3、方法调用",slug:"_3、方法调用",normalizedTitle:"3、方法调用",charIndex:1553},{level:3,title:"4、静态属性访问",slug:"_4、静态属性访问",normalizedTitle:"4、静态属性访问",charIndex:1989},{level:3,title:"5、静态方法调用",slug:"_5、静态方法调用",normalizedTitle:"5、静态方法调用",charIndex:2797},{level:3,title:"6、可选链操作符 ?. （5.0.0新增功能）",slug:"_6、可选链操作符-5-0-0新增功能",normalizedTitle:"6、可选链操作符 ?. （5.0.0新增功能）",charIndex:3358},{level:3,title:"7、空合并安全取值调用操作符",slug:"_7、空合并安全取值调用操作符",normalizedTitle:"7、空合并安全取值调用操作符",charIndex:3776},{level:3,title:"8、单引号字符串",slug:"_8、单引号字符串",normalizedTitle:"8、单引号字符串",charIndex:4507},{level:3,title:"9、相等与不等比较表达式增强",slug:"_9、相等与不等比较表达式增强",normalizedTitle:"9、相等与不等比较表达式增强",charIndex:4774},{level:3,title:"10、布尔表达式增强",slug:"_10、布尔表达式增强",normalizedTitle:"10、布尔表达式增强",charIndex:5064},{level:3,title:"11、Map 定义表达式",slug:"_11、map-定义表达式",normalizedTitle:"11、map 定义表达式",charIndex:5437},{level:3,title:"13、范围数组定义表达式",slug:"_13、范围数组定义表达式",normalizedTitle:"13、范围数组定义表达式",charIndex:6734},{level:3,title:"14、逗号表达式",slug:"_14、逗号表达式",normalizedTitle:"14、逗号表达式",charIndex:6952},{level:3,title:"15、从java中去除的运算符",slug:"_15、从java中去除的运算符",normalizedTitle:"15、从java中去除的运算符",charIndex:7045},{level:3,title:"16、表达式总结",slug:"_16、表达式总结",normalizedTitle:"16、表达式总结",charIndex:7127}],lastUpdated:"9/12/2023, 3:21:39 AM",lastUpdatedTimestamp:1694488899e3,headersStr:"1、与java规则基本相同的表达式 2、属性访问 3、方法调用 4、静态属性访问 5、静态方法调用 6、可选链操作符 ?. （5.0.0新增功能） 7、空合并安全取值调用操作符 8、单引号字符串 9、相等与不等比较表达式增强 10、布尔表达式增强 11、Map 定义表达式 13、范围数组定义表达式 14、逗号表达式 15、从java中去除的运算符 16、表达式总结",content:'# 6.3 表达式\n\nEnjoy Template Engine 表达式规则设计在总体上符合 java 表达式规则，仅仅针对模板引擎的特征进行极其少量的符合直觉的有利于开发体验的扩展。\n\n对于表达式的使用，再次强调一个关键点：表达式与Java是直接打通的。掌握了这个关键点立即就掌握了模板引擎90%的用法。如下是代码示例：\n\n123 + "abc"\n"abcd".substring(0, 1)\nuserList.get(0).getName()\n\n\n1\n2\n3\n\n\n以上代码第一、第二行，与Java表达式的用法完全一样。第三行代码中，假定userList中有User对象，并且User具有getName()方法，只要知道变量的类型，就可以像使用Java表达式一样调用对象的方法。\n\n\n# 1、与java规则基本相同的表达式\n\n * 算术运算： + - * / % ++ --\n * 比较运算： > >= < <= == != (基本用法相同，后面会介绍增强部分)\n * 逻辑运算： ! && ||\n * 三元表达式： ? :\n * Null 值常量: null\n * 字符串常量： "jfinal club"\n * 布尔常量：true false\n * 数字常量： 123 456F 789L 0.1D 0.2E10\n * 数组存取：array[i](Map被增强为额外支持 map[key]的方式取值)\n * 属性取值：object.field(Map被增强为额外支持map.key 的方式取值)\n * 方法调用：object.method(p1, p2…, pn) (支持可变参数)\n\n逗号表达式：123, 1>2, null, "abc", 3+6 (逗号表达式的值为最后一个表达式的值)\n\n小技巧：如果从java端往map中传入一个key为中文的值，可以通过map["中文"] 的方式去访问到，而不能用 "map.中文" 访问，因为引擎会将之优先当成是 object.field 的访问形式，而 object.field 形式默认不支持中文，当然也可以通过 Engine.setChineseExpression(true) 配置来支持。\n\n\n# 2、属性访问\n\n由于模板引擎的属性取值表达式极为常用，所以对其在用户体验上进行了符合直觉的扩展，field 表达式取值优先次序，以 user.name 为例：\n\n * 如果 user.getName() 存在，则优先调用\n\n * 如果 user 具有 public 修饰过的name 属性，则取 user.name 属性值（注意：jfinal 4.0 之前这条规则的优先级最低）\n\n * 如果 user 为 Model 子类，则调用 user.get("name")\n\n * 如果 user 为 Record，则调用 user.get("name")\n\n * 如果 user 为 Map，则调用 user.get("name")\n\n此外，还支持数组的length长度访问：array.length，与java语言一样\n\n最后，属性访问表达式还可以通过 FieldGetter 抽象类扩展，具体方法参考 com.jfinal.template.expr.ast.FieldGetters，这个类中已经给出了多个默认实现类，以下配置将支持 user.girl 表达式去调用 user 对象的 boolean isGirl() 方法：\n\nEngine.addFieldGetterToFirst(new com.jfinal.template.expr.ast.FieldGetters.IsMethodFieldGetter());\n\n\n1\n\n\n\n# 3、方法调用\n\n模板引擎被设计成与 java 直接打通，可以在模板中直接调用对象上的任何public方法，使用规则与java中调用方式保持一致，以下代码示例：\n\n#("ABCDE".substring(0, 3))\n#(girl.getAge())\n#(list.size())\n#(map.get(key))\n\n\n1\n2\n3\n4\n\n\n以上第一行代码调用了String对象上的substring(0, 3)方法输出值为 "ABC"。第二行代码在girl对象拥有getAge()方法时可调用。第三行代码假定map为一个Map类型时可调用其 get(...) 方法。\n\n简单来说：模板表达式中可以直接调用对象所拥有的public方法，方法调用支持可变参数，例如支持这种方法被调用：obj.find(String sql, Object … args)。\n\n对象方法调用与java直接打通式设计，学习成本为0、与java交互极其方便、并且立即拥有了非常强大的扩展机制。\n\n\n# 4、静态属性访问\n\n自 jfinal 5.0.2 开始，该表达式默认 "未启用"，启用需要添加如下配置：\n\nengine.setStaticFieldExpression(true);\n\n\n1\n\n\n在模板中通常要访问java代码中定义的静态变量、静态常量，以下是代码示例：\n\n#if(x.status == com.demo.common.model.Account::STATUS_LOCK_ID)\n   <span>(账号已锁定)</span>\n#end\n\n\n1\n2\n3\n\n\n如上所示，通过类名加双冒号再加静态属性名即为静态属性访问表达式，上例中静态属性在java代码中是一个int数值，通过这种方式可以避免在模板中使用具体的常量值，从而有利于代码重构。\n\n由于静态属性访问需要包名前缀，代码显得比较长，在实际使用时如果多次用到同一个值，可以用 #set(STATUS_LOCK_ID = ...) 指令将常量值先赋给一个变量，可以节省一定的代码。\n\n注意，这里的属性必须是public static修饰过的才可以被访问。此外，这里的静态属性并非要求为final修饰。\n\n如果某个静态属性要被经常使用，建议通过 addSharedObject(...) 将其配置成共享对象，然后通过 field 表达式来引用，从而节省代码，例如先配置 shared object：\n\npublic void configEngine(Engine me) {\n    me.addSharedObject("Account", new Account());\n}\n\n\n1\n2\n3\n\n\n然后在模板中就可以使用 field 表达式来代替原有的静态属性访问表达式了：\n\n#if(x.status == Account.STATUS_LOCK_ID)\n   <span>(账号已锁定)</span>\n#end\n\n\n1\n2\n3\n\n\n\n# 5、静态方法调用\n\n自 jfinal 5.0.2 开始，该表达式默认 "未启用"，启用需要添加如下配置：\n\nengine.setStaticMethodExpression(true);\n\n\n1\n\n\nEnjoy Template Engine 可以以非常简单的方式调用静态方法，以下是代码示例：\n\n#if(com.jfinal.kit.StrKit::isBlank(title))\n   ....\n#end\n\n\n1\n2\n3\n\n\n使用方式与前面的静态属性访问保持一致，仅仅是将静态属性名换成静态方法名，并且后面多一对小括号与参数：类名 + :: + 方法名(参数)。静态方法调用支持可变参数。与静态属性相同，被调用的方法需要使用public static 修饰才可访问。\n\n如果觉得类名前方的包名书写很麻烦，可以使用后续即将介绍的me.addSharedMethod(…)方法将类中的方法添加为共享方法，调用的时候直接使用方法名即可，连类名都不再需要。\n\n此外，还可以调用静态属性上的方法，以下是代码示例：\n\n(com.jfinal.MyKit::me).method(paras)\n\n\n1\n\n\n上面代码中需要先用一对小扩号将静态属性取值表达式扩起来，然后再去调用它的方法，小括号在此仅是为了改变表达式的优先级。\n\n\n# 6、可选链操作符 ?. （5.0.0新增功能）\n\njfinal 5.0.0 版本新增了 optional chain 操作符，使用方式如下：\n\n# 当 article 为 null 时不对 title 进行取值，而是直接返回 null\narticle?.title\n \n# 可用于方法调用\narticle?.getTitle()\n \n# 可级联操作\npage?.list?.size()\n \n# 可用在方法调回之后，以下代码在 getList() 返回 null 时可避免抛出异常\npage?.getList()?.size()\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n在对某个对象进行 field 取值或者方法调用，如果该对象可能为 null，那么可以使用该操作符，避免抛出异常。注意该操作符在对象为 null 时始终返回 null，如果需要返回其它默认值，可以使用下一小节的 "空合并安全取值调用操作符"。\n\n\n# 7、空合并安全取值调用操作符\n\nEnjoy Template Engine 引入了swift与C#语言中的空合操作符，并在其基础之上进行了极为自然的扩展，该表达式符号为两个紧靠的问号：??。代码示例：\n\nseoTitle ?? "JFinal 社区"\nobject.field ??\nobject.method() ??\n\n\n1\n2\n3\n\n\n以上第一行代码的功能与swift语言功能完全一样，也即在seoTitle 值为null时整个表达式取后面表达式的值。而第二行代码表示对object.field进行空安全(Null Safe)属性取值，即在object为null时表达式不报异常，并且值为null。\n\n第三行代码与第二行代码类似，仅仅是属性取值变成了方法调用，并称之为空安全(Null Safe)方法调用，表达式在object为null时不报异常，其值也为null。\n\n当然，空合并与空安全可以极为自然地混合使用，如下是示例：\n\nobject.field ?? "默认值"\nobject.method() ?? value\n\n\n1\n2\n\n\n以上代码中，第一行代码表示左侧null safe 属性取值为null时，整个表达式的值为后方的字符串中的值，而第二行代码表示值为null时整个表达式取value这个变量中的值。\n\n特别注意：?? 操作符的优先级高于数学计算运算符：+、-、*、/、%，低于单目运算符：!、++、--。强制改变优先级使用小括号即可。\n\n例子：a.b ?? && expr 表达式中，其 a.b ?? 为一个整体被求值，因为 ?? 优先级高于数学计算运算符，而数学计算运算符又高于 && 运算符，进而推导出 ?? 优先级高于&&\n\n\n# 8、单引号字符串\n\n针对Template Engine 经常用于html的应用场景，添加了单引号字符串支持，以下是代码示例：\n\n<a href="/" class="#(menu == \'index\' ? \'current\' : \'normal\')"\n   首页\n</a>\n\n\n1\n2\n3\n\n\n以上代码中的三元表达式中有三处使用了单引号字符串，好处是可以与最外层的双引号协同工作，也可以反过来，最外层用单引号字符串，而内层表达式用双引号字符串。\n\n这个设计非常有利于在模板文件中已有的双引号或单引号内容之中书写字符串表达式。\n\n\n# 9、相等与不等比较表达式增强\n\n相等不等表达式 == 与 != 会对左右表达式进行left.equals(right)比较操作，所以可以对字符串进行直接比较，如下所示：\n\n#if(nickName == "james")\n  ...\n#end\n\n\n1\n2\n3\n\n\n注意：Controller.keepPara(…) 方法会将任何数据转换成String后传递到view层，所以原本可以用相等表达式比较的两个Integer型数据，在keepPara(…)后变得不可比较，因为变为了String与Integer型的比较。解决方法见本章的Extionsion Method小节。\n\n\n# 10、布尔表达式增强\n\n布尔表达式在原有java基础之下进行了增强，可以减少代码输入量，具体规则自上而下优先应用如下列表：\n\n * null 返回 false\n\n * boolean 类型，原值返回\n\n * String、StringBuilder等一切继承自 CharSequence 类的对象，返回 length > 0\n\n * 其它返回 true\n\n以上规则可以减少模板中的代码量，以下是示例：\n\n#if(user && user.id == x.userId)\n  ...\n#end\n\n\n1\n2\n3\n\n\n以上代码中的 user 表达式实质上代替了java表达式的 user != null 这种写法，减少了代码量。当然，上述表达式如果使用 ?? 运算符，还可以更加简单顺滑：if (user.id ?? == x.userId)\n\n\n# 11、Map 定义表达式\n\nMap定义表达式的最实用场景是在调用方法或函数时提供极为灵活的参数传递方式，当方法或函数需要传递的参数名与数量不确定时极为有用，以下是基本用法：\n\n#set(map = {k1:123, "k2":"abc", "k3":object})\n#(map.k1)\n#(map.k2)\n#(map["k1"])\n#(map["k2"])\n#(map.get("k1"))\n\n\n1\n2\n3\n4\n5\n6\n\n\n如上图所示，map的定义使用一对大括号，每个元素以key : value的形式定义，多个元素之间用逗号分隔。\n\nkey 只允许是合法的 java 变量名标识符或者 String 常量值（jfinal 3.4 起将支持 int、long、float、double、boolean、null 等等常量值），注意：上例中使用了标识符 k1 而非 String 常量值 "k1" 只是为了书写时的便利，与字符串是等价的，并不会对标识符 k1 进行表达式求值。\n\n上图中通过#set指令将定义的变量赋值给了map变量，第二与第三行中以object.field的方式进行取值，第四第五行以 map[key] 的方式进行取值，第六行则是与 java 表达式打通式的用法。\n\n特别注意：上例代码如果使用 map[k1] 来取值，则会对 k1 标识符先求值，得到的是 null，也即map[k1] 相当于 map[null]，因此上述代码中使用了 map["k1"] 这样的形式来取值。 此外，map 取值还支持在定义的同时来取值，如下所示：\n\n#({1:\'自买\', 2:\'跟买\'}.get(1))\n#({1:\'自买\', 2:\'跟买\'}[2])\n \n### 与双问号符联合使用支持默认值\n#({1:\'自买\', 2:\'跟买\'}.get(999) ?? \'其它\')\n    上述 key 为 int 常量，自 jfinal 3.4 版本才开始支持。\n\n### 12､数组定义表达式\n    直接举例：\n\n// 定义数组 array，并为元素赋默认值\n#set(array = [123, "abc", true])\n \n// 获取下标为 1 的值，输出为: "abc"\n#(array[1])\n \n// 将下标为 1 的元素赋值为 false，并输出\n#(array[1] = false, array[1])\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n以上代码演示了数组的定义与初始化，以及数据获取与赋值。其中最后一行代码并没有使用 #set 指令，也就是说数组定义表达式可以脱离 #set 指令，以任意表达式为形式使用在任何指令内部（Map 定义表达式也一样可以）\n\n数组定义表达式的初始化元素除了可以使用常量值以外，还可以使用任意的表达式，包括变量、方法调用返回值等等：\n\n#set(array = [ 123, "abc", true, a && b || c, 1 + 2, obj.doIt(x) ])\n\n\n1\n\n\n\n# 13、范围数组定义表达式\n\n直接举例：\n\n#for(x : [1..10])\n   #(x)\n#end\n\n\n1\n2\n3\n\n\n上图中的表达式 [1..10] 定义了一个范围数组，其值为从1到10的整数数组，该表达式通常用于在开发前端页面时，模拟迭代输出多条静态数据，而又不必从后端读取数据。\n\n此外，还支持递减的范围数组，例如：[10..1] 将定义一个从10到1的整数数组。上例中的#for指令与#()输出指令后续会详细介绍。\n\n\n# 14、逗号表达式\n\n将多个表达式使用逗号分隔开来组合而成的表达式称为逗号表达式，逗号表达式整体求值的结果为最后一个表达式的值。例如：1+2, 3*4 这个逗号表达式的值为12。\n\n\n# 15、从java中去除的运算符\n\n针对模板引擎的应用场景，去除了位运算符，避免开发者在模板引擎中表述过于复杂，保持模板引擎的应用初衷，同时也可以提升性能。\n\n\n# 16、表达式总结\n\n以上各小节介绍的表达式用法，主要是在 java 表达式规则之上做的有利于开发体验的精心扩展，你也可以先无视这些用法，而是直接当成是 java 表达式去使用，则可以免除掉上面的学习成本。\n\n上述这些在 java 表达式规则基础上做的精心扩展，一是基于模板引擎的实际使用场景而添加，例如单引号字符串。二是对过于啰嗦的 java 语法的改进，例如字符串的比较 str == "james" 取代 str.equals("james")，所以是十分值得和必要的。',normalizedContent:'# 6.3 表达式\n\nenjoy template engine 表达式规则设计在总体上符合 java 表达式规则，仅仅针对模板引擎的特征进行极其少量的符合直觉的有利于开发体验的扩展。\n\n对于表达式的使用，再次强调一个关键点：表达式与java是直接打通的。掌握了这个关键点立即就掌握了模板引擎90%的用法。如下是代码示例：\n\n123 + "abc"\n"abcd".substring(0, 1)\nuserlist.get(0).getname()\n\n\n1\n2\n3\n\n\n以上代码第一、第二行，与java表达式的用法完全一样。第三行代码中，假定userlist中有user对象，并且user具有getname()方法，只要知道变量的类型，就可以像使用java表达式一样调用对象的方法。\n\n\n# 1、与java规则基本相同的表达式\n\n * 算术运算： + - * / % ++ --\n * 比较运算： > >= < <= == != (基本用法相同，后面会介绍增强部分)\n * 逻辑运算： ! && ||\n * 三元表达式： ? :\n * null 值常量: null\n * 字符串常量： "jfinal club"\n * 布尔常量：true false\n * 数字常量： 123 456f 789l 0.1d 0.2e10\n * 数组存取：array[i](map被增强为额外支持 map[key]的方式取值)\n * 属性取值：object.field(map被增强为额外支持map.key 的方式取值)\n * 方法调用：object.method(p1, p2…, pn) (支持可变参数)\n\n逗号表达式：123, 1>2, null, "abc", 3+6 (逗号表达式的值为最后一个表达式的值)\n\n小技巧：如果从java端往map中传入一个key为中文的值，可以通过map["中文"] 的方式去访问到，而不能用 "map.中文" 访问，因为引擎会将之优先当成是 object.field 的访问形式，而 object.field 形式默认不支持中文，当然也可以通过 engine.setchineseexpression(true) 配置来支持。\n\n\n# 2、属性访问\n\n由于模板引擎的属性取值表达式极为常用，所以对其在用户体验上进行了符合直觉的扩展，field 表达式取值优先次序，以 user.name 为例：\n\n * 如果 user.getname() 存在，则优先调用\n\n * 如果 user 具有 public 修饰过的name 属性，则取 user.name 属性值（注意：jfinal 4.0 之前这条规则的优先级最低）\n\n * 如果 user 为 model 子类，则调用 user.get("name")\n\n * 如果 user 为 record，则调用 user.get("name")\n\n * 如果 user 为 map，则调用 user.get("name")\n\n此外，还支持数组的length长度访问：array.length，与java语言一样\n\n最后，属性访问表达式还可以通过 fieldgetter 抽象类扩展，具体方法参考 com.jfinal.template.expr.ast.fieldgetters，这个类中已经给出了多个默认实现类，以下配置将支持 user.girl 表达式去调用 user 对象的 boolean isgirl() 方法：\n\nengine.addfieldgettertofirst(new com.jfinal.template.expr.ast.fieldgetters.ismethodfieldgetter());\n\n\n1\n\n\n\n# 3、方法调用\n\n模板引擎被设计成与 java 直接打通，可以在模板中直接调用对象上的任何public方法，使用规则与java中调用方式保持一致，以下代码示例：\n\n#("abcde".substring(0, 3))\n#(girl.getage())\n#(list.size())\n#(map.get(key))\n\n\n1\n2\n3\n4\n\n\n以上第一行代码调用了string对象上的substring(0, 3)方法输出值为 "abc"。第二行代码在girl对象拥有getage()方法时可调用。第三行代码假定map为一个map类型时可调用其 get(...) 方法。\n\n简单来说：模板表达式中可以直接调用对象所拥有的public方法，方法调用支持可变参数，例如支持这种方法被调用：obj.find(string sql, object … args)。\n\n对象方法调用与java直接打通式设计，学习成本为0、与java交互极其方便、并且立即拥有了非常强大的扩展机制。\n\n\n# 4、静态属性访问\n\n自 jfinal 5.0.2 开始，该表达式默认 "未启用"，启用需要添加如下配置：\n\nengine.setstaticfieldexpression(true);\n\n\n1\n\n\n在模板中通常要访问java代码中定义的静态变量、静态常量，以下是代码示例：\n\n#if(x.status == com.demo.common.model.account::status_lock_id)\n   <span>(账号已锁定)</span>\n#end\n\n\n1\n2\n3\n\n\n如上所示，通过类名加双冒号再加静态属性名即为静态属性访问表达式，上例中静态属性在java代码中是一个int数值，通过这种方式可以避免在模板中使用具体的常量值，从而有利于代码重构。\n\n由于静态属性访问需要包名前缀，代码显得比较长，在实际使用时如果多次用到同一个值，可以用 #set(status_lock_id = ...) 指令将常量值先赋给一个变量，可以节省一定的代码。\n\n注意，这里的属性必须是public static修饰过的才可以被访问。此外，这里的静态属性并非要求为final修饰。\n\n如果某个静态属性要被经常使用，建议通过 addsharedobject(...) 将其配置成共享对象，然后通过 field 表达式来引用，从而节省代码，例如先配置 shared object：\n\npublic void configengine(engine me) {\n    me.addsharedobject("account", new account());\n}\n\n\n1\n2\n3\n\n\n然后在模板中就可以使用 field 表达式来代替原有的静态属性访问表达式了：\n\n#if(x.status == account.status_lock_id)\n   <span>(账号已锁定)</span>\n#end\n\n\n1\n2\n3\n\n\n\n# 5、静态方法调用\n\n自 jfinal 5.0.2 开始，该表达式默认 "未启用"，启用需要添加如下配置：\n\nengine.setstaticmethodexpression(true);\n\n\n1\n\n\nenjoy template engine 可以以非常简单的方式调用静态方法，以下是代码示例：\n\n#if(com.jfinal.kit.strkit::isblank(title))\n   ....\n#end\n\n\n1\n2\n3\n\n\n使用方式与前面的静态属性访问保持一致，仅仅是将静态属性名换成静态方法名，并且后面多一对小括号与参数：类名 + :: + 方法名(参数)。静态方法调用支持可变参数。与静态属性相同，被调用的方法需要使用public static 修饰才可访问。\n\n如果觉得类名前方的包名书写很麻烦，可以使用后续即将介绍的me.addsharedmethod(…)方法将类中的方法添加为共享方法，调用的时候直接使用方法名即可，连类名都不再需要。\n\n此外，还可以调用静态属性上的方法，以下是代码示例：\n\n(com.jfinal.mykit::me).method(paras)\n\n\n1\n\n\n上面代码中需要先用一对小扩号将静态属性取值表达式扩起来，然后再去调用它的方法，小括号在此仅是为了改变表达式的优先级。\n\n\n# 6、可选链操作符 ?. （5.0.0新增功能）\n\njfinal 5.0.0 版本新增了 optional chain 操作符，使用方式如下：\n\n# 当 article 为 null 时不对 title 进行取值，而是直接返回 null\narticle?.title\n \n# 可用于方法调用\narticle?.gettitle()\n \n# 可级联操作\npage?.list?.size()\n \n# 可用在方法调回之后，以下代码在 getlist() 返回 null 时可避免抛出异常\npage?.getlist()?.size()\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n在对某个对象进行 field 取值或者方法调用，如果该对象可能为 null，那么可以使用该操作符，避免抛出异常。注意该操作符在对象为 null 时始终返回 null，如果需要返回其它默认值，可以使用下一小节的 "空合并安全取值调用操作符"。\n\n\n# 7、空合并安全取值调用操作符\n\nenjoy template engine 引入了swift与c#语言中的空合操作符，并在其基础之上进行了极为自然的扩展，该表达式符号为两个紧靠的问号：??。代码示例：\n\nseotitle ?? "jfinal 社区"\nobject.field ??\nobject.method() ??\n\n\n1\n2\n3\n\n\n以上第一行代码的功能与swift语言功能完全一样，也即在seotitle 值为null时整个表达式取后面表达式的值。而第二行代码表示对object.field进行空安全(null safe)属性取值，即在object为null时表达式不报异常，并且值为null。\n\n第三行代码与第二行代码类似，仅仅是属性取值变成了方法调用，并称之为空安全(null safe)方法调用，表达式在object为null时不报异常，其值也为null。\n\n当然，空合并与空安全可以极为自然地混合使用，如下是示例：\n\nobject.field ?? "默认值"\nobject.method() ?? value\n\n\n1\n2\n\n\n以上代码中，第一行代码表示左侧null safe 属性取值为null时，整个表达式的值为后方的字符串中的值，而第二行代码表示值为null时整个表达式取value这个变量中的值。\n\n特别注意：?? 操作符的优先级高于数学计算运算符：+、-、*、/、%，低于单目运算符：!、++、--。强制改变优先级使用小括号即可。\n\n例子：a.b ?? && expr 表达式中，其 a.b ?? 为一个整体被求值，因为 ?? 优先级高于数学计算运算符，而数学计算运算符又高于 && 运算符，进而推导出 ?? 优先级高于&&\n\n\n# 8、单引号字符串\n\n针对template engine 经常用于html的应用场景，添加了单引号字符串支持，以下是代码示例：\n\n<a href="/" class="#(menu == \'index\' ? \'current\' : \'normal\')"\n   首页\n</a>\n\n\n1\n2\n3\n\n\n以上代码中的三元表达式中有三处使用了单引号字符串，好处是可以与最外层的双引号协同工作，也可以反过来，最外层用单引号字符串，而内层表达式用双引号字符串。\n\n这个设计非常有利于在模板文件中已有的双引号或单引号内容之中书写字符串表达式。\n\n\n# 9、相等与不等比较表达式增强\n\n相等不等表达式 == 与 != 会对左右表达式进行left.equals(right)比较操作，所以可以对字符串进行直接比较，如下所示：\n\n#if(nickname == "james")\n  ...\n#end\n\n\n1\n2\n3\n\n\n注意：controller.keeppara(…) 方法会将任何数据转换成string后传递到view层，所以原本可以用相等表达式比较的两个integer型数据，在keeppara(…)后变得不可比较，因为变为了string与integer型的比较。解决方法见本章的extionsion method小节。\n\n\n# 10、布尔表达式增强\n\n布尔表达式在原有java基础之下进行了增强，可以减少代码输入量，具体规则自上而下优先应用如下列表：\n\n * null 返回 false\n\n * boolean 类型，原值返回\n\n * string、stringbuilder等一切继承自 charsequence 类的对象，返回 length > 0\n\n * 其它返回 true\n\n以上规则可以减少模板中的代码量，以下是示例：\n\n#if(user && user.id == x.userid)\n  ...\n#end\n\n\n1\n2\n3\n\n\n以上代码中的 user 表达式实质上代替了java表达式的 user != null 这种写法，减少了代码量。当然，上述表达式如果使用 ?? 运算符，还可以更加简单顺滑：if (user.id ?? == x.userid)\n\n\n# 11、map 定义表达式\n\nmap定义表达式的最实用场景是在调用方法或函数时提供极为灵活的参数传递方式，当方法或函数需要传递的参数名与数量不确定时极为有用，以下是基本用法：\n\n#set(map = {k1:123, "k2":"abc", "k3":object})\n#(map.k1)\n#(map.k2)\n#(map["k1"])\n#(map["k2"])\n#(map.get("k1"))\n\n\n1\n2\n3\n4\n5\n6\n\n\n如上图所示，map的定义使用一对大括号，每个元素以key : value的形式定义，多个元素之间用逗号分隔。\n\nkey 只允许是合法的 java 变量名标识符或者 string 常量值（jfinal 3.4 起将支持 int、long、float、double、boolean、null 等等常量值），注意：上例中使用了标识符 k1 而非 string 常量值 "k1" 只是为了书写时的便利，与字符串是等价的，并不会对标识符 k1 进行表达式求值。\n\n上图中通过#set指令将定义的变量赋值给了map变量，第二与第三行中以object.field的方式进行取值，第四第五行以 map[key] 的方式进行取值，第六行则是与 java 表达式打通式的用法。\n\n特别注意：上例代码如果使用 map[k1] 来取值，则会对 k1 标识符先求值，得到的是 null，也即map[k1] 相当于 map[null]，因此上述代码中使用了 map["k1"] 这样的形式来取值。 此外，map 取值还支持在定义的同时来取值，如下所示：\n\n#({1:\'自买\', 2:\'跟买\'}.get(1))\n#({1:\'自买\', 2:\'跟买\'}[2])\n \n### 与双问号符联合使用支持默认值\n#({1:\'自买\', 2:\'跟买\'}.get(999) ?? \'其它\')\n    上述 key 为 int 常量，自 jfinal 3.4 版本才开始支持。\n\n### 12､数组定义表达式\n    直接举例：\n\n// 定义数组 array，并为元素赋默认值\n#set(array = [123, "abc", true])\n \n// 获取下标为 1 的值，输出为: "abc"\n#(array[1])\n \n// 将下标为 1 的元素赋值为 false，并输出\n#(array[1] = false, array[1])\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n以上代码演示了数组的定义与初始化，以及数据获取与赋值。其中最后一行代码并没有使用 #set 指令，也就是说数组定义表达式可以脱离 #set 指令，以任意表达式为形式使用在任何指令内部（map 定义表达式也一样可以）\n\n数组定义表达式的初始化元素除了可以使用常量值以外，还可以使用任意的表达式，包括变量、方法调用返回值等等：\n\n#set(array = [ 123, "abc", true, a && b || c, 1 + 2, obj.doit(x) ])\n\n\n1\n\n\n\n# 13、范围数组定义表达式\n\n直接举例：\n\n#for(x : [1..10])\n   #(x)\n#end\n\n\n1\n2\n3\n\n\n上图中的表达式 [1..10] 定义了一个范围数组，其值为从1到10的整数数组，该表达式通常用于在开发前端页面时，模拟迭代输出多条静态数据，而又不必从后端读取数据。\n\n此外，还支持递减的范围数组，例如：[10..1] 将定义一个从10到1的整数数组。上例中的#for指令与#()输出指令后续会详细介绍。\n\n\n# 14、逗号表达式\n\n将多个表达式使用逗号分隔开来组合而成的表达式称为逗号表达式，逗号表达式整体求值的结果为最后一个表达式的值。例如：1+2, 3*4 这个逗号表达式的值为12。\n\n\n# 15、从java中去除的运算符\n\n针对模板引擎的应用场景，去除了位运算符，避免开发者在模板引擎中表述过于复杂，保持模板引擎的应用初衷，同时也可以提升性能。\n\n\n# 16、表达式总结\n\n以上各小节介绍的表达式用法，主要是在 java 表达式规则之上做的有利于开发体验的精心扩展，你也可以先无视这些用法，而是直接当成是 java 表达式去使用，则可以免除掉上面的学习成本。\n\n上述这些在 java 表达式规则基础上做的精心扩展，一是基于模板引擎的实际使用场景而添加，例如单引号字符串。二是对过于啰嗦的 java 语法的改进，例如字符串的比较 str == "james" 取代 str.equals("james")，所以是十分值得和必要的。',charsets:{cjk:!0}},{title:"6.4 指令",frontmatter:{},regularPath:"/zh/6%20Enjoy%20%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/6.4%20%E6%8C%87%E4%BB%A4.html",relativePath:"zh/6 Enjoy 模板引擎/6.4 指令.md",key:"v-327b0166",path:"/zh/6%20Enjoy%20%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/6.4%20%E6%8C%87%E4%BB%A4.html",headers:[{level:3,title:"1、输出指令#( )",slug:"_1、输出指令",normalizedTitle:"1、输出指令#( )",charIndex:453},{level:3,title:"2、#if 指令",slug:"_2、-if-指令",normalizedTitle:"2、#if 指令",charIndex:1263},{level:3,title:"3、#for 指令",slug:"_3、-for-指令",normalizedTitle:"3、#for 指令",charIndex:1694},{level:3,title:"4、#switch 指令（3.6 版本新增指令）",slug:"_4、-switch-指令-3-6-版本新增指令",normalizedTitle:"4、#switch 指令（3.6 版本新增指令）",charIndex:3991},{level:3,title:"5、#set 指令",slug:"_5、-set-指令",normalizedTitle:"5、#set 指令",charIndex:4608},{level:3,title:"6、#include 指令",slug:"_6、-include-指令",normalizedTitle:"6、#include 指令",charIndex:5518},{level:3,title:"7、#render 指令",slug:"_7、-render-指令",normalizedTitle:"7、#render 指令",charIndex:6393},{level:3,title:"8、#define 指令",slug:"_8、-define-指令",normalizedTitle:"8、#define 指令",charIndex:6645},{level:3,title:"9、模板函数调用与 #call 指令",slug:"_9、模板函数调用与-call-指令",normalizedTitle:"9、模板函数调用与 #call 指令",charIndex:8437},{level:3,title:"10、#date 指令",slug:"_10、-date-指令",normalizedTitle:"10、#date 指令",charIndex:9832},{level:3,title:"11、#number 指令",slug:"_11、-number-指令",normalizedTitle:"11、#number 指令",charIndex:10577},{level:3,title:"12､#escape 指令",slug:"_12、-escape-指令",normalizedTitle:"12､#escape 指令",charIndex:11009},{level:3,title:"13、指令扩展",slug:"_13、指令扩展",normalizedTitle:"13、指令扩展",charIndex:11168},{level:3,title:"14､常见错误",slug:"_14、常见错误",normalizedTitle:"14､常见错误",charIndex:13071}],lastUpdated:"9/12/2023, 3:21:39 AM",lastUpdatedTimestamp:1694488899e3,headersStr:"1、输出指令#( ) 2、#if 指令 3、#for 指令 4、#switch 指令（3.6 版本新增指令） 5、#set 指令 6、#include 指令 7、#render 指令 8、#define 指令 9、模板函数调用与 #call 指令 10、#date 指令 11、#number 指令 12､#escape 指令 13、指令扩展 14､常见错误",content:'# 6.4 指令\n\nEnjoy Template Engine一如既往地坚持极简设计，核心只有 #if、#for、#switch、#set、#include、#define、#(…) 这七个指令，便实现了传统模板引擎几乎所有的功能，用户如果有任意一门程序语言基础，学习成本几乎为零。\n\n如果官方提供的指令无法满足需求，还可以极其简单地在模板语言的层面对指令进行扩展，在com.jfinal.template.ext.directive 包下面就有五个扩展指令，Active Record 的 sql 模块也针对sql管理功能扩展了三个指令，参考这些扩展指令的代码，便可无师自通，极为简单。\n\n注意，Enjoy 模板引擎指令的扩展是在词法分析、语法分析的层面进行扩展，与传统模板引擎的自定义标签类的扩展完全不是一个级别，前者可以极为全面和自由的利用模板引擎的基础设施，在更加基础的层面以极为简单直接的代码实现千变万化的功能。参考 Active Record的 sql 管理模块，则可知其强大与便利。\n\n\n# 1、输出指令#( )\n\n与几乎所有 java 模板引擎不同，Enjoy Template Engine消灭了插值指令这个原本独立的概念，而是将其当成是所有指令中的一员，仅仅是指令名称省略了而已。因此，该指令的定界符与普通指令一样为小括号，从而不必像其它模板引擎一样引入额外的如大括号般的定界符。\n\n#(…) 输出指令的使用极为简单，只需要为该指令传入前面6.4节中介绍的任何表达式即可，指令会将这些表达式的求值结果进行输出，特别注意，当表达式的值为 null 时没有任何输出，更不会报异常。所以，对于 #(value) 这类输出不需要对 value 进行 null 值判断，如下是代码示例：\n\n#(value)\n#(object.field)\n#(object.field ??)\n#(a > b ? x : y)\n#(seoTitle ?? "JFinal 俱乐部")\n#(object.method(), null)\n\n\n1\n2\n3\n4\n5\n6\n\n\n如上图所示，只需要对输出指令传入表达式即可。注意上例中第一行代码 value 参数可以为 null，而第二行代码中的 object 为 null 时将会报异常，此时需要使用第三行代码中的空合安全取值调用运算符：object.field ??\n\n此外，注意上图最后一行代码中的输出指令参数为一个逗号表达式，逗号表达式的整体求值结果为最后一个表达式的值，而输出指令对于null值不做输出，所以这行代码相当于是仅仅调用了 object.method() 方法去实现某些操作。\n\n输出指令可以自由定制，只需要继承 OutputDirectiveFactory 类并覆盖其中的 getOutputDirective 方法，然后在 configEngine(Engine me)方法中，通过 me. setOutputDirectiveFactory(…) 切换即可。\n\n\n# 2、#if 指令\n\n直接举例：\n\n#if(cond)\n  ...\n#end\n\n\n1\n2\n3\n\n\n如上所示，if指令需要一个 cond 表达式作为参数，并且以 #end 为结尾符，cond 可以为 6.3 章节中介绍的所有表达式，包括逗号表达式，当 cond 求值为 true 时，执行 if 分支之中的代码。\n\nif 指令必然支持 #else if 与 #else 分支块结构，以下是示例：\n\n#if(c1)\n  ...\n#else if(c2)\n  ...\n#else if (c3)\n  ...\n#else\n  ...\n#end\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n由于#else if、#else用法与java语法完全一样，在此不在赘述。（注意：jfinal 3.3 之前的版本 #else if 之间不能有空格字符需要写成：#elseif，否则会报异常：Can not match the #end of directive #if ）\n\n\n# 3、#for 指令\n\nEnjoy Template Engine 对 for 指令进行了极为人性化的扩展，可以对任意类型数据进行迭代输出，包括支持 null 值迭代。以下是代码示例：\n\n// 对 List、数组、Set 这类结构进行迭代\n#for(x : list)\n  #(x.field)\n#end\n\n// 对 Map 进行迭代\n#for(x : map)\n  #(x.key)\n  #(x.value)\n#end\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上例代码中的第一个 for 指令是对 list 进行迭代，用法与 java 语法完全一样。\n\n第二个 for 指令是对 map 进行迭代，取值方式为 item.key 与 item.value。该取值方式是 enjoy 对 map 迭代的增强功能，可以节省代码量。仍然也可以使用传统的 java map 迭代方式：#for( x : map.entrySet() ) #(x.key) #(x.value) #end\n\n注意：当被迭代的目标为 null 时，不需要做 null 值判断，for 指令会自动跳过，不进行迭代。从而可以避免 if 判断，节省代码提高效率。\n\nfor指令还支持对其状态进行获取，代码示例：\n\n#for(x : listAaa)\n  #(for.index)\n  #(x.field)\n  \n  #for(x : listBbb)\n     #(for.outer.index)\n     #(for.index)\n     #(x.field)\n  #end\n#end\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n以上代码中的 #(for.index)、#(for.outer.index) 是对 for 指令当前状态值进行获取，前者是获取当前 for 指令迭代的下标值(从0开始的整数)，后者是内层for指令获取上一层for指令的状态。这里注意 for.outer 这个固定的用法，专门用于在内层 for 指令中引用上层for指令状态。\n\n注意：for指令嵌套时，各自拥有自己的变量名作用域，规则与java语言一致，例如上例中的两个#(x.field)处在不同的for指令作用域内，会正确获取到所属作用域的变量值。\n\nfor指令支持的所有状态值如下示例：\n\n#for(x : listAaa)\n   #(for.size)    被迭代对象的 size 值\n   #(for.index)   从 0 开始的下标值\n   #(for.count)   从 1 开始的记数值\n   #(for.first)   是否为第一次迭代\n   #(for.last)    是否为最后一次迭代\n   #(for.odd)     是否为奇数次迭代\n   #(for.even)    是否为偶数次迭代\n   \n   #(for.outer)        引用上层 #for 指令状态\n   #(for.outer.size)   引用上层 #for 指令被迭代对象的 size 值\n#end\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n具体用法在上面代码中用中文进行了说明，在此不再赘述。\n\n除了 Map、List 以外，for指令还支持 Collection、Iterator、array 普通数组、Iterable、Enumeration、null 值的迭代，用法在形式上与前面的List迭代完全相同，都是 #for(id : target) 的形式，对于 null 值，for指令会直接跳过不迭代。\n\n此外，for指令还支持对任意类型进行迭代，此时仅仅是对该对象进行一次性迭代，如下所示：\n\n#for(x : article)\n   #(x.title)\n#end\n\n\n1\n2\n3\n\n\n上例中的article为一个普通的java对象，而非集合类型对象，for循环会对该对象进行一次性迭代操作，for表达式中的x即为article对象本身，所以可以使用 #(x.title) 进行输出。\n\nfor 指令还支持 #else 分支语句，在for指令迭代次数为0时，将执行 #else 分支内部的语句，如下是示例：\n\n#for(blog : blogList)\n   #(blog.title)\n#else\n\n您还没有写过博客，点击此处<a href="/blog/add">开博</a>\n\n#end\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n以上代码中，当blogList.size() 为0或者blogList为null值时，也即迭代次数为0时，会执行#else分支，这种场景在web项目中极为常见。\n\n最后，除了上面介绍的for指令迭代用法以外，还支持更常规的for语句形式，以下是代码示例：\n\n#for(i = 0; i < 100; i++)\n   #(i)\n#end\n\n\n1\n2\n3\n\n\n与java语法基本一样，唯一的不同是变量声明不需要类型，直接用赋值语句即可，Enjoy Template Engine中的变量是动态弱类型。\n\n注意：以上这种形式的for语句，比前面的for迭代少了for.size与for.last两个状态，只支持如下几个状态：for.index、for.count、for.first、for.odd、for.even、for.outer\n\n#for 指令还支持 #continue、#break 指令，用法与java完全一致，在此不再赘述。\n\n\n# 4、#switch 指令（3.6 版本新增指令）\n\n#switch 指令对标 java 语言的 switch 语句。基本用法一致，但做了少许提升用户体验的改进，用法如下：\n\n#switch (month)\n  #case (1, 3, 5, 7, 8, 10, 12)\n    #(month) 月有 31 天\n  #case (2)\n    #(month) 月平年有28天，闰年有29天\n  #default\n    月份错误: #(month ?? "null")\n#end\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n如上代码所示，#case 分支指令支持以逗号分隔的多个参数，这个功能就消解掉了 #break 指令的必要性，所以 enjoy 模板引擎是不需要 #break 指令的。\n\n#case 指令参数还可以是任意表达式，例如：\n\n#case (a, b, x + y, "abc", "123")\n\n\n1\n\n\n上述代码中用逗号分隔的表达式先会被求值，然后再逐一与 #switch(value) 指令中的 value 进行比较，只要有一个值与其相等则该 case 分支会被执行。\n\n#case 支持逗号分隔的多参数，从而无需引入 #break 指令，不仅减少了代码量，而且避免了忘写 #break 指令时带来的错误隐患。还有一个与 java 语法有区别的地方是 #case、#default 指令都未使用冒号字符。\n\n\n# 5、#set 指令\n\nset指令用于声明变量同时对其赋值，也可以是为已存在的变量进行赋值操作。set指令只接受赋值表达式，以及用逗号分隔的赋值表达式列表，如下是代码示例：\n\n#set(x = 123)\n#set(a = 1, b = 2, c = a + b)\n#set(array[0] = 123)\n#set(map["key"] = 456)\n \n#(x)  #(c)  #(array[0])  #(map.key)  #(map["key"])\n\n\n1\n2\n3\n4\n5\n6\n\n\n以上代码中，第一行代码最为简单为x赋值为123，第二行代码是一个赋值表达式列表，会从左到右依次执行赋值操作，如果等号右边出现表达式，将会对表达式求值以后再赋值。最后一行代码是输出上述赋值以后各变量的值，其她所有指令也可以像输出指令一样进行变量的访问。\n\n请注意，#for、#include、#define这三个指令会开启新的变量名作用域，#set指令会首先在本作用域中查找变量是否存在，如果存在则对本作用域中的变量进行操作，否则继续向上层作用域查找，找到则操作，如果找不到，则将变量定义在顶层作用域中，这样设计非常有利于在模板中传递变量的值。\n\n当需要明确指定在本层作用域赋值时，可以使用#setLocal指令，该指令所需参数与用法与#set指令完全一样，只不过作用域被指定为当前作用域。#setLocal 指令通常用于#define、#include指令之内，用于实现模块化，从而希望其中的变量名不会与上层作用域发生命名上的冲突。\n\n重要：由于赋值表达式本质也是表达式，而其它指令本质上支持任意表达式，所以 #set 指令对于赋值来说并不是必须的，例如可以在 #() 输出指令中使用赋值表达式：\n\n#(x = 123, y = "abc", array = [1, "a", true], map = {k1:v1}, null)\n\n\n1\n\n\n以上代码在输出指令中使用了多个赋值表达式，可以实现 #set 的功能，在最后通过一个 null 值来避免输出表达式输出任何东西。类似的，别的指令内部也可以这么来使用赋值表达式。\n\n\n# 6、#include 指令\n\ninclude指令用于将外部模板内容包含进来，被包含的内容会被解析成为当前模板中的一部分进行使用，如下是代码示例：\n\n#include("sidebar.html")\n\n\n1\n\n\n#include 指令第一个参数必须为 String 常量，当以 ”/” 打头时将以 baseTemplatePath 为相对路径去找文件，否则将以使用 #include 指令的当前模板的路径为相对路径去找文件。\n\nbaseTemplatePath 可以在 configEngine(Engine me) 中通过 me.setBaseTemplatePath(…) 进行配置。\n\n此外，include指令支持传入无限数量的赋值表达式，十分有利于模块化，例如：如下名为 ”_hot_list.html” 的模板文件用于展示热门项目、热门新闻等等列表：\n\n<div class="hot-list">\n  <h3>#(title)</h3>\n  <ul>\n    #for(x : list)\n    <li>\n      <a href="#(url)/#(x.id)">#(x.title)</a>\n    </li>\n    #end\n  </ul>\n</div>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上图中的 title、list、url 是该html片段需要的变量，使用include指令分别渲染“热门项目”与“热门新闻”的用法如下：\n\n#include("_hot_list.html", title="热门项目", list=projectList, url="/project")\n#include("_hot_list.html", title="热门新闻", list=newsList, url="/news")\n\n\n1\n2\n\n\n上面两行代码中，为“_hot_list.html”中用到的三个变量title、list、url分别传入了不同的值，实现了对“_hot_list.html”的模块化重用。\n\n\n# 7、#render 指令\n\nrender指令在使用上与include指令几乎一样，同样也支持无限量传入赋值表达式参数，主要有两点不同：\n\nrender指令支持动态化模板参数，例如：#render(temp)，这里的temp可以是任意表达式，而#include指令只能使用字符串常量：#include(“abc.html”)\n\nrender指令中#define定义的模板函数只在其子模板中有效，在父模板中无效，这样设计非常有利于模块化\n\n引入 #render 指令的核心目的在于支持动态模板参数。\n\n\n# 8、#define 指令\n\n#define指令是模板引擎主要的扩展方式之一，define指令可以定义模板函数(Template Function)。通过define指令，可以将需要被重用的模板片段定义成一个一个的 template function，在调用的时候可以通过传入参数实现千变万化的功能。\n\n在此给出使用define指令实现的layout功能，首先创建一个layout.html文件，其中的代码如下：\n\n#define layout()\n<html>\n  <head>\n    <title>JFinal俱乐部</title>\n  </head>\n  <body>\n    #@content()\n  </body>\n</html>\n#end\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n以上代码中通过#define layout()定义了一个名称为layout的模板函数，定义以#end结尾，其中的 #@content() 表示调用另一个名为 content 的模板函数。\n\n特别注意：模板函数的调用比指令调用多一个@字符，是为了与指令调用区分开来。\n\n接下来再创建一个模板文件，如下所示：\n\n#include("layout.html")\n#@layout()\n \n#define content()\n<div>\n   这里是模板内容部分，相当于传统模板引擎的 nested 的部分\n</div>\n#end\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上图中的第一行代码表示将前面创建的模板文件layout.html包含进来，第二行代码表示调用layout.html中定义的layout模板函数，而这个模板函数中又调用了content这个模板函数，该content函数已被定义在当前文件中，简单将这个过程理解为函数定义与函数调用就可以了。注意，上例实现layout功能的模板函数、模板文件名称可以任意取，不必像velocity、freemarker需要记住 nested、layoutContent这样无聊的概念。\n\n通常作为layout的模板文件会在很多模板中被使用，那么每次使用时都需要#include指令进行包含，本质上是一种代码冗余，可以在configEngine(Engine me)方法中，通过me.addSharedFunction("layout.html")方法，将该模板中定义的所有模板函数设置为共享的，那么就可以省掉#include(…)，通过此方法可以将所有常用的模板函数全部定义成类似于共享库这样的集合，极大提高重用度、减少代码量、提升开发效率。\n\nEnjoy Template Engine彻底消灭掉了layout、nested、macro这些无聊的概念，极大降低了学习成本，并且极大提升了扩展能力。模板引擎本质是一门程序语言，任何可用于生产环境的语言可以像呼吸空气一样自由地去实现 layout 这类功能。\n\n此外，模板函数必然支持形参，用法与java规则基本相同，唯一不同的是不需要指定参数类型，只需要参数名称即可，如下是代码示例：\n\n#define test(a, b, c)\n   #(a)\n   #(b)\n   #(c)\n#end\n\n\n1\n2\n3\n4\n5\n\n\n以上代码中的模板函数test，有a、b、c三个形参，在函数体内仅简单对这三个变量进行了输出，注意形参必须是合法的java标识符，形参的作用域为该模板函数之内符合绝大多数程序语言习惯，以下是调用该模板函数的例子代码：\n\n#@test(123, "abc", user.name)\n\n\n1\n\n\n以上代码中，第一个参数传入的整型123，第二个是字符串，第三个是一个 field 取值表达式，从例子可以看出，实参可以是任意表达式，在调用时模板引擎会对表达式求值，并逐一赋值给模板函数的形参。\n\n注意：形参与实参数量要相同，如果实参偶尔有更多不确定的参数要传递进去，可以在调用模板函数代码之前使用#set指令将值传递进去，在模板函数内部可用空合安全取值调用表达式进行适当控制，具体用法参考 jfinal-club 项目中的 _paginate.html 中的 append 变量的用法。\n\ndefine 还支持 return 指令，可以在模板函数中返回，但不支持返回值。\n\n\n# 9、模板函数调用与 #call 指令\n\n调用define定义的模板函数的格式为：#@name(p1, p2…, pn)，模板函数调用比指令调用多一个@字符，多出的@字符用来与指令调用区别开来。\n\n此外，模板函数还支持安全调用，格式为：#@name?(p1, p2…, pn)，安全调用只需在模板函数名后面添加一个问号即可。安全调用是指当模板函数未定义时不做任何操作。\n\n安全调用适合用于一些模板中可有可无的内容部分，以下是一个典型应用示例：\n\n#define layout()\n<html>\n  <head>\n    <link rel="stylesheet" type="text/css" href="/assets/css/jfinal.css">\n    #@css?()\n  </head>\n \n  <body>\n    <div class="content">\n      #@main()\n    </div>\n   \n    <script type="text/javascript" src="/assets/js/jfinal.js"><\/script>\n    #@js?()\n  </body>\n </html>\n#end\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n以上代码示例定义了一个web应用的layout模板，注意看其中的两处：#@css?() 与 #@js?() 就是模板函数安全调用。\n\n上述模板中引入的 jfinal.css 与 jfinal.js 是两个必须的资源文件，对大部分模块已经满足需要，但对于有些模块，除了需要这两个必须的资源文件以外，还需要额外的资源文件，那么就可以通过#define css() 与 #define js() 来提供，如下是代码示例：\n\n#@layout()   ### 调用 layout.html 中定义的模板函数 layout() \n\n#define main()\n   这里是 body 中的内容块\n#end\n \n#define css()\n   这里可以引入额外的 css 内容\n#end\n \n#define js()\n   这里可以引入额外的 js 内容\n#end\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n以上代码中先是通过#@layout()调用了前面定义过的layout()这个模板函数，而这个模板函数中又分别调用了#@main()、#@css?()、#@js?()这三个模板函数，其中后两个是安全调用，所以对于不需要额外的css、js文件的模板，则不需要定义这两个方法，安全调用在调用不存在的模板函数时会直接跳过。\n\n#call 指令是 jfinal 3.6 版本新增指令，使用 #call 指令，模板函数的名称与参数都可以动态指定，提升模板函数调用的灵活性，用法如下：\n\n#call(funcName, p1, p2, ..., pn)\n\n\n1\n\n\n上述代码中的 funcName 为函数名，p1、p2、pn 为被调用函数所使用的参数。如果希望模板函数不存在时忽略其调用，添加常量值 true 在第一个参数位置即可：\n\n#call(true, funcName, p1, p2, ..., pn)\n\n\n1\n\n\n\n# 10、#date 指令\n\ndate指令用于格式化输出日期型数据，包括Date、Timestamp等一切继承自Date类的对象的输出，使用方式极其简单：\n\n#date(account.createAt)\n#date(account.createAt, "yyyy-MM-dd HH:mm:ss")\n\n\n1\n2\n\n\n上面的第一行代码只有一个参数，那么会按照默认日期格式进行输出，默认日期格式为：“yyyy-MM-dd HH:mm”。上面第二行代码则会按第二个参数指定的格式进行输出。\n\n如果希望改变默认输出格式，只需要通过engine.setDatePattern()进行配置即可。\n\nkeepPara 问题：如果日期型表单域提交到后端，而后端调用了 Controller 的 keepPara() 方法，会将这个日期型数据转成 String 类型，那么 #date(...) 指令在输出这个 keepPara 过来的 String 时就会抛出异常，对于这种情况可以指令 keep 住其类型：\n\n// keepPara() 用来 keep 住所有表单提交数据，全部转换成 String 类型\nkeepPara();\n \n// 再用一次带参的 keepPara，指定 createAt 域 keep 成 Date 类型\nkeepPara(Date.class, "createAt");\n\n\n1\n2\n3\n4\n5\n\n\n如上所示，第二行代码用 Date.class 参数额外指定了 createAt 域 keep 成 Date 类型，那么在页面 #date(createAt) 指令就不会抛出异常了。keepModel(...)、keepBean(...) 会保持原有类型，无需做上述处理。\n\n\n# 11、#number 指令\n\nnumber 指令用于格式化输出数字型数据，包括 Double、Float、Integer、Long、BigDecimal 等一切继承自Number类的对象的输出，使用方式依然极其简单：\n\n#number(3.1415926, "#.##")\n#number(0.9518, "#.##%")\n#number(123456789, ",###")\n#number(300000, "光速为每秒，### 公里。")\n\n\n1\n2\n3\n4\n\n\n上面的 #number指令第一个参数为数字类型，第二个参数为String类型的pattern。Pattern参数的用法与JDK中DecimalFormat中pattern的用法完全一样。当不知道如何使用pattern时可以在搜索引擎中搜索关键字DecimalFormat，可以找到非常多的资料。\n\n#number指令的两个参数可以是变量或者复杂表达式，上例参数中使用常量仅为了方便演示。\n\n\n# 12､#escape 指令\n\nescape 指令用于 html 安全转义输出，可以消除 XSS 攻击。escape 将类似于 html 形式的数据中的大于号、小于号这样的字符进行转义，例如将小于号转义成：< 将空格转义成  \n\n使用方式与输出指令类似：\n\n#escape(blog.content)\n\n\n1\n\n\n\n# 13、指令扩展\n\n由于采用独创的 DKFF 和 DLRD 算法，Enjoy Template Engine 可以极其便利地在语言层面对指令进行扩展，而代码量少到不可想象的地步，学习成本无限逼近于 0。以下是一个代码示例：\n\npublic class NowDirective extends Directive {\n  public void exec(Env env, Scope scope, Writer writer) {\n    write(writer, new Date().toString());\n  }\n}\n\n\n1\n2\n3\n4\n5\n\n\n以上代码中，通过继承Directive并实现exec方法，三行代码即实现一个#now指令，可以向模板中输出当前日期，在使用前只需通过me.addDirective(“now”, NowDirective.class) 添加到模板引擎中即可。以下是在模板中使用该指令的例子：\n\n今天的日期是： #now()\n\n\n1\n\n\n除了支持上述无#end块，也即无指令body的指令外，Enjoy Template Engine还直接支持包含#end与body的指令，以下是示例：\n\npublic class Demo extends Directive {\n \n  // ExprList 代表指令参数表达式列表\n  public void setExprList(ExprList exprList) {\n    // 在这里可以对 exprList 进行个性化控制\n    super.setExprList(exprList);\n  }\n  \n  public void exec(Env env, Scope scope, Writer writer) {\n    write(writer, "body 执行前");\n    stat.exec(env, scope, writer);  // 执行 body\n    write(writer, "body 执行后");\n  }\n  \n  public boolean hasEnd() {\n    return true;  // 返回 true 则该指令拥有 #end 结束标记\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n如上所示，Demo继承Directive覆盖掉父类中的hasEnd方法，并返回true，表示该扩展指令具有#end结尾符。上例中public void exec 方法中的三行代码，其中stat.exec(…)表示执行指令body中的代码，而该方法前后的write(…)方法分别输出一个字符串，最终的输出结果详见后面的使用示例。此外通过覆盖父类的setExprList(…)方法可以对指令的参数进行控制，该方法并不是必须的。\n\n通过me.addDirective(“demo”, Demo.class)添加到引擎以后，就可以像如下代码示例中使用：\n\n#demo()\n 这里是 demo body 的内容\n#end\n\n\n1\n2\n3\n\n\n最后的输出结果如下：\n\nbody 执行前\n 这里是 demo body 的内容\nbody 执行后\n\n\n1\n2\n3\n\n\n上例中的#demo指令body中包含一串字符，将被Demo.exec(…)方法中的stat.exec(…)所执行，而stat.exec(…)前后的write(…)两个方法调用产生的结果与body产生的结果生成了最终的结果。\n\n重要：指令中声明的属性是全局共享的，所以要保障指令中的属性是线程安全的。如下代码以 com.jfinal.template.ext.directive.DateDirective 的代码片段为例：\n\npublic class DateDirective extends Directive {\n\t\n   private Expr valueExpr;\n   private Expr datePatternExpr;\n   private int paraNum;\n \n   ...\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n以上代码中有三个属性，类型是 Expr、Expr、int，其中 Expr 是线程安全的，而 int paraNum 虽然表面上看不是线程安全的，但在整个 DateDirective 类中只有构造方法对该值初始化的时候有写入操作，其它所有地方都是读操作，所以该 int 属性在这里是线程安全的。\n\n\n# 14､常见错误\n\nEnjoy 模板引擎的使用过程中最常见的错误就是分不清 “表达式” 与 “非表达式”，所谓表达式是指模板函数调用、指令调用时小括号里面的所有东西，例如：\n\n#directiveName(这里所有东西是表达式)\n#@functionName(这里所有东西是表达式)\n\n\n1\n2\n\n\n上例中的两行代码分别是调用指令与调用模板函数，小括号内的东西是表达式，而表达式的用法与 Java 几乎一样，该这么来用：\n\n#directiveName( user.name )\n\n\n1\n\n\n最常见错误的用法如下：\n\n#directiveName ( #(user.name) )\n\n\n1\n\n\n简单来说这种错误就是在该使用表达式的地方使用指令，在表达式中永远不要出现字符 \'#\'，而是直接使用 java 表达式。',normalizedContent:'# 6.4 指令\n\nenjoy template engine一如既往地坚持极简设计，核心只有 #if、#for、#switch、#set、#include、#define、#(…) 这七个指令，便实现了传统模板引擎几乎所有的功能，用户如果有任意一门程序语言基础，学习成本几乎为零。\n\n如果官方提供的指令无法满足需求，还可以极其简单地在模板语言的层面对指令进行扩展，在com.jfinal.template.ext.directive 包下面就有五个扩展指令，active record 的 sql 模块也针对sql管理功能扩展了三个指令，参考这些扩展指令的代码，便可无师自通，极为简单。\n\n注意，enjoy 模板引擎指令的扩展是在词法分析、语法分析的层面进行扩展，与传统模板引擎的自定义标签类的扩展完全不是一个级别，前者可以极为全面和自由的利用模板引擎的基础设施，在更加基础的层面以极为简单直接的代码实现千变万化的功能。参考 active record的 sql 管理模块，则可知其强大与便利。\n\n\n# 1、输出指令#( )\n\n与几乎所有 java 模板引擎不同，enjoy template engine消灭了插值指令这个原本独立的概念，而是将其当成是所有指令中的一员，仅仅是指令名称省略了而已。因此，该指令的定界符与普通指令一样为小括号，从而不必像其它模板引擎一样引入额外的如大括号般的定界符。\n\n#(…) 输出指令的使用极为简单，只需要为该指令传入前面6.4节中介绍的任何表达式即可，指令会将这些表达式的求值结果进行输出，特别注意，当表达式的值为 null 时没有任何输出，更不会报异常。所以，对于 #(value) 这类输出不需要对 value 进行 null 值判断，如下是代码示例：\n\n#(value)\n#(object.field)\n#(object.field ??)\n#(a > b ? x : y)\n#(seotitle ?? "jfinal 俱乐部")\n#(object.method(), null)\n\n\n1\n2\n3\n4\n5\n6\n\n\n如上图所示，只需要对输出指令传入表达式即可。注意上例中第一行代码 value 参数可以为 null，而第二行代码中的 object 为 null 时将会报异常，此时需要使用第三行代码中的空合安全取值调用运算符：object.field ??\n\n此外，注意上图最后一行代码中的输出指令参数为一个逗号表达式，逗号表达式的整体求值结果为最后一个表达式的值，而输出指令对于null值不做输出，所以这行代码相当于是仅仅调用了 object.method() 方法去实现某些操作。\n\n输出指令可以自由定制，只需要继承 outputdirectivefactory 类并覆盖其中的 getoutputdirective 方法，然后在 configengine(engine me)方法中，通过 me. setoutputdirectivefactory(…) 切换即可。\n\n\n# 2、#if 指令\n\n直接举例：\n\n#if(cond)\n  ...\n#end\n\n\n1\n2\n3\n\n\n如上所示，if指令需要一个 cond 表达式作为参数，并且以 #end 为结尾符，cond 可以为 6.3 章节中介绍的所有表达式，包括逗号表达式，当 cond 求值为 true 时，执行 if 分支之中的代码。\n\nif 指令必然支持 #else if 与 #else 分支块结构，以下是示例：\n\n#if(c1)\n  ...\n#else if(c2)\n  ...\n#else if (c3)\n  ...\n#else\n  ...\n#end\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n由于#else if、#else用法与java语法完全一样，在此不在赘述。（注意：jfinal 3.3 之前的版本 #else if 之间不能有空格字符需要写成：#elseif，否则会报异常：can not match the #end of directive #if ）\n\n\n# 3、#for 指令\n\nenjoy template engine 对 for 指令进行了极为人性化的扩展，可以对任意类型数据进行迭代输出，包括支持 null 值迭代。以下是代码示例：\n\n// 对 list、数组、set 这类结构进行迭代\n#for(x : list)\n  #(x.field)\n#end\n\n// 对 map 进行迭代\n#for(x : map)\n  #(x.key)\n  #(x.value)\n#end\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上例代码中的第一个 for 指令是对 list 进行迭代，用法与 java 语法完全一样。\n\n第二个 for 指令是对 map 进行迭代，取值方式为 item.key 与 item.value。该取值方式是 enjoy 对 map 迭代的增强功能，可以节省代码量。仍然也可以使用传统的 java map 迭代方式：#for( x : map.entryset() ) #(x.key) #(x.value) #end\n\n注意：当被迭代的目标为 null 时，不需要做 null 值判断，for 指令会自动跳过，不进行迭代。从而可以避免 if 判断，节省代码提高效率。\n\nfor指令还支持对其状态进行获取，代码示例：\n\n#for(x : listaaa)\n  #(for.index)\n  #(x.field)\n  \n  #for(x : listbbb)\n     #(for.outer.index)\n     #(for.index)\n     #(x.field)\n  #end\n#end\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n以上代码中的 #(for.index)、#(for.outer.index) 是对 for 指令当前状态值进行获取，前者是获取当前 for 指令迭代的下标值(从0开始的整数)，后者是内层for指令获取上一层for指令的状态。这里注意 for.outer 这个固定的用法，专门用于在内层 for 指令中引用上层for指令状态。\n\n注意：for指令嵌套时，各自拥有自己的变量名作用域，规则与java语言一致，例如上例中的两个#(x.field)处在不同的for指令作用域内，会正确获取到所属作用域的变量值。\n\nfor指令支持的所有状态值如下示例：\n\n#for(x : listaaa)\n   #(for.size)    被迭代对象的 size 值\n   #(for.index)   从 0 开始的下标值\n   #(for.count)   从 1 开始的记数值\n   #(for.first)   是否为第一次迭代\n   #(for.last)    是否为最后一次迭代\n   #(for.odd)     是否为奇数次迭代\n   #(for.even)    是否为偶数次迭代\n   \n   #(for.outer)        引用上层 #for 指令状态\n   #(for.outer.size)   引用上层 #for 指令被迭代对象的 size 值\n#end\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n具体用法在上面代码中用中文进行了说明，在此不再赘述。\n\n除了 map、list 以外，for指令还支持 collection、iterator、array 普通数组、iterable、enumeration、null 值的迭代，用法在形式上与前面的list迭代完全相同，都是 #for(id : target) 的形式，对于 null 值，for指令会直接跳过不迭代。\n\n此外，for指令还支持对任意类型进行迭代，此时仅仅是对该对象进行一次性迭代，如下所示：\n\n#for(x : article)\n   #(x.title)\n#end\n\n\n1\n2\n3\n\n\n上例中的article为一个普通的java对象，而非集合类型对象，for循环会对该对象进行一次性迭代操作，for表达式中的x即为article对象本身，所以可以使用 #(x.title) 进行输出。\n\nfor 指令还支持 #else 分支语句，在for指令迭代次数为0时，将执行 #else 分支内部的语句，如下是示例：\n\n#for(blog : bloglist)\n   #(blog.title)\n#else\n\n您还没有写过博客，点击此处<a href="/blog/add">开博</a>\n\n#end\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n以上代码中，当bloglist.size() 为0或者bloglist为null值时，也即迭代次数为0时，会执行#else分支，这种场景在web项目中极为常见。\n\n最后，除了上面介绍的for指令迭代用法以外，还支持更常规的for语句形式，以下是代码示例：\n\n#for(i = 0; i < 100; i++)\n   #(i)\n#end\n\n\n1\n2\n3\n\n\n与java语法基本一样，唯一的不同是变量声明不需要类型，直接用赋值语句即可，enjoy template engine中的变量是动态弱类型。\n\n注意：以上这种形式的for语句，比前面的for迭代少了for.size与for.last两个状态，只支持如下几个状态：for.index、for.count、for.first、for.odd、for.even、for.outer\n\n#for 指令还支持 #continue、#break 指令，用法与java完全一致，在此不再赘述。\n\n\n# 4、#switch 指令（3.6 版本新增指令）\n\n#switch 指令对标 java 语言的 switch 语句。基本用法一致，但做了少许提升用户体验的改进，用法如下：\n\n#switch (month)\n  #case (1, 3, 5, 7, 8, 10, 12)\n    #(month) 月有 31 天\n  #case (2)\n    #(month) 月平年有28天，闰年有29天\n  #default\n    月份错误: #(month ?? "null")\n#end\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n如上代码所示，#case 分支指令支持以逗号分隔的多个参数，这个功能就消解掉了 #break 指令的必要性，所以 enjoy 模板引擎是不需要 #break 指令的。\n\n#case 指令参数还可以是任意表达式，例如：\n\n#case (a, b, x + y, "abc", "123")\n\n\n1\n\n\n上述代码中用逗号分隔的表达式先会被求值，然后再逐一与 #switch(value) 指令中的 value 进行比较，只要有一个值与其相等则该 case 分支会被执行。\n\n#case 支持逗号分隔的多参数，从而无需引入 #break 指令，不仅减少了代码量，而且避免了忘写 #break 指令时带来的错误隐患。还有一个与 java 语法有区别的地方是 #case、#default 指令都未使用冒号字符。\n\n\n# 5、#set 指令\n\nset指令用于声明变量同时对其赋值，也可以是为已存在的变量进行赋值操作。set指令只接受赋值表达式，以及用逗号分隔的赋值表达式列表，如下是代码示例：\n\n#set(x = 123)\n#set(a = 1, b = 2, c = a + b)\n#set(array[0] = 123)\n#set(map["key"] = 456)\n \n#(x)  #(c)  #(array[0])  #(map.key)  #(map["key"])\n\n\n1\n2\n3\n4\n5\n6\n\n\n以上代码中，第一行代码最为简单为x赋值为123，第二行代码是一个赋值表达式列表，会从左到右依次执行赋值操作，如果等号右边出现表达式，将会对表达式求值以后再赋值。最后一行代码是输出上述赋值以后各变量的值，其她所有指令也可以像输出指令一样进行变量的访问。\n\n请注意，#for、#include、#define这三个指令会开启新的变量名作用域，#set指令会首先在本作用域中查找变量是否存在，如果存在则对本作用域中的变量进行操作，否则继续向上层作用域查找，找到则操作，如果找不到，则将变量定义在顶层作用域中，这样设计非常有利于在模板中传递变量的值。\n\n当需要明确指定在本层作用域赋值时，可以使用#setlocal指令，该指令所需参数与用法与#set指令完全一样，只不过作用域被指定为当前作用域。#setlocal 指令通常用于#define、#include指令之内，用于实现模块化，从而希望其中的变量名不会与上层作用域发生命名上的冲突。\n\n重要：由于赋值表达式本质也是表达式，而其它指令本质上支持任意表达式，所以 #set 指令对于赋值来说并不是必须的，例如可以在 #() 输出指令中使用赋值表达式：\n\n#(x = 123, y = "abc", array = [1, "a", true], map = {k1:v1}, null)\n\n\n1\n\n\n以上代码在输出指令中使用了多个赋值表达式，可以实现 #set 的功能，在最后通过一个 null 值来避免输出表达式输出任何东西。类似的，别的指令内部也可以这么来使用赋值表达式。\n\n\n# 6、#include 指令\n\ninclude指令用于将外部模板内容包含进来，被包含的内容会被解析成为当前模板中的一部分进行使用，如下是代码示例：\n\n#include("sidebar.html")\n\n\n1\n\n\n#include 指令第一个参数必须为 string 常量，当以 ”/” 打头时将以 basetemplatepath 为相对路径去找文件，否则将以使用 #include 指令的当前模板的路径为相对路径去找文件。\n\nbasetemplatepath 可以在 configengine(engine me) 中通过 me.setbasetemplatepath(…) 进行配置。\n\n此外，include指令支持传入无限数量的赋值表达式，十分有利于模块化，例如：如下名为 ”_hot_list.html” 的模板文件用于展示热门项目、热门新闻等等列表：\n\n<div class="hot-list">\n  <h3>#(title)</h3>\n  <ul>\n    #for(x : list)\n    <li>\n      <a href="#(url)/#(x.id)">#(x.title)</a>\n    </li>\n    #end\n  </ul>\n</div>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上图中的 title、list、url 是该html片段需要的变量，使用include指令分别渲染“热门项目”与“热门新闻”的用法如下：\n\n#include("_hot_list.html", title="热门项目", list=projectlist, url="/project")\n#include("_hot_list.html", title="热门新闻", list=newslist, url="/news")\n\n\n1\n2\n\n\n上面两行代码中，为“_hot_list.html”中用到的三个变量title、list、url分别传入了不同的值，实现了对“_hot_list.html”的模块化重用。\n\n\n# 7、#render 指令\n\nrender指令在使用上与include指令几乎一样，同样也支持无限量传入赋值表达式参数，主要有两点不同：\n\nrender指令支持动态化模板参数，例如：#render(temp)，这里的temp可以是任意表达式，而#include指令只能使用字符串常量：#include(“abc.html”)\n\nrender指令中#define定义的模板函数只在其子模板中有效，在父模板中无效，这样设计非常有利于模块化\n\n引入 #render 指令的核心目的在于支持动态模板参数。\n\n\n# 8、#define 指令\n\n#define指令是模板引擎主要的扩展方式之一，define指令可以定义模板函数(template function)。通过define指令，可以将需要被重用的模板片段定义成一个一个的 template function，在调用的时候可以通过传入参数实现千变万化的功能。\n\n在此给出使用define指令实现的layout功能，首先创建一个layout.html文件，其中的代码如下：\n\n#define layout()\n<html>\n  <head>\n    <title>jfinal俱乐部</title>\n  </head>\n  <body>\n    #@content()\n  </body>\n</html>\n#end\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n以上代码中通过#define layout()定义了一个名称为layout的模板函数，定义以#end结尾，其中的 #@content() 表示调用另一个名为 content 的模板函数。\n\n特别注意：模板函数的调用比指令调用多一个@字符，是为了与指令调用区分开来。\n\n接下来再创建一个模板文件，如下所示：\n\n#include("layout.html")\n#@layout()\n \n#define content()\n<div>\n   这里是模板内容部分，相当于传统模板引擎的 nested 的部分\n</div>\n#end\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上图中的第一行代码表示将前面创建的模板文件layout.html包含进来，第二行代码表示调用layout.html中定义的layout模板函数，而这个模板函数中又调用了content这个模板函数，该content函数已被定义在当前文件中，简单将这个过程理解为函数定义与函数调用就可以了。注意，上例实现layout功能的模板函数、模板文件名称可以任意取，不必像velocity、freemarker需要记住 nested、layoutcontent这样无聊的概念。\n\n通常作为layout的模板文件会在很多模板中被使用，那么每次使用时都需要#include指令进行包含，本质上是一种代码冗余，可以在configengine(engine me)方法中，通过me.addsharedfunction("layout.html")方法，将该模板中定义的所有模板函数设置为共享的，那么就可以省掉#include(…)，通过此方法可以将所有常用的模板函数全部定义成类似于共享库这样的集合，极大提高重用度、减少代码量、提升开发效率。\n\nenjoy template engine彻底消灭掉了layout、nested、macro这些无聊的概念，极大降低了学习成本，并且极大提升了扩展能力。模板引擎本质是一门程序语言，任何可用于生产环境的语言可以像呼吸空气一样自由地去实现 layout 这类功能。\n\n此外，模板函数必然支持形参，用法与java规则基本相同，唯一不同的是不需要指定参数类型，只需要参数名称即可，如下是代码示例：\n\n#define test(a, b, c)\n   #(a)\n   #(b)\n   #(c)\n#end\n\n\n1\n2\n3\n4\n5\n\n\n以上代码中的模板函数test，有a、b、c三个形参，在函数体内仅简单对这三个变量进行了输出，注意形参必须是合法的java标识符，形参的作用域为该模板函数之内符合绝大多数程序语言习惯，以下是调用该模板函数的例子代码：\n\n#@test(123, "abc", user.name)\n\n\n1\n\n\n以上代码中，第一个参数传入的整型123，第二个是字符串，第三个是一个 field 取值表达式，从例子可以看出，实参可以是任意表达式，在调用时模板引擎会对表达式求值，并逐一赋值给模板函数的形参。\n\n注意：形参与实参数量要相同，如果实参偶尔有更多不确定的参数要传递进去，可以在调用模板函数代码之前使用#set指令将值传递进去，在模板函数内部可用空合安全取值调用表达式进行适当控制，具体用法参考 jfinal-club 项目中的 _paginate.html 中的 append 变量的用法。\n\ndefine 还支持 return 指令，可以在模板函数中返回，但不支持返回值。\n\n\n# 9、模板函数调用与 #call 指令\n\n调用define定义的模板函数的格式为：#@name(p1, p2…, pn)，模板函数调用比指令调用多一个@字符，多出的@字符用来与指令调用区别开来。\n\n此外，模板函数还支持安全调用，格式为：#@name?(p1, p2…, pn)，安全调用只需在模板函数名后面添加一个问号即可。安全调用是指当模板函数未定义时不做任何操作。\n\n安全调用适合用于一些模板中可有可无的内容部分，以下是一个典型应用示例：\n\n#define layout()\n<html>\n  <head>\n    <link rel="stylesheet" type="text/css" href="/assets/css/jfinal.css">\n    #@css?()\n  </head>\n \n  <body>\n    <div class="content">\n      #@main()\n    </div>\n   \n    <script type="text/javascript" src="/assets/js/jfinal.js"><\/script>\n    #@js?()\n  </body>\n </html>\n#end\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n以上代码示例定义了一个web应用的layout模板，注意看其中的两处：#@css?() 与 #@js?() 就是模板函数安全调用。\n\n上述模板中引入的 jfinal.css 与 jfinal.js 是两个必须的资源文件，对大部分模块已经满足需要，但对于有些模块，除了需要这两个必须的资源文件以外，还需要额外的资源文件，那么就可以通过#define css() 与 #define js() 来提供，如下是代码示例：\n\n#@layout()   ### 调用 layout.html 中定义的模板函数 layout() \n\n#define main()\n   这里是 body 中的内容块\n#end\n \n#define css()\n   这里可以引入额外的 css 内容\n#end\n \n#define js()\n   这里可以引入额外的 js 内容\n#end\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n以上代码中先是通过#@layout()调用了前面定义过的layout()这个模板函数，而这个模板函数中又分别调用了#@main()、#@css?()、#@js?()这三个模板函数，其中后两个是安全调用，所以对于不需要额外的css、js文件的模板，则不需要定义这两个方法，安全调用在调用不存在的模板函数时会直接跳过。\n\n#call 指令是 jfinal 3.6 版本新增指令，使用 #call 指令，模板函数的名称与参数都可以动态指定，提升模板函数调用的灵活性，用法如下：\n\n#call(funcname, p1, p2, ..., pn)\n\n\n1\n\n\n上述代码中的 funcname 为函数名，p1、p2、pn 为被调用函数所使用的参数。如果希望模板函数不存在时忽略其调用，添加常量值 true 在第一个参数位置即可：\n\n#call(true, funcname, p1, p2, ..., pn)\n\n\n1\n\n\n\n# 10、#date 指令\n\ndate指令用于格式化输出日期型数据，包括date、timestamp等一切继承自date类的对象的输出，使用方式极其简单：\n\n#date(account.createat)\n#date(account.createat, "yyyy-mm-dd hh:mm:ss")\n\n\n1\n2\n\n\n上面的第一行代码只有一个参数，那么会按照默认日期格式进行输出，默认日期格式为：“yyyy-mm-dd hh:mm”。上面第二行代码则会按第二个参数指定的格式进行输出。\n\n如果希望改变默认输出格式，只需要通过engine.setdatepattern()进行配置即可。\n\nkeeppara 问题：如果日期型表单域提交到后端，而后端调用了 controller 的 keeppara() 方法，会将这个日期型数据转成 string 类型，那么 #date(...) 指令在输出这个 keeppara 过来的 string 时就会抛出异常，对于这种情况可以指令 keep 住其类型：\n\n// keeppara() 用来 keep 住所有表单提交数据，全部转换成 string 类型\nkeeppara();\n \n// 再用一次带参的 keeppara，指定 createat 域 keep 成 date 类型\nkeeppara(date.class, "createat");\n\n\n1\n2\n3\n4\n5\n\n\n如上所示，第二行代码用 date.class 参数额外指定了 createat 域 keep 成 date 类型，那么在页面 #date(createat) 指令就不会抛出异常了。keepmodel(...)、keepbean(...) 会保持原有类型，无需做上述处理。\n\n\n# 11、#number 指令\n\nnumber 指令用于格式化输出数字型数据，包括 double、float、integer、long、bigdecimal 等一切继承自number类的对象的输出，使用方式依然极其简单：\n\n#number(3.1415926, "#.##")\n#number(0.9518, "#.##%")\n#number(123456789, ",###")\n#number(300000, "光速为每秒，### 公里。")\n\n\n1\n2\n3\n4\n\n\n上面的 #number指令第一个参数为数字类型，第二个参数为string类型的pattern。pattern参数的用法与jdk中decimalformat中pattern的用法完全一样。当不知道如何使用pattern时可以在搜索引擎中搜索关键字decimalformat，可以找到非常多的资料。\n\n#number指令的两个参数可以是变量或者复杂表达式，上例参数中使用常量仅为了方便演示。\n\n\n# 12､#escape 指令\n\nescape 指令用于 html 安全转义输出，可以消除 xss 攻击。escape 将类似于 html 形式的数据中的大于号、小于号这样的字符进行转义，例如将小于号转义成：< 将空格转义成  \n\n使用方式与输出指令类似：\n\n#escape(blog.content)\n\n\n1\n\n\n\n# 13、指令扩展\n\n由于采用独创的 dkff 和 dlrd 算法，enjoy template engine 可以极其便利地在语言层面对指令进行扩展，而代码量少到不可想象的地步，学习成本无限逼近于 0。以下是一个代码示例：\n\npublic class nowdirective extends directive {\n  public void exec(env env, scope scope, writer writer) {\n    write(writer, new date().tostring());\n  }\n}\n\n\n1\n2\n3\n4\n5\n\n\n以上代码中，通过继承directive并实现exec方法，三行代码即实现一个#now指令，可以向模板中输出当前日期，在使用前只需通过me.adddirective(“now”, nowdirective.class) 添加到模板引擎中即可。以下是在模板中使用该指令的例子：\n\n今天的日期是： #now()\n\n\n1\n\n\n除了支持上述无#end块，也即无指令body的指令外，enjoy template engine还直接支持包含#end与body的指令，以下是示例：\n\npublic class demo extends directive {\n \n  // exprlist 代表指令参数表达式列表\n  public void setexprlist(exprlist exprlist) {\n    // 在这里可以对 exprlist 进行个性化控制\n    super.setexprlist(exprlist);\n  }\n  \n  public void exec(env env, scope scope, writer writer) {\n    write(writer, "body 执行前");\n    stat.exec(env, scope, writer);  // 执行 body\n    write(writer, "body 执行后");\n  }\n  \n  public boolean hasend() {\n    return true;  // 返回 true 则该指令拥有 #end 结束标记\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n如上所示，demo继承directive覆盖掉父类中的hasend方法，并返回true，表示该扩展指令具有#end结尾符。上例中public void exec 方法中的三行代码，其中stat.exec(…)表示执行指令body中的代码，而该方法前后的write(…)方法分别输出一个字符串，最终的输出结果详见后面的使用示例。此外通过覆盖父类的setexprlist(…)方法可以对指令的参数进行控制，该方法并不是必须的。\n\n通过me.adddirective(“demo”, demo.class)添加到引擎以后，就可以像如下代码示例中使用：\n\n#demo()\n 这里是 demo body 的内容\n#end\n\n\n1\n2\n3\n\n\n最后的输出结果如下：\n\nbody 执行前\n 这里是 demo body 的内容\nbody 执行后\n\n\n1\n2\n3\n\n\n上例中的#demo指令body中包含一串字符，将被demo.exec(…)方法中的stat.exec(…)所执行，而stat.exec(…)前后的write(…)两个方法调用产生的结果与body产生的结果生成了最终的结果。\n\n重要：指令中声明的属性是全局共享的，所以要保障指令中的属性是线程安全的。如下代码以 com.jfinal.template.ext.directive.datedirective 的代码片段为例：\n\npublic class datedirective extends directive {\n\t\n   private expr valueexpr;\n   private expr datepatternexpr;\n   private int paranum;\n \n   ...\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n以上代码中有三个属性，类型是 expr、expr、int，其中 expr 是线程安全的，而 int paranum 虽然表面上看不是线程安全的，但在整个 datedirective 类中只有构造方法对该值初始化的时候有写入操作，其它所有地方都是读操作，所以该 int 属性在这里是线程安全的。\n\n\n# 14､常见错误\n\nenjoy 模板引擎的使用过程中最常见的错误就是分不清 “表达式” 与 “非表达式”，所谓表达式是指模板函数调用、指令调用时小括号里面的所有东西，例如：\n\n#directivename(这里所有东西是表达式)\n#@functionname(这里所有东西是表达式)\n\n\n1\n2\n\n\n上例中的两行代码分别是调用指令与调用模板函数，小括号内的东西是表达式，而表达式的用法与 java 几乎一样，该这么来用：\n\n#directivename( user.name )\n\n\n1\n\n\n最常见错误的用法如下：\n\n#directivename ( #(user.name) )\n\n\n1\n\n\n简单来说这种错误就是在该使用表达式的地方使用指令，在表达式中永远不要出现字符 \'#\'，而是直接使用 java 表达式。',charsets:{cjk:!0}},{title:"6.5 注释",frontmatter:{},regularPath:"/zh/6%20Enjoy%20%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/6.5%20%E6%B3%A8%E9%87%8A.html",relativePath:"zh/6 Enjoy 模板引擎/6.5 注释.md",key:"v-4d0c018e",path:"/zh/6%20Enjoy%20%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/6.5%20%E6%B3%A8%E9%87%8A.html",lastUpdated:"9/12/2023, 3:21:39 AM",lastUpdatedTimestamp:1694488899e3,headersStr:null,content:'# 6.5 注释\n\nJFinal Template Engine支持单行与多行注释，以下是代码示例：\n\n### 这里是单行注释\n \n#--\n   这里是多行注释的第一行\n   这里是多行注释的第二行\n--#\n\n\n1\n2\n3\n4\n5\n6\n\n\n如上所示，单行注释使用三个#字符，多行注释以#--打头，以--#结尾。\n\n与传统模板引擎不同，这里的单行注释采用三个字符，主要是为了减少与文本内容相冲突的可能性，模板是极其自由化的内容，使用三个字符，冲突的概率降低一个数量级。 jfinal 4.4 之前的版本注意：注释在与指令放在同一行时，输出结果会删掉注释后方的换行字符，例如：\n\n#("AAA") ### 这里是注释\nBBB\n\n\n1\n2\n\n\n以上模板的输出结果是："AAABBB"，如果希望输出结果严格遵守模板中的换行，只需将注释单独放在一行，例如：\n\n### 这里是注释，被单独放在了一行\n#("AAA")\nBBB\n\n\n1\n2\n3\n\n\n以上模板的输出结果将会带有严格的换行，结果如下：\n\nAAA\nBBB\n\n\n1\n2\n\n\n多行注释与单行注释也类似，只需将其单独放即可。\n\n除了以上情况以外，其它任何情况都是严格按模板换行输出的，不必关注。jfinal 4.4 版本解决了此问题，建议升级到 4.4 或更高版本',normalizedContent:'# 6.5 注释\n\njfinal template engine支持单行与多行注释，以下是代码示例：\n\n### 这里是单行注释\n \n#--\n   这里是多行注释的第一行\n   这里是多行注释的第二行\n--#\n\n\n1\n2\n3\n4\n5\n6\n\n\n如上所示，单行注释使用三个#字符，多行注释以#--打头，以--#结尾。\n\n与传统模板引擎不同，这里的单行注释采用三个字符，主要是为了减少与文本内容相冲突的可能性，模板是极其自由化的内容，使用三个字符，冲突的概率降低一个数量级。 jfinal 4.4 之前的版本注意：注释在与指令放在同一行时，输出结果会删掉注释后方的换行字符，例如：\n\n#("aaa") ### 这里是注释\nbbb\n\n\n1\n2\n\n\n以上模板的输出结果是："aaabbb"，如果希望输出结果严格遵守模板中的换行，只需将注释单独放在一行，例如：\n\n### 这里是注释，被单独放在了一行\n#("aaa")\nbbb\n\n\n1\n2\n3\n\n\n以上模板的输出结果将会带有严格的换行，结果如下：\n\naaa\nbbb\n\n\n1\n2\n\n\n多行注释与单行注释也类似，只需将其单独放即可。\n\n除了以上情况以外，其它任何情况都是严格按模板换行输出的，不必关注。jfinal 4.4 版本解决了此问题，建议升级到 4.4 或更高版本',charsets:{cjk:!0}},{title:"6.6 原样输出",frontmatter:{},regularPath:"/zh/6%20Enjoy%20%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/6.6%20%E5%8E%9F%E6%A0%B7%E8%BE%93%E5%87%BA.html",relativePath:"zh/6 Enjoy 模板引擎/6.6 原样输出.md",key:"v-877bae90",path:"/zh/6%20Enjoy%20%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/6.6%20%E5%8E%9F%E6%A0%B7%E8%BE%93%E5%87%BA.html",lastUpdated:"9/12/2023, 3:21:39 AM",lastUpdatedTimestamp:1694488899e3,headersStr:null,content:"# 6.6 原样输出\n\n原样输出是指不被解析，而仅仅当成纯文本的内容区块，如下所示：\n\n#[[\n   #(value)\n   #for(x : list)\n      #(x.name)\n   #end\n]]#\n\n\n1\n2\n3\n4\n5\n6\n\n\n如上所示，原样输出以 #[[ 三个字符打头，以 ]]# 三个字符结尾，中间被包裹的内容虽然是指令，但仍然被当成是纯文本，这非常有利于解决与前端javascript模板引擎的指令冲突问题。\n\n无论是单行注释、多行注释，还是原样输出，都是以三个字符开头，目的都是为了降低与纯文本内容冲突的概率。\n\n注意：用于注释、原样输出的三个控制字符之间不能有空格",normalizedContent:"# 6.6 原样输出\n\n原样输出是指不被解析，而仅仅当成纯文本的内容区块，如下所示：\n\n#[[\n   #(value)\n   #for(x : list)\n      #(x.name)\n   #end\n]]#\n\n\n1\n2\n3\n4\n5\n6\n\n\n如上所示，原样输出以 #[[ 三个字符打头，以 ]]# 三个字符结尾，中间被包裹的内容虽然是指令，但仍然被当成是纯文本，这非常有利于解决与前端javascript模板引擎的指令冲突问题。\n\n无论是单行注释、多行注释，还是原样输出，都是以三个字符开头，目的都是为了降低与纯文本内容冲突的概率。\n\n注意：用于注释、原样输出的三个控制字符之间不能有空格",charsets:{cjk:!0}},{title:"6.7 Shared Method 扩展",frontmatter:{},regularPath:"/zh/6%20Enjoy%20%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/6.7%20Shared%20Method%20%E6%89%A9%E5%B1%95.html",relativePath:"zh/6 Enjoy 模板引擎/6.7 Shared Method 扩展.md",key:"v-172034dd",path:"/zh/6%20Enjoy%20%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/6.7%20Shared%20Method%20%E6%89%A9%E5%B1%95.html",headers:[{level:3,title:"1､基本用法",slug:"_1、基本用法",normalizedTitle:"1､基本用法",charIndex:27},{level:3,title:"2、默认 Shared Method 配置扩展",slug:"_2、默认-shared-method-配置扩展",normalizedTitle:"2、默认 shared method 配置扩展",charIndex:480}],lastUpdated:"9/12/2023, 3:21:39 AM",lastUpdatedTimestamp:1694488899e3,headersStr:"1､基本用法 2、默认 Shared Method 配置扩展",content:"# 6.7 Shared Method 扩展\n\n\n# 1､基本用法\n\nEnjoy 模板引擎可以极其简单的直接使用任意的 java 类中的 public 方法，并且被使用的 java 类无需实现任何接口也无需继承任何抽象类，完全无耦合。以下代码以 JFinal 之中的 com.jfinal.kit.StrKit 类为例：\n\npublic void configEngine(Engine me) {\n   me.addSharedMethod(new com.jfinal.kit.StrKit());\n}\n\n\n1\n2\n3\n\n\n以上代码已将StrKit类中所有的public方法添加为shared method，添加完成以后便可以直接在模板中使用，以下是代码示例：\n\n#if(isBlank(nickName))\n   ...\n#end\n \n#if(notBlank(title))\n   ...\n#end\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上例中的isBlank 和 notBlank 方法都来自于StrKit类，这种扩展方式简单、便捷、无耦合。\n\n\n# 2、默认 Shared Method 配置扩展\n\nEnjoy 模板引擎默认配置添加了 com.jfinal.template.ext.sharedmethod.SharedMethodLib 为 Shared Method，所以其中的方法可以直接使用不需要配置。里头有 isEmpty(...) 与 notEmpty(...) 两个方法可以使用。\n\nisEmpty(...) 用来判断 Collection、Map、数组、Iterator、Iterable 类型对象中的元素个数是否为 0，其规如下：\n\n * null 返回 true\n\n * List、Set 等一切继承自 Collection 的，返回 isEmpty()\n\n * Map 返回 isEmpty()\n\n * 数组返回 length == 0\n\n * Iterator 返回 ! hasNext()\n\n * Iterable 返回 ! iterator().hasNext()\n\n以下是代码示例：\n\n#if ( isEmpty(list) )\n    list 中的元素个数等于 0\n#end\n \n#if ( notEmpty(map) )\n    map 中的元素个数大于 0\n#end\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n如上所示，isEmpty(list) 判断 list 中的元素是否大于 0。notEmpty(...) 的功能与 isEmpty(...) 恰好相反，等价于 ! isEmpty(...)",normalizedContent:"# 6.7 shared method 扩展\n\n\n# 1､基本用法\n\nenjoy 模板引擎可以极其简单的直接使用任意的 java 类中的 public 方法，并且被使用的 java 类无需实现任何接口也无需继承任何抽象类，完全无耦合。以下代码以 jfinal 之中的 com.jfinal.kit.strkit 类为例：\n\npublic void configengine(engine me) {\n   me.addsharedmethod(new com.jfinal.kit.strkit());\n}\n\n\n1\n2\n3\n\n\n以上代码已将strkit类中所有的public方法添加为shared method，添加完成以后便可以直接在模板中使用，以下是代码示例：\n\n#if(isblank(nickname))\n   ...\n#end\n \n#if(notblank(title))\n   ...\n#end\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上例中的isblank 和 notblank 方法都来自于strkit类，这种扩展方式简单、便捷、无耦合。\n\n\n# 2、默认 shared method 配置扩展\n\nenjoy 模板引擎默认配置添加了 com.jfinal.template.ext.sharedmethod.sharedmethodlib 为 shared method，所以其中的方法可以直接使用不需要配置。里头有 isempty(...) 与 notempty(...) 两个方法可以使用。\n\nisempty(...) 用来判断 collection、map、数组、iterator、iterable 类型对象中的元素个数是否为 0，其规如下：\n\n * null 返回 true\n\n * list、set 等一切继承自 collection 的，返回 isempty()\n\n * map 返回 isempty()\n\n * 数组返回 length == 0\n\n * iterator 返回 ! hasnext()\n\n * iterable 返回 ! iterator().hasnext()\n\n以下是代码示例：\n\n#if ( isempty(list) )\n    list 中的元素个数等于 0\n#end\n \n#if ( notempty(map) )\n    map 中的元素个数大于 0\n#end\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n如上所示，isempty(list) 判断 list 中的元素是否大于 0。notempty(...) 的功能与 isempty(...) 恰好相反，等价于 ! isempty(...)",charsets:{cjk:!0}},{title:"6.8 Shared Object扩展",frontmatter:{},regularPath:"/zh/6%20Enjoy%20%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/6.8%20Shared%20Object%E6%89%A9%E5%B1%95.html",relativePath:"zh/6 Enjoy 模板引擎/6.8 Shared Object扩展.md",key:"v-d5bcff54",path:"/zh/6%20Enjoy%20%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/6.8%20Shared%20Object%E6%89%A9%E5%B1%95.html",lastUpdated:"9/12/2023, 3:21:39 AM",lastUpdatedTimestamp:1694488899e3,headersStr:null,content:'# 6.8 Shared Object扩展\n\n通过使用addSharedObject方法，将某个具体对象添加为共享对象，可以全局进行使用，以下是代码示例：\n\npublic void configEngine(Engine me) {\n   me.addSharedObject("RESOURCE_HOST", "http://res.jfinal.com");\n   me.addSharedObject("StrKit", new com.jfinal.kit.StrKit());\n}\n\n\n1\n2\n3\n4\n\n\n以上代码中的第二行，添加了一个名为RESOURCE_HOST的共享对象，而第三行代码添加了一个名为 StrKit 的共享对象，以下是在模板中的使用例子：\n\n<img src="#(RESOURCE_HOST)/img/girl.jpg" />\n#if(StrKit.isBlank(title))\n   ...\n#end\n\n\n1\n2\n3\n4\n\n\n以上代码第一行中使用输出指令输出了RESOUCE_HOST这个共享变量，对于大型web应用系统，通过这种方式可以很方便地规划资源文件所在的服务器。以上第二行代码调用了名为 StrKit 这个共享变量的isBlank方法，使用方式符合开发者直觉。\n\n注意：由于对象被全局共享，所以需要注意线程安全问题，尽量只共享常量以及无状态对象。',normalizedContent:'# 6.8 shared object扩展\n\n通过使用addsharedobject方法，将某个具体对象添加为共享对象，可以全局进行使用，以下是代码示例：\n\npublic void configengine(engine me) {\n   me.addsharedobject("resource_host", "http://res.jfinal.com");\n   me.addsharedobject("strkit", new com.jfinal.kit.strkit());\n}\n\n\n1\n2\n3\n4\n\n\n以上代码中的第二行，添加了一个名为resource_host的共享对象，而第三行代码添加了一个名为 strkit 的共享对象，以下是在模板中的使用例子：\n\n<img src="#(resource_host)/img/girl.jpg" />\n#if(strkit.isblank(title))\n   ...\n#end\n\n\n1\n2\n3\n4\n\n\n以上代码第一行中使用输出指令输出了resouce_host这个共享变量，对于大型web应用系统，通过这种方式可以很方便地规划资源文件所在的服务器。以上第二行代码调用了名为 strkit 这个共享变量的isblank方法，使用方式符合开发者直觉。\n\n注意：由于对象被全局共享，所以需要注意线程安全问题，尽量只共享常量以及无状态对象。',charsets:{cjk:!0}},{title:"6.9 Extension Method扩展",frontmatter:{},regularPath:"/zh/6%20Enjoy%20%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/6.9%20Extension%20Method%E6%89%A9%E5%B1%95.html",relativePath:"zh/6 Enjoy 模板引擎/6.9 Extension Method扩展.md",key:"v-8f755e3c",path:"/zh/6%20Enjoy%20%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/6.9%20Extension%20Method%E6%89%A9%E5%B1%95.html",lastUpdated:"9/12/2023, 3:21:39 AM",lastUpdatedTimestamp:1694488899e3,headersStr:null,content:'# 6.9 Extension Method扩展\n\nExtension Method 用于对已存在的类在其外部添加扩展方法，该功能类似于ruby语言中的mixin特性。\n\nEnjoy 默认已经为BigDecimal、BigInteger、String、Integer、Long、Float、Double、Short、Byte 这 9 个常用的 java 类型，添加了toBigDecimal()、toBigInteger()、toInt()、toLong()、toFloat()、toDouble()、toBoolean()、toShort()、toByte() 9 个extension method。以下是使用示例：\n\n#set(age = "18")\n#if(age.toInt() >= 18)\n   join to the party\n#end\n\n\n1\n2\n3\n4\n\n\n上例第一行代码中的 age 为 String 类型，由于 String 被添加了 toInt() 扩展方法，所以调用其 toInt() 方法后便可与后面的 Integer 型的值 18 进行比较运算。\n\n注意：BigDecimal、BigInteger 添加于 5.1.2 版本，使用时需要升级到该版本或者自己扩展。\n\nExtension Method特性有两大应用场景，第一个应用场景是为java类库中的现存类进行功能性扩展，下面给出一个为 Integer 添加扩展方法的例子：\n\npublic class MyIntegerExt {\n  public Integer square(Integer self) {\n    return self * self;\n  }\n  \n  public Double power(Integer self, Double exponent) {\n    return Math.pow(self, exponent);\n  }\n  \n  public Boolean isOdd(Integer self) {\n    return self % 2 != 0;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n如上面代码所示，由于是对 Integer 进行扩展，所以上述三个扩展方法中的第一个参数必须是 Integer 类型，以便调用该方法时让这个参数承载调用者自身。其它参数可以是任意类型，例如上述 power 方法中的 exponent 参数。扩展方法至少要有一个参数。以下代码是对上述扩展方法进行配置：\n\nEngine.addExtensionMethod(Integer.class, MyIntegerExt.class);\n\n\n1\n\n\n上述代码第一个参数Integer是被扩展的类，第二个参数MyIntegerExt是扩展类，通过上面简单的两步，即可在模板中使用：\n\n#set(num = 123)\n#(num.square())\n#(num.power(10D))\n#(num.isOdd())\n\n\n1\n2\n3\n4\n\n\n上述代码第二、三、四行调用了MyIntegerExt中的三个扩展方法，分别实现了对123的求平方、求10次方、判断是否为奇数的功能。\n\n如上例所示，extension method可以在类自身以外的地方对其功能进行扩展，在模板中使用时的书写也变得非常方便。\n\nExtension Method 的另一个重要的应用场景，是将不确定类型变得确定，例如Controller.keepPara()方法会将所有参数当成String的类型来keep住，所以表单中的Integer类型在keepPara()后变成了String型，引发模板中的类型不正确异常，以下是解决方案：\n\n<select name="type">\n  #for(x : list)\n    <option value="#(x.type)" #if(x.type == type.toInt()) selected #end />\n  #end\n</select>\n\n\n1\n2\n3\n4\n5\n\n\n假定type为Integer类型，上面的 select域在表单提交后，如果在后端使用了keepPara()，那么再次渲染该模板时type会变为String类型，从而引发类型不正确异常，通过type.toInt()即可解决。当然，你也可以使用keepPara(Integer.class, “type”) 进行解决。',normalizedContent:'# 6.9 extension method扩展\n\nextension method 用于对已存在的类在其外部添加扩展方法，该功能类似于ruby语言中的mixin特性。\n\nenjoy 默认已经为bigdecimal、biginteger、string、integer、long、float、double、short、byte 这 9 个常用的 java 类型，添加了tobigdecimal()、tobiginteger()、toint()、tolong()、tofloat()、todouble()、toboolean()、toshort()、tobyte() 9 个extension method。以下是使用示例：\n\n#set(age = "18")\n#if(age.toint() >= 18)\n   join to the party\n#end\n\n\n1\n2\n3\n4\n\n\n上例第一行代码中的 age 为 string 类型，由于 string 被添加了 toint() 扩展方法，所以调用其 toint() 方法后便可与后面的 integer 型的值 18 进行比较运算。\n\n注意：bigdecimal、biginteger 添加于 5.1.2 版本，使用时需要升级到该版本或者自己扩展。\n\nextension method特性有两大应用场景，第一个应用场景是为java类库中的现存类进行功能性扩展，下面给出一个为 integer 添加扩展方法的例子：\n\npublic class myintegerext {\n  public integer square(integer self) {\n    return self * self;\n  }\n  \n  public double power(integer self, double exponent) {\n    return math.pow(self, exponent);\n  }\n  \n  public boolean isodd(integer self) {\n    return self % 2 != 0;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n如上面代码所示，由于是对 integer 进行扩展，所以上述三个扩展方法中的第一个参数必须是 integer 类型，以便调用该方法时让这个参数承载调用者自身。其它参数可以是任意类型，例如上述 power 方法中的 exponent 参数。扩展方法至少要有一个参数。以下代码是对上述扩展方法进行配置：\n\nengine.addextensionmethod(integer.class, myintegerext.class);\n\n\n1\n\n\n上述代码第一个参数integer是被扩展的类，第二个参数myintegerext是扩展类，通过上面简单的两步，即可在模板中使用：\n\n#set(num = 123)\n#(num.square())\n#(num.power(10d))\n#(num.isodd())\n\n\n1\n2\n3\n4\n\n\n上述代码第二、三、四行调用了myintegerext中的三个扩展方法，分别实现了对123的求平方、求10次方、判断是否为奇数的功能。\n\n如上例所示，extension method可以在类自身以外的地方对其功能进行扩展，在模板中使用时的书写也变得非常方便。\n\nextension method 的另一个重要的应用场景，是将不确定类型变得确定，例如controller.keeppara()方法会将所有参数当成string的类型来keep住，所以表单中的integer类型在keeppara()后变成了string型，引发模板中的类型不正确异常，以下是解决方案：\n\n<select name="type">\n  #for(x : list)\n    <option value="#(x.type)" #if(x.type == type.toint()) selected #end />\n  #end\n</select>\n\n\n1\n2\n3\n4\n5\n\n\n假定type为integer类型，上面的 select域在表单提交后，如果在后端使用了keeppara()，那么再次渲染该模板时type会变为string类型，从而引发类型不正确异常，通过type.toint()即可解决。当然，你也可以使用keeppara(integer.class, “type”) 进行解决。',charsets:{cjk:!0}},{title:"7.2 EhCachePlugin",frontmatter:{},regularPath:"/zh/7%20EhCachePlugin/7.2%20EhCachePlugin.html",relativePath:"zh/7 EhCachePlugin/7.2 EhCachePlugin.md",key:"v-f066f1e6",path:"/zh/7%20EhCachePlugin/7.2%20EhCachePlugin.html",lastUpdated:"9/14/2023, 8:36:35 AM",lastUpdatedTimestamp:1694680595e3,headersStr:null,content:"# 7.2 EhCachePlugin\n\nEhCachePlugin是作为JFinal的Plugin而存在的，所以使用时需要在JFinalConfig中配置EhCachePlugin，以下是Plugin配置示例代码：\n\npublic class DemoConfig extends JFinalConfig {\n  public void configPlugin(Plugins me) {\n    me.add(new EhCachePlugin());\n  }\n}\n\n\n1\n2\n3\n4\n5\n",normalizedContent:"# 7.2 ehcacheplugin\n\nehcacheplugin是作为jfinal的plugin而存在的，所以使用时需要在jfinalconfig中配置ehcacheplugin，以下是plugin配置示例代码：\n\npublic class democonfig extends jfinalconfig {\n  public void configplugin(plugins me) {\n    me.add(new ehcacheplugin());\n  }\n}\n\n\n1\n2\n3\n4\n5\n",charsets:{cjk:!0}},{title:"7.1 概述",frontmatter:{},regularPath:"/zh/7%20EhCachePlugin/7.1%20%E6%A6%82%E8%BF%B0.html",relativePath:"zh/7 EhCachePlugin/7.1 概述.md",key:"v-6db814f0",path:"/zh/7%20EhCachePlugin/7.1%20%E6%A6%82%E8%BF%B0.html",lastUpdated:"9/14/2023, 8:36:35 AM",lastUpdatedTimestamp:1694680595e3,headersStr:null,content:"# 7.1 概述\n\nEhCachePlugin是JFinal集成的缓存插件，通过使用EhCachePlugin可以提高系统的并发访问速度。",normalizedContent:"# 7.1 概述\n\nehcacheplugin是jfinal集成的缓存插件，通过使用ehcacheplugin可以提高系统的并发访问速度。",charsets:{cjk:!0}},{title:"7.3 CacheInterceptor",frontmatter:{},regularPath:"/zh/7%20EhCachePlugin/7.3%20CacheInterceptor.html",relativePath:"zh/7 EhCachePlugin/7.3 CacheInterceptor.md",key:"v-c09c5b3e",path:"/zh/7%20EhCachePlugin/7.3%20CacheInterceptor.html",lastUpdated:"9/14/2023, 8:36:35 AM",lastUpdatedTimestamp:1694680595e3,headersStr:null,content:'# 7.3 CacheInterceptor\n\nCacheInterceptor可以将action所需数据全部缓存起来，下次请求到来时如果cache存在则直接使用数据并render，而不会去调用action。此用法可使action完全不受cache相关代码所污染，即插即用，以下是示例代码：\n\n@Before(CacheInterceptor.class)\npublic void list() {\n    List<Blog> blogList = Blog.dao.find("select * from blog");\n    User user = User.dao.findById(getParaToInt());\n    setAttr("blogList", blogList);\n    setAttr("user", user);\n    render("blog.html");\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上例中的用法将使用actionKey作为cacheName，在使用之前需要在ehcache.xml中配置以actionKey命名的cache如：<cache name="/blog/list" …>，注意actionKey作为cacheName配置时斜杠”/”不能省略。此外CacheInterceptor还可以与CacheName 注解配合使用，以此来取代默认的actionKey作为cacheName，以下是示例代码：\n\n@Before(CacheInterceptor.class)\n@CacheName("blogList")\npublic void list() {\n    List<Blog> blogList = Blog.dao.find("select * from blog");\n    setAttr("blogList", blogList);\n    render("blog.html");\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n以上用法需要在ehcache.xml中配置名为blogList的cache如：\n\n<cache name="blogList" …>\n\n\n1\n',normalizedContent:'# 7.3 cacheinterceptor\n\ncacheinterceptor可以将action所需数据全部缓存起来，下次请求到来时如果cache存在则直接使用数据并render，而不会去调用action。此用法可使action完全不受cache相关代码所污染，即插即用，以下是示例代码：\n\n@before(cacheinterceptor.class)\npublic void list() {\n    list<blog> bloglist = blog.dao.find("select * from blog");\n    user user = user.dao.findbyid(getparatoint());\n    setattr("bloglist", bloglist);\n    setattr("user", user);\n    render("blog.html");\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上例中的用法将使用actionkey作为cachename，在使用之前需要在ehcache.xml中配置以actionkey命名的cache如：<cache name="/blog/list" …>，注意actionkey作为cachename配置时斜杠”/”不能省略。此外cacheinterceptor还可以与cachename 注解配合使用，以此来取代默认的actionkey作为cachename，以下是示例代码：\n\n@before(cacheinterceptor.class)\n@cachename("bloglist")\npublic void list() {\n    list<blog> bloglist = blog.dao.find("select * from blog");\n    setattr("bloglist", bloglist);\n    render("blog.html");\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n以上用法需要在ehcache.xml中配置名为bloglist的cache如：\n\n<cache name="bloglist" …>\n\n\n1\n',charsets:{cjk:!0}},{title:"7.4 EvictInterceptor",frontmatter:{},regularPath:"/zh/7%20EhCachePlugin/7.4%20EvictInterceptor.html",relativePath:"zh/7 EhCachePlugin/7.4 EvictInterceptor.md",key:"v-69c3d5be",path:"/zh/7%20EhCachePlugin/7.4%20EvictInterceptor.html",lastUpdated:"9/14/2023, 8:36:35 AM",lastUpdatedTimestamp:1694680595e3,headersStr:null,content:'# 7.4 EvictInterceptor\n\nEvictInterceptor可以根据CacheName注解自动清除缓存。以下是示例代码：\n\n@Before(EvictInterceptor.class)\n@CacheName("blogList")\npublic void update() {\n    getModel(Blog.class).update();\n    redirect("blog.html");\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n上例中的用法将清除cacheName为blogList的缓存数据，与其配合的CacheInterceptor会自动更新cacheName为blogList的缓存数据。\n\njfinal 3.6 版本支持 @CacheName 参数使用逗号分隔多个 cacheName，方便针对多个 cacheName 进行清除，例如：\n\n@Before(EvictInterceptor.class)\n@CacheName("blogList, hotBlogList")   // 逗号分隔多个 cacheName\npublic void update() {\n   ...\n}\n\n\n1\n2\n3\n4\n5\n',normalizedContent:'# 7.4 evictinterceptor\n\nevictinterceptor可以根据cachename注解自动清除缓存。以下是示例代码：\n\n@before(evictinterceptor.class)\n@cachename("bloglist")\npublic void update() {\n    getmodel(blog.class).update();\n    redirect("blog.html");\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n上例中的用法将清除cachename为bloglist的缓存数据，与其配合的cacheinterceptor会自动更新cachename为bloglist的缓存数据。\n\njfinal 3.6 版本支持 @cachename 参数使用逗号分隔多个 cachename，方便针对多个 cachename 进行清除，例如：\n\n@before(evictinterceptor.class)\n@cachename("bloglist, hotbloglist")   // 逗号分隔多个 cachename\npublic void update() {\n   ...\n}\n\n\n1\n2\n3\n4\n5\n',charsets:{cjk:!0}},{title:"7.5 CacheKit",frontmatter:{},regularPath:"/zh/7%20EhCachePlugin/7.5%20CacheKit.html",relativePath:"zh/7 EhCachePlugin/7.5 CacheKit.md",key:"v-158306c1",path:"/zh/7%20EhCachePlugin/7.5%20CacheKit.html",lastUpdated:"9/14/2023, 8:36:35 AM",lastUpdatedTimestamp:1694680595e3,headersStr:null,content:'# 7.5 CacheKit\n\nCacheKit是缓存操作工具类，以下是示例代码：\n\npublic void list() {\n    List<Blog> blogList = CacheKit.get("blog", "blogList");\n    if (blogList == null) {\n       blogList = Blog.dao.find("select * from blog");\n       CacheKit.put("blog", "blogList", blogList);\n    }\n    setAttr("blogList", blogList);\n    render("blog.html");\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nCacheKit 中最重要的两个方法是get(String cacheName, Object key)与put(String cacheName, Object key, Object value)。get方法是从cache中取数据，put方法是将数据放入cache。参数cacheName与ehcache.xml中的<cache name="blog" …>name属性值对应；参数key是指取值用到的key；参数value是被缓存的数据。\n\n以下代码是CacheKit中重载的CacheKit.get(String, String, IDataLoader)方法使用示例：\n\npublic void list() {\n    List<Blog> blogList = CacheKit.get("blog", "blogList", new IDataLoader(){\n       public Object load() {\n           return Blog.dao.find("select * from blog");\n    }});\n    setAttr("blogList", blogList);\n    render("blog.html");\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nCacheKit.get方法提供了一个IDataLoader接口，该接口中的load()方法在缓存值不存在时才会被调用。该方法的具体操作流程是：首先以cacheName=blog以及key=blogList为参数去缓存取数据，如果缓存中数据存在就直接返回该数据，不存在则调用IDataLoader.load()方法来获取数据。',normalizedContent:'# 7.5 cachekit\n\ncachekit是缓存操作工具类，以下是示例代码：\n\npublic void list() {\n    list<blog> bloglist = cachekit.get("blog", "bloglist");\n    if (bloglist == null) {\n       bloglist = blog.dao.find("select * from blog");\n       cachekit.put("blog", "bloglist", bloglist);\n    }\n    setattr("bloglist", bloglist);\n    render("blog.html");\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\ncachekit 中最重要的两个方法是get(string cachename, object key)与put(string cachename, object key, object value)。get方法是从cache中取数据，put方法是将数据放入cache。参数cachename与ehcache.xml中的<cache name="blog" …>name属性值对应；参数key是指取值用到的key；参数value是被缓存的数据。\n\n以下代码是cachekit中重载的cachekit.get(string, string, idataloader)方法使用示例：\n\npublic void list() {\n    list<blog> bloglist = cachekit.get("blog", "bloglist", new idataloader(){\n       public object load() {\n           return blog.dao.find("select * from blog");\n    }});\n    setattr("bloglist", bloglist);\n    render("blog.html");\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\ncachekit.get方法提供了一个idataloader接口，该接口中的load()方法在缓存值不存在时才会被调用。该方法的具体操作流程是：首先以cachename=blog以及key=bloglist为参数去缓存取数据，如果缓存中数据存在就直接返回该数据，不存在则调用idataloader.load()方法来获取数据。',charsets:{cjk:!0}},{title:"7.6 ehcache.xml简介",frontmatter:{},regularPath:"/zh/7%20EhCachePlugin/7.6%20ehcache.xml%E7%AE%80%E4%BB%8B.html",relativePath:"zh/7 EhCachePlugin/7.6 ehcache.xml简介.md",key:"v-2576d6bb",path:"/zh/7%20EhCachePlugin/7.6%20ehcache.xml%E7%AE%80%E4%BB%8B.html",lastUpdated:"9/14/2023, 8:36:35 AM",lastUpdatedTimestamp:1694680595e3,headersStr:null,content:'# 7.6 ehcache.xml简介\n\nEhCache的使用需要有ehcache.xml配置文件支持，该配置文件中配置了很多cache节点，每个cache节点会配置一个name属性，例如：<cache name="blog" …>，该属性是CacheKit取值所必须的。其它配置项如eternal、overflowToDisk、timeToIdleSeconds、timeToLiveSeconds详见EhCache官方文档。',normalizedContent:'# 7.6 ehcache.xml简介\n\nehcache的使用需要有ehcache.xml配置文件支持，该配置文件中配置了很多cache节点，每个cache节点会配置一个name属性，例如：<cache name="blog" …>，该属性是cachekit取值所必须的。其它配置项如eternal、overflowtodisk、timetoidleseconds、timetoliveseconds详见ehcache官方文档。',charsets:{cjk:!0}},{title:"8.1 概述",frontmatter:{},regularPath:"/zh/8%20RedisPlugin/8.1%20%E6%A6%82%E8%BF%B0.html",relativePath:"zh/8 RedisPlugin/8.1 概述.md",key:"v-23fb8ef0",path:"/zh/8%20RedisPlugin/8.1%20%E6%A6%82%E8%BF%B0.html",lastUpdated:"9/16/2023, 5:23:17 AM",lastUpdatedTimestamp:1694841797e3,headersStr:null,content:"# 8.1 概述\n\nRedisPlugin是支持 Redis的极速化插件。使用RedisPlugin可以极度方便的使用redis，该插件不仅提供了丰富的API，而且还同时支持多redis服务端。Redis拥有超高的性能，丰富的数据结构，天然支持数据持久化，是目前应用非常广泛的nosql数据库。对于redis的有效应用可极大提升系统性能，节省硬件成本。",normalizedContent:"# 8.1 概述\n\nredisplugin是支持 redis的极速化插件。使用redisplugin可以极度方便的使用redis，该插件不仅提供了丰富的api，而且还同时支持多redis服务端。redis拥有超高的性能，丰富的数据结构，天然支持数据持久化，是目前应用非常广泛的nosql数据库。对于redis的有效应用可极大提升系统性能，节省硬件成本。",charsets:{cjk:!0}},{title:"8.2 RedisPlugin",frontmatter:{},regularPath:"/zh/8%20RedisPlugin/8.2%20RedisPlugin.html",relativePath:"zh/8 RedisPlugin/8.2 RedisPlugin.md",key:"v-889144ce",path:"/zh/8%20RedisPlugin/8.2%20RedisPlugin.html",headers:[{level:3,title:"1､基本配置",slug:"_1、基本配置",normalizedTitle:"1､基本配置",charIndex:22},{level:3,title:"2、maven 坐标",slug:"_2、maven-坐标",normalizedTitle:"2、maven 坐标",charIndex:626},{level:3,title:"3、远程连接",slug:"_3、远程连接",normalizedTitle:"3、远程连接",charIndex:987}],lastUpdated:"9/16/2023, 5:23:17 AM",lastUpdatedTimestamp:1694841797e3,headersStr:"1､基本配置 2、maven 坐标 3、远程连接",content:'# 8.2 RedisPlugin\n\n\n# 1､基本配置\n\nRedisPlugin是作为JFinal的Plugin而存在的，所以使用时需要在JFinalConfig中配置RedisPlugin，以下是RedisPlugin配置示例代码：\n\npublic class DemoConfig extends JFinalConfig {\n  public void configPlugin(Plugins me) {\n    // 用于缓存bbs模块的redis服务\n    RedisPlugin bbsRedis = new RedisPlugin("bbs", "localhost");\n    me.add(bbsRedis);\n \n    // 用于缓存news模块的redis服务\n    RedisPlugin newsRedis = new RedisPlugin("news", "192.168.3.9");\n    me.add(newsRedis);\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n以上代码创建了两个RedisPlugin对象，分别为bbsRedis和newsRedis。最先创建的RedisPlugin对象所持有的Cache对象将成为主缓存对象，主缓存对象可通过Redis.use()直接获取，否则需要提供cacheName参数才能获取，例如：Redis.use("news")\n\n\n# 2、maven 坐标\n\n使用 RedisPlugin 需要添加如下 maven 依赖：\n\n<dependency>\n    <groupId>redis.clients</groupId>\n    <artifactId>jedis</artifactId>\n    <version>3.6.3</version>\n</dependency>\n \n<dependency>\n    <groupId>de.ruedigermoeller</groupId>\n    <artifactId>fst</artifactId>\n    <version>2.57</version>\x3c!-- 注意：更高版本不支持 jdk 8 --\x3e\n</dependency>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 3、远程连接\n\n如果 reids 服务端处于远程的另一台服务器，那么需要修改其配置文件 /etc/redis.conf 中的部分配置才能连上：\n\n# 将原有的 bind 值由 127.0.0.1 改成 0.0.0.0\nbind 0.0.0.0\n \n# 添加 requirepass 配置，设置密码\nrequirepass 连接密码在此\n\n\n1\n2\n3\n4\n5\n\n\n配置完成以后，别忘了重启 reids：\n\n# centos 操作系统的启动方式如下\nservice redis restart\n\n\n1\n2\n\n\n如果你使用的是云服务器，别忘了打开相应的端口号，reids 默认端口号是 6379。\n\n最后，远程连接时的 RedisPlugin 在创建时要传入相应的密码：\n\nRedisPlugin rp = new RedisPlugin("main", "xxx.com", 6379, 10000, "密码在此");\nme.add(rp);\n\n\n1\n2\n\n\n以上 RedisPlugin 各参数最后一个是在 redis.config 中配置的密码，其后还支持更多参数，例如数据库：\n\nRedisPlugin rp = new RedisPlugin("main", "xxx.com", 6379, 10000, "密码在此", 数据库);\nme.add(rp);\n\n\n1\n2\n\n\n根据需求选用参数即可。',normalizedContent:'# 8.2 redisplugin\n\n\n# 1､基本配置\n\nredisplugin是作为jfinal的plugin而存在的，所以使用时需要在jfinalconfig中配置redisplugin，以下是redisplugin配置示例代码：\n\npublic class democonfig extends jfinalconfig {\n  public void configplugin(plugins me) {\n    // 用于缓存bbs模块的redis服务\n    redisplugin bbsredis = new redisplugin("bbs", "localhost");\n    me.add(bbsredis);\n \n    // 用于缓存news模块的redis服务\n    redisplugin newsredis = new redisplugin("news", "192.168.3.9");\n    me.add(newsredis);\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n以上代码创建了两个redisplugin对象，分别为bbsredis和newsredis。最先创建的redisplugin对象所持有的cache对象将成为主缓存对象，主缓存对象可通过redis.use()直接获取，否则需要提供cachename参数才能获取，例如：redis.use("news")\n\n\n# 2、maven 坐标\n\n使用 redisplugin 需要添加如下 maven 依赖：\n\n<dependency>\n    <groupid>redis.clients</groupid>\n    <artifactid>jedis</artifactid>\n    <version>3.6.3</version>\n</dependency>\n \n<dependency>\n    <groupid>de.ruedigermoeller</groupid>\n    <artifactid>fst</artifactid>\n    <version>2.57</version>\x3c!-- 注意：更高版本不支持 jdk 8 --\x3e\n</dependency>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 3、远程连接\n\n如果 reids 服务端处于远程的另一台服务器，那么需要修改其配置文件 /etc/redis.conf 中的部分配置才能连上：\n\n# 将原有的 bind 值由 127.0.0.1 改成 0.0.0.0\nbind 0.0.0.0\n \n# 添加 requirepass 配置，设置密码\nrequirepass 连接密码在此\n\n\n1\n2\n3\n4\n5\n\n\n配置完成以后，别忘了重启 reids：\n\n# centos 操作系统的启动方式如下\nservice redis restart\n\n\n1\n2\n\n\n如果你使用的是云服务器，别忘了打开相应的端口号，reids 默认端口号是 6379。\n\n最后，远程连接时的 redisplugin 在创建时要传入相应的密码：\n\nredisplugin rp = new redisplugin("main", "xxx.com", 6379, 10000, "密码在此");\nme.add(rp);\n\n\n1\n2\n\n\n以上 redisplugin 各参数最后一个是在 redis.config 中配置的密码，其后还支持更多参数，例如数据库：\n\nredisplugin rp = new redisplugin("main", "xxx.com", 6379, 10000, "密码在此", 数据库);\nme.add(rp);\n\n\n1\n2\n\n\n根据需求选用参数即可。',charsets:{cjk:!0}},{title:"8.3 Redis与Cache",frontmatter:{},regularPath:"/zh/8%20RedisPlugin/8.3%20Redis%E4%B8%8ECache.html",relativePath:"zh/8 RedisPlugin/8.3 Redis与Cache.md",key:"v-ac71321c",path:"/zh/8%20RedisPlugin/8.3%20Redis%E4%B8%8ECache.html",headers:[{level:3,title:"1、基本用法",slug:"_1、基本用法",normalizedTitle:"1、基本用法",charIndex:22},{level:3,title:"2、新用法(建议)",slug:"_2、新用法-建议",normalizedTitle:"2、新用法(建议)",charIndex:854}],lastUpdated:"9/22/2023, 7:03:51 AM",lastUpdatedTimestamp:1695366231e3,headersStr:"1、基本用法 2、新用法(建议)",content:'# 8.3 Redis与Cache\n\n\n# 1、基本用法\n\nRedis与Cache联合起来可以非常方便地使用Redis服务，Redis对象通过use()方法来获取到Cache对象，Cache对象提供了丰富的API用于使用Redis服务，下面是具体使用示例：\n\npublic void redisDemo() {\n  // 获取名称为bbs的Redis Cache对象\n  Cache bbsCache = Redis.use("bbs");\n  bbsCache.set("key", "value");\n  bbsCache.get("key");\n \n  // 获取名称为news的Redis Cache对象\n  Cache newsCache = Redis.use("news");\n  newsCache.set("k", "v");\n  newsCache.get("k");\n \n  // 最先创建的Cache将成为主Cache，所以可以省去cacheName参数来获取\n  bbsCache = Redis.use();    // 主缓存可以省去cacheName参数\n  bbsCache.set("jfinal", "awesome");\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n以上代码中通过”bbs”、”news”做为use方法的参数分别获取到了两个Cache对象，使用这两个对象即可操作其所对应的Redis服务端。\n\n通常情况下只会创建一个RedisPlugin连接一个redis服务端，使用Redis.use().set(key,value)即可。\n\n注意：使用 incr、incrBy、decr、decrBy 方法操作的计数器，需要使用 getCounter(key) 进行读取而不能使用 get(key)，否则会抛反序列化异常。同理：incrBy(key, value) 操作不能使用 set(key, value) 。\n\n\n# 2、新用法(建议)\n\n高版本 jfinal 针对 Redis、Cache 这两个类新增了 call 方法，该方法直接暴漏出 Jedis 对象供使用，可以绕过序列化、反序列化过程\n\n// 使用 lambda 开放 Jedis API\nLong ret = Redis.call(j -> j.incrBy("key", 1));\n \nLong ret = Redis.call(jedis -> {\n    return jedis.incrBy("key", 1);\n});\n\n\n1\n2\n3\n4\n5\n6\n\n\n如果配置了多个 cache 可以通过 Redis.use(...) 先获取对应的 cache 对象再进行操作\n\n// 指定 cacheName 参数再操作\nLong ret = Redis.use("mycache").call(j -> j.incrBy("key", 1));\n \n// Redis.use() 不带参表示获取默认 cache\nLong ret = Redis.use().call(j -> j.incrBy("key", 1));\n\n\n1\n2\n3\n4\n5\n\n\n存入 String 以外类型数可以将其先转成 json 再操作\n\nUser user = dao.findById(userId);\nString userJson = JsonKit.toJson(user);\n \nRedis.call(jedis -> {\n    return jedis.set("user", userJson);\n});\n \n// 或者简化为下面代码\nRedis.call(j -> j.set("user", JsonKit.toJson(user)));\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n以上 call 用法，不涉及对象的序列化、反序列化，直接操作 jedis 对象，在当下 json 非常普及的背景下是 jfinal 官方推荐的使用方法',normalizedContent:'# 8.3 redis与cache\n\n\n# 1、基本用法\n\nredis与cache联合起来可以非常方便地使用redis服务，redis对象通过use()方法来获取到cache对象，cache对象提供了丰富的api用于使用redis服务，下面是具体使用示例：\n\npublic void redisdemo() {\n  // 获取名称为bbs的redis cache对象\n  cache bbscache = redis.use("bbs");\n  bbscache.set("key", "value");\n  bbscache.get("key");\n \n  // 获取名称为news的redis cache对象\n  cache newscache = redis.use("news");\n  newscache.set("k", "v");\n  newscache.get("k");\n \n  // 最先创建的cache将成为主cache，所以可以省去cachename参数来获取\n  bbscache = redis.use();    // 主缓存可以省去cachename参数\n  bbscache.set("jfinal", "awesome");\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n以上代码中通过”bbs”、”news”做为use方法的参数分别获取到了两个cache对象，使用这两个对象即可操作其所对应的redis服务端。\n\n通常情况下只会创建一个redisplugin连接一个redis服务端，使用redis.use().set(key,value)即可。\n\n注意：使用 incr、incrby、decr、decrby 方法操作的计数器，需要使用 getcounter(key) 进行读取而不能使用 get(key)，否则会抛反序列化异常。同理：incrby(key, value) 操作不能使用 set(key, value) 。\n\n\n# 2、新用法(建议)\n\n高版本 jfinal 针对 redis、cache 这两个类新增了 call 方法，该方法直接暴漏出 jedis 对象供使用，可以绕过序列化、反序列化过程\n\n// 使用 lambda 开放 jedis api\nlong ret = redis.call(j -> j.incrby("key", 1));\n \nlong ret = redis.call(jedis -> {\n    return jedis.incrby("key", 1);\n});\n\n\n1\n2\n3\n4\n5\n6\n\n\n如果配置了多个 cache 可以通过 redis.use(...) 先获取对应的 cache 对象再进行操作\n\n// 指定 cachename 参数再操作\nlong ret = redis.use("mycache").call(j -> j.incrby("key", 1));\n \n// redis.use() 不带参表示获取默认 cache\nlong ret = redis.use().call(j -> j.incrby("key", 1));\n\n\n1\n2\n3\n4\n5\n\n\n存入 string 以外类型数可以将其先转成 json 再操作\n\nuser user = dao.findbyid(userid);\nstring userjson = jsonkit.tojson(user);\n \nredis.call(jedis -> {\n    return jedis.set("user", userjson);\n});\n \n// 或者简化为下面代码\nredis.call(j -> j.set("user", jsonkit.tojson(user)));\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n以上 call 用法，不涉及对象的序列化、反序列化，直接操作 jedis 对象，在当下 json 非常普及的背景下是 jfinal 官方推荐的使用方法',charsets:{cjk:!0}},{title:"8.4 非web环境使用RedisPlugin",frontmatter:{},regularPath:"/zh/8%20RedisPlugin/8.4%20%E9%9D%9Eweb%E7%8E%AF%E5%A2%83%E4%BD%BF%E7%94%A8RedisPlugin.html",relativePath:"zh/8 RedisPlugin/8.4 非web环境使用RedisPlugin.md",key:"v-0268e6ef",path:"/zh/8%20RedisPlugin/8.4%20%E9%9D%9Eweb%E7%8E%AF%E5%A2%83%E4%BD%BF%E7%94%A8RedisPlugin.html",lastUpdated:"9/16/2023, 5:23:17 AM",lastUpdatedTimestamp:1694841797e3,headersStr:null,content:'# 8.4 非web环境使用RedisPlugin\n\nRedisPlugin也可以在非web环境下使用，只需引入jfinal.jar然后多调用一下redisPlugin.start()即可，以下是代码示例：\n\npublic class RedisTest {\n  public static void main(String[] args) {\n    RedisPlugin rp = new RedisPlugin("myRedis", "localhost");\n    // 与web下唯一区别是需要这里调用一次start()方法\n    rp.start();\n \n    Redis.use().set("key", "value");\n    Redis.use().get("key");\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n',normalizedContent:'# 8.4 非web环境使用redisplugin\n\nredisplugin也可以在非web环境下使用，只需引入jfinal.jar然后多调用一下redisplugin.start()即可，以下是代码示例：\n\npublic class redistest {\n  public static void main(string[] args) {\n    redisplugin rp = new redisplugin("myredis", "localhost");\n    // 与web下唯一区别是需要这里调用一次start()方法\n    rp.start();\n \n    redis.use().set("key", "value");\n    redis.use().get("key");\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n',charsets:{cjk:!0}},{title:"9.1 概述",frontmatter:{},regularPath:"/zh/9%20Cron4jPlugin/9.1%20%E6%A6%82%E8%BF%B0.html",relativePath:"zh/9 Cron4jPlugin/9.1 概述.md",key:"v-2cfe6eb6",path:"/zh/9%20Cron4jPlugin/9.1%20%E6%A6%82%E8%BF%B0.html",lastUpdated:"9/16/2023, 5:26:50 AM",lastUpdatedTimestamp:169484201e4,headersStr:null,content:"# 9.1 概述\n\nCron4jPlugin是JFinal集成的任务调度插件，通过使用Cron4jPlugin可以使用通用的cron表达式极为便利的实现任务调度功能。",normalizedContent:"# 9.1 概述\n\ncron4jplugin是jfinal集成的任务调度插件，通过使用cron4jplugin可以使用通用的cron表达式极为便利的实现任务调度功能。",charsets:{cjk:!0}},{title:"9.2 Cron4jPlugin",frontmatter:{},regularPath:"/zh/9%20Cron4jPlugin/9.2%20Cron4jPlugin.html",relativePath:"zh/9 Cron4jPlugin/9.2 Cron4jPlugin.md",key:"v-35108f42",path:"/zh/9%20Cron4jPlugin/9.2%20Cron4jPlugin.html",headers:[{level:3,title:"1､Cron4jPlugin",slug:"_1、cron4jplugin",normalizedTitle:"1､cron4jplugin",charIndex:23},{level:3,title:"2、cron 表达式",slug:"_2、cron-表达式",normalizedTitle:"2、cron 表达式",charIndex:440},{level:3,title:"常见错误：",slug:"常见错误",normalizedTitle:"常见错误：",charIndex:1245},{level:3,title:"两大疑问：",slug:"两大疑问",normalizedTitle:"两大疑问：",charIndex:1618},{level:3,title:"特别提醒：",slug:"特别提醒",normalizedTitle:"特别提醒：",charIndex:1821}],lastUpdated:"9/16/2023, 5:26:50 AM",lastUpdatedTimestamp:169484201e4,headersStr:"1､Cron4jPlugin 2、cron 表达式 常见错误： 两大疑问： 特别提醒：",content:'# 9.2 Cron4jPlugin\n\n\n# 1､Cron4jPlugin\n\nCron4jPlugin是作为JFinal的Plugin而存在的，所以使用时需要在JFinalConfig中配置，如下是代码示例：\n\nCron4jPlugin cp = new Cron4jPlugin();\ncp.addTask("* * * * *", new MyTask());\nme.add(cp);\n\n\n1\n2\n3\n\n\n如上所示创建插件、addTask 传入参数，并添加到 JFinal 即完成了基本配置，上述代码中 cp.addTask 的第一个参数用于任务调度的cron表达式，第二个参数是 Runnable 接口的一个实现类，Cron4jPlugin会根据cron表达式调用 MyTask 中的run方法。\n\n上例中的 MyTask 除了可以使用 Runnable 实现类以外，还可以使用 ITask 接口的实现类，该接中拥有一个 stop() 方法，会在调度停止时回调它。\n\n\n# 2、cron 表达式\n\ncron 表达式用于定制调度规则。与 quartz 的 cron 表达式不同，Cron4jPlugin 的 cron 表达式最多只允许五部分，每部分用空格分隔开来，这五部分从左到右依次表示分、时、天、月、周，其具体规则如下：\n\n * 分 ：从 0 到 59\n\n * 时 ：从 0 到 23\n\n * 天 ：从 1 到 31，字母 L 可以表示月的最后一天\n\n * 月 ：从 1 到 12，可以别名："jan", "feb", "mar", "apr", "may", "jun", "jul", "aug", "sep", "oct", "nov" and "dec"\n\n * 周 ：从 0 到 6，0 表示周日，6 表示周六，可以使用别名： "sun", "mon", "tue", "wed", "thu", "fri" and "sat"\n\n如上五部分的分、时、天、月、周又分别支持如下字符，其用法如下：\n\n * 数字 n：表示一个具体的时间点，例如 5 * * * * 表示 5 分这个时间点时执行\n\n * 逗号 , ：表示指定多个数值，例如 3,5 * * * * 表示 3 和 5 分这两个时间点执行\n\n * 减号 -：表示范围，例如 1-3 * * * * 表示 1 分、2 分再到 3 分这三个时间点执行\n\n * 星号 *：表示每一个时间点，例如 * * * * * 表示每分钟执行\n\n * 除号 /：表示指定一个值的增加幅度。例如 */5表示每隔5分钟执行一次（序列：0:00, 0:05, 0:10, 0:15 等等）。再例如3-18/5 * * * * 是指在从3到18分钟值这个范围之中每隔5分钟执行一次（序列：0:03, 0:08, 0:13, 0:18, 1:03, 1:08 等等）。\n\n在制定 cron 规则时，建议边对照上面的规则边制定表达式。\n\n\n# 常见错误：\n\ncron4j在表达式中使用除号指定增加幅度时与linux稍有不同。例如在linux中表达式 10/3 * * * * 的含义是从第10分钟开始，每隔三分钟调度一次，而在cron4j中需要使用 10-59/3 * * * * 来表达。避免这个常见错误的技巧是：当需要使用除号指定增加幅度时，始终指定其范围。\n\n基于上面的技巧，每隔2分钟调度一次的表达式为：0-59/2 * * * * 或者 */2 * * * * ， 而不能是0/2 * * * *\n\n以上规则不是JFinal创造，是linux通用的cron表达式规则（注意不是quartz规则），如果开发者本身具有这方面的知识，用起来会得心应手。原始文档链接：http://www.sauronsoftware.it/projects/cron4j/manual.php\n\n\n# 两大疑问：\n\n第一个疑问是当某个任务调度抛出了异常，那么这个任务在下次被调度的时间点上还会不会被调度，答案是肯定的，不管什么时候出现异常，时间一到调度仍然会被执行。\n\n第二个疑问是假如某个任务执行时间很长，如果这个任务上次调度后直到本次调度到来的时候还没执行完，那么本次调度是否还会进行，答案也是肯定的。\n\n总结一句话就是：每次调度都是独立的，上次调度是否抛出异常、是否执行完，都与本次调度无关。\n\n\n# 特别提醒：\n\nCron4jPlugin的cron表达式与linux一样只有5个部分，与quartz这个项目的7个部分不一样，但凡在网上搜索到的7部分cron表达式都不要试图应用在Cron4jPlugin之中。',normalizedContent:'# 9.2 cron4jplugin\n\n\n# 1､cron4jplugin\n\ncron4jplugin是作为jfinal的plugin而存在的，所以使用时需要在jfinalconfig中配置，如下是代码示例：\n\ncron4jplugin cp = new cron4jplugin();\ncp.addtask("* * * * *", new mytask());\nme.add(cp);\n\n\n1\n2\n3\n\n\n如上所示创建插件、addtask 传入参数，并添加到 jfinal 即完成了基本配置，上述代码中 cp.addtask 的第一个参数用于任务调度的cron表达式，第二个参数是 runnable 接口的一个实现类，cron4jplugin会根据cron表达式调用 mytask 中的run方法。\n\n上例中的 mytask 除了可以使用 runnable 实现类以外，还可以使用 itask 接口的实现类，该接中拥有一个 stop() 方法，会在调度停止时回调它。\n\n\n# 2、cron 表达式\n\ncron 表达式用于定制调度规则。与 quartz 的 cron 表达式不同，cron4jplugin 的 cron 表达式最多只允许五部分，每部分用空格分隔开来，这五部分从左到右依次表示分、时、天、月、周，其具体规则如下：\n\n * 分 ：从 0 到 59\n\n * 时 ：从 0 到 23\n\n * 天 ：从 1 到 31，字母 l 可以表示月的最后一天\n\n * 月 ：从 1 到 12，可以别名："jan", "feb", "mar", "apr", "may", "jun", "jul", "aug", "sep", "oct", "nov" and "dec"\n\n * 周 ：从 0 到 6，0 表示周日，6 表示周六，可以使用别名： "sun", "mon", "tue", "wed", "thu", "fri" and "sat"\n\n如上五部分的分、时、天、月、周又分别支持如下字符，其用法如下：\n\n * 数字 n：表示一个具体的时间点，例如 5 * * * * 表示 5 分这个时间点时执行\n\n * 逗号 , ：表示指定多个数值，例如 3,5 * * * * 表示 3 和 5 分这两个时间点执行\n\n * 减号 -：表示范围，例如 1-3 * * * * 表示 1 分、2 分再到 3 分这三个时间点执行\n\n * 星号 *：表示每一个时间点，例如 * * * * * 表示每分钟执行\n\n * 除号 /：表示指定一个值的增加幅度。例如 */5表示每隔5分钟执行一次（序列：0:00, 0:05, 0:10, 0:15 等等）。再例如3-18/5 * * * * 是指在从3到18分钟值这个范围之中每隔5分钟执行一次（序列：0:03, 0:08, 0:13, 0:18, 1:03, 1:08 等等）。\n\n在制定 cron 规则时，建议边对照上面的规则边制定表达式。\n\n\n# 常见错误：\n\ncron4j在表达式中使用除号指定增加幅度时与linux稍有不同。例如在linux中表达式 10/3 * * * * 的含义是从第10分钟开始，每隔三分钟调度一次，而在cron4j中需要使用 10-59/3 * * * * 来表达。避免这个常见错误的技巧是：当需要使用除号指定增加幅度时，始终指定其范围。\n\n基于上面的技巧，每隔2分钟调度一次的表达式为：0-59/2 * * * * 或者 */2 * * * * ， 而不能是0/2 * * * *\n\n以上规则不是jfinal创造，是linux通用的cron表达式规则（注意不是quartz规则），如果开发者本身具有这方面的知识，用起来会得心应手。原始文档链接：http://www.sauronsoftware.it/projects/cron4j/manual.php\n\n\n# 两大疑问：\n\n第一个疑问是当某个任务调度抛出了异常，那么这个任务在下次被调度的时间点上还会不会被调度，答案是肯定的，不管什么时候出现异常，时间一到调度仍然会被执行。\n\n第二个疑问是假如某个任务执行时间很长，如果这个任务上次调度后直到本次调度到来的时候还没执行完，那么本次调度是否还会进行，答案也是肯定的。\n\n总结一句话就是：每次调度都是独立的，上次调度是否抛出异常、是否执行完，都与本次调度无关。\n\n\n# 特别提醒：\n\ncron4jplugin的cron表达式与linux一样只有5个部分，与quartz这个项目的7个部分不一样，但凡在网上搜索到的7部分cron表达式都不要试图应用在cron4jplugin之中。',charsets:{cjk:!0}},{title:"9.3 使用外部配置文件",frontmatter:{},regularPath:"/zh/9%20Cron4jPlugin/9.3%20%E4%BD%BF%E7%94%A8%E5%A4%96%E9%83%A8%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.html",relativePath:"zh/9 Cron4jPlugin/9.3 使用外部配置文件.md",key:"v-bc954fe0",path:"/zh/9%20Cron4jPlugin/9.3%20%E4%BD%BF%E7%94%A8%E5%A4%96%E9%83%A8%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.html",lastUpdated:"9/16/2023, 5:26:50 AM",lastUpdatedTimestamp:169484201e4,headersStr:null,content:'# 9.3 使用外部配置文件\n\n上一个示例仅展示了java硬编码式的配置，更多的应用场景是使用外部配置文件，灵活配置调度策略，以便于随时改变调度策略，如下是外部配置的代码示例：\n\ncron4j=task1, task2\ntask1.cron=* * * * *\ntask1.class=com.xxx.TaskAaa\ntask1.daemon=true\ntask1.enable=true\n \ntask2.cron=* * * * *\ntask2.class=com.xxx.TaskBbb\ntask2.daemon=true\ntask2.enable=false\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上例中的cront4j是所谓的配置名称：configName，可以随便取名，这个名称在创建Cron4jPlugin对象时会被用到，如果创建Cron4jPlugin对象时不提供名称则默认值为 "cron4j"。\n\n上例中的configName后面紧跟着的是task1、task2，表示当前配置的两个task 的名称，这两个名称规定了后续的配置将以其打头，例如后面的task1.cron、task2.cron都是以这两个task名称打头的。\n\n上例中的task1.cron是指该task的cron表达式，task1.class是指该task要调度的目标java类，该java类需要实现Runnable接口，task1.daemon是指被调度的任务线程是否为守护线程，task1.enable是指该task是开启还是停用，这个配置不是必须的，可以省略，省略时默认表示开启。同理task2的配置与task1的意义相同，只是taskName不同。\n\n总结一下：configName指定taskName，多个taskName可以逗号分隔，而每个taskName指定具体的task，每个具体的task有四项配置：cron、class、deamon、enable，每个配置以taskName打头。\n\n假定配置文件名为config.txt，配置完成以后Cron4jPlugin的创建方式可以如下：\n\ncp = new Cron4jPlugin("config.txt");\ncp = new Cron4jPlugin("config.txt", "cron4j");\n \ncp = new Cron4jPlugin(PropKit.use("config.txt"));\ncp = new Cron4jPlugin(PropKit.use("config.txt"), "cron4j");\n \nme.add(cp);\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n以上代码中，前四行代码是利用配置文件创建Cron4jPlugin对象的四种方式，第一行代码只传入了配置文件名，省去了configName，那么默认值为“cron4j”。第二代码与第一行代码本质一样，只是指定了其configName。第三与第四行代码与前两行代码类似，仅仅是利用PropKit对其进行了加载。\n\n请注意：这里所说的configName，就是前面示例中配置项 cron4j=task1, task2 中的 "cron4j"，这个configName相当于就是Cron4jPlugin寻找的配置入口。',normalizedContent:'# 9.3 使用外部配置文件\n\n上一个示例仅展示了java硬编码式的配置，更多的应用场景是使用外部配置文件，灵活配置调度策略，以便于随时改变调度策略，如下是外部配置的代码示例：\n\ncron4j=task1, task2\ntask1.cron=* * * * *\ntask1.class=com.xxx.taskaaa\ntask1.daemon=true\ntask1.enable=true\n \ntask2.cron=* * * * *\ntask2.class=com.xxx.taskbbb\ntask2.daemon=true\ntask2.enable=false\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上例中的cront4j是所谓的配置名称：configname，可以随便取名，这个名称在创建cron4jplugin对象时会被用到，如果创建cron4jplugin对象时不提供名称则默认值为 "cron4j"。\n\n上例中的configname后面紧跟着的是task1、task2，表示当前配置的两个task 的名称，这两个名称规定了后续的配置将以其打头，例如后面的task1.cron、task2.cron都是以这两个task名称打头的。\n\n上例中的task1.cron是指该task的cron表达式，task1.class是指该task要调度的目标java类，该java类需要实现runnable接口，task1.daemon是指被调度的任务线程是否为守护线程，task1.enable是指该task是开启还是停用，这个配置不是必须的，可以省略，省略时默认表示开启。同理task2的配置与task1的意义相同，只是taskname不同。\n\n总结一下：configname指定taskname，多个taskname可以逗号分隔，而每个taskname指定具体的task，每个具体的task有四项配置：cron、class、deamon、enable，每个配置以taskname打头。\n\n假定配置文件名为config.txt，配置完成以后cron4jplugin的创建方式可以如下：\n\ncp = new cron4jplugin("config.txt");\ncp = new cron4jplugin("config.txt", "cron4j");\n \ncp = new cron4jplugin(propkit.use("config.txt"));\ncp = new cron4jplugin(propkit.use("config.txt"), "cron4j");\n \nme.add(cp);\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n以上代码中，前四行代码是利用配置文件创建cron4jplugin对象的四种方式，第一行代码只传入了配置文件名，省去了configname，那么默认值为“cron4j”。第二代码与第一行代码本质一样，只是指定了其configname。第三与第四行代码与前两行代码类似，仅仅是利用propkit对其进行了加载。\n\n请注意：这里所说的configname，就是前面示例中配置项 cron4j=task1, task2 中的 "cron4j"，这个configname相当于就是cron4jplugin寻找的配置入口。',charsets:{cjk:!0}},{title:"9.4 高级用法",frontmatter:{},regularPath:"/zh/9%20Cron4jPlugin/9.4%20%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95.html",relativePath:"zh/9 Cron4jPlugin/9.4 高级用法.md",key:"v-0b234e30",path:"/zh/9%20Cron4jPlugin/9.4%20%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95.html",lastUpdated:"9/16/2023, 5:26:50 AM",lastUpdatedTimestamp:169484201e4,headersStr:null,content:'# 9.4 高级用法\n\n除了可以对实现了Runnable接口的java类进行调度以外，还可以直接调度外部的应用程序，例如windows或linux下的某个可执行程序，如下是代码示例：\n\nString[] command = { "C:\\\\tomcat\\\\bin\\\\catalina.bat", "start" };\nString[] envs = { "CATALINA_HOME=C:\\\\tomcat", "JAVA_HOME=C:\\\\jdks\\\\jdk5" };\nFile directory = "C:\\\\MyDirectory";\nProcessTask task = new ProcessTask(command, envs, directory);\n \ncron4jPlugin.addTask(task);\nme.add(cron4jPlugin);\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n如上所示，只需要创建一个ProcessTask对象，并让其指向某个应用程序，再通过addTask添加进来，就可以实现对其的调度，这种方式实现类似于每天半夜备份服务器数据库并打包成zip的功能，变得极为简单便捷。更加详细的用法，可以看一下Cron4jPlugin.java源代码中的注释。',normalizedContent:'# 9.4 高级用法\n\n除了可以对实现了runnable接口的java类进行调度以外，还可以直接调度外部的应用程序，例如windows或linux下的某个可执行程序，如下是代码示例：\n\nstring[] command = { "c:\\\\tomcat\\\\bin\\\\catalina.bat", "start" };\nstring[] envs = { "catalina_home=c:\\\\tomcat", "java_home=c:\\\\jdks\\\\jdk5" };\nfile directory = "c:\\\\mydirectory";\nprocesstask task = new processtask(command, envs, directory);\n \ncron4jplugin.addtask(task);\nme.add(cron4jplugin);\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n如上所示，只需要创建一个processtask对象，并让其指向某个应用程序，再通过addtask添加进来，就可以实现对其的调度，这种方式实现类似于每天半夜备份服务器数据库并打包成zip的功能，变得极为简单便捷。更加详细的用法，可以看一下cron4jplugin.java源代码中的注释。',charsets:{cjk:!0}},{title:"3.4 get & getPara series methods",frontmatter:{},regularPath:"/en/3%20Controller/3.4%20get%20&%20getPara%20series%20methods.html",relativePath:"en/3 Controller/3.4 get & getPara series methods.md",key:"v-70f998d1",path:"/en/3%20Controller/3.4%20get%20&%20getPara%20series%20methods.html",lastUpdated:"9/17/2023, 5:50:29 AM",lastUpdatedTimestamp:1694929829e3,headersStr:null,content:'# 3.4 get & getPara series methods\n\nThe Controller provides the getPara series of methods to obtain parameters from the request. The getPara series is divided into two types. The first type includes the getPara series of methods where the first parameter is of type String. This series of methods encapsulates the HttpServletRequest.getParameter(String name) method, and they all call HttpServletRequest.getParameter(String name).\n\nThe second type includes the getPara series of methods where the first parameter is of type int or has no parameters. This series of methods retrieves the parameter value from urlPara. getParaMap and getParaNames correspond to HttpServletRequest\'s getParameterMap and getParameterNames, respectively.\n\nMemory trick: The methods where the first parameter is a String will obtain field values from the form or URL parameters. Those with an int as the first parameter or no parameters will get the parameter values from urlPara.\n\nUsage examples of getPara:\n\nMETHOD CALL           RETURN VALUE\ngetPara("title")      Returns the form field "title" parameter value.\ngetParaToInt("age")   Returns the form field "age" parameter value and converts it\n                      to int type.\ngetPara(0)            Returns the first value of the URL\'s urlPara parameter. For\n                      example, the request\n                      http://localhost/controllerKey/method/v0-v1-v2 will return\n                      "v0".\ngetParaInt(1)         Returns the second value of the URL\'s urlPara parameter and\n                      converts it to int type. For example, the request\n                      http://localhost/controllerKey/method/2-5-9 will return 5.\ngetParaInt(2)         For the request\n                      http://localhost/controllerKey/method/2-5-N8, this will\n                      return -8. Note: The letters "N" and "n" both represent a\n                      negative sign, which is useful when the urlParaSeparator is\n                      "-".\ngetPara()             Returns the entire value of the URL\'s urlPara parameter. For\n                      example, the request\n                      http://localhost/controllerKey/method/v0-v1-v2 will return\n                      "v0-v1-v2-v3".\n\nImportant update in jfinal 3.6: JFinal 3.6 added shorter alternative methods to the getPara and getParaToXxx series of methods. Below are some usage examples:\n\n// Replacing `getPara` with `get`\nString title = get("title");\n \n// Replacing `getParaToInt` with `getInt`\nInteger age = getInt("age");\n \n// Replacing `setAttr` with `set`\nset("article", article);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nImportant update in jfinal 3.5: JFinal 3.5 introduced the getRawData() method, making it easy to retrieve String type data from the HTTP request body, typically in JSON or XML format, such as:\n\nString json = getRawData();\nUser user = FastJson.getJson().parse(json, User.class);\n\n\n1\n2\n\n\nIn the above code, getRawData() retrieves the String-type JSON data sent from the client. The getRawData() method can be called multiple times in a single request-response interaction without throwing an exception.\n\nNote that when forwarding to another action using forwardAction(...), getRawData() cannot retrieve data. In this case, use setAttr("rawData", getRawData()) to pass the data to the target action being forwarded to, and then in the target action, retrieve it using getAttr("rawData"). This situation is rare.',normalizedContent:'# 3.4 get & getpara series methods\n\nthe controller provides the getpara series of methods to obtain parameters from the request. the getpara series is divided into two types. the first type includes the getpara series of methods where the first parameter is of type string. this series of methods encapsulates the httpservletrequest.getparameter(string name) method, and they all call httpservletrequest.getparameter(string name).\n\nthe second type includes the getpara series of methods where the first parameter is of type int or has no parameters. this series of methods retrieves the parameter value from urlpara. getparamap and getparanames correspond to httpservletrequest\'s getparametermap and getparameternames, respectively.\n\nmemory trick: the methods where the first parameter is a string will obtain field values from the form or url parameters. those with an int as the first parameter or no parameters will get the parameter values from urlpara.\n\nusage examples of getpara:\n\nmethod call           return value\ngetpara("title")      returns the form field "title" parameter value.\ngetparatoint("age")   returns the form field "age" parameter value and converts it\n                      to int type.\ngetpara(0)            returns the first value of the url\'s urlpara parameter. for\n                      example, the request\n                      http://localhost/controllerkey/method/v0-v1-v2 will return\n                      "v0".\ngetparaint(1)         returns the second value of the url\'s urlpara parameter and\n                      converts it to int type. for example, the request\n                      http://localhost/controllerkey/method/2-5-9 will return 5.\ngetparaint(2)         for the request\n                      http://localhost/controllerkey/method/2-5-n8, this will\n                      return -8. note: the letters "n" and "n" both represent a\n                      negative sign, which is useful when the urlparaseparator is\n                      "-".\ngetpara()             returns the entire value of the url\'s urlpara parameter. for\n                      example, the request\n                      http://localhost/controllerkey/method/v0-v1-v2 will return\n                      "v0-v1-v2-v3".\n\nimportant update in jfinal 3.6: jfinal 3.6 added shorter alternative methods to the getpara and getparatoxxx series of methods. below are some usage examples:\n\n// replacing `getpara` with `get`\nstring title = get("title");\n \n// replacing `getparatoint` with `getint`\ninteger age = getint("age");\n \n// replacing `setattr` with `set`\nset("article", article);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nimportant update in jfinal 3.5: jfinal 3.5 introduced the getrawdata() method, making it easy to retrieve string type data from the http request body, typically in json or xml format, such as:\n\nstring json = getrawdata();\nuser user = fastjson.getjson().parse(json, user.class);\n\n\n1\n2\n\n\nin the above code, getrawdata() retrieves the string-type json data sent from the client. the getrawdata() method can be called multiple times in a single request-response interaction without throwing an exception.\n\nnote that when forwarding to another action using forwardaction(...), getrawdata() cannot retrieve data. in this case, use setattr("rawdata", getrawdata()) to pass the data to the target action being forwarded to, and then in the target action, retrieve it using getattr("rawdata"). this situation is rare.',charsets:{}}],themeConfig:{logo:"/jfinallogo.png",lastUpdated:"Last Updated",nav:[{text:"Sources",ariaLabel:"Sources Menu",items:[{text:"Gitee",link:"https://gitee.com/jfinal/jfinal"},{text:"Github",link:"https://github.com/jfinal/jfinal"}]},{text:"Languages",ariaLabel:"Language Menu",items:[{text:"Chinese",link:"/zh/1 快速上手/1.0 快速上手.md"},{text:"English",link:"/en/1 Quick Start/1.0 Quick Start.md"}]},{text:"About",link:"/about/"}],sidebar:{"/zh/":[{title:"1 快速上手",collapsable:!1,children:["1 快速上手/1.0 快速上手.md","1 快速上手/1.1 Maven 基础.md","1 快速上手/1.2 jfinal-undertow 下开发.md","1 快速上手/1.3 jfinal-undertow 下部署.md","1 快速上手/1.4 jfinal-undertow 高级用法.md","1 快速上手/1.5 jfinal-undertow 常见问题.md","1 快速上手/1.6 jetty-server 下开发.md","1 快速上手/1.7 tomcat 下部署.md","1 快速上手/1.8 非 maven 方式开发.md","1 快速上手/1.9 IDEA下开发.md","1 快速上手/1.10 JBolt 插件下开发.md","1 快速上手/1.11 特别声明.md"]},{title:"2 JFinalConfig",collapsable:!1,children:["2 JFinalConfig/2.1 概述.md","2 JFinalConfig/2.2 configConstant.md","2 JFinalConfig/2.3 configRoute.md","2 JFinalConfig/2.4 configEngine.md","2 JFinalConfig/2.5 configPlugin.md","2 JFinalConfig/2.6 configInterceptor.md","2 JFinalConfig/2.7 configHandler.md","2 JFinalConfig/2.8 onStart and onStop 回调配置.md","2 JFinalConfig/2.9 PropKit 读取配置.md"]},{title:"3 Controller",collapsable:!1,children:["3 Controller/3.1 概述.md","3 Controller/3.2 Action.md","3 Controller/3.3 Action 参数注入.md","3 Controller/3.4 get & getPara 系列方法.md","3 Controller/3.5 getBean & getModel 系列.md","3 Controller/3.6 set & setAttr 方法.md","3 Controller/3.7 render 方法.md","3 Controller/3.8 renderFile 文件下载.md","3 Controller/3.9 renderQrCode 二维码生成.md","3 Controller/3.10 session 操作.md","3 Controller/3.11 getFile 文件上传.md","3 Controller/3.12 keep 系方法.md"]},{title:"4 AOP",collapsable:!1,children:["4 AOP/4.1 概述.md","4 AOP/4.2 Interceptor.md","4 AOP/4.3 Before.md","4 AOP/4.4 Clear.md","4 AOP/4.5 Inject 依赖注入.md","4 AOP/4.6 Aop 工具.md","4 AOP/4.7 Routes 级别拦截器.md","4 AOP/4.8 Proxy 动态代理.md"]},{title:"5 ActiveRecord",collapsable:!1,children:["5 ActiveRecord/5.1 概述.md","5 ActiveRecord/5.2 ActiveRecordPlugin.md","5 ActiveRecord/5.3 Model.md","5 ActiveRecord/5.4 生成器与 JavaBean.md","5 ActiveRecord/5.5 独创Db Record模式.md","5 ActiveRecord/5.6 paginate 分页.md","5 ActiveRecord/5.7 数据库事务处理.md","5 ActiveRecord/5.8 Cache 缓存.md","5 ActiveRecord/5.9 Dialect多数据库支持.md","5 ActiveRecord/5.10 表关联操作.md","5 ActiveRecord/5.11 复合主键.md","5 ActiveRecord/5.12 Oracle支持.md","5 ActiveRecord/5.13 Enjoy SQL 模板.md","5 ActiveRecord/5.14 多数据源支持.md","5 ActiveRecord/5.15 独立使用 ActiveRecord.md","5 ActiveRecord/5.16 调用存储过程.md"]},{title:"6 Enjoy 模板引擎",collapsable:!1,children:["6 Enjoy 模板引擎/6.1 概述.md","6 Enjoy 模板引擎/6.2 引擎配置.md","6 Enjoy 模板引擎/6.3 表达式.md","6 Enjoy 模板引擎/6.4 指令.md","6 Enjoy 模板引擎/6.5 注释.md","6 Enjoy 模板引擎/6.6 原样输出.md","6 Enjoy 模板引擎/6.7 Shared Method 扩展.md","6 Enjoy 模板引擎/6.8 Shared Object扩展.md","6 Enjoy 模板引擎/6.9 Extension Method扩展.md","6 Enjoy 模板引擎/6.10 Spring boot 整合.md","6 Enjoy 模板引擎/6.11 独立使用 Enjoy.md"]},{title:"7 EhCachePlugin",collapsable:!1,children:["7 EhCachePlugin/7.1 概述.md","7 EhCachePlugin/7.2 EhCachePlugin.md","7 EhCachePlugin/7.3 CacheInterceptor.md","7 EhCachePlugin/7.4 EvictInterceptor.md","7 EhCachePlugin/7.5 CacheKit.md","7 EhCachePlugin/7.6 ehcache.xml简介.md"]},{title:"8 RedisPlugin",collapsable:!1,children:["8 RedisPlugin/8.1 概述.md","8 RedisPlugin/8.2 RedisPlugin.md","8 RedisPlugin/8.3 Redis与Cache.md","8 RedisPlugin/8.4 非web环境使用RedisPlugin.md"]},{title:"9 Cron4jPlugin",collapsable:!1,children:["9 Cron4jPlugin/9.1 概述.md","9 Cron4jPlugin/9.2 Cron4jPlugin.md","9 Cron4jPlugin/9.3 使用外部配置文件.md","9 Cron4jPlugin/9.4 高级用法.md"]},{title:"10 Validator",collapsable:!1,children:["10 Validator/10.1 概述.md","10 Validator/10.2 Validator.md","10 Validator/10.3 Validator配置.md"]},{title:"11 国际化",collapsable:!1,children:["11 国际化/11.1 概述.md","11 国际化/11.2 I18n与Res.md","11 国际化/11.3 I18nInterceptor.md"]},{title:"12 Json 转换",collapsable:!1,children:["12 Json 转换/12.1 概述.md","12 Json 转换/12.2 Json 配置.md","12 Json 转换/12.3 Json 的四个实现.md","12 Json 转换/12.4 Json 转换用法.md"]},{title:"13 JFinal架构及扩展",collapsable:!1,children:["13 JFinal架构及扩展/13.1 概述.md","13 JFinal架构及扩展/13.2 架构.md"]},{title:"14 升级JFinal",collapsable:!1,children:["14 升级JFinal/14.1 极速升级.md","14 升级JFinal/14.2 Ret.md","14 升级JFinal/14.3 configEngine.md","14 升级JFinal/14.4 baseViewPath.md","14 升级JFinal/14.5 RenderFactory.md","14 升级JFinal/14.6 其它.md"]}],"/en/":[{title:"1 Quick Start",collapsable:!1,children:["1 Quick Start/1.0 Quick Start.md","1 Quick Start/1.1 Basics of Maven.md","1 Quick Start/1.2 Development under jfinal-undertow.md","1 Quick Start/1.3 Deployment under jfinal-undertow.md","1 Quick Start/1.4 Advanced usage of jfinal-undertow.md","1 Quick Start/1.5 Common issues with jfinal-undertow.md","1 Quick Start/1.6 Development under jetty-server.md","1 Quick Start/1.7 Deployment under tomcat.md","1 Quick Start/1.8 Development without Maven.md","1 Quick Start/1.9 Development under IDEA.md","1 Quick Start/1.10 Development under JBolt plugin.md","1 Quick Start/1.11 Special Statement.md"]},{title:"2 JFinalConfig",collapsable:!1,children:["2 JFinalConfig/2.1 Overview.md","2 JFinalConfig/2.2 configConstant.md","2 JFinalConfig/2.3 configRoute.md","2 JFinalConfig/2.4 configEngine.md","2 JFinalConfig/2.5 configPlugin.md","2 JFinalConfig/2.6 configInterceptor.md","2 JFinalConfig/2.7 configHandler.md","2 JFinalConfig/2.8 onStart and onStop callback configuration.md","2 JFinalConfig/2.9 PropKit configuration reading.md"]},{title:"3 Controller",collapsable:!1,children:["3 Controller/3.1 Overview.md","3 Controller/3.2 Action.md","3 Controller/3.3 Action parameter injection.md","3 Controller/3.4 get & getPara series methods.md","3 Controller/3.5 getBean & getModel series.md","3 Controller/3.6 set & setAttr methods.md","3 Controller/3.7 render method.md","3 Controller/3.8 renderFile file download.md","3 Controller/3.9 renderQrCode QR code generation.md","3 Controller/3.10 session operations.md","3 Controller/3.11 getFile file upload.md","3 Controller/3.12 keep series methods.md"]},{title:"4 AOP",collapsable:!1,children:["4 AOP/4.1 Overview.md","4 AOP/4.2 Interceptor.md","4 AOP/4.3 Before.md","4 AOP/4.4 Clear.md","4 AOP/4.5 Inject dependency injection.md","4 AOP/4.6 Aop tool.md","4 AOP/4.7 Routes level interceptor.md","4 AOP/4.8 Proxy dynamic proxy.md"]},{title:"5 ActiveRecord",collapsable:!1,children:["5 ActiveRecord/5.1 Overview.md","5 ActiveRecord/5.2 ActiveRecordPlugin.md","5 ActiveRecord/5.3 Model.md","5 ActiveRecord/5.4 Generator & JavaBean.md","5 ActiveRecord/5.5 Original Db Record mode.md","5 ActiveRecord/5.6 paginate pagination.md","5 ActiveRecord/5.7 Database transaction handling.md","5 ActiveRecord/5.8 Cache caching.md","5 ActiveRecord/5.9 Dialect multiple database support.md","5 ActiveRecord/5.10 Table association operations.md","5 ActiveRecord/5.11 Composite primary key.md","5 ActiveRecord/5.12 Oracle support.md","5 ActiveRecord/5.13 Enjoy SQL template.md","5 ActiveRecord/5.14 Multi-data source support.md","5 ActiveRecord/5.15 Use ActiveRecord independently.md","5 ActiveRecord/5.16 Call stored procedure.md"]},{title:"6 Enjoy template engine",collapsable:!1,children:["6 Enjoy template engine/6.1 Overview.md","6 Enjoy template engine/6.2 Engine configuration.md","6 Enjoy template engine/6.3 Expression.md","6 Enjoy template engine/6.4 Directive.md","6 Enjoy template engine/6.5 Comment.md","6 Enjoy template engine/6.6 Raw output.md","6 Enjoy template engine/6.7 Shared Method extension.md","6 Enjoy template engine/6.8 Shared Object extension.md","6 Enjoy template engine/6.9 Extension Method extension.md","6 Enjoy template engine/6.10 Spring boot integration.md","6 Enjoy template engine/6.11 Use Enjoy independently.md"]},{title:"7 EhCachePlugin",collapsable:!1,children:["7 EhCachePlugin/7.1 Overview.md","7 EhCachePlugin/7.2 EhCachePlugin.md","7 EhCachePlugin/7.3 CacheInterceptor.md","7 EhCachePlugin/7.4 EvictInterceptor.md","7 EhCachePlugin/7.5 CacheKit.md","7 EhCachePlugin/7.6 Introduction to ehcache.xml.md"]},{title:"8 RedisPlugin",collapsable:!1,children:["8 RedisPlugin/8.1 Overview.md","8 RedisPlugin/8.2 RedisPlugin.md","8 RedisPlugin/8.3 Redis and Cache.md","8 RedisPlugin/8.4 Use RedisPlugin in non-web environments.md"]},{title:"9 Cron4jPlugin",collapsable:!1,children:["9 Cron4jPlugin/9.1 Overview.md","9 Cron4jPlugin/9.2 Cron4jPlugin.md","9 Cron4jPlugin/9.3 Use external configuration file.md","9 Cron4jPlugin/9.4 Advanced usage.md"]},{title:"10 Validator",collapsable:!1,children:["10 Validator/10.1 Overview.md","10 Validator/10.2 Validator.md","10 Validator/10.3 Validator configuration.md"]},{title:"11 Internationalization",collapsable:!1,children:["11 Internationalization/11.1 Overview.md","11 Internationalization/11.2 I18n & Res.md","11 Internationalization/11.3 I18nInterceptor.md"]},{title:"12 Json conversion",collapsable:!1,children:["12 Json conversion/12.1 Overview.md","12 Json conversion/12.2 Json configuration.md","12 Json conversion/12.3 Four implementations of Json.md","12 Json conversion/12.4 Json conversion usage.md"]},{title:"13 JFinal architecture and extensions",collapsable:!1,children:["13 JFinal architecture and extensions/13.1 Overview.md","13 JFinal architecture and extensions/13.2 Architecture.md"]},{title:"14 Upgrade JFinal",collapsable:!1,children:["14 Upgrade JFinal/14.1 Rapid upgrade.md","14 Upgrade JFinal/14.2 Ret.md","14 Upgrade JFinal/14.3 configEngine.md","14 Upgrade JFinal/14.4 baseViewPath.md","14 Upgrade JFinal/14.5 RenderFactory.md","14 Upgrade JFinal/14.6 Others.md"]}]}}};t(260);a.a.component("Badge",()=>Promise.all([t.e(0),t.e(4)]).then(t.bind(null,388))),a.a.component("CodeBlock",()=>Promise.all([t.e(0),t.e(5)]).then(t.bind(null,385))),a.a.component("CodeGroup",()=>Promise.all([t.e(0),t.e(6)]).then(t.bind(null,386)));t(261);class An{constructor(e){Object.defineProperty(this,"registration",{value:e,configurable:!0,writable:!0})}update(){return this.registration.update()}skipWaiting(){const e=this.registration.waiting;return e?(console.log("[vuepress:sw] Doing worker.skipWaiting()."),new Promise((n,t)=>{const a=new MessageChannel;a.port1.onmessage=e=>{console.log("[vuepress:sw] Done worker.skipWaiting()."),e.data.error?t(e.data.error):n(e.data)},e.postMessage({type:"skip-waiting"},[a.port2])})):Promise.resolve()}}var Sn=t(17);a.a.component("SWUpdatePopup",()=>Promise.all([t.e(0),t.e(20)]).then(t.bind(null,383)));
/**
  * vue-class-component v7.2.6
  * (c) 2015-present Evan You
  * @license MIT
  */
function Pn(e){return(Pn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function In(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Tn(e){return function(e){if(Array.isArray(e)){for(var n=0,t=new Array(e.length);n<e.length;n++)t[n]=e[n];return t}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function _n(){return"undefined"!=typeof Reflect&&Reflect.defineMetadata&&Reflect.getOwnMetadataKeys}function Bn(e,n){Fn(e,n),Object.getOwnPropertyNames(n.prototype).forEach((function(t){Fn(e.prototype,n.prototype,t)})),Object.getOwnPropertyNames(n).forEach((function(t){Fn(e,n,t)}))}function Fn(e,n,t){(t?Reflect.getOwnMetadataKeys(n,t):Reflect.getOwnMetadataKeys(n)).forEach((function(a){var i=t?Reflect.getOwnMetadata(a,n,t):Reflect.getOwnMetadata(a,n);t?Reflect.defineMetadata(a,i,e,t):Reflect.defineMetadata(a,i,e)}))}var zn={__proto__:[]}instanceof Array;function Rn(e){return function(n,t,a){var i="function"==typeof n?n:n.constructor;i.__decorators__||(i.__decorators__=[]),"number"!=typeof a&&(a=void 0),i.__decorators__.push((function(n){return e(n,t,a)}))}}function Mn(e,n){var t=n.prototype._init;n.prototype._init=function(){var n=this,t=Object.getOwnPropertyNames(e);if(e.$options.props)for(var a in e.$options.props)e.hasOwnProperty(a)||t.push(a);t.forEach((function(t){Object.defineProperty(n,t,{get:function(){return e[t]},set:function(n){e[t]=n},configurable:!0})}))};var a=new n;n.prototype._init=t;var i={};return Object.keys(a).forEach((function(e){void 0!==a[e]&&(i[e]=a[e])})),i}var Dn=["data","beforeCreate","created","beforeMount","mounted","beforeDestroy","destroyed","beforeUpdate","updated","activated","deactivated","render","errorCaptured","serverPrefetch"];function On(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};n.name=n.name||e._componentTag||e.name;var t=e.prototype;Object.getOwnPropertyNames(t).forEach((function(e){if("constructor"!==e)if(Dn.indexOf(e)>-1)n[e]=t[e];else{var a=Object.getOwnPropertyDescriptor(t,e);void 0!==a.value?"function"==typeof a.value?(n.methods||(n.methods={}))[e]=a.value:(n.mixins||(n.mixins=[])).push({data:function(){return In({},e,a.value)}}):(a.get||a.set)&&((n.computed||(n.computed={}))[e]={get:a.get,set:a.set})}})),(n.mixins||(n.mixins=[])).push({data:function(){return Mn(this,e)}});var i=e.__decorators__;i&&(i.forEach((function(e){return e(n)})),delete e.__decorators__);var o=Object.getPrototypeOf(e.prototype),r=o instanceof a.a?o.constructor:a.a,s=r.extend(n);return Jn(s,e,r),_n()&&Bn(s,e),s}var qn={prototype:!0,arguments:!0,callee:!0,caller:!0};function Jn(e,n,t){Object.getOwnPropertyNames(n).forEach((function(a){if(!qn[a]){var i=Object.getOwnPropertyDescriptor(e,a);if(!i||i.configurable){var o,r,s=Object.getOwnPropertyDescriptor(n,a);if(!zn){if("cid"===a)return;var l=Object.getOwnPropertyDescriptor(t,a);if(o=s.value,r=Pn(o),null!=o&&("object"===r||"function"===r)&&l&&l.value===s.value)return}0,Object.defineProperty(e,a,s)}}}))}function Un(e){return"function"==typeof e?On(e):function(n){return On(n,e)}}Un.registerHooks=function(e){Dn.push.apply(Dn,Tn(e))};var Ln=Un;function Nn(e){return Rn((function(n,t){void 0===n.inject&&(n.inject={}),Array.isArray(n.inject)||(n.inject[t]=e||t)}))}function $n(e){var n=function(){var t=this,a="function"==typeof e?e.call(this):e;for(var i in(a=Object.create(a||null)).__reactiveInject__=this.__reactiveInject__||{},n.managed)a[n.managed[i]]=this[i];var o=function(e){a[n.managedReactive[e]]=r[e],Object.defineProperty(a.__reactiveInject__,n.managedReactive[e],{enumerable:!0,get:function(){return t[e]}})},r=this;for(var i in n.managedReactive)o(i);return a};return n.managed={},n.managedReactive={},n}function Hn(e){return"function"!=typeof e||!e.managed&&!e.managedReactive}var Vn="undefined"!=typeof Reflect&&void 0!==Reflect.getMetadata;function Wn(e,n,t){if(Vn&&!Array.isArray(e)&&"function"!=typeof e&&void 0===e.type){var a=Reflect.getMetadata("design:type",n,t);a!==Object&&(e.type=a)}}function Kn(e){return void 0===e&&(e={}),function(n,t){Wn(e,n,t),Rn((function(n,t){(n.props||(n.props={}))[t]=e}))(n,t)}}function Qn(e,n){void 0===n&&(n={});var t=n.deep,a=void 0!==t&&t,i=n.immediate,o=void 0!==i&&i;return Rn((function(n,t){"object"!=typeof n.watch&&(n.watch=Object.create(null));var i=n.watch;"object"!=typeof i[e]||Array.isArray(i[e])?void 0===i[e]&&(i[e]=[]):i[e]=[i[e]],i[e].push({handler:t,deep:a,immediate:o})}))}var Gn=t(16);const Yn=(e,n)=>`${e}${Object(Gn.stringify)(n,{addQueryPrefix:!0})}`,Xn=(e,n)=>`${e.replace(/\/$/,"")}/${n.replace(/^\//,"")}`;var Zn=t(114),et=t.n(Zn);const nt=e=>et()(e,"YYYY-MM-DD HH:mm:ss"),tt=e=>(e.split("#")[0]||"").split("?")[0]||"";
/*!
 * vue-i18n v8.28.2 
 * (c) 2022 kazuya kawaguchi
 * Released under the MIT License.
 */
var at=["compactDisplay","currency","currencyDisplay","currencySign","localeMatcher","notation","numberingSystem","signDisplay","style","unit","unitDisplay","useGrouping","minimumIntegerDigits","minimumFractionDigits","maximumFractionDigits","minimumSignificantDigits","maximumSignificantDigits"],it=["dateStyle","timeStyle","calendar","localeMatcher","hour12","hourCycle","timeZone","formatMatcher","weekday","era","year","month","day","hour","minute","second","timeZoneName"];function ot(e,n){"undefined"!=typeof console&&(console.warn("[vue-i18n] "+e),n&&console.warn(n.stack))}var rt=Array.isArray;function st(e){return null!==e&&"object"==typeof e}function lt(e){return"string"==typeof e}var ct=Object.prototype.toString;function dt(e){return"[object Object]"===ct.call(e)}function ut(e){return null==e}function pt(e){return"function"==typeof e}function ht(){for(var e=[],n=arguments.length;n--;)e[n]=arguments[n];var t=null,a=null;return 1===e.length?st(e[0])||rt(e[0])?a=e[0]:"string"==typeof e[0]&&(t=e[0]):2===e.length&&("string"==typeof e[0]&&(t=e[0]),(st(e[1])||rt(e[1]))&&(a=e[1])),{locale:t,params:a}}function mt(e){return JSON.parse(JSON.stringify(e))}function ft(e,n){return!!~e.indexOf(n)}var gt=Object.prototype.hasOwnProperty;function vt(e,n){return gt.call(e,n)}function bt(e){for(var n=arguments,t=Object(e),a=1;a<arguments.length;a++){var i=n[a];if(null!=i){var o=void 0;for(o in i)vt(i,o)&&(st(i[o])?t[o]=bt(t[o],i[o]):t[o]=i[o])}}return t}function yt(e,n){if(e===n)return!0;var t=st(e),a=st(n);if(!t||!a)return!t&&!a&&String(e)===String(n);try{var i=rt(e),o=rt(n);if(i&&o)return e.length===n.length&&e.every((function(e,t){return yt(e,n[t])}));if(i||o)return!1;var r=Object.keys(e),s=Object.keys(n);return r.length===s.length&&r.every((function(t){return yt(e[t],n[t])}))}catch(e){return!1}}function wt(e){return null!=e&&Object.keys(e).forEach((function(n){"string"==typeof e[n]&&(e[n]=e[n].replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&apos;"))})),e}var jt={name:"i18n",functional:!0,props:{tag:{type:[String,Boolean,Object],default:"span"},path:{type:String,required:!0},locale:{type:String},places:{type:[Array,Object]}},render:function(e,n){var t=n.data,a=n.parent,i=n.props,o=n.slots,r=a.$i18n;if(r){var s=i.path,l=i.locale,c=i.places,d=o(),u=r.i(s,l,function(e){var n;for(n in e)if("default"!==n)return!1;return Boolean(n)}(d)||c?function(e,n){var t=n?function(e){0;return Array.isArray(e)?e.reduce(Et,{}):Object.assign({},e)}(n):{};if(!e)return t;var a=(e=e.filter((function(e){return e.tag||""!==e.text.trim()}))).every(kt);0;return e.reduce(a?xt:Et,t)}(d.default,c):d),p=i.tag&&!0!==i.tag||!1===i.tag?i.tag:"span";return p?e(p,t,u):u}}};function xt(e,n){return n.data&&n.data.attrs&&n.data.attrs.place&&(e[n.data.attrs.place]=n),e}function Et(e,n,t){return e[t]=n,e}function kt(e){return Boolean(e.data&&e.data.attrs&&e.data.attrs.place)}var Ct,At={name:"i18n-n",functional:!0,props:{tag:{type:[String,Boolean,Object],default:"span"},value:{type:Number,required:!0},format:{type:[String,Object]},locale:{type:String}},render:function(e,n){var t=n.props,a=n.parent,i=n.data,o=a.$i18n;if(!o)return null;var r=null,s=null;lt(t.format)?r=t.format:st(t.format)&&(t.format.key&&(r=t.format.key),s=Object.keys(t.format).reduce((function(e,n){var a;return ft(at,n)?Object.assign({},e,((a={})[n]=t.format[n],a)):e}),null));var l=t.locale||o.locale,c=o._ntp(t.value,l,r,s),d=c.map((function(e,n){var t,a=i.scopedSlots&&i.scopedSlots[e.type];return a?a(((t={})[e.type]=e.value,t.index=n,t.parts=c,t)):e.value})),u=t.tag&&!0!==t.tag||!1===t.tag?t.tag:"span";return u?e(u,{attrs:i.attrs,class:i.class,staticClass:i.staticClass},d):d}};function St(e,n,t){Tt(e,t)&&_t(e,n,t)}function Pt(e,n,t,a){if(Tt(e,t)){var i=t.context.$i18n;(function(e,n){var t=n.context;return e._locale===t.$i18n.locale})(e,t)&&yt(n.value,n.oldValue)&&yt(e._localeMessage,i.getLocaleMessage(i.locale))||_t(e,n,t)}}function It(e,n,t,a){if(t.context){var i=t.context.$i18n||{};n.modifiers.preserve||i.preserveDirectiveContent||(e.textContent=""),e._vt=void 0,delete e._vt,e._locale=void 0,delete e._locale,e._localeMessage=void 0,delete e._localeMessage}else ot("Vue instance does not exists in VNode context")}function Tt(e,n){var t=n.context;return t?!!t.$i18n||(ot("VueI18n instance does not exists in Vue instance"),!1):(ot("Vue instance does not exists in VNode context"),!1)}function _t(e,n,t){var a,i,o=function(e){var n,t,a,i;lt(e)?n=e:dt(e)&&(n=e.path,t=e.locale,a=e.args,i=e.choice);return{path:n,locale:t,args:a,choice:i}}(n.value),r=o.path,s=o.locale,l=o.args,c=o.choice;if(r||s||l)if(r){var d=t.context;e._vt=e.textContent=null!=c?(a=d.$i18n).tc.apply(a,[r,c].concat(Bt(s,l))):(i=d.$i18n).t.apply(i,[r].concat(Bt(s,l))),e._locale=d.$i18n.locale,e._localeMessage=d.$i18n.getLocaleMessage(d.$i18n.locale)}else ot("`path` is required in v-t directive");else ot("value type not supported")}function Bt(e,n){var t=[];return e&&t.push(e),n&&(Array.isArray(n)||dt(n))&&t.push(n),t}function Ft(e,n){void 0===n&&(n={bridge:!1}),Ft.installed=!0;var t;(Ct=e).version&&Number(Ct.version.split(".")[0]);(t=Ct).prototype.hasOwnProperty("$i18n")||Object.defineProperty(t.prototype,"$i18n",{get:function(){return this._i18n}}),t.prototype.$t=function(e){for(var n=[],t=arguments.length-1;t-- >0;)n[t]=arguments[t+1];var a=this.$i18n;return a._t.apply(a,[e,a.locale,a._getMessages(),this].concat(n))},t.prototype.$tc=function(e,n){for(var t=[],a=arguments.length-2;a-- >0;)t[a]=arguments[a+2];var i=this.$i18n;return i._tc.apply(i,[e,i.locale,i._getMessages(),this,n].concat(t))},t.prototype.$te=function(e,n){var t=this.$i18n;return t._te(e,t.locale,t._getMessages(),n)},t.prototype.$d=function(e){for(var n,t=[],a=arguments.length-1;a-- >0;)t[a]=arguments[a+1];return(n=this.$i18n).d.apply(n,[e].concat(t))},t.prototype.$n=function(e){for(var n,t=[],a=arguments.length-1;a-- >0;)t[a]=arguments[a+1];return(n=this.$i18n).n.apply(n,[e].concat(t))},Ct.mixin(function(e){function n(){this!==this.$root&&this.$options.__INTLIFY_META__&&this.$el&&this.$el.setAttribute("data-intlify",this.$options.__INTLIFY_META__)}return void 0===e&&(e=!1),e?{mounted:n}:{beforeCreate:function(){var e=this.$options;if(e.i18n=e.i18n||(e.__i18nBridge||e.__i18n?{}:null),e.i18n)if(e.i18n instanceof Qt){if(e.__i18nBridge||e.__i18n)try{var n=e.i18n&&e.i18n.messages?e.i18n.messages:{};(e.__i18nBridge||e.__i18n).forEach((function(e){n=bt(n,JSON.parse(e))})),Object.keys(n).forEach((function(t){e.i18n.mergeLocaleMessage(t,n[t])}))}catch(e){0}this._i18n=e.i18n,this._i18nWatcher=this._i18n.watchI18nData()}else if(dt(e.i18n)){var t=this.$root&&this.$root.$i18n&&this.$root.$i18n instanceof Qt?this.$root.$i18n:null;if(t&&(e.i18n.root=this.$root,e.i18n.formatter=t.formatter,e.i18n.fallbackLocale=t.fallbackLocale,e.i18n.formatFallbackMessages=t.formatFallbackMessages,e.i18n.silentTranslationWarn=t.silentTranslationWarn,e.i18n.silentFallbackWarn=t.silentFallbackWarn,e.i18n.pluralizationRules=t.pluralizationRules,e.i18n.preserveDirectiveContent=t.preserveDirectiveContent),e.__i18nBridge||e.__i18n)try{var a=e.i18n&&e.i18n.messages?e.i18n.messages:{};(e.__i18nBridge||e.__i18n).forEach((function(e){a=bt(a,JSON.parse(e))})),e.i18n.messages=a}catch(e){0}var i=e.i18n.sharedMessages;i&&dt(i)&&(e.i18n.messages=bt(e.i18n.messages,i)),this._i18n=new Qt(e.i18n),this._i18nWatcher=this._i18n.watchI18nData(),(void 0===e.i18n.sync||e.i18n.sync)&&(this._localeWatcher=this.$i18n.watchLocale()),t&&t.onComponentInstanceCreated(this._i18n)}else 0;else this.$root&&this.$root.$i18n&&this.$root.$i18n instanceof Qt?this._i18n=this.$root.$i18n:e.parent&&e.parent.$i18n&&e.parent.$i18n instanceof Qt&&(this._i18n=e.parent.$i18n)},beforeMount:function(){var e=this.$options;e.i18n=e.i18n||(e.__i18nBridge||e.__i18n?{}:null),e.i18n?(e.i18n instanceof Qt||dt(e.i18n))&&(this._i18n.subscribeDataChanging(this),this._subscribing=!0):(this.$root&&this.$root.$i18n&&this.$root.$i18n instanceof Qt||e.parent&&e.parent.$i18n&&e.parent.$i18n instanceof Qt)&&(this._i18n.subscribeDataChanging(this),this._subscribing=!0)},mounted:n,beforeDestroy:function(){if(this._i18n){var e=this;this.$nextTick((function(){e._subscribing&&(e._i18n.unsubscribeDataChanging(e),delete e._subscribing),e._i18nWatcher&&(e._i18nWatcher(),e._i18n.destroyVM(),delete e._i18nWatcher),e._localeWatcher&&(e._localeWatcher(),delete e._localeWatcher)}))}}}}(n.bridge)),Ct.directive("t",{bind:St,update:Pt,unbind:It}),Ct.component(jt.name,jt),Ct.component(At.name,At),Ct.config.optionMergeStrategies.i18n=function(e,n){return void 0===n?e:n}}var zt=function(){this._caches=Object.create(null)};zt.prototype.interpolate=function(e,n){if(!n)return[e];var t=this._caches[e];return t||(t=function(e){var n=[],t=0,a="";for(;t<e.length;){var i=e[t++];if("{"===i){a&&n.push({type:"text",value:a}),a="";var o="";for(i=e[t++];void 0!==i&&"}"!==i;)o+=i,i=e[t++];var r="}"===i,s=Rt.test(o)?"list":r&&Mt.test(o)?"named":"unknown";n.push({value:o,type:s})}else"%"===i?"{"!==e[t]&&(a+=i):a+=i}return a&&n.push({type:"text",value:a}),n}(e),this._caches[e]=t),function(e,n){var t=[],a=0,i=Array.isArray(n)?"list":st(n)?"named":"unknown";if("unknown"===i)return t;for(;a<e.length;){var o=e[a];switch(o.type){case"text":t.push(o.value);break;case"list":t.push(n[parseInt(o.value,10)]);break;case"named":"named"===i&&t.push(n[o.value]);break;case"unknown":0}a++}return t}(t,n)};var Rt=/^(?:\d)+/,Mt=/^(?:\w)+/;var Dt=[];Dt[0]={ws:[0],ident:[3,0],"[":[4],eof:[7]},Dt[1]={ws:[1],".":[2],"[":[4],eof:[7]},Dt[2]={ws:[2],ident:[3,0],0:[3,0],number:[3,0]},Dt[3]={ident:[3,0],0:[3,0],number:[3,0],ws:[1,1],".":[2,1],"[":[4,1],eof:[7,1]},Dt[4]={"'":[5,0],'"':[6,0],"[":[4,2],"]":[1,3],eof:8,else:[4,0]},Dt[5]={"'":[4,0],eof:8,else:[5,0]},Dt[6]={'"':[4,0],eof:8,else:[6,0]};var Ot=/^\s?(?:true|false|-?[\d.]+|'[^']*'|"[^"]*")\s?$/;function qt(e){if(null==e)return"eof";switch(e.charCodeAt(0)){case 91:case 93:case 46:case 34:case 39:return e;case 95:case 36:case 45:return"ident";case 9:case 10:case 13:case 160:case 65279:case 8232:case 8233:return"ws"}return"ident"}function Jt(e){var n,t,a,i=e.trim();return("0"!==e.charAt(0)||!isNaN(e))&&(a=i,Ot.test(a)?(t=(n=i).charCodeAt(0))!==n.charCodeAt(n.length-1)||34!==t&&39!==t?n:n.slice(1,-1):"*"+i)}var Ut=function(){this._cache=Object.create(null)};Ut.prototype.parsePath=function(e){var n=this._cache[e];return n||(n=function(e){var n,t,a,i,o,r,s,l=[],c=-1,d=0,u=0,p=[];function h(){var n=e[c+1];if(5===d&&"'"===n||6===d&&'"'===n)return c++,a="\\"+n,p[0](),!0}for(p[1]=function(){void 0!==t&&(l.push(t),t=void 0)},p[0]=function(){void 0===t?t=a:t+=a},p[2]=function(){p[0](),u++},p[3]=function(){if(u>0)u--,d=4,p[0]();else{if(u=0,void 0===t)return!1;if(!1===(t=Jt(t)))return!1;p[1]()}};null!==d;)if(c++,"\\"!==(n=e[c])||!h()){if(i=qt(n),8===(o=(s=Dt[d])[i]||s.else||8))return;if(d=o[0],(r=p[o[1]])&&(a=void 0===(a=o[2])?n:a,!1===r()))return;if(7===d)return l}}(e))&&(this._cache[e]=n),n||[]},Ut.prototype.getPathValue=function(e,n){if(!st(e))return null;var t=this.parsePath(n);if(0===t.length)return null;for(var a=t.length,i=e,o=0;o<a;){var r=i[t[o]];if(null==r)return null;i=r,o++}return i};var Lt,Nt=/<\/?[\w\s="/.':;#-\/]+>/,$t=/(?:@(?:\.[a-zA-Z]+)?:(?:[\w\-_|./]+|\([\w\-_:|./]+\)))/g,Ht=/^@(?:\.([a-zA-Z]+))?:/,Vt=/[()]/g,Wt={upper:function(e){return e.toLocaleUpperCase()},lower:function(e){return e.toLocaleLowerCase()},capitalize:function(e){return""+e.charAt(0).toLocaleUpperCase()+e.substr(1)}},Kt=new zt,Qt=function(e){var n=this;void 0===e&&(e={}),!Ct&&"undefined"!=typeof window&&window.Vue&&Ft(window.Vue);var t=e.locale||"en-US",a=!1!==e.fallbackLocale&&(e.fallbackLocale||"en-US"),i=e.messages||{},o=e.dateTimeFormats||e.datetimeFormats||{},r=e.numberFormats||{};this._vm=null,this._formatter=e.formatter||Kt,this._modifiers=e.modifiers||{},this._missing=e.missing||null,this._root=e.root||null,this._sync=void 0===e.sync||!!e.sync,this._fallbackRoot=void 0===e.fallbackRoot||!!e.fallbackRoot,this._fallbackRootWithEmptyString=void 0===e.fallbackRootWithEmptyString||!!e.fallbackRootWithEmptyString,this._formatFallbackMessages=void 0!==e.formatFallbackMessages&&!!e.formatFallbackMessages,this._silentTranslationWarn=void 0!==e.silentTranslationWarn&&e.silentTranslationWarn,this._silentFallbackWarn=void 0!==e.silentFallbackWarn&&!!e.silentFallbackWarn,this._dateTimeFormatters={},this._numberFormatters={},this._path=new Ut,this._dataListeners=new Set,this._componentInstanceCreatedListener=e.componentInstanceCreatedListener||null,this._preserveDirectiveContent=void 0!==e.preserveDirectiveContent&&!!e.preserveDirectiveContent,this.pluralizationRules=e.pluralizationRules||{},this._warnHtmlInMessage=e.warnHtmlInMessage||"off",this._postTranslation=e.postTranslation||null,this._escapeParameterHtml=e.escapeParameterHtml||!1,"__VUE_I18N_BRIDGE__"in e&&(this.__VUE_I18N_BRIDGE__=e.__VUE_I18N_BRIDGE__),this.getChoiceIndex=function(e,t){var a=Object.getPrototypeOf(n);if(a&&a.getChoiceIndex)return a.getChoiceIndex.call(n,e,t);var i,o;return n.locale in n.pluralizationRules?n.pluralizationRules[n.locale].apply(n,[e,t]):(i=e,o=t,i=Math.abs(i),2===o?i?i>1?1:0:1:i?Math.min(i,2):0)},this._exist=function(e,t){return!(!e||!t)&&(!ut(n._path.getPathValue(e,t))||!!e[t])},"warn"!==this._warnHtmlInMessage&&"error"!==this._warnHtmlInMessage||Object.keys(i).forEach((function(e){n._checkLocaleMessage(e,n._warnHtmlInMessage,i[e])})),this._initVM({locale:t,fallbackLocale:a,messages:i,dateTimeFormats:o,numberFormats:r})},Gt={vm:{configurable:!0},messages:{configurable:!0},dateTimeFormats:{configurable:!0},numberFormats:{configurable:!0},availableLocales:{configurable:!0},locale:{configurable:!0},fallbackLocale:{configurable:!0},formatFallbackMessages:{configurable:!0},missing:{configurable:!0},formatter:{configurable:!0},silentTranslationWarn:{configurable:!0},silentFallbackWarn:{configurable:!0},preserveDirectiveContent:{configurable:!0},warnHtmlInMessage:{configurable:!0},postTranslation:{configurable:!0},sync:{configurable:!0}};Qt.prototype._checkLocaleMessage=function(e,n,t){var a=function(e,n,t,i){if(dt(t))Object.keys(t).forEach((function(o){var r=t[o];dt(r)?(i.push(o),i.push("."),a(e,n,r,i),i.pop(),i.pop()):(i.push(o),a(e,n,r,i),i.pop())}));else if(rt(t))t.forEach((function(t,o){dt(t)?(i.push("["+o+"]"),i.push("."),a(e,n,t,i),i.pop(),i.pop()):(i.push("["+o+"]"),a(e,n,t,i),i.pop())}));else if(lt(t)){if(Nt.test(t)){var o="Detected HTML in message '"+t+"' of keypath '"+i.join("")+"' at '"+n+"'. Consider component interpolation with '<i18n>' to avoid XSS. See https://bit.ly/2ZqJzkp";"warn"===e?ot(o):"error"===e&&function(e,n){"undefined"!=typeof console&&(console.error("[vue-i18n] "+e),n&&console.error(n.stack))}(o)}}};a(n,e,t,[])},Qt.prototype._initVM=function(e){var n=Ct.config.silent;Ct.config.silent=!0,this._vm=new Ct({data:e,__VUE18N__INSTANCE__:!0}),Ct.config.silent=n},Qt.prototype.destroyVM=function(){this._vm.$destroy()},Qt.prototype.subscribeDataChanging=function(e){this._dataListeners.add(e)},Qt.prototype.unsubscribeDataChanging=function(e){!function(e,n){if(e.delete(n));}(this._dataListeners,e)},Qt.prototype.watchI18nData=function(){var e=this;return this._vm.$watch("$data",(function(){for(var n,t,a=(n=e._dataListeners,t=[],n.forEach((function(e){return t.push(e)})),t),i=a.length;i--;)Ct.nextTick((function(){a[i]&&a[i].$forceUpdate()}))}),{deep:!0})},Qt.prototype.watchLocale=function(e){if(e){if(!this.__VUE_I18N_BRIDGE__)return null;var n=this,t=this._vm;return this.vm.$watch("locale",(function(a){t.$set(t,"locale",a),n.__VUE_I18N_BRIDGE__&&e&&(e.locale.value=a),t.$forceUpdate()}),{immediate:!0})}if(!this._sync||!this._root)return null;var a=this._vm;return this._root.$i18n.vm.$watch("locale",(function(e){a.$set(a,"locale",e),a.$forceUpdate()}),{immediate:!0})},Qt.prototype.onComponentInstanceCreated=function(e){this._componentInstanceCreatedListener&&this._componentInstanceCreatedListener(e,this)},Gt.vm.get=function(){return this._vm},Gt.messages.get=function(){return mt(this._getMessages())},Gt.dateTimeFormats.get=function(){return mt(this._getDateTimeFormats())},Gt.numberFormats.get=function(){return mt(this._getNumberFormats())},Gt.availableLocales.get=function(){return Object.keys(this.messages).sort()},Gt.locale.get=function(){return this._vm.locale},Gt.locale.set=function(e){this._vm.$set(this._vm,"locale",e)},Gt.fallbackLocale.get=function(){return this._vm.fallbackLocale},Gt.fallbackLocale.set=function(e){this._localeChainCache={},this._vm.$set(this._vm,"fallbackLocale",e)},Gt.formatFallbackMessages.get=function(){return this._formatFallbackMessages},Gt.formatFallbackMessages.set=function(e){this._formatFallbackMessages=e},Gt.missing.get=function(){return this._missing},Gt.missing.set=function(e){this._missing=e},Gt.formatter.get=function(){return this._formatter},Gt.formatter.set=function(e){this._formatter=e},Gt.silentTranslationWarn.get=function(){return this._silentTranslationWarn},Gt.silentTranslationWarn.set=function(e){this._silentTranslationWarn=e},Gt.silentFallbackWarn.get=function(){return this._silentFallbackWarn},Gt.silentFallbackWarn.set=function(e){this._silentFallbackWarn=e},Gt.preserveDirectiveContent.get=function(){return this._preserveDirectiveContent},Gt.preserveDirectiveContent.set=function(e){this._preserveDirectiveContent=e},Gt.warnHtmlInMessage.get=function(){return this._warnHtmlInMessage},Gt.warnHtmlInMessage.set=function(e){var n=this,t=this._warnHtmlInMessage;if(this._warnHtmlInMessage=e,t!==e&&("warn"===e||"error"===e)){var a=this._getMessages();Object.keys(a).forEach((function(e){n._checkLocaleMessage(e,n._warnHtmlInMessage,a[e])}))}},Gt.postTranslation.get=function(){return this._postTranslation},Gt.postTranslation.set=function(e){this._postTranslation=e},Gt.sync.get=function(){return this._sync},Gt.sync.set=function(e){this._sync=e},Qt.prototype._getMessages=function(){return this._vm.messages},Qt.prototype._getDateTimeFormats=function(){return this._vm.dateTimeFormats},Qt.prototype._getNumberFormats=function(){return this._vm.numberFormats},Qt.prototype._warnDefault=function(e,n,t,a,i,o){if(!ut(t))return t;if(this._missing){var r=this._missing.apply(null,[e,n,a,i]);if(lt(r))return r}else 0;if(this._formatFallbackMessages){var s=ht.apply(void 0,i);return this._render(n,o,s.params,n)}return n},Qt.prototype._isFallbackRoot=function(e){return(this._fallbackRootWithEmptyString?!e:ut(e))&&!ut(this._root)&&this._fallbackRoot},Qt.prototype._isSilentFallbackWarn=function(e){return this._silentFallbackWarn instanceof RegExp?this._silentFallbackWarn.test(e):this._silentFallbackWarn},Qt.prototype._isSilentFallback=function(e,n){return this._isSilentFallbackWarn(n)&&(this._isFallbackRoot()||e!==this.fallbackLocale)},Qt.prototype._isSilentTranslationWarn=function(e){return this._silentTranslationWarn instanceof RegExp?this._silentTranslationWarn.test(e):this._silentTranslationWarn},Qt.prototype._interpolate=function(e,n,t,a,i,o,r){if(!n)return null;var s,l=this._path.getPathValue(n,t);if(rt(l)||dt(l))return l;if(ut(l)){if(!dt(n))return null;if(!lt(s=n[t])&&!pt(s))return null}else{if(!lt(l)&&!pt(l))return null;s=l}return lt(s)&&(s.indexOf("@:")>=0||s.indexOf("@.")>=0)&&(s=this._link(e,n,s,a,"raw",o,r)),this._render(s,i,o,t)},Qt.prototype._link=function(e,n,t,a,i,o,r){var s=t,l=s.match($t);for(var c in l)if(l.hasOwnProperty(c)){var d=l[c],u=d.match(Ht),p=u[0],h=u[1],m=d.replace(p,"").replace(Vt,"");if(ft(r,m))return s;r.push(m);var f=this._interpolate(e,n,m,a,"raw"===i?"string":i,"raw"===i?void 0:o,r);if(this._isFallbackRoot(f)){if(!this._root)throw Error("unexpected error");var g=this._root.$i18n;f=g._translate(g._getMessages(),g.locale,g.fallbackLocale,m,a,i,o)}f=this._warnDefault(e,m,f,a,rt(o)?o:[o],i),this._modifiers.hasOwnProperty(h)?f=this._modifiers[h](f):Wt.hasOwnProperty(h)&&(f=Wt[h](f)),r.pop(),s=f?s.replace(d,f):s}return s},Qt.prototype._createMessageContext=function(e,n,t,a){var i=this,o=rt(e)?e:[],r=st(e)?e:{},s=this._getMessages(),l=this.locale;return{list:function(e){return o[e]},named:function(e){return r[e]},values:e,formatter:n,path:t,messages:s,locale:l,linked:function(e){return i._interpolate(l,s[l]||{},e,null,a,void 0,[e])}}},Qt.prototype._render=function(e,n,t,a){if(pt(e))return e(this._createMessageContext(t,this._formatter||Kt,a,n));var i=this._formatter.interpolate(e,t,a);return i||(i=Kt.interpolate(e,t,a)),"string"!==n||lt(i)?i:i.join("")},Qt.prototype._appendItemToChain=function(e,n,t){var a=!1;return ft(e,n)||(a=!0,n&&(a="!"!==n[n.length-1],n=n.replace(/!/g,""),e.push(n),t&&t[n]&&(a=t[n]))),a},Qt.prototype._appendLocaleToChain=function(e,n,t){var a,i=n.split("-");do{var o=i.join("-");a=this._appendItemToChain(e,o,t),i.splice(-1,1)}while(i.length&&!0===a);return a},Qt.prototype._appendBlockToChain=function(e,n,t){for(var a=!0,i=0;i<n.length&&"boolean"==typeof a;i++){var o=n[i];lt(o)&&(a=this._appendLocaleToChain(e,o,t))}return a},Qt.prototype._getLocaleChain=function(e,n){if(""===e)return[];this._localeChainCache||(this._localeChainCache={});var t=this._localeChainCache[e];if(!t){n||(n=this.fallbackLocale),t=[];for(var a,i=[e];rt(i);)i=this._appendBlockToChain(t,i,n);(i=lt(a=rt(n)?n:st(n)?n.default?n.default:null:n)?[a]:a)&&this._appendBlockToChain(t,i,null),this._localeChainCache[e]=t}return t},Qt.prototype._translate=function(e,n,t,a,i,o,r){for(var s,l=this._getLocaleChain(n,t),c=0;c<l.length;c++){var d=l[c];if(!ut(s=this._interpolate(d,e[d],a,i,o,r,[a])))return s}return null},Qt.prototype._t=function(e,n,t,a){for(var i,o=[],r=arguments.length-4;r-- >0;)o[r]=arguments[r+4];if(!e)return"";var s=ht.apply(void 0,o);this._escapeParameterHtml&&(s.params=wt(s.params));var l=s.locale||n,c=this._translate(t,l,this.fallbackLocale,e,a,"string",s.params);if(this._isFallbackRoot(c)){if(!this._root)throw Error("unexpected error");return(i=this._root).$t.apply(i,[e].concat(o))}return c=this._warnDefault(l,e,c,a,o,"string"),this._postTranslation&&null!=c&&(c=this._postTranslation(c,e)),c},Qt.prototype.t=function(e){for(var n,t=[],a=arguments.length-1;a-- >0;)t[a]=arguments[a+1];return(n=this)._t.apply(n,[e,this.locale,this._getMessages(),null].concat(t))},Qt.prototype._i=function(e,n,t,a,i){var o=this._translate(t,n,this.fallbackLocale,e,a,"raw",i);if(this._isFallbackRoot(o)){if(!this._root)throw Error("unexpected error");return this._root.$i18n.i(e,n,i)}return this._warnDefault(n,e,o,a,[i],"raw")},Qt.prototype.i=function(e,n,t){return e?(lt(n)||(n=this.locale),this._i(e,n,this._getMessages(),null,t)):""},Qt.prototype._tc=function(e,n,t,a,i){for(var o,r=[],s=arguments.length-5;s-- >0;)r[s]=arguments[s+5];if(!e)return"";void 0===i&&(i=1);var l={count:i,n:i},c=ht.apply(void 0,r);return c.params=Object.assign(l,c.params),r=null===c.locale?[c.params]:[c.locale,c.params],this.fetchChoice((o=this)._t.apply(o,[e,n,t,a].concat(r)),i)},Qt.prototype.fetchChoice=function(e,n){if(!e||!lt(e))return null;var t=e.split("|");return t[n=this.getChoiceIndex(n,t.length)]?t[n].trim():e},Qt.prototype.tc=function(e,n){for(var t,a=[],i=arguments.length-2;i-- >0;)a[i]=arguments[i+2];return(t=this)._tc.apply(t,[e,this.locale,this._getMessages(),null,n].concat(a))},Qt.prototype._te=function(e,n,t){for(var a=[],i=arguments.length-3;i-- >0;)a[i]=arguments[i+3];var o=ht.apply(void 0,a).locale||n;return this._exist(t[o],e)},Qt.prototype.te=function(e,n){return this._te(e,this.locale,this._getMessages(),n)},Qt.prototype.getLocaleMessage=function(e){return mt(this._vm.messages[e]||{})},Qt.prototype.setLocaleMessage=function(e,n){"warn"!==this._warnHtmlInMessage&&"error"!==this._warnHtmlInMessage||this._checkLocaleMessage(e,this._warnHtmlInMessage,n),this._vm.$set(this._vm.messages,e,n)},Qt.prototype.mergeLocaleMessage=function(e,n){"warn"!==this._warnHtmlInMessage&&"error"!==this._warnHtmlInMessage||this._checkLocaleMessage(e,this._warnHtmlInMessage,n),this._vm.$set(this._vm.messages,e,bt(void 0!==this._vm.messages[e]&&Object.keys(this._vm.messages[e]).length?Object.assign({},this._vm.messages[e]):{},n))},Qt.prototype.getDateTimeFormat=function(e){return mt(this._vm.dateTimeFormats[e]||{})},Qt.prototype.setDateTimeFormat=function(e,n){this._vm.$set(this._vm.dateTimeFormats,e,n),this._clearDateTimeFormat(e,n)},Qt.prototype.mergeDateTimeFormat=function(e,n){this._vm.$set(this._vm.dateTimeFormats,e,bt(this._vm.dateTimeFormats[e]||{},n)),this._clearDateTimeFormat(e,n)},Qt.prototype._clearDateTimeFormat=function(e,n){for(var t in n){var a=e+"__"+t;this._dateTimeFormatters.hasOwnProperty(a)&&delete this._dateTimeFormatters[a]}},Qt.prototype._localizeDateTime=function(e,n,t,a,i,o){for(var r=n,s=a[r],l=this._getLocaleChain(n,t),c=0;c<l.length;c++){var d=l[c];if(r=d,!ut(s=a[d])&&!ut(s[i]))break}if(ut(s)||ut(s[i]))return null;var u,p=s[i];if(o)u=new Intl.DateTimeFormat(r,Object.assign({},p,o));else{var h=r+"__"+i;(u=this._dateTimeFormatters[h])||(u=this._dateTimeFormatters[h]=new Intl.DateTimeFormat(r,p))}return u.format(e)},Qt.prototype._d=function(e,n,t,a){if(!t)return(a?new Intl.DateTimeFormat(n,a):new Intl.DateTimeFormat(n)).format(e);var i=this._localizeDateTime(e,n,this.fallbackLocale,this._getDateTimeFormats(),t,a);if(this._isFallbackRoot(i)){if(!this._root)throw Error("unexpected error");return this._root.$i18n.d(e,t,n)}return i||""},Qt.prototype.d=function(e){for(var n=[],t=arguments.length-1;t-- >0;)n[t]=arguments[t+1];var a=this.locale,i=null,o=null;return 1===n.length?(lt(n[0])?i=n[0]:st(n[0])&&(n[0].locale&&(a=n[0].locale),n[0].key&&(i=n[0].key)),o=Object.keys(n[0]).reduce((function(e,t){var a;return ft(it,t)?Object.assign({},e,((a={})[t]=n[0][t],a)):e}),null)):2===n.length&&(lt(n[0])&&(i=n[0]),lt(n[1])&&(a=n[1])),this._d(e,a,i,o)},Qt.prototype.getNumberFormat=function(e){return mt(this._vm.numberFormats[e]||{})},Qt.prototype.setNumberFormat=function(e,n){this._vm.$set(this._vm.numberFormats,e,n),this._clearNumberFormat(e,n)},Qt.prototype.mergeNumberFormat=function(e,n){this._vm.$set(this._vm.numberFormats,e,bt(this._vm.numberFormats[e]||{},n)),this._clearNumberFormat(e,n)},Qt.prototype._clearNumberFormat=function(e,n){for(var t in n){var a=e+"__"+t;this._numberFormatters.hasOwnProperty(a)&&delete this._numberFormatters[a]}},Qt.prototype._getNumberFormatter=function(e,n,t,a,i,o){for(var r=n,s=a[r],l=this._getLocaleChain(n,t),c=0;c<l.length;c++){var d=l[c];if(r=d,!ut(s=a[d])&&!ut(s[i]))break}if(ut(s)||ut(s[i]))return null;var u,p=s[i];if(o)u=new Intl.NumberFormat(r,Object.assign({},p,o));else{var h=r+"__"+i;(u=this._numberFormatters[h])||(u=this._numberFormatters[h]=new Intl.NumberFormat(r,p))}return u},Qt.prototype._n=function(e,n,t,a){if(!Qt.availabilities.numberFormat)return"";if(!t)return(a?new Intl.NumberFormat(n,a):new Intl.NumberFormat(n)).format(e);var i=this._getNumberFormatter(e,n,this.fallbackLocale,this._getNumberFormats(),t,a),o=i&&i.format(e);if(this._isFallbackRoot(o)){if(!this._root)throw Error("unexpected error");return this._root.$i18n.n(e,Object.assign({},{key:t,locale:n},a))}return o||""},Qt.prototype.n=function(e){for(var n=[],t=arguments.length-1;t-- >0;)n[t]=arguments[t+1];var a=this.locale,i=null,o=null;return 1===n.length?lt(n[0])?i=n[0]:st(n[0])&&(n[0].locale&&(a=n[0].locale),n[0].key&&(i=n[0].key),o=Object.keys(n[0]).reduce((function(e,t){var a;return ft(at,t)?Object.assign({},e,((a={})[t]=n[0][t],a)):e}),null)):2===n.length&&(lt(n[0])&&(i=n[0]),lt(n[1])&&(a=n[1])),this._n(e,a,i,o)},Qt.prototype._ntp=function(e,n,t,a){if(!Qt.availabilities.numberFormat)return[];if(!t)return(a?new Intl.NumberFormat(n,a):new Intl.NumberFormat(n)).formatToParts(e);var i=this._getNumberFormatter(e,n,this.fallbackLocale,this._getNumberFormats(),t,a),o=i&&i.formatToParts(e);if(this._isFallbackRoot(o)){if(!this._root)throw Error("unexpected error");return this._root.$i18n._ntp(e,n,t,a)}return o||[]},Object.defineProperties(Qt.prototype,Gt),Object.defineProperty(Qt,"availabilities",{get:function(){if(!Lt){var e="undefined"!=typeof Intl;Lt={dateTimeFormat:e&&void 0!==Intl.DateTimeFormat,numberFormat:e&&void 0!==Intl.NumberFormat}}return Lt}}),Qt.install=Ft,Qt.version="8.28.2";var Yt=Qt;
/*!
 * vssue - A vue-powered issue-based comment plugin
 *
 * @version v1.4.8
 * @link https://vssue.js.org
 * @license MIT
 * @copyright 2018-2021 meteorlxy
 */
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */function Xt(e,n,t,a){var i,o=arguments.length,r=o<3?n:null===a?a=Object.getOwnPropertyDescriptor(n,t):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,n,t,a);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(r=(o<3?i(r):o>3?i(n,t,r):i(n,t))||r);return o>3&&r&&Object.defineProperty(n,t,r),r}var Zt=a.a.extend({name:"Iconfont"});function ea(e,n,t,a,i,o,r,s,l,c){"boolean"!=typeof r&&(l=s,s=r,r=!1);const d="function"==typeof t?t.options:t;let u;if(e&&e.render&&(d.render=e.render,d.staticRenderFns=e.staticRenderFns,d._compiled=!0,i&&(d.functional=!0)),a&&(d._scopeId=a),o?(u=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),n&&n.call(this,l(e)),e&&e._registeredComponents&&e._registeredComponents.add(o)},d._ssrRegister=u):n&&(u=r?function(e){n.call(this,c(e,this.$root.$options.shadowRoot))}:function(e){n.call(this,s(e))}),u)if(d.functional){const e=d.render;d.render=function(n,t){return u.call(t),e(n,t)}}else{const e=d.beforeCreate;d.beforeCreate=e?[].concat(e,u):[u]}return t}"undefined"!=typeof navigator&&/msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());const na=ea({render:function(e,n){var t=n._c;return t("svg",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}]},[t("symbol",{attrs:{id:"vssue-icon-bitbucket",viewBox:"0 0 1024 1024"}},[t("path",{attrs:{d:"M579.5522464 489.45249493q4.8371808 38.38537173-30.81752427 61.55702827t-67.95459093 3.66689493q-23.79580907-10.37653333-32.6119616-35.34262826t-0.31207573-50.01020907 31.67573333-35.34262827q21.92335253-11.00068587 44.1587808-7.33379093t39.00952427 21.61127573 16.77409493 41.1160384zM647.19476053 476.65737173q-8.50407573-65.22392427-68.8908192-99.9424t-120.07131413-7.9579424q-38.38537173 17.08617173-61.24495253 53.9111616t-21.0651424 78.95527574q2.41859093 55.4715424 47.20152426 94.48106666t100.87862827 34.1723424q55.4715424-4.8371808 92.60860907-51.18049493t30.50544746-102.43900907zM792.93434133 146.32472427q-12.17097173-16.4620192-34.1723424-27.15062827t-35.34262826-13.41927573-43.30057174-7.64586667q-177.33729493-28.63299093-345.00022826 1.24830507-26.2144 4.29104747-40.25782827 7.33379093t-33.54819093 13.41927573-30.50544747 26.2144q18.2564576 17.08617173 46.34331413 27.6967616t44.78293334 13.41927574 53.36502826 7.02171413q138.95192427 17.71032427 273.06666667 0.62415253 38.38537173-4.8371808 54.53531413-7.33379093t44.1587808-13.1072 45.7191616-28.32091413zM827.65281813 777.10872427q-4.8371808 15.83786667-9.44030506 46.65539093t-8.50407574 51.18049493-17.39824746 42.6764192-35.34262827 34.4064q-52.4288 29.2571424-115.46819093 43.61264747t-123.1140576 13.41927573-122.8019808-11.3127616q-28.0088384-4.8371808-49.69813334-11.00068586t-46.65539093-16.4620192-44.4708576-26.52647574-31.67573333-37.4491424q-15.21371413-58.51428587-34.71847574-177.96144746l3.66689494-9.7523808 11.00068586-5.46133334q135.9091808 90.1900192 308.72137174 90.1900192t309.34552426-90.1900192q12.79512427 3.66689493 14.5895616 14.04342827t-3.0427424 27.46270507-4.8371808 22.54750506zM937.97175147 191.41973333q-15.83786667 101.8148576-67.64251414 399.22346667-3.0427424 18.2564576-16.4620192 34.1723424t-26.52647573 24.3419424-33.23611413 18.88060907q-153.61950507 76.7707424-371.8387808 53.67710506-151.12289493-16.4620192-240.14262827-84.72868586-9.12822827-7.33379093-15.52579093-16.1499424t-10.37653334-21.2992-5.46133333-20.75306667-3.66689493-24.10788587-3.3548192-21.2992q-5.46133333-30.50544747-16.1499424-91.43832426t-17.08617174-98.4600384-14.35550506-89.8779424-13.41927574-96.27550507q1.7944384-15.83786667 10.68860907-29.5692192t19.19268587-22.8595808 27.46270506-18.2564576 28.0088384-13.73135253 29.2571424-11.3127616q76.22460907-28.0088384 190.75657174-39.00952427 231.0144-22.54750507 412.01859093 30.50544747 94.48106667 28.0088384 131.072 74.35215253 9.7523808 12.17097173 10.0644576 31.0515808t-3.3548192 32.9240384z"}})]),n._v(" "),t("symbol",{attrs:{id:"vssue-icon-gitea",viewBox:"0 0 1024 1024"}},[t("path",{attrs:{d:"M184.31868985 236.10860742C106.94832667 235.94086648 3.32655508 285.13080468 9.02973665 408.46209936c8.93218827 192.65010787 206.32096845 210.5144844 285.20099725 212.06608453 8.63864186 36.14810496 101.48307766 160.77938883 170.21479898 167.32127321h301.09442177c180.57278288-11.99345499 315.77172611-546.07960359 215.54670217-548.09249109-165.7696721 7.79993906-264.02374305 11.74184405-348.27147151 12.41280591v166.69224585l-26.25140843-11.61603761-0.16773997-154.99233728c-96.70246985-0.04193548-181.83083757-4.52899687-343.4069947-12.49667687-20.21274496-0.12580547-48.39316992-3.5644886-78.67035236-3.64835859z m10.94507577 68.14462849h9.22573371c10.98701124 98.75729283 28.85138778 156.50200291 64.99949274 244.73357185-92.25734394-10.90314029-170.75995634-37.69970509-185.18564974-137.75698809-7.46445813-51.78991757 17.69663558-105.84433456 110.96042329-107.01851827z m358.83913087 97.07988723c6.29027343 0.08386999 12.70635233 1.25805468 18.74501482 4.02577499l31.40943263 13.54505513-22.51917887 41.05451824a28.18042496 25.03528825 0 0 0-10.10637297 1.59353561 28.18042496 25.03528825 0 0 0-16.98373825 32.038459 28.18042496 25.03528825 0 0 0 4.69673781 7.29671718l-38.83195528 70.70267333a28.18042496 25.03528825 0 0 0-9.30960467 1.59353659 28.18042496 25.03528825 0 0 0-16.98373825 32.038459 28.18042496 25.03528825 0 0 0 36.06423497 15.09665623 28.18042496 25.03528825 0 0 0 16.94180276-32.08039449 28.18042496 25.03528825 0 0 0-6.62575434-9.22573468l37.82551056-68.85752581a28.18042496 25.03528825 0 0 0 12.28700044-1.25805469 28.18042496 25.03528825 0 0 0 8.93218826-4.69673783c14.59343435 6.12253248 26.54495386 11.11281671 35.14166122 15.34826717 12.91602778 6.37414341 17.48696012 10.60959485 18.87082027 15.30633169 1.38386015 4.61286685-0.12580547 13.50312062-7.42252263 29.10299872-5.45157063 11.61603859-14.46762889 28.09655497-25.11915823 47.51253164a28.18042496 25.03528825 0 0 0-10.52572486 1.59353659 28.18042496 25.03528825 0 0 0-16.98373826 32.038459 28.18042496 25.03528825 0 0 0 36.06423498 15.09665623 28.18042496 25.03528825 0 0 0 16.94180278-32.03845901 28.18042496 25.03528825 0 0 0-5.74511608-8.47090188c10.52572388-19.20630122 19.58371762-35.72875308 25.41270465-48.14155897 7.88380904-16.85793279 11.99345499-29.39654416 8.38703091-41.51580463-3.60642311-12.11926046-14.67730434-20.0030695-29.35460966-27.25785217-9.6450856-4.73867233-21.68047607-9.77089106-36.06423399-15.80955357a28.18042496 25.03528825 0 0 0-1.59353562-10.022502 28.18042496 25.03528825 0 0 0-6.08059796-8.7644483l22.14176246-40.38355541 122.61839638 52.96410227c22.14176247 9.6031511 31.2836262 33.12877372 20.54822685 52.8382968l-84.28966393 154.32137544c-10.77733482 19.66758857-37.23841869 27.80300855-59.38018118 18.24179293l-173.48574115-74.98005927c-22.14176247-9.5612156-31.32556167-33.12877372-20.54822687-52.83829679l84.28966395-154.27943995c7.38058716-13.54505513 22.22563246-21.59660511 37.951317-22.22563246h2.68384935z"}})]),n._v(" "),t("symbol",{attrs:{id:"vssue-icon-gitee",viewBox:"0 0 1024 1024"}},[t("path",{attrs:{d:"M978.404275 409.561604H455.061338c-25.117645 0-45.499734 20.382089-45.499734 45.499734l-0.031997 113.781333c0 25.117645 20.350092 45.499734 45.499734 45.531731h318.594132c25.117645 0 45.499734 20.382089 45.499734 45.499735v22.749867a136.5312 136.5312 0 0 1-136.5312 136.5312H250.248539a45.499734 45.499734 0 0 1-45.499734-45.499734V341.343999a136.5312 136.5312 0 0 1 136.5312-136.5312L978.308284 204.780802c25.117645 0 45.499734-20.350092 45.499734-45.467738L1023.904009 45.531731h0.031997A45.499734 45.499734 0 0 0 978.468269 0h-0.031997L341.343999 0.031997C152.84967 0.031997 0.031997 152.84967 0.031997 341.343999v637.092273c0 25.117645 20.382089 45.499734 45.499734 45.499734h671.233072a307.171203 307.171203 0 0 0 307.171203-307.171203v-261.671468c0-25.117645-20.382089-45.499734-45.499734-45.499734z"}})]),n._v(" "),t("symbol",{attrs:{id:"vssue-icon-github",viewBox:"0 0 1024 1024"}},[t("path",{attrs:{d:"M512 20.4425c-278.334 0-504 225.6345-504 504 0 222.6735 144.4275 411.6105 344.673 478.233 25.2 4.662 34.461-10.9305 34.461-24.255 0-12.0015-0.4725-51.723-0.693-93.8385-140.238 30.492-169.8165-59.472-169.8165-59.472-22.932-58.2435-55.944-73.7415-55.944-73.7415-45.738-31.2795 3.465-30.6495 3.465-30.6495 50.589 3.5595 77.238 51.9435 77.238 51.9435 44.9505 77.049 117.9045 54.7785 146.664 41.895 4.5045-32.571 17.577-54.81 32.004-67.41-111.951-12.726-229.635-55.9755-229.635-249.0705 0-55.0305 19.6875-99.981 51.9435-135.2925-5.229-12.6945-22.491-63.945 4.8825-133.371 0 0 42.336-13.545 138.6315 51.66 40.194-11.1825 83.3175-16.758 126.1575-16.9785 42.8085 0.189 85.9635 5.796 126.252 16.9785 96.201-65.205 138.4425-51.66 138.4425-51.66 27.4365 69.426 10.1745 120.6765 4.9455 133.371 32.319 35.28 51.8805 80.262 51.8805 135.2925 0 193.5675-117.9045 236.187-230.139 248.6925 18.081 15.6555 34.1775 46.305 34.1775 93.3345 0 67.4415-0.5985 121.716-0.5985 138.3165 0 13.419 9.072 29.1375 34.6185 24.192 200.151-66.717 344.3895-255.5595 344.3895-478.17 0-278.3655-225.666-504-504-504z"}})]),n._v(" "),t("symbol",{attrs:{id:"vssue-icon-gitlab",viewBox:"0 0 1024 1024"}},[t("path",{attrs:{d:"M66.61375986 405.11600042L512.11376028 976.03999972 23.84576 621.65599958a39.312 39.312 0 0 1-14.07600042-43.30799944l56.8080007-173.26800028z m259.88400014 0h371.26800014L512.14975986 976.03999972zM215.11376 60.88400042l111.384 344.232H66.61375986l111.384-344.232a19.72800014 19.72800014 0 0 1 37.11600014 0z m742.49999972 344.232l56.8080007 173.2679993a39.23999986 39.23999986 0 0 1-14.07600042 43.30800042l-488.26800028 354.38400014 445.50000042-570.92400028z m0 0h-259.88400014l111.384-344.232a19.72800014 19.72800014 0 0 1 37.11600014 0z"}})]),n._v(" "),t("symbol",{attrs:{id:"vssue-icon-loading",viewBox:"0 0 1024 1024"}},[t("path",{attrs:{d:"M843.307 742.24c0 3.217 2.607 5.824 5.824 5.824s5.824-2.607 5.824-5.824a5.823 5.823 0 0 0-5.824-5.824 5.823 5.823 0 0 0-5.824 5.824zM714.731 874.912c0 6.398 5.186 11.584 11.584 11.584s11.584-5.186 11.584-11.584-5.186-11.584-11.584-11.584-11.584 5.186-11.584 11.584zM541.419 943.2c0 9.614 7.794 17.408 17.408 17.408s17.408-7.794 17.408-17.408-7.794-17.408-17.408-17.408-17.408 7.794-17.408 17.408z m-186.56-9.152c0 12.795 10.373 23.168 23.168 23.168s23.168-10.373 23.168-23.168-10.373-23.168-23.168-23.168-23.168 10.373-23.168 23.168zM189.355 849.12c0 16.012 12.98 28.992 28.992 28.992s28.992-12.98 28.992-28.992-12.98-28.992-28.992-28.992-28.992 12.98-28.992 28.992zM74.731 704.736c0 19.228 15.588 34.816 34.816 34.816s34.816-15.588 34.816-34.816-15.588-34.816-34.816-34.816-34.816 15.588-34.816 34.816z m-43.008-177.28c0 22.41 18.166 40.576 40.576 40.576s40.576-18.166 40.576-40.576-18.166-40.576-40.576-40.576-40.576 18.166-40.576 40.576z m35.392-176.128c0 25.626 20.774 46.4 46.4 46.4s46.4-20.774 46.4-46.4c0-25.626-20.774-46.4-46.4-46.4-25.626 0-46.4 20.774-46.4 46.4z m106.176-142.016c0 28.843 23.381 52.224 52.224 52.224s52.224-23.381 52.224-52.224c0-28.843-23.381-52.224-52.224-52.224-28.843 0-52.224 23.381-52.224 52.224z m155.904-81.344c0 32.024 25.96 57.984 57.984 57.984s57.984-25.96 57.984-57.984-25.96-57.984-57.984-57.984-57.984 25.96-57.984 57.984z m175.104-5.056c0 35.24 28.568 63.808 63.808 63.808s63.808-28.568 63.808-63.808c0-35.24-28.568-63.808-63.808-63.808-35.24 0-63.808 28.568-63.808 63.808z m160.32 72.128c0 38.421 31.147 69.568 69.568 69.568s69.568-31.147 69.568-69.568-31.147-69.568-69.568-69.568-69.568 31.147-69.568 69.568z m113.92 135.488c0 41.638 33.754 75.392 75.392 75.392s75.392-33.754 75.392-75.392-33.754-75.392-75.392-75.392-75.392 33.754-75.392 75.392z m45.312 175.488c0 44.854 36.362 81.216 81.216 81.216s81.216-36.362 81.216-81.216c0-44.854-36.362-81.216-81.216-81.216-44.854 0-81.216 36.362-81.216 81.216z"}})]),n._v(" "),t("symbol",{attrs:{id:"vssue-icon-like",viewBox:"0 0 1024 1024"}},[t("path",{attrs:{d:"M885.9 533.7c16.8-22.2 26.1-49.4 26.1-77.7 0-44.9-25.1-87.4-65.5-111.1a67.67 67.67 0 0 0-34.3-9.3H572.4l6-122.9c1.4-29.7-9.1-57.9-29.5-79.4-20.5-21.5-48.1-33.4-77.9-33.4-52 0-98 35-111.8 85.1l-85.9 311H144c-17.7 0-32 14.3-32 32v364c0 17.7 14.3 32 32 32h601.3c9.2 0 18.2-1.8 26.5-5.4 47.6-20.3 78.3-66.8 78.3-118.4 0-12.6-1.8-25-5.4-37 16.8-22.2 26.1-49.4 26.1-77.7 0-12.6-1.8-25-5.4-37 16.8-22.2 26.1-49.4 26.1-77.7-0.2-12.6-2-25.1-5.6-37.1zM184 852V568h81v284h-81z m636.4-353l-21.9 19 13.9 25.4c4.6 8.4 6.9 17.6 6.9 27.3 0 16.5-7.2 32.2-19.6 43l-21.9 19 13.9 25.4c4.6 8.4 6.9 17.6 6.9 27.3 0 16.5-7.2 32.2-19.6 43l-21.9 19 13.9 25.4c4.6 8.4 6.9 17.6 6.9 27.3 0 22.4-13.2 42.6-33.6 51.8H329V564.8l99.5-360.5c5.2-18.9 22.5-32.2 42.2-32.3 7.6 0 15.1 2.2 21.1 6.7 9.9 7.4 15.2 18.6 14.6 30.5l-9.6 198.4h314.4C829 418.5 840 436.9 840 456c0 16.5-7.2 32.1-19.6 43z"}})]),n._v(" "),t("symbol",{attrs:{id:"vssue-icon-unlike",viewBox:"0 0 1024 1024"}},[t("path",{attrs:{d:"M885.9 490.3c3.6-12 5.4-24.4 5.4-37 0-28.3-9.3-55.5-26.1-77.7 3.6-12 5.4-24.4 5.4-37 0-28.3-9.3-55.5-26.1-77.7 3.6-12 5.4-24.4 5.4-37 0-51.6-30.7-98.1-78.3-118.4-8.3-3.6-17.2-5.4-26.5-5.4H144c-17.7 0-32 14.3-32 32v364c0 17.7 14.3 32 32 32h129.3l85.8 310.8C372.9 889 418.9 924 470.9 924c29.7 0 57.4-11.8 77.9-33.4 20.5-21.5 31-49.7 29.5-79.4l-6-122.9h239.9c12.1 0 23.9-3.2 34.3-9.3 40.4-23.5 65.5-66.1 65.5-111 0-28.3-9.3-55.5-26.1-77.7zM184 456V172h81v284h-81z m627.2 160.4H496.8l9.6 198.4c0.6 11.9-4.7 23.1-14.6 30.5-6.1 4.5-13.6 6.8-21.1 6.7-19.6-0.1-36.9-13.4-42.2-32.3L329 459.2V172h415.4c20.4 9.2 33.6 29.4 33.6 51.8 0 9.7-2.3 18.9-6.9 27.3l-13.9 25.4 21.9 19c12.5 10.8 19.6 26.5 19.6 43 0 9.7-2.3 18.9-6.9 27.3l-13.9 25.4 21.9 19c12.5 10.8 19.6 26.5 19.6 43 0 9.7-2.3 18.9-6.9 27.3l-14 25.5 21.9 19c12.5 10.8 19.6 26.5 19.6 43 0 19.1-11 37.5-28.8 48.4z"}})]),n._v(" "),t("symbol",{attrs:{id:"vssue-icon-heart",viewBox:"0 0 1024 1024"}},[t("path",{attrs:{d:"M923 283.6c-13.4-31.1-32.6-58.9-56.9-82.8-24.3-23.8-52.5-42.4-84-55.5-32.5-13.5-66.9-20.3-102.4-20.3-49.3 0-97.4 13.5-139.2 39-10 6.1-19.5 12.8-28.5 20.1-9-7.3-18.5-14-28.5-20.1-41.8-25.5-89.9-39-139.2-39-35.5 0-69.9 6.8-102.4 20.3-31.4 13-59.7 31.7-84 55.5-24.4 23.9-43.5 51.7-56.9 82.8-13.9 32.3-21 66.6-21 101.9 0 33.3 6.8 68 20.3 103.3 11.3 29.5 27.5 60.1 48.2 91 32.8 48.9 77.9 99.9 133.9 151.6 92.8 85.7 184.7 144.9 188.6 147.3l23.7 15.2c10.5 6.7 24 6.7 34.5 0l23.7-15.2c3.9-2.5 95.7-61.6 188.6-147.3 56-51.7 101.1-102.7 133.9-151.6 20.7-30.9 37-61.5 48.2-91 13.5-35.3 20.3-70 20.3-103.3 0.1-35.3-7-69.6-20.9-101.9zM512 814.8S156 586.7 156 385.5C156 283.6 240.3 201 344.3 201c73.1 0 136.5 40.8 167.7 100.4C543.2 241.8 606.6 201 679.7 201c104 0 188.3 82.6 188.3 184.5 0 201.2-356 429.3-356 429.3z"}})]),n._v(" "),t("symbol",{attrs:{id:"vssue-icon-edit",viewBox:"0 0 1024 1024"}},[t("path",{attrs:{d:"M723.2 917.76H286.72c-65.28 0-118.4-51.2-118.4-113.92V261.76C168.32 198.4 221.44 147.2 286.72 147.2h375.04c17.92 0 32 14.08 32 32s-14.08 32-32 32H286.72c-30.08 0-54.4 22.4-54.4 49.92v542.08c0 27.52 24.32 49.92 54.4 49.92H723.2c30.08 0 54.4-22.4 54.4-49.92V440.32c0-17.92 14.08-32 32-32s32 14.08 32 32v363.52c0 62.72-53.12 113.92-118.4 113.92z"}}),n._v(" "),t("path",{attrs:{d:"M499.84 602.24c-7.68 0-14.72-2.56-21.12-7.68-13.44-11.52-14.72-32-3.2-45.44L780.16 198.4c11.52-13.44 32-14.72 45.44-3.2s14.72 32 3.2 45.44L524.16 591.36c-6.4 7.04-15.36 10.88-24.32 10.88z"}})]),n._v(" "),t("symbol",{attrs:{id:"vssue-icon-delete",viewBox:"0 0 1024 1024"}},[t("path",{attrs:{d:"M677.647059 256l0-90.352941c0-37.436235-23.461647-60.235294-61.771294-60.235294L408.094118 105.411765c-38.249412 0-61.741176 22.799059-61.741176 60.235294l0 90.352941-180.705882 0 0 60.235294 60.235294 0 0 512c0 54.272 33.972706 90.352941 90.352941 90.352941l391.529412 0c55.085176 0 90.352941-33.490824 90.352941-90.352941l0-512 60.235294 0 0-60.235294L677.647059 256zM406.588235 165.647059l210.823529 0-1.264941 90.352941L406.588235 256 406.588235 165.647059zM737.882353 858.352941l-451.764706 0 0-542.117647 451.764706 0L737.882353 858.352941zM466.823529 376.470588l-58.729412 0-1.505882 391.529412 60.235294 0L466.823529 376.470588zM617.411765 376.470588l-60.235294 0 0 391.529412 60.235294 0L617.411765 376.470588z"}})]),n._v(" "),t("symbol",{attrs:{id:"vssue-icon-reply",viewBox:"0 0 1024 1024"}},[t("path",{attrs:{d:"M426.666667 384 426.666667 213.333333 128 512 426.666667 810.666667 426.666667 635.733333C640 635.733333 789.333333 704 896 853.333333 853.333333 640 725.333333 426.666667 426.666667 384Z"}})]),n._v(" "),t("symbol",{attrs:{id:"vssue-icon-error",viewBox:"0 0 1024 1024"}},[t("path",{attrs:{d:"M512 720m-48 0a48 48 0 1 0 96 0 48 48 0 1 0-96 0Z"}}),n._v(" "),t("path",{attrs:{d:"M480 416v184c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V416c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8z"}}),n._v(" "),t("path",{attrs:{d:"M955.7 856l-416-720c-6.2-10.7-16.9-16-27.7-16s-21.6 5.3-27.7 16l-416 720C56 877.4 71.4 904 96 904h832c24.6 0 40-26.6 27.7-48z m-783.5-27.9L512 239.9l339.8 588.2H172.2z"}})])])},staticRenderFns:[]},void 0,Zt,void 0,!0,void 0,!1,void 0,void 0,void 0);const ta=ea({},void 0,a.a.extend({name:"TransitionFade",functional:!0,props:{group:{type:Boolean,required:!1,default:!1},tag:{type:String,required:!1,default:"div"}},render:(e,{props:n,children:t})=>e(n.group?"TransitionGroup":"Transition",{props:{name:"fade",mode:"out-in",appear:!0,tag:n.tag}},t)}),void 0,void 0,void 0,!1,void 0,void 0,void 0);const aa=ea({},void 0,a.a.extend({name:"VssueIcon",functional:!0,props:{name:{type:String,required:!0},title:{type:String,required:!1,default:null}},render:(e,{props:n,data:t})=>e("svg",Object.assign(Object.assign({},t),{class:["vssue-icon","vssue-icon-"+n.name],attrs:{"aria-hidden":"true"}}),[e("title",n.title),e("use",{attrs:{"xlink:href":"#vssue-icon-"+n.name}})])}),void 0,void 0,void 0,!1,void 0,void 0,void 0);let ia=class extends a.a{constructor(){super(...arguments),this.editMode=!1,this.editContent=this.comment.contentRaw,this.creatingReactions=[],this.isPutingComment=!1,this.isDeletingComment=!1}get currentUser(){return this.vssue.user?this.vssue.user.username:null}get content(){return this.comment.content}get author(){return this.comment.author}get createdAt(){return nt(this.comment.createdAt)}get updatedAt(){return nt(this.comment.updatedAt)}get showReactions(){return Boolean(this.vssue.API&&this.vssue.API.platform.meta.reactable&&this.comment.reactions&&!this.editMode)}get reactionKeys(){return["heart","like","unlike"]}get editContentRows(){return this.editContent.split("\n").length-1}get editInputRows(){return this.editContentRows<3?5:this.editContentRows+2}async postReaction({reaction:e}){try{if(this.creatingReactions.includes(e))return;this.creatingReactions.push(e);await this.vssue.postCommentReaction({commentId:this.comment.id,reaction:e})||this.vssue.$emit("error",new Error(this.vssue.$t("reactionGiven",{reaction:this.vssue.$t(e)})));const n=await this.vssue.getCommentReactions({commentId:this.comment.id});n&&(this.comment.reactions=n)}finally{this.creatingReactions.splice(this.creatingReactions.findIndex(n=>n===e),1)}}enterEdit(){this.editMode=!0,this.$nextTick(()=>{this.$refs.input.focus()})}resetEdit(){this.editMode=!1,this.editContent=this.comment.contentRaw}async putComment(){try{if(this.vssue.isPending)return;if(this.editContent!==this.comment.contentRaw){this.isPutingComment=!0,this.vssue.isUpdatingComment=!0;const e=await this.vssue.putComment({commentId:this.comment.id,content:this.editContent});e&&this.vssue.comments.data.splice(this.vssue.comments.data.findIndex(e=>e.id===this.comment.id),1,e)}this.editMode=!1}finally{this.isPutingComment=!1,this.vssue.isUpdatingComment=!1}}async deleteComment(){try{if(this.vssue.isPending)return;if(!window.confirm(this.vssue.$t("deleteConfirm")))return;this.isDeletingComment=!0,this.vssue.isUpdatingComment=!0;await this.vssue.deleteComment({commentId:this.comment.id})?(this.vssue.comments.count-=1,this.vssue.comments.data.length>1&&this.vssue.comments.data.splice(this.vssue.comments.data.findIndex(e=>e.id===this.comment.id),1),this.vssue.query.page>1&&this.vssue.query.page>Math.ceil(this.vssue.comments.count/this.vssue.query.perPage)?this.vssue.query.page-=1:await this.vssue.getComments()):this.vssue.$emit("error",new Error(this.vssue.$t("deleteFailed")))}finally{this.isDeletingComment=!1,this.vssue.isUpdatingComment=!1}}};Xt([Kn({type:Object,required:!0})],ia.prototype,"comment",void 0),Xt([Nn()],ia.prototype,"vssue",void 0),ia=Xt([Ln({components:{VssueIcon:aa}})],ia);const oa=ea({render:function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{staticClass:"vssue-comment",class:{"vssue-comment-edit-mode":e.editMode,"vssue-comment-disabled":e.isDeletingComment||e.isPutingComment}},[t("div",{staticClass:"vssue-comment-avatar"},[t("a",{attrs:{href:e.author.homepage,title:e.author.username,target:"_blank",rel:"noopener noreferrer"}},[t("img",{attrs:{src:e.author.avatar,alt:e.author.username}})])]),e._v(" "),t("div",{staticClass:"vssue-comment-body"},[e._t("body",[t("div",{staticClass:"vssue-comment-header"},[t("span",{staticClass:"vssue-comment-author"},[t("a",{attrs:{href:e.author.homepage,title:e.author.username,target:"_blank",rel:"noopener noreferrer"}},[e._v("\n            "+e._s(e.author.username)+"\n          ")])]),e._v(" "),t("span",{staticClass:"vssue-comment-created-at"},[e._v("\n          "+e._s(e.createdAt)+"\n        ")])]),e._v(" "),t("div",{staticClass:"vssue-comment-main"},[e.editMode?t("textarea",{directives:[{name:"model",rawName:"v-model",value:e.editContent,expression:"editContent"}],ref:"input",staticClass:"vssue-edit-comment-input",attrs:{rows:e.editInputRows},domProps:{value:e.editContent},on:{keyup:function(n){return!n.type.indexOf("key")&&e._k(n.keyCode,"enter",13,n.key,"Enter")?null:n.ctrlKey?e.putComment():null},input:function(n){n.target.composing||(e.editContent=n.target.value)}}}):t("article",{staticClass:"markdown-body",domProps:{innerHTML:e._s(e.content)}})]),e._v(" "),t("div",{staticClass:"vssue-comment-footer"},[e.editMode?t("span",{staticClass:"vssue-comment-hint"},[e._v("\n          "+e._s(e.vssue.$t("editMode"))+"\n        ")]):e._e(),e._v(" "),e.showReactions?t("span",{staticClass:"vssue-comment-reactions"},e._l(e.reactionKeys,(function(n){return t("span",{key:n,staticClass:"vssue-comment-reaction",attrs:{title:e.vssue.$t(e.creatingReactions.includes(n)?"loading":n)},on:{click:function(t){return e.postReaction({reaction:n})}}},[t("VssueIcon",{attrs:{name:e.creatingReactions.includes(n)?"loading":n,title:e.vssue.$t(e.creatingReactions.includes(n)?"loading":n)}}),e._v(" "),t("span",{staticClass:"vssue-comment-reaction-number"},[e._v("\n              "+e._s(e.comment.reactions[n])+"\n            ")])],1)})),0):e._e(),e._v(" "),t("span",{staticClass:"vssue-comment-operations"},[e.comment.author.username===e.currentUser&&e.editMode?t("span",{staticClass:"vssue-comment-operation",class:{"vssue-comment-operation-muted":e.isPutingComment},attrs:{title:e.vssue.$t(e.isPutingComment?"loading":"submit")},on:{click:function(n){return e.putComment()}}},[t("VssueIcon",{directives:[{name:"show",rawName:"v-show",value:e.isPutingComment,expression:"isPutingComment"}],attrs:{name:"loading",title:e.vssue.$t("loading")}}),e._v("\n\n            "+e._s(e.vssue.$t("submit"))+"\n          ")],1):e._e(),e._v(" "),e.comment.author.username===e.currentUser&&e.editMode?t("span",{staticClass:"vssue-comment-operation vssue-comment-operation-muted",attrs:{title:e.vssue.$t("cancel")},on:{click:function(n){return e.resetEdit()}}},[e._v("\n            "+e._s(e.vssue.$t("cancel"))+"\n          ")]):e._e(),e._v(" "),e.comment.author.username===e.currentUser?t("span",{directives:[{name:"show",rawName:"v-show",value:!e.editMode,expression:"!editMode"}],staticClass:"vssue-comment-operation",on:{click:function(n){return e.enterEdit()}}},[t("VssueIcon",{attrs:{name:"edit",title:e.vssue.$t("edit")}})],1):e._e(),e._v(" "),e.comment.author.username===e.currentUser||e.vssue.isAdmin?t("span",{directives:[{name:"show",rawName:"v-show",value:!e.editMode,expression:"!editMode"}],staticClass:"vssue-comment-operation",on:{click:function(n){return e.deleteComment()}}},[t("VssueIcon",{attrs:{name:e.isDeletingComment?"loading":"delete",title:e.vssue.$t(e.isDeletingComment?"loading":"delete")}})],1):e._e(),e._v(" "),t("span",{directives:[{name:"show",rawName:"v-show",value:!e.editMode,expression:"!editMode"}],staticClass:"vssue-comment-operation",on:{click:function(n){return e.vssue.$emit("reply-comment",e.comment)}}},[t("VssueIcon",{attrs:{name:"reply",title:e.vssue.$t("reply")}})],1)])])])],2)])},staticRenderFns:[]},void 0,ia,void 0,!1,void 0,!1,void 0,void 0,void 0);let ra=class extends a.a{get disabled(){return this.vssue.isPending}get pageCount(){const e=Math.ceil(this.vssue.comments.count/this.vssue.comments.perPage);return e>1?e:1}get perPageOptions(){const e=[5,10,20,50];return!e.includes(this.vssue.options.perPage)&&this.vssue.options.perPage<100&&e.push(this.vssue.options.perPage),e.sort((e,n)=>e-n)}get page(){return this.vssue.query.page>this.pageCount?this.pageCount:this.vssue.query.page}set page(e){e>0&&e<=this.pageCount&&(this.vssue.query.page=e)}get perPage(){return this.vssue.query.perPage}set perPage(e){this.perPageOptions.includes(e)&&(this.vssue.query.perPage=e)}};Xt([Nn()],ra.prototype,"vssue",void 0),ra=Xt([Ln({components:{VssueIcon:aa}})],ra);const sa=ea({render:function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{staticClass:"vssue-pagination"},[t("div",{staticClass:"vssue-pagination-per-page"},[t("label",[t("select",{directives:[{name:"model",rawName:"v-model",value:e.perPage,expression:"perPage"}],staticClass:"vssue-pagination-select",attrs:{disabled:e.disabled},on:{change:function(n){var t=Array.prototype.filter.call(n.target.options,(function(e){return e.selected})).map((function(e){return"_value"in e?e._value:e.value}));e.perPage=n.target.multiple?t:t[0]}}},e._l(e.perPageOptions,(function(n){return t("option",{key:n,domProps:{value:n}},[e._v("\n          "+e._s(n)+"\n        ")])})),0),e._v(" "),t("span",[e._v("\n        "+e._s(e.vssue.$t("perPage"))+"\n      ")])]),e._v(" "),e.vssue.API.platform.meta.sortable?t("span",{class:{"vssue-pagination-link":!0,disabled:e.disabled},attrs:{title:e.vssue.$t("sort")},on:{click:function(n){e.vssue.query.sort="asc"===e.vssue.query.sort?"desc":"asc"}}},[e._v("\n      "+e._s("asc"===e.vssue.query.sort?"↑":"↓")+"\n    ")]):e._e()]),e._v(" "),t("div",{staticClass:"vssue-pagination-page"},[t("span",{class:{"vssue-pagination-link":!0,disabled:1===e.page||e.disabled},attrs:{title:e.vssue.$t("prev")},domProps:{textContent:e._s("<")},on:{click:function(n){e.page-=1}}}),e._v(" "),t("label",[t("span",[e._v("\n        "+e._s(e.vssue.$t("page"))+"\n      ")]),e._v(" "),t("select",{directives:[{name:"show",rawName:"v-show",value:e.pageCount>1,expression:"pageCount > 1"},{name:"model",rawName:"v-model",value:e.page,expression:"page"}],staticClass:"vssue-pagination-select",attrs:{disabled:e.disabled},on:{change:function(n){var t=Array.prototype.filter.call(n.target.options,(function(e){return e.selected})).map((function(e){return"_value"in e?e._value:e.value}));e.page=n.target.multiple?t:t[0]}}},e._l(e.pageCount,(function(n){return t("option",{key:n,domProps:{value:n}},[e._v("\n          "+e._s(n)+"\n        ")])})),0),e._v(" "),t("span",{directives:[{name:"show",rawName:"v-show",value:e.pageCount<2,expression:"pageCount < 2"}],domProps:{textContent:e._s(e.page)}}),e._v(" "),t("span",{domProps:{textContent:e._s(" / "+e.pageCount+" ")}})]),e._v(" "),t("span",{class:{"vssue-pagination-link":!0,disabled:e.page===e.pageCount||e.disabled},attrs:{title:e.vssue.$t("next")},domProps:{textContent:e._s(">")},on:{click:function(n){e.page+=1}}})])])},staticRenderFns:[]},void 0,ra,void 0,!1,void 0,!1,void 0,void 0,void 0);let la=class extends a.a{};Xt([Nn()],la.prototype,"vssue",void 0),la=Xt([Ln({components:{TransitionFade:ta,VssueComment:oa,VssuePagination:sa}})],la);const ca=ea({render:function(){var e=this.$createElement,n=this._self._c||e;return n("div",{staticClass:"vssue-comments"},[n("VssuePagination"),this._v(" "),n("TransitionFade",{attrs:{group:""}},this._l(this.vssue.comments.data,(function(e){return n("VssueComment",{key:e.id,attrs:{comment:e}})})),1),this._v(" "),n("VssuePagination",{directives:[{name:"show",rawName:"v-show",value:this.vssue.comments.data.length>5,expression:"vssue.comments.data.length > 5"}]})],1)},staticRenderFns:[]},void 0,la,void 0,!1,void 0,!1,void 0,void 0,void 0);const da=ea({},void 0,a.a.extend({name:"VssueIcon",functional:!0,props:{type:{type:String,required:!1,default:"default"}},render:(e,{props:n,data:t,children:a})=>e("button",Object.assign(Object.assign({},t),{class:["vssue-button","vssue-button-"+n.type]}),a)}),void 0,void 0,void 0,!1,void 0,void 0,void 0);let ua=class extends a.a{constructor(){super(...arguments),this.content=""}get user(){return this.vssue.user}get platform(){return this.vssue.API&&this.vssue.API.platform.name}get isInputDisabled(){return this.loading||null===this.user||null===this.vssue.issue}get isSubmitDisabled(){return""===this.content||this.vssue.isPending||null===this.vssue.issue}get loading(){return this.vssue.isCreatingComment}get contentRows(){return this.content.split("\n").length-1}get inputRows(){return this.contentRows<3?5:this.contentRows+2}created(){this.vssue.$on("reply-comment",e=>{const n=e.contentRaw.replace(/\n/g,"\n> "),t=`@${e.author.username}\n\n> ${n}\n\n`;this.content=this.content.concat(t),this.focus()})}beforeDestroy(){this.vssue.$off("reply-comment")}focus(){this.$refs.input.focus()}async submit(){this.isSubmitDisabled||(await this.vssue.postComment({content:this.content}),this.content="",await this.vssue.getComments())}};Xt([Nn()],ua.prototype,"vssue",void 0),ua=Xt([Ln({components:{VssueButton:da,VssueIcon:aa}})],ua);const pa=ea({render:function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{staticClass:"vssue-new-comment"},[t("div",{staticClass:"vssue-comment-avatar"},[e.user?t("a",{attrs:{href:e.user.homepage,title:e.user.username,target:"_blank",rel:"noopener noreferrer"}},[t("img",{attrs:{src:e.user.avatar,alt:e.user.username}})]):t("VssueIcon",{attrs:{name:e.platform.toLowerCase(),title:e.vssue.$t("loginToComment",{platform:e.platform})},on:{click:function(n){return e.vssue.login()}}})],1),e._v(" "),t("div",{staticClass:"vssue-new-comment-body"},[t("textarea",{directives:[{name:"model",rawName:"v-model",value:e.content,expression:"content"}],ref:"input",staticClass:"vssue-new-comment-input",attrs:{rows:e.inputRows,disabled:e.isInputDisabled,placeholder:e.vssue.$t(e.user?"placeholder":"noLoginPlaceHolder"),spellcheck:!1,"aria-label":"leave a comment"},domProps:{value:e.content},on:{keyup:function(n){return!n.type.indexOf("key")&&e._k(n.keyCode,"enter",13,n.key,"Enter")?null:n.ctrlKey?e.submit():null},input:function(n){n.target.composing||(e.content=n.target.value)}}})]),e._v(" "),t("div",{staticClass:"vssue-new-comment-footer"},[e.user?t("span",{staticClass:"vssue-current-user"},[t("span",[e._v(e._s(e.vssue.$t("currentUser"))+" - "+e._s(e.user.username)+" - ")]),e._v(" "),t("a",{staticClass:"vssue-logout",on:{click:function(n){return e.vssue.logout()}}},[e._v("\n        "+e._s(e.vssue.$t("logout"))+"\n      ")])]):t("span",{staticClass:"vssue-current-user"},[e._v("\n      "+e._s(e.vssue.$t("loginToComment",{platform:e.platform}))+"\n    ")]),e._v(" "),t("div",{staticClass:"vssue-new-comment-operations"},[e.user?t("VssueButton",{staticClass:"vssue-button-submit-comment",attrs:{type:"primary",disabled:e.isSubmitDisabled},on:{click:function(n){return e.submit()}}},[t("VssueIcon",{directives:[{name:"show",rawName:"v-show",value:e.loading,expression:"loading"}],attrs:{name:"loading"}}),e._v("\n\n        "+e._s(e.vssue.$t(e.loading?"submitting":"submitComment"))+"\n      ")],1):t("VssueButton",{staticClass:"vssue-button-login",attrs:{type:"primary",title:e.vssue.$t("loginToComment",{platform:e.platform})},on:{click:function(n){return e.vssue.login()}}},[e._v("\n        "+e._s(e.vssue.$t("login",{platform:e.platform}))+"\n      ")])],1)])])},staticRenderFns:[]},void 0,ua,void 0,!1,void 0,!1,void 0,void 0,void 0);let ha=class extends a.a{constructor(){super(...arguments),this.progress={show:!1,percent:0,timer:null,speed:200},this.alert={show:!1,message:null,timer:null}}onLoadingCommentsChange(e){this.vssue.comments&&(e?this.progressStart():this.progressDone())}created(){this.vssue.$on("error",e=>this.alertShow(e.message))}beforeDestroy(){this.vssue.$off("error"),null!==this.progress.timer&&window.clearTimeout(this.progress.timer),null!==this.alert.timer&&window.clearTimeout(this.alert.timer)}progressStart(){this.progress.show=!0,this.progress.percent=0,this.progress.timer=window.setInterval(()=>{this.progress.percent+=5,this.progress.percent>94&&null!==this.progress.timer&&window.clearInterval(this.progress.timer)},this.progress.speed)}progressDone(){this.progress.percent=100,null!==this.progress.timer&&window.clearTimeout(this.progress.timer),this.progress.timer=null,window.setTimeout(()=>{this.progress.show=!1},this.progress.speed)}alertShow(e){this.alert.show=!0,this.alert.message=e,null!==this.alert.timer&&window.clearTimeout(this.alert.timer),this.alert.timer=window.setTimeout(()=>{this.alertHide()},3e3)}alertHide(){this.alert.show=!1,null!==this.alert.timer&&window.clearTimeout(this.alert.timer),this.alert.timer=null}};Xt([Nn()],ha.prototype,"vssue",void 0),Xt([Qn("vssue.isLoadingComments")],ha.prototype,"onLoadingCommentsChange",null),ha=Xt([Ln({components:{TransitionFade:ta}})],ha);const ma=ea({render:function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{staticClass:"vssue-notice"},[t("div",{directives:[{name:"show",rawName:"v-show",value:e.progress.show,expression:"progress.show"}],staticClass:"vssue-progress",style:{width:e.progress.percent+"%",transition:"all "+e.progress.speed+"ms linear"}}),e._v(" "),t("TransitionFade",[t("div",{directives:[{name:"show",rawName:"v-show",value:e.alert.show,expression:"alert.show"}],staticClass:"vssue-alert",domProps:{textContent:e._s(e.alert.message)},on:{click:function(n){return e.alertHide()}}})])],1)},staticRenderFns:[]},void 0,ha,void 0,!1,void 0,!1,void 0,void 0,void 0);let fa=class extends a.a{get status(){return this.vssue.isFailed?"failed":this.vssue.isInitializing?"initializing":this.vssue.isIssueNotCreated&&!this.vssue.isCreatingIssue?this.vssue.isAdmin||!this.vssue.isLogined?"issueNotCreated":"failed":this.vssue.isLoginRequired?"loginRequired":!this.vssue.comments||this.vssue.isCreatingIssue?"loadingComments":0===this.vssue.comments.data.length?"noComments":null}handleClick(){"issueNotCreated"===this.status?this.vssue.postIssue():"loginRequired"===this.status&&this.vssue.login()}};Xt([Nn()],fa.prototype,"vssue",void 0),fa=Xt([Ln({components:{TransitionFade:ta,VssueIcon:aa}})],fa);const va=ea({render:function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("TransitionFade",[e.status?t("div",{key:e.status,staticClass:"vssue-status"},[["failed","loadingComments","initializing"].includes(e.status)?t("VssueIcon",{attrs:{name:"failed"===e.status?"error":"loading"}}):e._e(),e._v(" "),t("p",{staticClass:"vssue-status-info"},[t(["issueNotCreated","loginRequired"].includes(e.status)?"a":"span",{tag:"Component",on:{click:e.handleClick}},[e._v("\n        "+e._s(e.vssue.$t(e.status))+"\n      ")])],1)],1):e._e()])},staticRenderFns:[]},void 0,fa,void 0,!1,void 0,!1,void 0,void 0,void 0);let ba=class extends a.a{};Xt([Nn()],ba.prototype,"vssue",void 0),ba=Xt([Ln({components:{TransitionFade:ta,VssueIcon:aa,VssueComments:ca,VssueNewComment:pa,VssueNotice:ma,VssueStatus:va}})],ba);const ya=ea({render:function(){var e=this.$createElement,n=this._self._c||e;return n("TransitionFade",[this.vssue.isInitializing?n("VssueStatus"):n("div",{staticClass:"vssue-body"},[this.vssue.API?n("VssueNewComment"):this._e(),this._v(" "),n("VssueNotice"),this._v(" "),n("TransitionFade",[this.vssue.comments&&this.vssue.comments.data.length>0?n("VssueComments"):n("VssueStatus")],1)],1)],1)},staticRenderFns:[]},void 0,ba,void 0,!1,void 0,!1,void 0,void 0,void 0);let wa=class extends a.a{};Xt([Nn()],wa.prototype,"vssue",void 0),wa=Xt([Ln],wa);const ja=ea({render:function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{staticClass:"vssue-header"},[t("a",{staticClass:"vssue-header-comments-count",attrs:{href:e.vssue.issue?e.vssue.issue.link:null,target:"_blank",rel:"noopener noreferrer"}},[t("span",[e._v("\n      "+e._s(e.vssue.comments?e.vssue.$tc("comments",e.vssue.comments.count,{count:e.vssue.comments.count}):e.vssue.$tc("comments",0))+"\n    ")])]),e._v(" "),t("span",{staticClass:"vssue-header-powered-by"},[t("span",[e._v("Powered by")]),e._v(" "),e.vssue.API?t("span",[t("a",{attrs:{href:e.vssue.API.platform.link,title:e.vssue.API.platform.name+" API "+e.vssue.API.platform.version,target:"_blank",rel:"noopener noreferrer"}},[e._v("\n        "+e._s(e.vssue.API.platform.name)+"\n      ")]),e._v(" "),t("span",[e._v("&")])]):e._e(),e._v(" "),t("a",{attrs:{href:"https://github.com/meteorlxy/vssue",title:"Vssue v"+e.vssue.version,target:"_blank",rel:"noopener noreferrer"}},[e._v("\n      Vssue\n    ")])])])},staticRenderFns:[]},void 0,wa,void 0,!1,void 0,!1,void 0,void 0,void 0),xa={login:"Login with {platform}",logout:"Logout",currentUser:"Current User",loading:"Loading",submit:"Submit",submitting:"Submitting",submitComment:"Submit Comment",cancel:"Cancel",edit:"Edit",editMode:"Edit Mode",delete:"Delete",reply:"Reply",heart:"Heart",like:"Like",unlike:"Unlike",perPage:"Comments per page",sort:"Click to change the sort direction",page:"Page",prev:"Previous Page",next:"Next Page",comments:"Comments | {count} Comment | {count} Comments",loginToComment:"Login with {platform} account to leave a comment",placeholder:"Leave a comment. Styling with Markdown is supported. Ctrl + Enter to submit.",noLoginPlaceHolder:"Login to leave a comment. Styling with Markdown is supported. ",failed:"Failed to load comments",initializing:"Initializing...",issueNotCreated:"Click to create issue",loadingComments:"Loading comments...",loginRequired:"Login to view comments",noComments:"No comments yet. Leave the first comment !",reactionGiven:"Already given '{reaction}' reaction",deleteConfirm:"Confirm to delete this comment ?",deleteFailed:"Failed to delete comment"},Ea={login:"使用 {platform} 登录",logout:"退出登录",currentUser:"当前用户",loading:"加载中",submit:"提交",submitting:"发表中",submitComment:"发表评论",cancel:"取消",edit:"编辑",editMode:"编辑模式",delete:"删除",reply:"回复",heart:"喜欢",like:"赞",unlike:"踩",perPage:"每页评论数",sort:"点击改变排序方式",page:"页数",prev:"上一页",next:"下一页",comments:"评论 | {count} 条评论 | {count} 条评论",loginToComment:"使用 {platform} 帐号登录后发表评论",placeholder:"留下你的评论丨支持 Markdown 语法丨Ctrl + Enter 发表评论",noLoginPlaceHolder:"登录后才能发表评论丨支持 Markdown 语法",failed:"评论加载失败",initializing:"正在初始化...",issueNotCreated:"点击创建 Issue",loadingComments:"正在加载评论...",loginRequired:"登录后查看评论",noComments:"还没有评论，来发表第一条评论吧！",reactionGiven:"已经添加过 '{reaction}' 了",deleteConfirm:"确认要删除该评论吗？",deleteFailed:"评论删除失败"},ka={login:"Entrar com {platform}",logout:"Sair",currentUser:"Usuário Atual",loading:"Carregando",submit:"Enviar",submitting:"Enviando",submitComment:"Enviar Comentário",cancel:"Cancelar",edit:"Editar",editMode:"Modo de Edição",delete:"Apagar",reply:"Responder",heart:"Heart",like:"Like",unlike:"Unlike",perPage:"Comentários por página",sort:"Clique para alterar a ordenação",page:"Página",prev:"Página Anterior",next:"Próxima Página",comments:"Comentários | {count} Comentário | {count} Comentários",loginToComment:"Entre com uma conta {platform} para deixar um comentário",placeholder:"Deixe um comentário. Estilos com Markdown suportados. Ctrl + Enter para enviar.",noLoginPlaceHolder:"Entre para deixar um comentário. Estilos com Markdown suportados. ",failed:"Falha ao carregar comentários",initializing:"Inicializando...",issueNotCreated:"Click to create issue",loadingComments:"Carregando comentários...",loginRequired:"Entrar para visualizar comentários",noComments:"Nenhum comentário. Deixe o primeiro comentário!",reactionGiven:"Já reagiu com '{reaction}'",deleteConfirm:"Apagar este comentário?",deleteFailed:"Falha ao apagar comentário"},Ca={login:"{platform} でログイン",logout:"ログアウト",currentUser:"現在のユーザー",loading:"読み込み中",submit:"送信",submitting:"送信中",submitComment:"コメントを送信",cancel:"キャンセル",edit:"編集",editMode:"編集モード",delete:"削除",reply:"返信",heart:"ハート",like:"高評価",unlike:"低評価",perPage:"コメント/ページ",sort:"並び順を変更するにはクリックしてください",page:"ページ",prev:"前のページ",next:"次のページ",comments:"コメント | {count} コメント | {count} コメント",loginToComment:"コメントを残すには {platform} アカウントでログインしてください。",placeholder:"コメントを残してください。Markdown 記法をサポートしています。 Ctrl + Enter で送信できます。",noLoginPlaceHolder:"コメントを残すにはログインしてください。マークダウン記法をサポートしています。",failed:"コメントの読み込みに失敗しました",initializing:"初期化中...",issueNotCreated:"Click to create issue",loadingComments:"コメントの読み込み中...",loginRequired:"コメントを見るにはログインしてください",noComments:"まだコメントがありません。最初のコメントを残しましょう！",reactionGiven:"既に '{reaction}' のリアクションをしています",deleteConfirm:"本当にコメントを削除してもいいですか？",deleteFailed:"コメントの削除に失敗しました"},Aa={login:"התחברו עם {platform}",logout:"התנתקו",currentUser:"משתמש/ת נוכחי/ת",loading:"טוען",submit:"שליחה",submitting:"שולח",submitComment:"שליחת תגובה",cancel:"ביטל",edit:"עריכה",editMode:"מצב עריכה",delete:"מחיקה",reply:"תשובה",heart:"לב",like:"לייק",unlike:"אנלייק",perPage:"תגובות לדף",sort:"לחצו כדי לשנות את כיוון המיון",page:"דף",prev:"הדף הקודם",next:"הדף הבא",comments:"תגובות | {count} תגובה | {count} תגובות",loginToComment:"התחברו עם חשבון {platform} כדי להשאיר תגובה",placeholder:"השאירו תגובה. יש תמיכה בעיצוב בעזרת Markdown. Ctrl + Enter כדי לשלוח.",noLoginPlaceHolder:"התחברו כדי להשאיר תגובה. יש תמיכה בעיצוב בעזרת Markdown. ",failed:"כשלון בטעינת התגובות",initializing:"מאתחל...",issueNotCreated:"לחצו ליצירת issue",loadingComments:"טוען תגובות...",loginRequired:"התחברו כדי לצפות בתגובות",noComments:"עדיין אין תגובות. השאירו תגובה ראשונה !",reactionGiven:"כבר ניתן חיווי '{reaction}'",deleteConfirm:"בטוחים במחיקת התגובה ?",deleteFailed:"כשלון במחיקת התגובה"};Object.prototype.hasOwnProperty.call(a.a,"$i18n")||a.a.use(Yt);const Sa=new Yt({locale:"en",fallbackLocale:"en",messages:{en:xa,"en-US":xa,zh:Ea,"zh-CN":Ea,pt:ka,"pt-BR":ka,ja:Ca,"ja-JP":Ca,he:Aa,"he-IL":Aa}});let Pa=class extends a.a{constructor(){super(...arguments),this.title=e=>`${e.prefix}${document.title}`,this.issueId=null,this.options=null,this.API=null,this.accessToken=null,this.user=null,this.issue=null,this.comments=null,this.query={page:1,perPage:10,sort:"desc"},this.isInitializing=!0,this.isIssueNotCreated=!1,this.isLoginRequired=!1,this.isFailed=!1,this.isCreatingIssue=!1,this.isLoadingComments=!1,this.isCreatingComment=!1,this.isUpdatingComment=!1}get version(){return"1.4.8"}get issueTitle(){return null===this.options?"":"function"==typeof this.title?this.title(this.options):`${this.options.prefix}${this.title}`}get isPending(){return this.isLoadingComments||this.isCreatingComment||this.isUpdatingComment}get isLogined(){return null!==this.accessToken&&null!==this.user}get isAdmin(){return null!==this.options&&null!==this.accessToken&&null!==this.user&&(this.user.username===this.options.owner||this.options.admins.includes(this.user.username))}get accessTokenKey(){return this.API?`Vssue.${this.API.platform.name.toLowerCase()}.access_token`:""}onQueryPerPageChange(){this.query.page=1,this.getComments()}onQueryChange(){this.getComments()}setOptions(e){this.options=Object.assign({labels:["Vssue"],state:"Vssue",prefix:"[Vssue]",admins:[],perPage:10,proxy:e=>"https://cors-anywhere.azm.workers.dev/"+e,issueContent:({url:e})=>e,autoCreateIssue:!1},e);const n=["api","owner","repo","clientId"];for(const e of n)this.options[e]||console.warn(`[Vssue] the option '${e}' is required`);if(this.options.locale)this.$i18n.locale=this.options.locale;else{const e=Object.keys(this.$i18n.messages),n=window.navigator.languages;this.$i18n.locale=n.filter(n=>e.includes(n)).shift()||"en"}}async init(){try{await this.initStore(),await this.initComments()}catch(e){e.response&&[401,403].includes(e.response.status)?this.isLoginRequired=!0:this.isFailed=!0,console.error(e)}}async initStore(){try{if(!this.options)throw new Error("Options are required to initialize Vssue");this.API=null,this.accessToken=null,this.user=null,this.issue=null,this.comments=null,this.query={page:1,perPage:this.options.perPage,sort:"desc"},this.isInitializing=!0,this.isIssueNotCreated=!1,this.isLoginRequired=!1,this.isFailed=!1,this.isCreatingIssue=!1,this.isLoadingComments=!1,this.isCreatingComment=!1,this.isUpdatingComment=!1;const e=this.options.api;this.API=new e({baseURL:this.options.baseURL,labels:this.options.labels,state:this.options.state,owner:this.options.owner,repo:this.options.repo,clientId:this.options.clientId,clientSecret:this.options.clientSecret,proxy:this.options.proxy}),await this.handleAuth()}finally{this.isInitializing=!1}}async initComments(){if(this.API&&this.options)if(this.issueId){const[e,n]=await Promise.all([this.API.getIssue({accessToken:this.accessToken,issueId:this.issueId}),this.API.getComments({accessToken:this.accessToken,issueId:this.issueId,query:this.query})]);this.issue=e,this.comments=n}else this.issue=await this.API.getIssue({accessToken:this.accessToken,issueTitle:this.issueTitle}),null===this.issue?(this.isIssueNotCreated=!0,this.options.autoCreateIssue&&await this.postIssue()):await this.getComments()}async postIssue(){if(this.API&&this.options&&!this.issue&&!this.issueId&&(this.isLogined||this.login(),this.isAdmin))try{this.isCreatingIssue=!0;const e=await this.API.postIssue({title:this.issueTitle,content:await this.options.issueContent({options:this.options,url:tt(window.location.href)}),accessToken:this.accessToken});this.issue=e,this.isIssueNotCreated=!1,await this.getComments()}catch(e){this.isFailed=!0}finally{this.isCreatingIssue=!1}}async getComments(){try{if(!this.API||!this.issue||this.isLoadingComments)return;this.isLoadingComments=!0;const e=await this.API.getComments({accessToken:this.accessToken,issueId:this.issue.id,query:this.query});return this.comments=e,this.query.page!==e.page&&(this.query.page=e.page),this.query.perPage!==e.perPage&&(this.query.perPage=e.perPage),e}catch(e){if(!e.response||![401,403].includes(e.response.status)||this.isLogined)throw this.$emit("error",e),e;this.isLoginRequired=!0}finally{this.isLoadingComments=!1}}async postComment({content:e}){try{if(!this.API||!this.issue||this.isCreatingComment)return;this.isCreatingComment=!0;return await this.API.postComment({accessToken:this.accessToken,content:e,issueId:this.issue.id})}catch(e){throw this.$emit("error",e),e}finally{this.isCreatingComment=!1}}async putComment({commentId:e,content:n}){try{if(!this.API||!this.issue)return;return await this.API.putComment({accessToken:this.accessToken,issueId:this.issue.id,commentId:e,content:n})}catch(e){throw this.$emit("error",e),e}}async deleteComment({commentId:e}){try{if(!this.API||!this.issue)return;return await this.API.deleteComment({accessToken:this.accessToken,issueId:this.issue.id,commentId:e})}catch(e){throw this.$emit("error",e),e}}async getCommentReactions({commentId:e}){try{if(!this.API||!this.issue)return;return await this.API.getCommentReactions({accessToken:this.accessToken,issueId:this.issue.id,commentId:e})}catch(e){throw this.$emit("error",e),e}}async postCommentReaction({commentId:e,reaction:n}){try{if(!this.API||!this.issue)return!1;return await this.API.postCommentReaction({accessToken:this.accessToken,issueId:this.issue.id,commentId:e,reaction:n})}catch(e){throw this.$emit("error",e),e}}login(){this.API&&this.API.redirectAuth()}logout(){this.setAccessToken(null),this.user=null}async handleAuth(){if(!this.API)return;const e=await this.API.handleAuth();e?(this.setAccessToken(e),this.user=await this.API.getUser({accessToken:e})):this.getAccessToken()?this.user=await this.API.getUser({accessToken:this.accessToken}):(this.setAccessToken(null),this.user=null)}getAccessToken(){return this.accessToken=window.localStorage.getItem(this.accessTokenKey),this.accessToken}setAccessToken(e){null===e?window.localStorage.removeItem(this.accessTokenKey):window.localStorage.setItem(this.accessTokenKey,e),this.accessToken=e}};Xt([Qn("query.perPage")],Pa.prototype,"onQueryPerPageChange",null),Xt([Qn("query.page"),Qn("query.sort")],Pa.prototype,"onQueryChange",null),Pa=Xt([Ln({i18n:Sa})],Pa);var Ia=Pa;let Ta=class extends a.a{constructor(){super(...arguments),this.vssue=new Ia}onOptionsChange(e){this.vssue.setOptions(e)}mounted(){null!==this.title&&(this.vssue.title=this.title),null!==this.issueId&&(this.vssue.issueId=this.issueId),this.vssue.setOptions(this.options),this.vssue.init()}};var _a;Xt([Kn({type:[String,Function],required:!1,default:null})],Ta.prototype,"title",void 0),Xt([Kn({type:[String,Number],required:!1,default:null})],Ta.prototype,"issueId",void 0),Xt([Kn({type:Object,required:!1,default:()=>({})})],Ta.prototype,"options",void 0),Xt([(_a="vssue",Rn((function(e,n){var t=e.provide;Hn(t)&&(t=e.provide=$n(t)),t.managed[n]=_a||n})))],Ta.prototype,"vssue",void 0),Xt([Qn("options",{deep:!0})],Ta.prototype,"onOptionsChange",null),Ta=Xt([Ln({components:{Iconfont:na,VssueBody:ya,VssueHeader:ja}})],Ta);const Ba=ea({render:function(){var e=this.$createElement,n=this._self._c||e;return n("div",{staticClass:"vssue"},[n("Iconfont"),this._v(" "),n("VssueHeader"),this._v(" "),n("VssueBody")],1)},staticRenderFns:[]},void 0,Ta,void 0,!1,void 0,!1,void 0,void 0,void 0);var Fa={get version(){return"1.4.8"},installed:!1,install(e,n){if(this.installed)return!1;this.installed=!0,e.component("Vssue",{functional:!0,props:{title:{type:String,required:!1,default:void 0},issueId:{type:[Number,String],required:!1,default:void 0},options:{type:Object,required:!1,default:void 0}},render:(e,{data:t,props:a})=>e(Ba,Object.assign(Object.assign({},t),{props:{title:a.title,issueId:a.issueId,options:Object.assign({},n,a.options)}}))})},VssueComponent:Ba},za=t(115),Ra=t.n(za);function Ma(e){return null===e?{username:"ghost",avatar:"https://avatars3.githubusercontent.com/u/10137?v=4",homepage:"https://github.com/ghost"}:{username:e.login,avatar:e.avatarUrl,homepage:e.url}}function Da(e){return{id:e.number,title:e.title,content:e.body,link:e.url}}function Oa(e){return{like:e.find(e=>"THUMBS_UP"===e.content).users.totalCount,unlike:e.find(e=>"THUMBS_DOWN"===e.content).users.totalCount,heart:e.find(e=>"HEART"===e.content).users.totalCount}}function qa(e){return{id:e.id,content:e.bodyHTML,contentRaw:e.body,author:Ma(e.author),createdAt:e.createdAt,updatedAt:e.updatedAt,reactions:Oa(e.reactionGroups)}}function Ja(e){return"like"===e?"THUMBS_UP":"unlike"===e?"THUMBS_DOWN":"heart"===e?"HEART":e}class Ua{constructor({baseURL:e="https://github.com",owner:n,repo:t,labels:a,clientId:i,clientSecret:o,state:r,proxy:s}){if(void 0===o||void 0===s)throw new Error("clientSecret and proxy is required for GitHub V4");this.baseURL=e,this.owner=n,this.repo=t,this.labels=a,this.clientId=i,this.clientSecret=o,this.state=r,this.proxy=s,this._pageInfo={page:1,startCursor:null,endCursor:null,sort:null,perPage:null},this._issueNodeId=null,this.$http=Ra.a.create({baseURL:"https://github.com"===e?"https://api.github.com":Xn(e,"api"),headers:{Accept:"application/vnd.github.v3+json"}}),this.$http.interceptors.response.use(e=>e.data.error?Promise.reject(e.data.error_description):e.data.errors?Promise.reject(e.data.errors[0].message):e)}get platform(){return{name:"GitHub",link:this.baseURL,version:"v4",meta:{reactable:!0,sortable:!0}}}redirectAuth(){window.location.href=Yn(Xn(this.baseURL,"login/oauth/authorize"),{client_id:this.clientId,redirect_uri:window.location.href,scope:"public_repo",state:this.state})}async handleAuth(){const e=(n=window.location.search,Object(Gn.parse)(n,{ignoreQueryPrefix:!0}));var n;if(e.code){if(e.state!==this.state)return null;const n=e.code;delete e.code,delete e.state;const t=Yn(tt(window.location.href),e)+window.location.hash;window.history.replaceState(null,"",t);return await this.getAccessToken({code:n})}return null}async getAccessToken({code:e}){const n=Xn(this.baseURL,"login/oauth/access_token"),t="function"==typeof this.proxy?this.proxy(n):this.proxy,{data:a}=await this.$http.post(t,{client_id:this.clientId,client_secret:this.clientSecret,code:e},{headers:{Accept:"application/json"}});return a.access_token}async getUser({accessToken:e}){const{data:n}=await this.$http.post("graphql",{query:"query getUser {\n  viewer {\n    login\n    avatarUrl\n    url\n  }\n}"},{headers:{Authorization:"token "+e}});return Ma(n.data.viewer)}async getIssue({accessToken:e,issueId:n,issueTitle:t}){const a={};if(e&&(a.headers={Authorization:"token "+e}),!n){const e=[`"${t}"`,"in:title",`repo:${this.owner}/${this.repo}`,"is:public",...this.labels.map(e=>"label:"+e)].join(" "),{data:n}=await this.$http.post("graphql",{variables:{query:e},query:"query getIssueByTitle(\n  $query: String!\n) {\n  search(\n    query: $query\n    type: ISSUE\n    first: 20\n    ) {\n      nodes {\n      ... on Issue {\n        id\n        number\n        title\n        body\n        url\n      }\n    }\n  }\n}"},a),i=n.data.search.nodes.find(e=>e.title===t);return i?(this._issueNodeId=i.id,Da(i)):null}try{const{data:e}=await this.$http.post("graphql",{query:`query getIssueById {\n  repository(owner: "${this.owner}", name: "${this.repo}") {\n    issue (number: ${n}) {\n      id\n      number\n      title\n      body\n      url\n    }\n  }\n}`},a);return this._issueNodeId=e.data.repository.issue.id,Da(e.data.repository.issue)}catch(e){if(e.response&&404===e.response.status)return null;throw e}}async postIssue({accessToken:e,title:n,content:t}){const{data:a}=await this.$http.post(`repos/${this.owner}/${this.repo}/issues`,{title:n,body:t,labels:this.labels},{headers:{Authorization:"token "+e}});return a.url=a.html_url,this._issueNodeId=a.node_id,Da(a)}async getComments({accessToken:e,issueId:n,query:{page:t=1,perPage:a=10,sort:i="desc"}={}}){const o={};e&&(o.headers={Authorization:"token "+e}),null!==this._pageInfo.sort&&i!==this._pageInfo.sort&&(t=1);const{firstOrLast:r,afterOrBefore:s,cursor:l}=this._getQueryParams({page:t,sort:i}),{data:c}=await this.$http.post("graphql",{variables:{owner:this.owner,repo:this.repo,issueId:n,perPage:a},query:`query getComments(\n  $owner: String!\n  $repo: String!\n  $issueId: Int!\n  $perPage: Int!\n) {\n  repository(owner: $owner, name: $repo) {\n    issue(number: $issueId) {\n      comments(\n        ${r}: $perPage\n        ${null===s?"":`${s}: "${l}"`}\n      ) {\n        totalCount\n        pageInfo {\n          endCursor\n          startCursor\n        }\n        nodes {\n          id\n          body\n          bodyHTML\n          createdAt\n          updatedAt\n          author {\n            avatarUrl\n            login\n            url\n          }\n          reactionGroups {\n            users (first: 0) {\n              totalCount\n            }\n            content\n          }\n        }\n      }\n    }\n  }\n}`},o),d=c.data.repository.issue.comments;return"desc"===i&&d.nodes.reverse(),this._pageInfo={page:t,startCursor:d.pageInfo.startCursor,endCursor:d.pageInfo.endCursor,sort:i,perPage:a},{count:d.totalCount,page:t,perPage:a,data:d.nodes.map(qa)}}async postComment({accessToken:e,content:n}){const{data:t}=await this.$http.post("graphql",{variables:{issueNodeId:this._issueNodeId,content:n},query:"mutation postComment(\n  $issueNodeId: ID!\n  $content: String!\n) {\n  addComment(\n    input: {\n      subjectId: $issueNodeId\n      body: $content\n    }\n  ) {\n    commentEdge {\n      node {\n        id\n        body\n        bodyHTML\n        createdAt\n        updatedAt\n        author {\n          avatarUrl\n          login\n          url\n        }\n        reactionGroups {\n          users (first: 0) {\n            totalCount\n          }\n          content\n        }\n      }\n    }\n  }\n}"},{headers:{Authorization:"token "+e}});return qa(t.data.addComment.commentEdge.node)}async putComment({accessToken:e,commentId:n,content:t}){const{data:a}=await this.$http.post("graphql",{variables:{commentId:n,content:t},query:"mutation putComment(\n  $commentId: ID!,\n  $content: String!,\n) {\n  updateIssueComment(input: {\n    id: $commentId\n    body: $content\n  }) {\n    issueComment {\n      id\n      body\n      bodyHTML\n      createdAt\n      updatedAt\n      author {\n        avatarUrl\n        login\n        url\n      }\n      reactionGroups {\n        users (first: 0) {\n          totalCount\n        }\n        content\n      }\n    }\n  }\n}"},{headers:{Authorization:"token "+e}});return qa(a.data.updateIssueComment.issueComment)}async deleteComment({accessToken:e,commentId:n}){return await this.$http.post("graphql",{variables:{commentId:n},query:"mutation deleteComment(\n  $commentId: ID!,\n) {\n  deleteIssueComment(input: {\n    id: $commentId\n  }) {\n    clientMutationId\n  }\n}"},{headers:{Authorization:"token "+e}}),!0}async getCommentReactions({accessToken:e,issueId:n,commentId:t}){const{firstOrLast:a,afterOrBefore:i,cursor:o}=this._getQueryParams(),{data:r}=await this.$http.post("graphql",{variables:{owner:this.owner,repo:this.repo,issueId:n,perPage:this._pageInfo.perPage},query:`query getComments(\n  $owner: String!\n  $repo: String!\n  $issueId: Int!\n  $perPage: Int!\n) {\n  repository(owner: $owner, name: $repo) {\n    issue(number: $issueId) {\n      comments(\n        ${a}: $perPage\n        ${null===i?"":`${i}: "${o}"`}\n      ) {\n        nodes {\n          id\n          reactionGroups {\n            users (first: 0) {\n              totalCount\n            }\n            content\n          }\n        }\n      }\n    }\n  }\n}`},{headers:{Authorization:"token "+e}});return Oa(r.data.repository.issue.comments.nodes.find(e=>e.id===t).reactionGroups)}async postCommentReaction({accessToken:e,commentId:n,reaction:t}){return await this.$http.post("graphql",{variables:{commentId:n,content:Ja(t)},query:"mutation postCommentReaction(\n  $commentId: ID!,\n  $content: ReactionContent!,\n) {\n  addReaction(input: {\n    subjectId: $commentId\n    content: $content\n  }) {\n    reaction {\n      databaseId\n    }\n  }\n}"},{headers:{Authorization:"token "+e}}),!0}_getQueryParams({page:e=this._pageInfo.page,sort:n=this._pageInfo.sort}={}){let t,a,i;return 1===e?(t="asc"===n?"first":"last",a=null,i=null):"asc"===n?e>this._pageInfo.page?(t="first",a="after",i=this._pageInfo.endCursor):(t="last",a="before",i=this._pageInfo.startCursor):e>this._pageInfo.page?(t="last",a="before",i=this._pageInfo.startCursor):(t="first",a="after",i=this._pageInfo.endCursor),{firstOrLast:t,afterOrBefore:a,cursor:i}}}t(305);var La={name:"BackToTop",props:{threshold:{type:Number,default:300}},data:()=>({scrollTop:null}),computed:{show(){return this.scrollTop>this.threshold}},mounted(){this.scrollTop=this.getScrollTop(),window.addEventListener("scroll",rn()(()=>{this.scrollTop=this.getScrollTop()},100))},methods:{getScrollTop:()=>window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop||0,scrollToTop(){window.scrollTo({top:0,behavior:"smooth"}),this.scrollTop=0}}},Na=(t(306),Object(xn.a)(La,(function(){var e=this._self._c;return e("transition",{attrs:{name:"fade"}},[this.show?e("svg",{staticClass:"go-to-top",attrs:{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 49.484 28.284"},on:{click:this.scrollToTop}},[e("g",{attrs:{transform:"translate(-229 -126.358)"}},[e("rect",{attrs:{fill:"currentColor",width:"35",height:"5",rx:"2",transform:"translate(229 151.107) rotate(-45)"}}),this._v(" "),e("rect",{attrs:{fill:"currentColor",width:"35",height:"5",rx:"2",transform:"translate(274.949 154.642) rotate(-135)"}})])]):this._e()])}),[],!1,null,"5fd4ef0c",null).exports),$a=(t(57),[{},({Vue:e})=>{e.mixin({computed:{$dataBlock(){return this.$options.__data__block__}}})},{},{},async({router:e,isServer:n})=>{if(!n){const{register:n}=await t.e(226).then(t.bind(null,379));e.onReady(()=>{n("/jfinal-doc/service-worker.js",{registrationOptions:{},ready(){console.log("[vuepress:sw] Service worker is active."),Sn.a.$emit("sw-ready")},cached(e){console.log("[vuepress:sw] Content has been cached for offline use."),Sn.a.$emit("sw-cached",new An(e))},updated(e){console.log("[vuepress:sw] Content updated."),Sn.a.$emit("sw-updated",new An(e))},offline(){console.log("[vuepress:sw] No internet connection found. App is running in offline mode."),Sn.a.$emit("sw-offline")},error(e){console.error("[vuepress:sw] Error during service worker registration:",e),Sn.a.$emit("sw-error",e),ga("send","exception",{exDescription:e.message,exFatal:!1})}})})}},({Vue:e})=>{const n=JSON.parse('{"owner":"litongjava","repo":"jfinal-doc","clientId":"ae6d92a29afb796496fb","clientSecret":"9c459b786da1ccb9608e951e3e118a5e026ada69","autoCreateIssue":true}');e.use(Fa,Object.assign({},n,{api:Ua}));const t=e.component("Vssue");e.component("Vssue",{functional:!0,render(e,{parent:a,data:i}){if(n.locale||(i.attrs||(i.attrs={}),i.attrs.options||(i.attrs.options={}),i.attrs.options.locale||(i.attrs.options=Object.assign({locale:a.$lang||"en"},i.attrs.options))),a._isMounted)return e(t,i);a.$once("hook:mounted",()=>{a.$forceUpdate()})}})},({Vue:e})=>{e.component("BackToTop",Na)},({router:e})=>{var n,t,a,i,o,r;"undefined"!=typeof window&&(n=window,t=document,a="script",i="ga",n.GoogleAnalyticsObject=i,n.ga=n.ga||function(){(n.ga.q=n.ga.q||[]).push(arguments)},n.ga.l=1*new Date,o=t.createElement(a),r=t.getElementsByTagName(a)[0],o.async=1,o.src="https://www.google-analytics.com/analytics.js",r.parentNode.insertBefore(o,r),ga("create","G-1268VVMSN1","auto"),ga("set","anonymizeIp",!0),e.afterEach((function(n){ga("set","page",e.app.$withBase(n.fullPath)),ga("send","pageview")})))}]),Ha=["SWUpdatePopup","BackToTop"];class Va extends class{constructor(){this.store=new a.a({data:{state:{}}})}$get(e){return this.store.state[e]}$set(e,n){a.a.set(this.store.state,e,n)}$emit(...e){this.store.$emit(...e)}$on(...e){this.store.$on(...e)}}{}Object.assign(Va.prototype,{getPageAsyncComponent:Ke.d,getLayoutAsyncComponent:Ke.c,getAsyncComponent:Ke.b,getVueComponent:Ke.e});var Wa={install(e){const n=new Va;e.$vuepress=n,e.prototype.$vuepress=n}};function Ka(e,n){const t=n.toLowerCase();return e.options.routes.some(e=>e.path.toLowerCase()===t)}var Qa={props:{pageKey:String,slotKey:{type:String,default:"default"}},render(e){const n=this.pageKey||this.$parent.$page.key;return Object(Ke.h)("pageKey",n),a.a.component(n)||a.a.component(n,Object(Ke.d)(n)),a.a.component(n)?e(n):e("")}},Ga={functional:!0,props:{slotKey:String,required:!0},render:(e,{props:n,slots:t})=>e("div",{class:["content__"+n.slotKey]},t()[n.slotKey])},Ya={computed:{openInNewWindowTitle(){return this.$themeLocaleConfig.openNewWindowText||"(opens new window)"}}},Xa=(t(307),t(308),Object(xn.a)(Ya,(function(){var e=this._self._c;return e("span",[e("svg",{staticClass:"icon outbound",attrs:{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",focusable:"false",x:"0px",y:"0px",viewBox:"0 0 100 100",width:"15",height:"15"}},[e("path",{attrs:{fill:"currentColor",d:"M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"}}),this._v(" "),e("polygon",{attrs:{fill:"currentColor",points:"45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"}})]),this._v(" "),e("span",{staticClass:"sr-only"},[this._v(this._s(this.openInNewWindowTitle))])])}),[],!1,null,null,null).exports),Za={functional:!0,render(e,{parent:n,children:t}){if(n._isMounted)return t;n.$once("hook:mounted",()=>{n.$forceUpdate()})}};a.a.config.productionTip=!1,a.a.use(Ve),a.a.use(Wa),a.a.mixin(function(e,n,t=a.a){!function(e){e.locales&&Object.keys(e.locales).forEach(n=>{e.locales[n].path=n});Object.freeze(e)}(n),t.$vuepress.$set("siteData",n);const i=new(e(t.$vuepress.$get("siteData"))),o=Object.getOwnPropertyDescriptors(Object.getPrototypeOf(i)),r={};return Object.keys(o).reduce((e,n)=>(n.startsWith("$")&&(e[n]=o[n].get),e),r),{computed:r}}(e=>class{setPage(e){this.__page=e}get $site(){return e}get $themeConfig(){return this.$site.themeConfig}get $frontmatter(){return this.$page.frontmatter}get $localeConfig(){const{locales:e={}}=this.$site;let n,t;for(const a in e)"/"===a?t=e[a]:0===this.$page.path.indexOf(a)&&(n=e[a]);return n||t||{}}get $siteTitle(){return this.$localeConfig.title||this.$site.title||""}get $canonicalUrl(){const{canonicalUrl:e}=this.$page.frontmatter;return"string"==typeof e&&e}get $title(){const e=this.$page,{metaTitle:n}=this.$page.frontmatter;if("string"==typeof n)return n;const t=this.$siteTitle,a=e.frontmatter.home?null:e.frontmatter.title||e.title;return t?a?a+" | "+t:t:a||"VuePress"}get $description(){const e=function(e){if(e){const n=e.filter(e=>"description"===e.name)[0];if(n)return n.content}}(this.$page.frontmatter.meta);return e||(this.$page.frontmatter.description||this.$localeConfig.description||this.$site.description||"")}get $lang(){return this.$page.frontmatter.lang||this.$localeConfig.lang||"en-US"}get $localePath(){return this.$localeConfig.path||"/"}get $themeLocaleConfig(){return(this.$site.themeConfig.locales||{})[this.$localePath]||{}}get $page(){return this.__page?this.__page:function(e,n){for(let t=0;t<e.length;t++){const a=e[t];if(a.path.toLowerCase()===n.toLowerCase())return a}return{path:"",frontmatter:{}}}(this.$site.pages,this.$route.path)}},Cn)),a.a.component("Content",Qa),a.a.component("ContentSlotsDistributor",Ga),a.a.component("OutboundLink",Xa),a.a.component("ClientOnly",Za),a.a.component("Layout",Object(Ke.c)("Layout")),a.a.component("NotFound",Object(Ke.c)("NotFound")),a.a.prototype.$withBase=function(e){const n=this.$site.base;return"/"===e.charAt(0)?n+e.slice(1):e},window.__VUEPRESS__={version:"1.9.10",hash:"e46e67d"},async function(e){const n="undefined"!=typeof window&&window.__VUEPRESS_ROUTER_BASE__?window.__VUEPRESS_ROUTER_BASE__:Cn.routerBase||Cn.base,t=new Ve({base:n,mode:"history",fallback:!1,routes:kn,scrollBehavior:(e,n,t)=>t||(e.hash?!a.a.$vuepress.$get("disableScrollBehavior")&&{selector:decodeURIComponent(e.hash)}:{x:0,y:0})});!function(e){e.beforeEach((n,t,a)=>{if(Ka(e,n.path))a();else if(/(\/|\.html)$/.test(n.path))if(/\/$/.test(n.path)){const t=n.path.replace(/\/$/,"")+".html";Ka(e,t)?a(t):a()}else a();else{const t=n.path+"/",i=n.path+".html";Ka(e,i)?a(i):Ka(e,t)?a(t):a()}})}(t);const i={};try{await Promise.all($a.filter(e=>"function"==typeof e).map(n=>n({Vue:a.a,options:i,router:t,siteData:Cn,isServer:e})))}catch(e){console.error(e)}return{app:new a.a(Object.assign(i,{router:t,render:e=>e("div",{attrs:{id:"app"}},[e("RouterView",{ref:"layout"}),e("div",{class:"global-ui"},Ha.map(n=>e(n)))])})),router:t}}(!1).then(({app:e,router:n})=>{n.onReady(()=>{e.$mount("#app")})})}]);