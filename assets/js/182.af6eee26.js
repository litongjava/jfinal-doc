(window.webpackJsonp=window.webpackJsonp||[]).push([[182],{535:function(e,a,s){"use strict";s.r(a);var t=s(14),r=Object(t.a)({},(function(){var e=this,a=e._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"_4-6-aop-工具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-6-aop-工具"}},[e._v("#")]),e._v(" 4.6 Aop 工具")]),e._v(" "),a("h3",{attrs:{id:"_1、aop"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、aop"}},[e._v("#")]),e._v(" 1、Aop")]),e._v(" "),a("h4",{attrs:{id:"_1-1、get"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1、get"}},[e._v("#")]),e._v(" 1.1、get(...)")]),e._v(" "),a("p",[e._v("Aop.get(...) 可以在任意时空创建对象并且对其进行依赖注入，例如：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Service service = Aop.get(Service.class);\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("以上代码会创建 Service 对象，如果 Service 中使用了 @Before 配置过拦截器，那么会生效，如果 Service 中的属性使用了 @Inject，则会被注入依赖对象。")]),e._v(" "),a("h4",{attrs:{id:"_1-2、inject"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2、inject"}},[e._v("#")]),e._v(" 1.2、inject(...)")]),e._v(" "),a("p",[e._v("Aop.inject(...) 可以在任意时空对目标对象进行注入，该方法相对于 Aop.get(...) 方法少一个对象创建功能：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Service service = new Service(...);\nAop.inject(service);\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("p",[e._v("以上代码将会对 Service 类中使用 @Inject 注解过的属性进行依赖注入。")]),e._v(" "),a("h3",{attrs:{id:"_2、aopmanager"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、aopmanager"}},[e._v("#")]),e._v(" 2、AopManager")]),e._v(" "),a("p",[e._v("AopManager 用于管理 Aop 的各种配置")]),e._v(" "),a("h4",{attrs:{id:"_2-1、addmapping"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1、addmapping"}},[e._v("#")]),e._v(" 2.1、addMapping(...)")]),e._v(" "),a("p",[e._v("addMapping 用于建立接口、抽象类到其实现类之间的映射关系，例如：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("AopManager.me().addMapping(Service.class, MyService.class);\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("通过上面的映射，下面的代码将会为 Serivce 创建 MyService 对象，而非 Service 对象：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// 这里获取到的是 MyService 对象\nAop.get(Service.class);\n \n// 这里被注入的是 MyService 对象\n@Inject\nService service;\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br")])]),a("p",[e._v("AopManager.me().addMapping(...) 的用途是为接口、抽象类指定被注入的具体实现类。")]),e._v(" "),a("h4",{attrs:{id:"_2-2、addsingletonobject"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2、addsingletonobject"}},[e._v("#")]),e._v(" 2.2、addSingletonObject(...)")]),e._v(" "),a("p",[e._v("由于 Aop 创建对象时不支持为构造方法传递参数，所以还需提供 addSingletonObject(...) 添加单例对象：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Service 类的构造方法中传入了两个参数\nService service = new Service(paraAaa, paraBbb);\nAopManager.me().addSingletonObject(service);\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br")])]),a("p",[e._v("上面代码添加完成以后，可以在任何地方通过下面的方式获取单例对象：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// 获取时使用单例对象\nservice = Aop.get(Service.class);\n \n// 注入时也可以使用前面配置的单例对象\n@Inject\nService service;\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br")])]),a("p",[e._v("在添加为单例对象之前还可以先为其注入依赖对象：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Service service = new Service(paraAaa, paraBbb);\n// 这里是对 Service 进行依赖注入\nAop.inject(service);\n \n// 为单例注入依赖以后，再添加为单例供后续使用\nAopManager.me().addSingletonObject(service);\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br")])]),a("h4",{attrs:{id:"_2-3、setaopfactory"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3、setaopfactory"}},[e._v("#")]),e._v(" 2.3、setAopFactory(...)")]),e._v(" "),a("p",[e._v("setAopFactory(...) 用于用户扩展出 AopFactory 实现类，实现更多扩展性功能，例如 jboot 项目中对于注入远程访问对象的扩展：https://gitee.com/JbootProjects/jboot/blob/master/src/main/java/io/jboot/aop/JbootAopFactory.java ，JbootAopFactory.java 中的 doInjectRPC 即注入远程过程调用的实现类。")])])}),[],!1,null,null,null);a.default=r.exports}}]);