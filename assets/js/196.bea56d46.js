(window.webpackJsonp=window.webpackJsonp||[]).push([[196],{549:function(e,s,a){"use strict";a.r(s);var n=a(14),t=Object(n.a)({},(function(){var e=this,s=e._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"_5-5-独创db-record模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-5-独创db-record模式"}},[e._v("#")]),e._v(" 5.5 独创Db Record模式")]),e._v(" "),s("h3",{attrs:{id:"_1、常见用法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、常见用法"}},[e._v("#")]),e._v(" 1､常见用法")]),e._v(" "),s("p",[e._v("Db类及其配套的Record类，提供了在Model类之外更为丰富的数据库操作功能。使用Db与Record类时，无需对数据库表进行映射，Record相当于一个通用的Model。以下为Db + Record模式的一些常见用法：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('// 创建name属性为James,age属性为25的record对象并添加到数据库\nRecord user = new Record().set("name", "James").set("age", 25);\nDb.save("user", user);\n \n// 删除id值为25的user表中的记录\nDb.deleteById("user", 25);\n \n// 查询id值为25的Record将其name属性改为James并更新到数据库\nuser = Db.findById("user", 25).set("name", "James");\nDb.update("user", user);\n \n// 获取user的name属性\nString userName = user.getStr("name");\n// 获取user的age属性\nInteger userAge = user.getInt("age");\n \n// 查询所有年龄大于18岁的user\nList<Record> users = Db.find("select * from user where age > 18");\n \n// 分页查询年龄大于18的user,当前页号为1,每页10个user\nPage<Record> userPage = Db.paginate(1, 10, "select *", "from user where age > ?", 18);\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br")])]),s("p",[e._v("以下为事务处理示例：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('boolean succeed = Db.tx(new IAtom(){\n    public boolean run() throws SQLException {\n       int count = Db.update("update account set cash = cash - ? where id = ?", 100, 123);\n       int count2 = Db.update("update account set cash = cash + ? where id = ?", 100, 456);\n       return count == 1 && count2 == 1;\n    }});\\\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br")])]),s("p",[e._v("以上两次数据库更新操作在一个事务中执行，如果执行过程中发生异常或者run()方法返回false，则自动回滚事务。")]),e._v(" "),s("h3",{attrs:{id:"_2、db-query"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、db-query"}},[e._v("#")]),e._v(" 2、Db.query(...)")]),e._v(" "),s("p",[e._v("第一种用法：当 select 后的字段只有一个时，可以使用合适的泛型接收数据：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('List<String> titleList = Db.query("select title from blog");\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("以上 sql 中 select 后面只有一个 title 字段，所以使用 List<String> 来接收数据。接收数据的泛型变量可根据返回值类理来变动，例如当前返回值为 Integer 时，代码如下：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('List<Integer> idList = Db.query("select id from blog");\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("以上 sql 中的字段 id 返回值为 Integer，所以接收变量为 List<Integer>")]),e._v(" "),s("p",[e._v("第二种用法：当 select 后的字段有多个时，必须使用 List<Object[]> 接收数据，例如：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('List<Object[]> list = Db.query("select id, title, content from blog");\nList<Object[]> list = Db.query("select * from blog");\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("h3",{attrs:{id:"_3、db-queryxxx"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、db-queryxxx"}},[e._v("#")]),e._v(" 3、Db.queryXxx(...)")]),e._v(" "),s("p",[e._v("Db.queryXxx 系方法有：queryInt、queryLong、queryStr 等等，这些方法对于使用聚合函数这类的 sql 十分方便，例如：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('int total = Db.queryInt("select count(*) from account");\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("以上 sql 使用了 count(*) 聚合函数，使用 Db.queryInt 不仅方便而且性能是最好的。")]),e._v(" "),s("p",[e._v("除了聚合函数以外，还可以用于查询某条记录的某个字段值，例如：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('String nickName = Db.queryStr("select nickName from account where id = ? limit 1", 123);\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("以上代码通过 queryStr 可以很方便去查询 id 值为 123 的 account 的 nickName。")]),e._v(" "),s("p",[e._v("至此可以看出来，Db.queryXxx 系方法要求 select 后面必须只能有一个字段名，或者说只能返回一个 column 值（例如 count(*)）。")]),e._v(" "),s("h3",{attrs:{id:"_4、db-find-系与-db-query-db-queryxxx-系的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4、db-find-系与-db-query-db-queryxxx-系的区别"}},[e._v("#")]),e._v(" 4、Db.find(...) 系与 Db.query(...)/Db.queryXxx(...) 系的区别")]),e._v(" "),s("p",[e._v("前者将返回值一律封装到一个 Record 对象中，而后者不封装，只将数据原样返回。查询所使用的 sql 与参数用法完全一样。")]),e._v(" "),s("h3",{attrs:{id:"_5、扩展-db-功能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5、扩展-db-功能"}},[e._v("#")]),e._v(" 5､扩展 Db 功能")]),e._v(" "),s("p",[e._v("Db 工具类所有功能都依赖于底层的 DbPro，而 DbPro 可以通过继承来定制自己想要的功能，例如：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('public class MyDbPro extends DbPro {\n  public MyDbPro(String configName) {\n    super(configName);\n  }\n \n  public List<Record> find(String sql, Object... paras) {\n    System.out.println("Sql: " + sql);\n    System.out.println("Paras: " + Arrays.toString(paras));\n    return super.find(sql, paras);\n  }\n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br")])]),s("p",[e._v("以上代码扩展了 DbPro 并覆盖了父类的 find(String, Object...) 方法，该方法在调用 super.find(...) 之前输出了 sql 及其 para 值。")]),e._v(" "),s("p",[e._v("然后配置一下即可让 MyDbPro 取代 DbPro 的功能：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("ActiveRecordPlugin arp = new ActiveRecordPlugin(...);\narp.setDbProFactory(configName -> new MyDbPro(configName));\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("通过如上配置，在使用 Db.find(String, Object...) 方法时用到的将是自己在 MyDbPro 中实现的 find 方法。通过此方法可以替换、增强、改变所有 DbPro 中 public、protected 方法的行为，极为灵活方便")])])}),[],!1,null,null,null);s.default=t.exports}}]);