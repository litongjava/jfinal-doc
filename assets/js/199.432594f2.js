(window.webpackJsonp=window.webpackJsonp||[]).push([[199],{563:function(e,a,s){"use strict";s.r(a);var n=s(14),t=Object(n.a)({},(function(){var e=this,a=e._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"_5-8-cache-缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-8-cache-缓存"}},[e._v("#")]),e._v(" 5.8 Cache 缓存")]),e._v(" "),a("h3",{attrs:{id:"_1、使用-ehcache-缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、使用-ehcache-缓存"}},[e._v("#")]),e._v(" 1、使用 Ehcache 缓存")]),e._v(" "),a("p",[e._v("ActiveRecord 可以使用缓存以大大提高性能，默认的缓存实现是 ehcache，使用时需要引入 ehcache 的 jar 包及其配置文件，以下代码是Cache使用示例：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('public void list() {\n    List<Blog> blogList = Blog.dao.findByCache("cacheName", "key", "select * from blog");\n    setAttr("blogList", blogList).render("list.html");\n}\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br")])]),a("p",[e._v('上例findByCache方法中的cacheName需要在ehcache.xml中配置如：<cache name="cacheName" …>。此外Model.paginateByCache(…)、Db.findByCache(…)、Db.paginateByCache(…)方法都提供了cache支持。在使用时，只需传入cacheName、key以及在ehccache.xml中配置相对应的cacheName就可以了。')]),e._v(" "),a("h3",{attrs:{id:"_2、使用任意缓存实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、使用任意缓存实现"}},[e._v("#")]),e._v(" 2、使用任意缓存实现")]),e._v(" "),a("p",[e._v("除了要把使用默认的 ehcache 实现以外，还可以通过实现 ICache 接口切换到任意的缓存实现上去，下面是个简单提示意性代码实现：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public class MyCache implements ICache {\n  public <T>T get(String cacheName, Object key) {\n  }\n \n  public void put(String cacheName, Object key, Object value) {\n  }\n \n  public void remove(String cacheName, Object key) {\n  }\n \n  public void removeAll(String cacheName) {\n  }\n}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br")])]),a("p",[e._v("如上代码所示，MyCache 需要实现 ICache 中的四个抽象方法，然后通过下面的配置方式即可切换到自己的 cache 实现上去：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("ActiveRecordPlugin arp = new ActiveRecordPlugin(...);\narp.setCache(new MyCache());\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("p",[e._v("如上代码所示，通过调用 ActiveRecordPlugin.setCache(...) 便可切换 cache 实现。")])])}),[],!1,null,null,null);a.default=t.exports}}]);