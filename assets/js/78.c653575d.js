(window.webpackJsonp=window.webpackJsonp||[]).push([[78],{431:function(e,t,n){"use strict";n.r(t);var r=n(14),a=Object(r.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"_4-2-interceptor"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-interceptor"}},[e._v("#")]),e._v(" 4.2 Interceptor")]),e._v(" "),t("h3",{attrs:{id:"_1-basic-usage"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-basic-usage"}},[e._v("#")]),e._v(" 1. Basic Usage")]),e._v(" "),t("p",[e._v("An Interceptor can intercept methods, providing an opportunity to add aspect code before and after the method, achieving the core goal of AOP. The Interceptor interface only defines one method: public void intercept(Invocation inv). Here's a simple example:")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('public class DemoInterceptor implements Interceptor {\n    public void intercept(Invocation inv) {\n       System.out.println("Before method invoking");\n       inv.invoke();\n       System.out.println("After method invoking");\n    }\n}\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br")])]),t("p",[e._v("In the code above, the DemoInterceptor will intercept the target method and output text to the console both before and after the method's invocation. The line inv.invoke() is the call to the target method; inserting aspect code before and after this line can easily implement AOP.")]),e._v(" "),t("p",[e._v("Note: You must call the inv.invoke() method to pass the current call to subsequent Interceptors and the Action.")]),e._v(" "),t("p",[e._v("Common Mistake: To date, many students forget to call the inv.invoke() method, resulting in the action in the controller not being executed. Here's another reminder: always call inv.invoke() once, unless you deliberately avoid calling the remaining interceptors and action. In such cases, you still need to use inv.getController().render()/renderJson() to call the related render() method to respond to the client.")]),e._v(" "),t("p",[e._v("Invocation, as the only parameter in the Interceptor interface's intercept method, offers many convenient methods to use in the interceptor. Here are the methods in Invocation:")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("Method")]),e._v(" "),t("th",[e._v("Description")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("void invoke()")]),e._v(" "),t("td",[e._v("Pass this call and invoke the remaining interceptors and the target method")])]),e._v(" "),t("tr",[t("td",[e._v("Controller getController()")]),e._v(" "),t("td",[e._v("Get the Controller object for the Action call (only for control layer interception)")])]),e._v(" "),t("tr",[t("td",[e._v("String getActionKey()")]),e._v(" "),t("td",[e._v("Get the action key value for the Action call (only for control layer interception)")])]),e._v(" "),t("tr",[t("td",[e._v("String getControllerKey()")]),e._v(" "),t("td",[e._v("Get the Controller key value for the Action call (only for control layer interception)")])]),e._v(" "),t("tr",[t("td",[e._v("String getViewPath()")]),e._v(" "),t("td",[e._v("Get the view path for the Action call (only for control layer interception)")])]),e._v(" "),t("tr",[t("td",[e._v("<T> getTarget()")]),e._v(" "),t("td",[e._v("Get the object to which the intercepted method belongs")])]),e._v(" "),t("tr",[t("td",[e._v("Method getMethod()")]),e._v(" "),t("td",[e._v("Get the Method object of the intercepted method")])]),e._v(" "),t("tr",[t("td",[e._v("String getMethodName()")]),e._v(" "),t("td",[e._v("Get the method name of the intercepted method")])]),e._v(" "),t("tr",[t("td",[e._v("Object[] getArgs()")]),e._v(" "),t("td",[e._v("Get all parameter values of the intercepted method")])]),e._v(" "),t("tr",[t("td",[e._v("Object getArg(int)")]),e._v(" "),t("td",[e._v("Get the specified index parameter value of the intercepted method")])]),e._v(" "),t("tr",[t("td",[e._v("<T> getReturnValue()")]),e._v(" "),t("td",[e._v("Get the return value of the intercepted method")])]),e._v(" "),t("tr",[t("td",[e._v("void setArg(int)")]),e._v(" "),t("td",[e._v("Set the specified index parameter value of the intercepted method")])]),e._v(" "),t("tr",[t("td",[e._v("void setReturnValue(Object)")]),e._v(" "),t("td",[e._v("Set the return value of the intercepted method")])]),e._v(" "),t("tr",[t("td",[e._v("boolean isActionInvocation()")]),e._v(" "),t("td",[e._v("Determine if it's an Action call, i.e., control layer interception")])])])]),e._v(" "),t("p",[e._v("Please correct a typo in the third line from the bottom in the screenshot above: setArg(int) should be changed to setArg(int, Object).")]),e._v(" "),t("p",[e._v("Note: In version 4.9.03 of jfinal, getControllerKey() was renamed to getControllerPath(). The original method is still available and can be used. The renaming to getControllerPath() allows multiple Controllers to share the same controllerPath value.")]),e._v(" "),t("h3",{attrs:{id:"_2-global-sharing-and-thread-safety"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-global-sharing-and-thread-safety"}},[e._v("#")]),e._v(" 2. Global Sharing and Thread Safety")]),e._v(" "),t("p",[e._v("Interceptors are globally shared. Therefore, if you use attributes within them, you must ensure that these attributes are thread-safe. The following code is incorrect:")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public class MyInterceptor implements Interceptor {\n \n   private int value = 123;\n   \n   public void intercept(Invocation inv) {\n       // Multiple threads will access the value concurrently, causing confusion\n       value++;\n       \n       inv.invoke();\n   }\n}\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br")])]),t("p",[e._v("As shown in the code above, the value attribute will be accessed by multiple threads, leading to thread safety issues.")])])}),[],!1,null,null,null);t.default=a.exports}}]);